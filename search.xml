<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>设计模式读书笔记</title>
    <url>/2022/11/6d49ee52e95f.html</url>
    <content><![CDATA[<blockquote>
<p>设计模式读书笔记, 内含大量设计模式</p>
</blockquote>
<span id="more"></span>
<h1 id="引言">引言</h1>
<h2 id="smalltalk-中的-mvc">smalltalk 中的 MVC</h2>
<p>MVC通过建立一个“订购/通知”协议来分离视图和模型。视图必须保证它的显示正确地 反映了模型的状态。一旦模型的数据发生变化，<strong>模型将通知有关的视图</strong>，每个视图相应地得 到刷新自己的机会。这种方法可以让你为一个模型提供不同的多个视图表现形式，也能够为 一个模型创建新的视图而无须重写模型。</p>
<p>MVC允许你在不改变视图外观的情况下改变视图对用户输入的响应方式。例如，你可能 希望改变视图对健盘的响应方式，或希望使用弹出菜单而不是原来的命令键方式。<strong>Mvc将响应机制封装在Controller对象中</strong>。存在着一个Controller的类层次结构，使得可以方便地对原有 Controller做适当改变而创建新的Controller。</p>
<p>View使用Controller子类的实例来实现一个特定的响应策略。要实现不同的响应策略只要 用不同种类的Controller实例替换即可。甚至可以在运行时刻通过改变View的Controller来改变 View对用户输人的响应方式。</p>
<h2 id="设计模式概述">设计模式概述</h2>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8asyp10d7j30u00uen05.jpg" alt="截屏2022-11-19 22.24.51" />第一是目的准则，即模式是用来完成什么工作的。模式依据其目的可分为创建型(Creational）、结构型(Structural)、或行为型 (Behavioral)三种。创建型模式与对象的创建有关；结构型模式处理类或对象的组合；行为型 模式对类或对象怎样交互和怎样分配职贲进行描述。</p>
<p>第二是范围准则，指定模式主要是用于类还是用于对象。类模式处理类和子类之间的关系，这些关系通过继承建立，是静态的，在编译时刻便确定下来了。对象模式处理对象间的 关系，这些关系在运行时刻是可以变化的，更具动态性。从某种意义上来说，几乎所有模式 都使用继承机制，所以“类模式〞只指那些集中于处理类间关系的模式，而大部分模式都属 于对象模式的范時。</p>
<ul>
<li>动态绑定: 发送给对象的请求和他的相应操作在运行时刻的链接就称之为动态绑定</li>
<li>多态: 动态绑定允许在运行时刻彼此替换油腻相同接口的对象, 这种可替换性就叫做多态</li>
<li>OMT是Object Modeling Technique</li>
<li>类继承: 白箱复用, 会破坏封装性</li>
<li>对象组合: 黑箱复用, 相比于继承应该优先使用</li>
<li>委托: 接受请求的对象将操作委托给代理者(has-a), 是对象组合的特例</li>
<li>参数化类型</li>
<li>区分聚合和相识(?关联)</li>
</ul>
<h1 id="实例研究文档编辑器">实例研究文档编辑器</h1>
<ul>
<li>递归组合, 由简单元素建立复杂元素</li>
</ul>
<h1 id="创建型模式">创建型模式</h1>
<h2 id="abstract-factory">abstract factory</h2>
<p>用抽象工厂构建不同系列的部件</p>
<p>提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">classDiagram</span><br><span class="line">direction TB</span><br><span class="line"></span><br><span class="line">   class AbstractFactory&#123;</span><br><span class="line">     CreateA()</span><br><span class="line">     CreateB()</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">   class ConcreteFactory1&#123;</span><br><span class="line">   	 CreateA()</span><br><span class="line">     CreateB()</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   class ConcreteFactory2&#123;</span><br><span class="line">   	 CreateA()</span><br><span class="line">     CreateB()</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   ConcreteFactory1--|&gt;AbstractFactory</span><br><span class="line">   ConcreteFactory2--|&gt;AbstractFactory</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">		class AbstractA</span><br><span class="line">     </span><br><span class="line">     class A2</span><br><span class="line">     A1--AbstractA</span><br><span class="line">     A2--AbstractA</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">	 </span><br><span class="line">     class AbstractB</span><br><span class="line">     class B1</span><br><span class="line">     class B2 </span><br><span class="line">     B1--|&gt;AbstractB</span><br><span class="line">     B2--|&gt;AbstractB</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     ConcreteFactory1..&gt;A1</span><br><span class="line">     ConcreteFactory1..&gt;B1</span><br><span class="line"></span><br><span class="line">     ConcreteFactory2..&gt;A2</span><br><span class="line">     ConcreteFactory2..&gt;B2</span><br><span class="line">   </span><br><span class="line">   </span><br></pre></td></tr></table></figure>
<ul>
<li>Decide if "platform independence" and creation services are the current source of pain.</li>
<li>Map out a matrix of "platforms" versus "products".</li>
<li>Define a factory interface that consists of a factory method per product.</li>
<li>Define a factory derived class for each platform that encapsulates all references to the <code>new</code> operator.</li>
<li>The client should retire all references to <code>new</code>, and use the factory methods to create the product objects.</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Purpose.  Abstract Factory design pattern demo.</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Discussion.  &quot;Think of constructors as factories that churn out objects&quot;.</span></span><br><span class="line"><span class="comment">// Here we are allocating the constructor responsibility to a factory object,</span></span><br><span class="line"><span class="comment">// and then using inheritance and virtual member functions to provide a</span></span><br><span class="line"><span class="comment">// &quot;virtual constructor&quot; capability.  So there are two dimensions of</span></span><br><span class="line"><span class="comment">// decoupling occurring.  The client uses the factory object instead of &quot;new&quot;</span></span><br><span class="line"><span class="comment">// to request instances; and, the client &quot;hard-wires&quot; the family, or class, of</span></span><br><span class="line"><span class="comment">// that factory only once, and throughout the remainder of the application</span></span><br><span class="line"><span class="comment">// only relies on the abstract base class.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">   <span class="built_in">Shape</span>()              &#123; id_ = total_++; &#125;</span><br><span class="line">   <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">draw</span><span class="params">()</span>  </span>= <span class="number">0</span>;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">   <span class="type">int</span>         id_;</span><br><span class="line">   <span class="type">static</span> <span class="type">int</span>  total_;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> Shape::total_ = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> : <span class="keyword">public</span> Shape &#123; <span class="keyword">public</span>:</span><br><span class="line">   <span class="function"><span class="type">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;circle &quot;</span> &lt;&lt; id_ &lt;&lt; <span class="string">&quot;: draw&quot;</span> &lt;&lt; endl; &#125; &#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Square</span> : <span class="keyword">public</span> Shape &#123; <span class="keyword">public</span>:</span><br><span class="line">   <span class="function"><span class="type">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;square &quot;</span> &lt;&lt; id_ &lt;&lt; <span class="string">&quot;: draw&quot;</span> &lt;&lt; endl; &#125; &#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Ellipse</span> : <span class="keyword">public</span> Shape &#123; <span class="keyword">public</span>:</span><br><span class="line">   <span class="function"><span class="type">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;ellipse &quot;</span> &lt;&lt; id_ &lt;&lt; <span class="string">&quot;: draw&quot;</span> &lt;&lt; endl; &#125; &#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span> : <span class="keyword">public</span> Shape &#123; <span class="keyword">public</span>:</span><br><span class="line">   <span class="function"><span class="type">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;rectangle &quot;</span> &lt;&lt; id_ &lt;&lt; <span class="string">&quot;: draw&quot;</span> &lt;&lt; endl; &#125; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Factory</span> &#123; <span class="keyword">public</span>:</span><br><span class="line">   <span class="function"><span class="keyword">virtual</span> Shape* <span class="title">createCurvedInstance</span><span class="params">()</span>   </span>= <span class="number">0</span>;</span><br><span class="line">   <span class="function"><span class="keyword">virtual</span> Shape* <span class="title">createStraightInstance</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SimpleShapeFactory</span> : <span class="keyword">public</span> Factory &#123; <span class="keyword">public</span>:</span><br><span class="line">   <span class="function">Shape* <span class="title">createCurvedInstance</span><span class="params">()</span>   </span>&#123; <span class="keyword">return</span> <span class="keyword">new</span> Circle; &#125;</span><br><span class="line">   <span class="function">Shape* <span class="title">createStraightInstance</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">new</span> Square; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RobustShapeFactory</span> : <span class="keyword">public</span> Factory &#123; <span class="keyword">public</span>:</span><br><span class="line">   <span class="function">Shape* <span class="title">createCurvedInstance</span><span class="params">()</span>   </span>&#123; <span class="keyword">return</span> <span class="keyword">new</span> Ellipse; &#125;</span><br><span class="line">   <span class="function">Shape* <span class="title">createStraightInstance</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">new</span> Rectangle; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> SIMPLE</span></span><br><span class="line">   Factory*  factory = <span class="keyword">new</span> SimpleShapeFactory;</span><br><span class="line"><span class="meta">#<span class="keyword">elif</span> ROBUST</span></span><br><span class="line">   Factory*  factory = <span class="keyword">new</span> RobustShapeFactory;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">   Shape*    shapes[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">   shapes[<span class="number">0</span>] = factory-&gt;<span class="built_in">createCurvedInstance</span>();   <span class="comment">// shapes[0] = new Ellipse;</span></span><br><span class="line">   shapes[<span class="number">1</span>] = factory-&gt;<span class="built_in">createStraightInstance</span>(); <span class="comment">// shapes[1] = new Rectangle;</span></span><br><span class="line">   shapes[<span class="number">2</span>] = factory-&gt;<span class="built_in">createCurvedInstance</span>();   <span class="comment">// shapes[2] = new Ellipse;</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">      shapes[i]-&gt;<span class="built_in">draw</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ellipse 0: draw</span></span><br><span class="line"><span class="comment">// rectangle 1: draw</span></span><br></pre></td></tr></table></figure>
<h2 id="builder">builder</h2>
<p>将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。</p>
<p>使用向导指导 builder 构建部件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">classDiagram</span><br><span class="line">direction BT</span><br><span class="line"></span><br><span class="line">   class Director&#123;</span><br><span class="line">     Construct()</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">   class Builder&#123;</span><br><span class="line">   	 BuildPart()</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   class ConcreteBuilder&#123;</span><br><span class="line">   	 BuildPart()</span><br><span class="line">     GetResult()</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">   Director o--&gt; Builder</span><br><span class="line">   ConcreteBuilder --|&gt; Builder</span><br><span class="line">   ConcreteBuilder ..&gt; Product</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Director::Construct()</span><br><span class="line">for all objects in structure&#123;</span><br><span class="line">	builder-&gt;BuildPart</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>将一个复杂对象的构建(director)与它的表示(builder)分离</li>
<li>不同的Director可以复用它以在相同部件集合的基础上构作不同的 Product</li>
<li>它使你可对构造过程进行更精细的控制, Builder模式与一下子就生成产品的创建型模式不同，它是在导向者的控制下一步一步构造产品的</li>
</ul>
<h2 id="factory-method">factory method</h2>
<p>定义一个用于创建对象的接口, 让子类决定实例化哪一个类, FactoryMethod使一个类的实例化延迟到其子类。</p>
<p>框架使用抽象类定义和维护对象之间的关系。这些对象的创建通常也由框架负责</p>
<p>当一个类希望由它的子类来指定它所创建的对象的时候</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">classDiagram</span><br><span class="line">direction BT</span><br><span class="line"></span><br><span class="line">   class Creator&#123;</span><br><span class="line">     FactoryMethod()</span><br><span class="line">     AnOperation()</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">   class ConcreteCreator&#123;</span><br><span class="line">   	 FactoryMethod()</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">   ConcreteCreator ..|&gt; ConcreteProduct</span><br><span class="line">   ConcreteCreator --|&gt; Creator</span><br><span class="line">   ConcreteProduct --|&gt; Product</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Creator:</span><br><span class="line">product = FactoryMethod()</span><br><span class="line"></span><br><span class="line">ConcreteCreator:</span><br><span class="line">return new ConcreteProduct</span><br></pre></td></tr></table></figure>
<ul>
<li>工厂方法不再将与特定应用有关的类绑定到你的代码中。代码仅处理Prodact 因此它可以与用户定义的任何 ConcreteProduct 类一起使用</li>
<li>工厂方法的一个潜在缺点在于客户可能仅仅为了创建一个特定的ConcreteProduct对象， 就不得不创建Creator的子类</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//lazy init</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Creator</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function">Product *<span class="title">GetProduct</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> Product *<span class="title">CreateProduct</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    Product *_product;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">Product *<span class="title">Creator::GetProduct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (_product = <span class="number">0</span>) &#123;</span><br><span class="line">        _product = <span class="built_in">CreateProduct</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _product;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="prototype">prototype</h2>
<p>用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">classDiagram</span><br><span class="line">direction LR</span><br><span class="line"></span><br><span class="line">   class Client&#123;</span><br><span class="line">     Operation()</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">   class Prototype&#123;</span><br><span class="line">   	 Clone()</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   class ConcretePrototype1&#123;</span><br><span class="line">   	 Clone()</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   class ConcretePrototype2&#123;</span><br><span class="line">   	 Clone()</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">   ConcretePrototype1 --|&gt; Prototype</span><br><span class="line">   ConcretePrototype2 --|&gt; Prototype</span><br><span class="line">   Client o--&gt; Prototype</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Client:</span><br><span class="line">p = prototype-&gt;Clone()</span><br></pre></td></tr></table></figure>
<ul>
<li>因为客户可以在运行时刻建立和删除原型。</li>
<li>减少子类的构造</li>
</ul>
<h2 id="singleton">singleton</h2>
<p>保证一个类仅有一个实例，并提供一个访问它的全局访问点。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">classDiagram</span><br><span class="line">direction LR</span><br><span class="line"></span><br><span class="line">   class Singleton&#123;</span><br><span class="line">     static Instance()</span><br><span class="line">     SingletonOperation()</span><br><span class="line">     GetSingletonData()</span><br><span class="line">     static uniqueInstance</span><br><span class="line">     singletonData</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">static Instance()&#123;</span><br><span class="line">	return uniqueInstance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>类封装唯一实例</li>
</ul>
<h1 id="结构型模式">结构型模式</h1>
<h2 id="adapterwrapper">adapter/wrapper</h2>
<p>将一个类的接口转换成客户希望的另外一个接口。Adapter模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">classDiagram</span><br><span class="line">direction BT</span><br><span class="line"></span><br><span class="line">   class Client&#123;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">   class Target&#123;</span><br><span class="line">   	 Request()</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   class Adaptee&#123;</span><br><span class="line">   	 SpecificRequest()</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   class Adapter&#123;</span><br><span class="line">   	 Rquest()</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">   Client --&gt; Target</span><br><span class="line">   Adapter --|&gt; Target</span><br><span class="line">   Adapter --|&gt; Adaptee</span><br><span class="line">   %% or</span><br><span class="line">   Adapter --&gt; Adaptee</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>使用C++实现适配器类 在使用C++实现适配器类时，Adapter类应该采用公共方式继 承Target 类，并且用私有方式继承Adapiee类</li>
</ul>
<h2 id="bridge">bridge</h2>
<p>将抽象部分与它的实现部分分离，使它们都可以独立地变化。</p>
<p>Abstraction将client 的请求转发给它的Implementor对象</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">classDiagram</span><br><span class="line">direction BT</span><br><span class="line"></span><br><span class="line">   class Abstraction&#123;</span><br><span class="line">   Operation()</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">   class RefinedAbstraction&#123;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   class Implementor&#123;</span><br><span class="line">   	 OperationImp()</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   class ConcreteImplementorB&#123;</span><br><span class="line">   	 OperationImp()</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   class ConcreteImplementorA&#123;</span><br><span class="line">   	 OperationImp()</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">	 Abstraction o--&gt; Implementor</span><br><span class="line">   RefinedAbstraction --|&gt; Abstraction</span><br><span class="line">   ConcreteImplementorA --|&gt; Implementor</span><br><span class="line">   ConcreteImplementorB --|&gt; Implementor</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>分离接口及其实现部分 一个实现未必不变地绑定在一个接又上。抽象类的实现可以 在运行时刻进行配置， 一个对象甚至可以在运行时刻改变它的实现</li>
<li></li>
</ul>
<h2 id="composite">composite</h2>
<p>将对象组合成树形结构以表示〝部分-整体” 的层次结构。Composite使得用户对单个对象 和组合对象的使用具有一致性。</p>
<p>用户使用Component类接口与组合结构中的对象进行交互。如果接收者是一个叶节点,则直接处理请求。如果接收者是Composite，它通常将请求发送给它的子部件，在转发请求 之前与/或之后可能执行一些辅助操作。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">classDiagram</span><br><span class="line">direction BT</span><br><span class="line"></span><br><span class="line">   class Client&#123;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">   class Component&#123;</span><br><span class="line">   Operation()</span><br><span class="line">   Add(Component)</span><br><span class="line">   Remove(Component)</span><br><span class="line">   GetChild(int)</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   class Leaf&#123;</span><br><span class="line">   	 Operation()</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   class Composite&#123;</span><br><span class="line">   Operation()</span><br><span class="line">   Add(Component)</span><br><span class="line">   Remove(Component)</span><br><span class="line">   GetChild(int)</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">	 Client --&gt; Component</span><br><span class="line">   Leaf --|&gt; Component</span><br><span class="line">   Composite --|&gt; Component</span><br><span class="line">   Composite o--&gt; Component</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Composite Operation:</span><br><span class="line">for all g in children:</span><br><span class="line">	g.Operation()</span><br></pre></td></tr></table></figure>
<h2 id="decoratorwrapper">decorator/wrapper</h2>
<p>动态地给一个对象添加 一些额外的职责。就增加功能来说，Decorator 模式相比生成子类 更为灵活。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">classDiagram</span><br><span class="line">direction BT</span><br><span class="line">   </span><br><span class="line">   class Component&#123;</span><br><span class="line">   Operation()</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   class ConcreteComponent&#123;</span><br><span class="line">   	 Operation()</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   class Decorator&#123;</span><br><span class="line">   Operation()</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   class ConcreteDecoratorA&#123;</span><br><span class="line">   addedState</span><br><span class="line">   	 Operation()</span><br><span class="line">   &#125;</span><br><span class="line">   class ConcreteDecoratorB&#123;</span><br><span class="line">   	 Operation()</span><br><span class="line">   	 AddedBehavior()</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">	 ConcreteDecoratorA --|&gt; Decorator</span><br><span class="line">   ConcreteDecoratorB --|&gt; Decorator</span><br><span class="line">    ConcreteComponent --|&gt; Component</span><br><span class="line">   Decorator --|&gt; Component</span><br><span class="line">   Decorator o--&gt; Component</span><br><span class="line">  </span><br><span class="line">   </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ConcreteDecoratorB Operation():</span><br><span class="line">Decorator::Operation()</span><br><span class="line">AddedBehavior()</span><br><span class="line"></span><br><span class="line">Decorator Operation():</span><br><span class="line">component-&gt;Operation()</span><br></pre></td></tr></table></figure>
<h2 id="facade">facade</h2>
<p>为子系统中的 一组接口提供 一个 一致的界面</p>
<h2 id="flyweight">flyweight</h2>
<p>运用共享技术有效地支持大量细粒度的对象。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">classDiagram</span><br><span class="line">direction BT</span><br><span class="line">   </span><br><span class="line">   class FlyweightFactory&#123;</span><br><span class="line">   GetFlyweight(key)</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   class Flyweight&#123;</span><br><span class="line">   Operation(extrinsicState)</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   class ConcreteFlyweight&#123;</span><br><span class="line">   	 Operation(extrinsicState)</span><br><span class="line">   	 intrinsicState</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   class UnsharedConcreteFlyweight&#123;</span><br><span class="line">   Operation(extrinsicState)</span><br><span class="line">   allState</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">	 FlyweightFactory o--&gt; Flyweight</span><br><span class="line">   ConcreteFlyweight --|&gt; Flyweight</span><br><span class="line">   UnsharedConcreteFlyweight --|&gt; Flyweight</span><br><span class="line">   Client --&gt; FlyweightFactory</span><br><span class="line">   Client --&gt; ConcreteFlyweight</span><br><span class="line">   Client --&gt; UnsharedConcreteFlyweight</span><br><span class="line">  </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FlyweightFactory GetFlyweight(key):</span><br><span class="line">if(flyweight[key] exists)&#123;</span><br><span class="line">	return existing flyweight;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">	create new flyweight;</span><br><span class="line">	add it to pool of flyweights;</span><br><span class="line">	return the new flyweight;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="proxy">proxy</h2>
<p>为其他对象提供 一种代理以控制对这个对象的访问。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">classDiagram</span><br><span class="line">direction BT</span><br><span class="line">   </span><br><span class="line">   class Subject&#123;</span><br><span class="line">   Request()</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   class RealSubject&#123;</span><br><span class="line">   Request()</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   class Proxy&#123;</span><br><span class="line">   	 Request()</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   Client --&gt; Subject</span><br><span class="line">   RealSubject --|&gt; Subject</span><br><span class="line">   Proxy --|&gt; Subject</span><br><span class="line">  Proxy --&gt; RealSubject:realSubject</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="行为模式">行为模式</h1>
<h2 id="chainof-responsibility">CHAINOF RESPONSIBILITY</h2>
<p>使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。将这 些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">classDiagram</span><br><span class="line">direction BT</span><br><span class="line">   </span><br><span class="line">   class Handler&#123;</span><br><span class="line">   HandlerRequest()</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   class ConcreteHandler1&#123;</span><br><span class="line">   HandlerRequest()</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   class ConcreteHandler2&#123;</span><br><span class="line">   HandlerRequest()</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   Client --&gt; Handler</span><br><span class="line">   Handler --&gt; Handler:successor</span><br><span class="line">   ConcreteHandler1 --|&gt; Handler</span><br><span class="line">  ConcreteHandler2 --|&gt; Handler</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="commandactiontransaction">command/action/transaction</h2>
<p>将1个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化; 对请求排队或记录请求日志，以及支持可撤消的操作</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">classDiagram</span><br><span class="line">direction BT</span><br><span class="line">   </span><br><span class="line">   class Command&#123;</span><br><span class="line">   Execute()</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   class ConcreteCommmand&#123;</span><br><span class="line">   Execute()</span><br><span class="line">   state</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   class Receiver&#123;</span><br><span class="line">   Action()</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   Client --&gt; Receiver</span><br><span class="line">   Client ..&gt; ConcreteCommmand</span><br><span class="line">   </span><br><span class="line">  ConcreteCommmand --|&gt; Receiver</span><br><span class="line">  ConcreteCommmand --|&gt; Command</span><br><span class="line">  Invoker o--|&gt; Command</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="interpreter">INTERPRETER</h2>
<p>给定 一个语言，定义它的文法的 一种表示，并定义 一个解释器，这个解释器使用该表示 来解释语言中的句子。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">classDiagram</span><br><span class="line">direction BT</span><br><span class="line">   </span><br><span class="line">   class AbstractExpression&#123;</span><br><span class="line">   Interpret(Context)</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   class TerminalExpression&#123;</span><br><span class="line">   Interpret(Context)</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   class NonterminalExpression&#123;</span><br><span class="line">   Interpret(Context)</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">  </span><br><span class="line">   TerminalExpression --|&gt; AbstractExpression</span><br><span class="line">  NonterminalExpression --|&gt; AbstractExpression</span><br><span class="line">  NonterminalExpression o--&gt; AbstractExpression</span><br><span class="line"> Client --&gt; Context</span><br><span class="line">   Client --&gt; AbstractExpression</span><br></pre></td></tr></table></figure>
<h2 id="iterator">iterator</h2>
<h2 id="mediator">mediator</h2>
<p>用一 个中介对象来封装一系列的对象交互。中介者使各对象不需要显式地相互引用，从 而使其耦合松散，而且可以独立地改变它们之间的交互。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">classDiagram</span><br><span class="line">direction RL</span><br><span class="line">   </span><br><span class="line">   ConcreteMediator --|&gt; Mediator</span><br><span class="line">   Colleague --&gt; Mediator:mediator</span><br><span class="line">   ConcreteMediator --&gt; ConcreteColleague1</span><br><span class="line">   ConcreteMediator --&gt; ConcreteColleague2</span><br><span class="line">   ConcreteColleague1 --|&gt; Colleague</span><br><span class="line">   ConcreteColleague2 --|&gt; Colleague</span><br></pre></td></tr></table></figure>
<h2 id="memento">memento</h2>
<p>在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。 这样以后就可将该对象恢复到原先保存的状态。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">classDiagram</span><br><span class="line">direction BT</span><br><span class="line">class Originator&#123;</span><br><span class="line">SetMemento(Memento m)</span><br><span class="line">CreateMemento()</span><br><span class="line">state</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Memento&#123;</span><br><span class="line">GetState()</span><br><span class="line">SetState()</span><br><span class="line">state</span><br><span class="line">&#125;</span><br><span class="line">Originator ..&gt; Memento</span><br><span class="line">Caretaker o--&gt; Memento</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="observer">observer</h2>
<p>定义对象间的一种一对多的依赖关系, 当一个对象的状态发生改变时，所有依赖于它的对象 都得到通知并被自动更新。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">classDiagram</span><br><span class="line">direction RL</span><br><span class="line">class Subject&#123;</span><br><span class="line">  Attach(Observer)</span><br><span class="line">  Detach(Observer)</span><br><span class="line">  Notify()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class ConcreteSubject&#123;</span><br><span class="line">  GetState()</span><br><span class="line">  SetState()</span><br><span class="line">  subjectState</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Observer&#123;</span><br><span class="line">	Update()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class ConcreteObserver&#123;</span><br><span class="line">	Update()</span><br><span class="line">	observerState</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Subject --&gt; Observer :observers</span><br><span class="line">ConcreteSubject --|&gt; Subject</span><br><span class="line">ConcreteObserver --|&gt; Observer</span><br><span class="line">ConcreteObserver --&gt; ConcreteSubject:subject</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="state">state</h2>
<p>允许一个对象在其内部状态改变时改变它的行为。对象看起来似乎修改了它的类</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">classDiagram</span><br><span class="line">direction RL</span><br><span class="line">class Context&#123;</span><br><span class="line">  Request()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class State&#123;</span><br><span class="line">  Handle()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class ConcreteStateA&#123;</span><br><span class="line">	Handle()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class ConcreteStateB&#123;</span><br><span class="line">	Handle()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Context o--&gt; State :state</span><br><span class="line">ConcreteStateA --|&gt; State</span><br><span class="line">ConcreteStateB --|&gt; State</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="strategy">strategy</h2>
<p>定义一系列的算法, 把它们一个个封装起来，并且使它们可相互替换。本模式使得算法可独 立 于使用它的 客户而变化。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">classDiagram</span><br><span class="line">direction BT</span><br><span class="line">class Context&#123;</span><br><span class="line">  ContextInterface()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Strategy&#123;</span><br><span class="line">  AlgorithmInterface()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class ConcreteStrategyA&#123;</span><br><span class="line">  AlgorithmInterface()</span><br><span class="line">&#125;</span><br><span class="line">class ConcreteStrategyB&#123;</span><br><span class="line">  AlgorithmInterface()</span><br><span class="line">&#125;</span><br><span class="line">class ConcreteStrategyC&#123;</span><br><span class="line">  AlgorithmInterface()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Context o--&gt; Strategy :strategy</span><br><span class="line">ConcreteStrategyA --|&gt; Strategy</span><br><span class="line">ConcreteStrategyB --|&gt; Strategy</span><br><span class="line">ConcreteStrategyC --|&gt; Strategy</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="template">template</h2>
<p>定义 一个操作中的算法的骨架，而将一些步骤延迟到子类中。TemplateMethod使得子类 可以不改变 一个算法的结构即可重定义该算法的某些特定步骤。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">classDiagram</span><br><span class="line">direction BT</span><br><span class="line">class AbstractClass&#123;</span><br><span class="line">  TemplateMethod()</span><br><span class="line">  PrimitiveOperation1()</span><br><span class="line">    PrimitiveOperation2()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class ConcreteClass&#123;</span><br><span class="line">  PrimitiveOperation1()</span><br><span class="line">    PrimitiveOperation2()</span><br><span class="line">&#125;</span><br><span class="line">ConcreteClass --|&gt; AbstractClass</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="visitor">visitor</h2>
<p>表示一个作用于某对象结构中的各元素的操作。它使你可以在不改变各元素的类的前提 下定义作用于这些元素的新操作。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">classDiagram</span><br><span class="line">direction BT</span><br><span class="line">class Visitor&#123;</span><br><span class="line">  VisitConcreteElementA(ConcreteElementA)</span><br><span class="line">  VisitConcreteElementB(ConcreteElementB)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class ConcreteVisitor1&#123;</span><br><span class="line">  VisitConcreteElementA(ConcreteElementA)</span><br><span class="line">  VisitConcreteElementB(ConcreteElementB)</span><br><span class="line">&#125;</span><br><span class="line">class ConcreteVisitor2&#123;</span><br><span class="line">  VisitConcreteElementA(ConcreteElementA)</span><br><span class="line">  VisitConcreteElementB(ConcreteElementB)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ConcreteVisitor1 --|&gt; Visitor</span><br><span class="line">ConcreteVisitor2 --|&gt; Visitor</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Element&#123;</span><br><span class="line">  Accept(Visitor)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class ConcreteElementA&#123;</span><br><span class="line">  Accept(Visitor)</span><br><span class="line">  OperationA()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class ConcreteElementB&#123;</span><br><span class="line">  Accept(Visitor)</span><br><span class="line">  OperationB()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ConcreteElementA --|&gt; Element</span><br><span class="line">ConcreteElementB --|&gt; Element</span><br><span class="line"></span><br><span class="line">Client --&gt; Visitor</span><br><span class="line">Client --&gt; ObjectStructure</span><br><span class="line">ObjectStructure --&gt; Element</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="结论">结论</h1>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>class</tag>
        <tag>classdiagram</tag>
        <tag>direction</tag>
        <tag>mermaid</tag>
        <tag>factory</tag>
      </tags>
  </entry>
  <entry>
    <title>ShellScript</title>
    <url>/2022/06/6f4efbde8095.html</url>
    <content><![CDATA[<blockquote>
<p>mac terminal 快捷键</p>
<p>1、将光标移动到行首：ctrl + a</p>
<p>2、将光标移动到行尾：ctrl + e</p>
<p>3、清除屏幕： ctrl + l</p>
<p>4、搜索以前使用命令：ctrl + r</p>
<p>5、清除当前行： ctrl + u</p>
<p>6、清除至当前行尾： ctrl + k</p>
<p>7、单词为单位移动：option + 方向键</p>
</blockquote>
<span id="more"></span>
<h1 id="vim">vim</h1>
<h2 id="vim-config">vim config</h2>
<p>~/.vimrc</p>
<h2 id="基本指令">基本指令</h2>
<p>i, a 插入</p>
<p>hjkl 左上下右</p>
<p>o 新增下一行 O 新增上一行</p>
<p>gg 第一行 G 最后一行</p>
<p>yy 复制当前行 yw 复制单词 p 粘贴 3p 粘贴三次</p>
<p>dd 删除当前行</p>
<p>. 重复前次操作</p>
<p>u 撤销前次操作</p>
<p>ctrl r 恢复前次操作</p>
<p>dw 删除单词 cw 改变单词</p>
<p>w 下个单词首部, e 下个单词尾部, b 上个单词首部</p>
<p>/ 搜索</p>
<p>:%s/old/new/g 全局替换</p>
<p>ci+括号 删除括号里的内容</p>
<p>ctrl u 向上翻页</p>
<p>ctrl d 向下翻页</p>
<p>f 查找</p>
<p>ctrl v 可视化块 d 删除</p>
<p>shift v 可视化行</p>
<h1 id="文件">文件</h1>
<ul>
<li>~/.bashrc: 提示文本, 颜色</li>
<li>~/.bash_history: 保存运行过的命令</li>
</ul>
<h1 id="概述">概述</h1>
<ul>
<li><p>; 分隔命令</p></li>
<li><p>在Bash中，每一个变量的值都是字符串</p>
<p>查看 QQ 进程的环境变量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps -p 8617 -wwwE # QQ</span><br><span class="line"> PID TTY           TIME CMD</span><br><span class="line">8617 ??       243:33.14 /Applications/QQ.app/Contents/MacOS/QQ USER=akunda __CFBundleIdentifier=com.tencent.qq COMMAND_MODE=unix2003 LOGNAME=akunda PATH=/usr/bin:/bin:/usr/sbin:/sbin SSH_AUTH_SOCK=/private/tmp/com.apple.launchd.Anke8CUOPJ/Listeners SHELL=/bin/zsh HOME=/Users/akunda __CF_USER_TEXT_ENCODING=0x1F5:0x19:0x34 TMPDIR=/var/folders/7_/pnngkwkj0fj188s18w3rvx3w0000gn/T/ XPC_SERVICE_NAME=application.com.tencent.qq.115283210.115284637 XPC_FLAGS=1</span><br></pre></td></tr></table></figure>
<p>变量赋值</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">var=&quot;value  ?&quot; # 不要加空格!</span><br><span class="line">echo $var</span><br><span class="line">echo $&#123;var&#125;</span><br><span class="line">echo &quot;we have a $&#123;var&#125;&quot;</span><br><span class="line">echo &quot;we have a $var&quot;</span><br><span class="line">length=$&#123;#var&#125; # 得到变量长度</span><br></pre></td></tr></table></figure>
<p>环境变量是未在当前进程中定义，而从父进程中继承而来的变量 export命令用来设置环境变量。至此之后，从当前shell脚本执行的任何应用程序都会继承 这个变量。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo $PATH</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="variable">$PATH</span> /usr/local/apache-maven-3.6.3/bin</span></span><br><span class="line">export PATH=&quot;$PATH:/home/user/bin&quot;</span><br><span class="line"></span><br><span class="line">PATH=&quot;$PATH:/home/user/bin&quot;</span><br><span class="line">export PATH</span><br></pre></td></tr></table></figure>
<p>超级用户 UID=0</p></li>
<li><p>echo <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo &quot;welcome\!&quot;</span><br><span class="line">echo &#x27;welcome!&#x27;</span><br><span class="line">echo welcome!</span><br><span class="line"></span><br><span class="line">printf  &quot;%-5s %-10s %-4.2f\n&quot; 1 Sarath 80.3456 </span><br><span class="line"></span><br><span class="line">echo -e &quot;1\t2\t3&quot; </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">123</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></p></li>
<li></li>
</ul>
]]></content>
      <tags>
        <tag>ctrl</tag>
        <tag>echo</tag>
        <tag>bin</tag>
        <tag>var</tag>
        <tag>path</tag>
      </tags>
  </entry>
  <entry>
    <title>blogs</title>
    <url>/2023/03/558c2ce4f43d.html</url>
    <content><![CDATA[<blockquote>

</blockquote>
<span id="more"></span>
<h1 id="what-is-chatgpt-doing-and-why-does-it-work">What Is ChatGPT Doing … and Why Does It Work?</h1>
<p>“reasonable continuation”</p>
<p>produces a ranked list of words that might follow, together with “probabilities</p>
<p><strong>“temperature”</strong> parameter that determines how often lower-ranked words will be used, and for essay generation, it turns out that a “temperature” of 0.8 seems best.</p>
<p>“large language model” (LLM)</p>
<h1 id="how-browsers-work">How browsers work</h1>
<p>https://github.com/SinosGray/how-web-works-chinese</p>
<h1 id="parsing-.ds_store-file-format">parsing .DS_Store file format</h1>
<p>https://0day.work/parsing-the-ds_store-file-format/</p>
<p>https://github.com/gehaxelt/ds_store/blob/master/ds_store.go</p>
<p>Apple's operating system creates this file in apparently all directories to store meta information about its contents.</p>
]]></content>
      <tags>
        <tag>store</tag>
        <tag>https</tag>
      </tags>
  </entry>
  <entry>
    <title>data_structure</title>
    <url>/2019/11/6cf60526c127.html</url>
    <content><![CDATA[<h1 id="数据结构">数据结构</h1>
<h2 id="tips">tips</h2>
<ul>
<li><p>int* a=&amp;var; int* 作为一个整体表示int类型指针</p></li>
<li><p>Typedef 建立一个类型别名的方法很简单，在传统的变量声明表达式里用类型名替代变量名，然后把关键字typedef加在该语句的开头</p></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">char</span> Line[<span class="number">81</span>];   </span><br></pre></td></tr></table></figure>
<p>此时Line类型即代表了具有81个元素的字符数组</p>
<span id="more"></span>
<ul>
<li>null用于指针</li>
<li>fwrite 函数</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">size_t</span> <span class="title function_">fwrite</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *ptr, <span class="type">size_t</span> size, <span class="type">size_t</span> nmemb, FILE *stream)</span></span><br></pre></td></tr></table></figure>
<p>​ ptr -- 这是指向要被写入的元素数组的指针。 ​ size -- 这是要被写入的每个元素的大小，以字节为单位。 ​ nmemb -- 这是元素的个数，每个元素的大小为 size 字节。 ​ stream -- 这是指向 FILE 对象的指针，该 FILE 对象指定了一个输出流。</p>
<ul>
<li>fread 函数</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">size_t</span> <span class="title function_">fread</span><span class="params">(<span class="type">void</span> *ptr, <span class="type">size_t</span> size, <span class="type">size_t</span> nmemb, FILE *stream)</span></span><br></pre></td></tr></table></figure>
<p>​ ptr -- 这是指向带有最小尺寸 size*nmemb 字节的内存块的指针。 ​ size -- 这是要读取的每个元素的大小，以字节为单位。 ​ nmemb -- 这是元素的个数，每个元素的大小为 size 字节。 ​ stream -- 这是指向 FILE 对象的指针，该 FILE 对象指定了一个输入流</p>
<ul>
<li><p>注释统一为//or/* */，暂定为写在注释对象上方，用//</p></li>
<li><p>malloc 函数失败返回null</p></li>
<li><p>c++函数内部不能定义函数（但是lamda好像可以）</p></li>
<li><p>fopen</p>
<table>
<colgroup>
<col style="width: 34%" />
<col style="width: 65%" />
</colgroup>
<thead>
<tr class="header">
<th>控制读写权限的字符串（必须指明）</th>
<th style="text-align: right;"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>打开方式</td>
<td style="text-align: right;">说明</td>
</tr>
<tr class="even">
<td>"r"</td>
<td style="text-align: right;">以“只读”方式打开文件。只允许读取，不允许写入。文件必须存在，否则打开失败。</td>
</tr>
<tr class="odd">
<td>"w"</td>
<td style="text-align: right;">以“写入”方式打开文件。如果文件不存在，那么创建一个新文件；如果文件存在，那么清空文件内容（相当于删除原文件，再创建一个新文件）。</td>
</tr>
<tr class="even">
<td>"a"</td>
<td style="text-align: right;">以“追加”方式打开文件。如果文件不存在，那么创建一个新文件；如果文件存在，那么将写入的数据追加到文件的末尾（文件原有的内容保留）。</td>
</tr>
<tr class="odd">
<td>"r+"</td>
<td style="text-align: right;">以“读写”方式打开文件。既可以读取也可以写入，也就是随意更新文件。文件必须存在，否则打开失败。</td>
</tr>
<tr class="even">
<td>"w+"</td>
<td style="text-align: right;">以“写入/更新”方式打开文件，相当于<code>w</code>和<code>r+</code>叠加的效果。既可以读取也可以写入，也就是随意更新文件。如果文件不存在，那么创建一个新文件；如果文件存在，那么清空文件内容（相当于删除原文件，再创建一个新文件）。</td>
</tr>
<tr class="odd">
<td>"a+"</td>
<td style="text-align: right;">以“追加/更新”方式打开文件，相当于a和r+叠加的效果。既可以读取也可以写入，也就是随意更新文件。如果文件不存在，那么创建一个新文件；如果文件存在，那么将写入的数据追加到文件的末尾（文件原有的内容保留）。</td>
</tr>
<tr class="even">
<td>控制读写方式的字符串（可以不写）</td>
<td style="text-align: right;"></td>
</tr>
<tr class="odd">
<td>打开方式</td>
<td style="text-align: right;">说明</td>
</tr>
<tr class="even">
<td>"t"</td>
<td style="text-align: right;">文本文件。如果不写，默认为<code>"t"</code>。</td>
</tr>
<tr class="odd">
<td>"b"</td>
<td style="text-align: right;">二进制文件。</td>
</tr>
</tbody>
</table></li>
</ul>
<h2 id="第一章">第一章</h2>
<p>vscode格式化：option+shift+f</p>
<p>数据项是数据的最小不可分割单位</p>
<p>数据结构是指数据元素的集合以及它们之间的关系</p>
<p>原地工作算法：算法所需要的辅助空间不随着问题的规模而变化，是一个确定的值。</p>
<p>算法分析的主要任务：时间复杂度和空间复杂度</p>
<ul>
<li>数据</li>
<li>数据元素：数据的基本单位，可由多个数据项组成。如一本书</li>
<li>数据项：是数据的不可分割的最小单位。如书名，作者</li>
<li>数据对象：性质相同的数据元素的集合。 如整数，字母</li>
<li>数据结构：相互之间存在一种或多种特定关系的数据元素的集合。
<ul>
<li>包括：集合，线性结构（特点：除了首尾元素，其他元素均只有一个前驱一个后继），树形结构，图状结构或者网状结构</li>
</ul></li>
<li>逻辑结构：上述结构都是逻辑结构，即表示数据之间的关系</li>
<li>存储结构（物理结构）：数据结构在计算机中的表示。
<ul>
<li>包括：顺序存储结构，链式存储结构</li>
</ul></li>
<li>数据类型：一个值的集合和定义在这个值上的一组操作的总称，是一个取值范围。可以分为原子类型和结构类型。</li>
<li>抽象数据类型：一个数学模型以及定义在该模型上的一组操作，仅取决于一组逻辑特性</li>
</ul>
<figure>
<img src="https://img-blog.csdn.net/20180129174653374?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzI2MjMzNjM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述" /><figcaption aria-hidden="true">这里写图片描述</figcaption>
</figure>
<p><strong>算法特性</strong></p>
<ol type="1">
<li>输入：一个算法必须有零个或以上输入量。</li>
<li>输出：一个算法应有一个或以上输出量，输出量是算法计算的结果。</li>
<li>确定性：算法的描述必须无歧义，以保证算法的实际执行结果是精确地符合要求或期望，通常要求实际执行结果是确定的。</li>
<li>有穷性：依据图灵的定义，一个演算法是能够被任何<a href="https://zh.wikipedia.org/wiki/图灵完全">图灵完备</a>系统模拟的一串运算，而<a href="https://zh.wikipedia.org/wiki/圖靈機">图灵机</a>只有有限个状态、有限个输入符号和有限个转移函数（指令）。而一些定义更规定演算法必须在有限个步骤内完成任务。</li>
<li>可行性：又称可行性。能够实现，算法中描述的操作都是可以通过已经实现的基本运算执行有限次来实现。</li>
</ol>
<p><strong>设计要求</strong></p>
<ol type="1">
<li>正确性</li>
<li>可读性</li>
<li>健壮性</li>
<li>效率与低存储量要求</li>
</ol>
<p><a href="https://www.jianshu.com/p/b36477f4ecee">逻辑结构与物理结构</a></p>
<h2 id="第二章-线性表">第二章 线性表</h2>
<ul>
<li><p>线性表存在与否和是否为空时两个概念</p>
<p>处理方法：头结点；tag标记</p>
<p>一般约定好null的用法</p></li>
</ul>
<h3 id="顺序表">顺序表</h3>
<h3 id="单链表">单链表</h3>
<ul>
<li><p>带或不带表头</p></li>
<li><p>结构：数据域，指针域</p></li>
<li><p>生成单链表：先进先出，先进后出；</p></li>
<li><p>插入节点：节点之后（易）节点之前（难）</p></li>
<li><h4 id="算法">算法</h4>
<ul>
<li>将元素插入有序表：
<ul>
<li>不带表头：区分四种情况（p后，q前 是否为空）</li>
<li>带表头：q一定不为空</li>
</ul></li>
<li>指定位置插入：
<ul>
<li>计数记到i-1（保证插入当前节点之后</li>
</ul></li>
<li>删除元素（记录前驱节点
<ul>
<li>指定值（两个指针</li>
<li>指定位置（i-1</li>
</ul></li>
<li>两个有序单链表合并</li>
</ul></li>
<li><p>循环链表</p>
<ul>
<li>可设尾指针</li>
<li>循环指针指向头结点（如果有的话）</li>
</ul></li>
<li><p>双向循环链表</p></li>
<li><p>结构：prior指针，next指针，data值域</p></li>
<li><p>1、静态链表是用类似于数组方法实现的，是顺序的存储结构，在物理地址上是连续的，而且需要预先分配地址空间大小。所以静态链表的初始长度一般是固定的，在做插入和删除操作时不需要移动元素，仅需修改指针。</p>
<ul>
<li><h5 id="优点">优点：</h5>
<ul>
<li>在插入和删除操作时，只需要修改游标，不需要移动元素，从而改进了在顺序存储结构中的插入和删除操作需要移动大量元素的缺点。</li>
</ul></li>
<li><h5 id="缺点">缺点：</h5>
<ul>
<li>没有解决连续存储分配(数组)带来的表长难以确定的问题。</li>
<li>失去了顺序存储结构随机存取的特性。</li>
</ul></li>
</ul>
<p>2、动态链表是用内存申请函数（malloc/new）动态申请内存的，所以在链表的长度上没有限制。动态链表因为是动态申请内存的，所以每个节点的物理地址不连续，要通过指针来顺序访问。</p></li>
<li><p>顺序表存储密度大，链表小（因为有指针</p></li>
</ul>
<h2 id="第三章-栈与队列">第三章 栈与队列</h2>
<p>插入对应的指针有两种方式，一个是最后一个元素，一个是下一个（空）元素</p>
<h3 id="栈">栈</h3>
<ul>
<li>在表尾插入push删除pop</li>
<li>顺序结构：base指针，top指针，stacksize</li>
<li>栈顶：尾部，栈底：首部</li>
<li>LIFO后进先出</li>
<li>分类：静态顺序，动态顺序，链式</li>
<li>应用：括号匹配，表达式求值</li>
<li>链式：栈顶在首节点处</li>
</ul>
<h3 id="队列">队列</h3>
<ul>
<li><p>队首：删除的一段</p></li>
<li><p>队尾：插入的一段</p></li>
<li><p>FIFO先进先出</p></li>
<li><h4 id="链式队列">链式队列</h4>
<ul>
<li>front，rear两个指针，front：队首</li>
<li>如果删除节点后队列为空，需要修改队尾指针</li>
</ul></li>
<li><h4 id="顺序结构">顺序结构</h4>
<ul>
<li>顺序循环队列结构：base指针，front，rear下标</li>
<li>假溢出
<ul>
<li><ol type="1">
<li>移动元素？开销大</li>
<li>循环表√</li>
</ol></li>
<li>方案：取模，留出一个单元不用</li>
</ul></li>
</ul></li>
<li><p>前中后缀表达式</p>
<p>https://blog.csdn.net/Antineutrino/article/details/6763722</p>
<p>https://zhuanlan.zhihu.com/p/37467928</p></li>
</ul>
<h2 id="第五章-数组与广义表">第五章 数组与广义表</h2>
<ul>
<li><h3 id="数组">数组</h3>
<ul>
<li>行序优先，列序优先</li>
<li>数组是一个定长的线性表，所以不能有元素的增加与删除操作✔️</li>
</ul></li>
<li><p>特殊矩阵的压缩存储</p>
<ul>
<li><p>对称矩阵</p>
<p>大小：1+2+3+。。。+n</p>
<p>下三角：aij序号：k=i(i-1)/2 + j</p>
<p>​ 上三角aij=aji <img src="/Users/akunda/Desktop/hexo/source/images/截屏2019-12-22下午8.02.26.png" alt="截屏2019-12-22下午8.02.26" /></p></li>
<li><p>三对角矩阵</p>
<p>3n-2个元素</p>
<p>k=(3*(i-1)-1)+(j-i+2)=2i+j-2</p></li>
</ul></li>
<li><p>稀疏矩阵压缩存储</p>
<p>三元组表</p>
<ul>
<li>三元组顺序表（不能随机访问）（插入元素可能导致之后的元素依次向后递推）</li>
<li>结构：
<ul>
<li>节点：行i，列j，值e</li>
<li>节点数组，行数，列数，非零元数，mu，nu，tu</li>
</ul></li>
</ul>
<p>十字链表</p>
<ul>
<li><p>结构</p>
<ul>
<li>节点：i，j，e，指针：right, down</li>
<li>行头数组，列头数组，mu，nu，tu</li>
</ul></li>
<li><p>当某稀疏矩阵经常进行元素的赋值运算时，十字链表比三元组表更适合作为其存储结构。</p>
<p>转置矩阵：保证行序优先，需要排序n^2（方便后续计算）</p>
<p>​ 改进：加两个数组，一个记录转置前每一行有几个元素，一个记录转制后每一行第一个元素在转制后三元组顺序表的位置</p></li>
</ul>
<p>稀疏矩阵的三种不同的存储方法，采用哪种方法要看程序具体要实现的功能： 如果想完成例如矩阵的转置这样的操作，宜采用三元组顺序表； 如果想实现矩阵的乘法这样的功能，宜采用行逻辑链接的顺序表； 如果矩阵运算过程中（例如矩阵的加法），需要不断地插入非 0 元素或删除变为 0 的元素，宜采用十字链表法</p>
<p>使用三元组顺序表或十字链表作为稀疏矩阵中的物理结构，对元素的访问形式只能是顺序访问</p></li>
<li><h3 id="广义表">广义表</h3>
<ul>
<li><p><strong>广义表</strong>一般记作 LS = (a1, a2, ···, an), n是它的长度，ai可以是单个元素(原子)，也可以是广义表(子表)，当广义表非空时，称第一个元素a1为LS的表头，称其余元素组成的表为LS的表尾。注意：表头是元素(可以是原子，也可以是广表)，表尾一定是广义表。[<a href="https://zh.wikipedia.org/wiki/广义表#cite_note-1">1]</a>E=(a, E)是一个递归的表。D=(( ),(e),(a,(b,c,d)))是多层次的广义表，长度为3，深度为3。例：((a),a)的表头是(a)，表尾是(a)，((a))的表头是(a)，表尾是( )。</p></li>
<li><p>广义表(((a,b,(),c),d),e,((f),g))的长度是_<strong><em>,深度是</em></strong>_？</p>
<p>广义表长度是数第一层括号内的逗号数目可以看到,只有一个元素,就是((a,b,(),c),d),e,((f),g)，所以长度是1，深度是数括号数目,深度是4。</p></li>
<li><p>a1表头，（a2，a3.。。。）表尾</p>
<p>当广义表的元素是一个数据元素时，称其为原子，否则称为广义表的子表</p></li>
<li><p>广义表允许共享子表</p></li>
<li><p>广义表允许递归定义eg：G=(a,G)</p></li>
<li><p>链式结构表示</p>
<ul>
<li>原子节点，列表节点（union），tag表示表结点还是原子节点</li>
</ul></li>
</ul></li>
</ul>
<h2 id="第六章-树与二叉树">第六章 树与二叉树</h2>
<h3 id="定义">定义</h3>
<ul>
<li><p>满二叉树：深度为k，有2<sup>k</sup>-1个节点</p></li>
<li><p>完全二叉树（顺序二叉树）：深度为k，编号与满二叉树一致，叶子节点只能在倒数两层上，2<sup>k</sup>-1&gt;n&gt;2<sup>k-1</sup>-1，节点i的双亲节点为log <sub>2</sub> i向下取整</p>
<p>完全二叉树的n<sub>1</sub>=0或1</p></li>
</ul>
<h3 id="性质">性质</h3>
<p>n<sub>0</sub>=n<sub>2</sub>+1 根节点+双节点</p>
<p>n=n<sub>0</sub>+n<sub>1</sub>+n<sub>2</sub></p>
<h3 id="存储结构">存储结构</h3>
<ul>
<li>顺序存储：非完全二叉树浪费空间</li>
<li>链式存储：二叉，三叉（包括指向双亲节点的指针）</li>
</ul>
<h3 id="遍历">遍历</h3>
<p>先序，中序，后序</p>
<p>递归算法</p>
<p>中序遍历的非递归算法 栈</p>
<p><font color=red>后序遍历非递归算法</font></p>
<p>层序遍历 队列</p>
<ul>
<li>确定二叉树
<ul>
<li>带空子树的序列可唯一确定二叉树</li>
<li>中序后序两个序列：
<ul>
<li>根据后序找根节点，在中序划分左右子树，然后重复</li>
</ul></li>
<li>先序中序两个序列
<ul>
<li>根据前序找根节点，在中序划分左右子树，然后重复</li>
</ul></li>
</ul></li>
<li>二叉树深度</li>
</ul>
<h3 id="线索二叉树">线索二叉树</h3>
<ul>
<li>节点增加标志域ltag rtag，ltag=0代表左链域指示左孩子，ltag=1代表前驱，rtag=0右孩子，rtag=1后继节点</li>
<li>原理是将原来的空指针合理利用（2*n-（n-1））</li>
<li>线索添加参照遍历序列</li>
<li>遍历方法：以中序为例：有后继找后继，无后继找右子孙的最左子孙</li>
</ul>
<h3 id="树的结构">树的结构</h3>
<ul>
<li>双亲表示法/顺序表示法，一个数组存储节点数据和双亲的位置
<ul>
<li>结构：
<ul>
<li>节点：data，parent位置下标</li>
<li>节点数组，根的位置r，节点数n</li>
</ul></li>
</ul></li>
<li>孩子表示法/链接表表示法，节点包括数据和孩子的指针（节点数量固定或者非固定）
<ul>
<li>结构
<ul>
<li>表结点：child，next指针</li>
<li>数组节点：data，firstchild指针</li>
<li>数组，根位置r，节点数n</li>
</ul></li>
</ul></li>
<li>孩子链表表示法/单链表表示法，有点类似图的邻接表表示法，把弧节点换成孩子节点</li>
<li>带双亲的孩子链表表示法，节点包括了双亲结点的位置</li>
<li>孩子兄弟表示法/二叉链表，节点：左孩子；节点值；右兄弟，相当于转换成二叉树
<ul>
<li>结构
<ul>
<li>firchild，nextsibling，data</li>
</ul></li>
</ul></li>
<li>树转化为二叉树：1. 加线：在兄弟之间加线 2. 抹线：把除了左孩子以外其他孩子的线去掉</li>
<li>二叉树转换成树：1. 加线：若p是左孩子，则把p的沿分支所有右孩子与p的双亲相连 2. 抹线：抹掉原来二叉树双亲与右孩子的连线</li>
<li>森林转化为二叉树：1.每棵树转化为二叉树 2. 根节点相连 3. 以第一棵树的根节点为根节点旋转得到目标二叉树</li>
<li>二叉树转化为森林：1.根节点沿右侧所有右孩子连线抹掉，得到多颗二叉树 2.树还原二叉树</li>
<li>树的遍历
<ul>
<li>先根遍历（先序）
<ul>
<li>访问根节点</li>
<li>访问每一棵子树</li>
</ul></li>
<li>后根遍历（相当于转化成二叉树以后的中序遍历）
<ul>
<li>遍历子树</li>
<li>访问节点</li>
</ul></li>
</ul></li>
<li>森林的遍历
<ul>
<li>先序遍历
<ul>
<li>访问根节点</li>
<li>访问每一棵子树</li>
<li>访问其他树</li>
</ul></li>
<li>中序遍历
<ul>
<li>遍历子树</li>
<li>访问节点</li>
<li>访问其他树</li>
</ul></li>
</ul></li>
</ul>
<h3 id="哈弗曼树最优二叉树">哈弗曼树（最优二叉树）</h3>
<ul>
<li>树的路径长度PL：从root到每一个节点的路径长度之和（完全二叉树最小，单支二叉树最大）</li>
<li>树的带权路径长度WPL：每个叶子的权与该叶子的路径长度之和</li>
<li>在有n个相同叶子的二叉树中，wpl最小的称为<b>最优二叉树</b>
<ul>
<li>哈弗曼树的特点
<ul>
<li>完全二叉树不一定是哈夫曼树</li>
<li>在哈夫曼树中，权值大的节点离根节点比较近</li>
<li>哈弗曼树不唯一，但WPL相同</li>
<li>不存在度为1的节点</li>
</ul></li>
<li>哈夫曼算法（构造哈夫曼树）
<ul>
<li>选两个根节点权值最小的叶子作为左右子树构成一棵新的二叉树，根节点权值为左右子树权值之和</li>
<li>重复上述过程</li>
</ul></li>
<li>哈夫曼编码（最小冗余码）
<ul>
<li>统计出现频率，作为叶子节点权值，构造哈弗曼树</li>
<li>左分支标0，右分支标1，形成二进制串</li>
<li>特点：任一编码不是其他编码的前缀</li>
<li>编码从叶子到根，译码从根到叶子</li>
</ul></li>
</ul></li>
</ul>
<p>31</p>
<p>二叉树的先序遍历序列和后序遍历序列正好相反：高度等于其节点数https://zhidao.baidu.com/question/746019821869617732.html</p>
<h2 id="第七章-图">第七章 图</h2>
<h3 id="概念">概念</h3>
<ul>
<li>连通图：任意两个顶点都有路径</li>
<li>连通分量（极大连通图）</li>
<li>生成树（极小连通图）</li>
</ul>
<h3 id="存储结构-1">存储结构</h3>
<ol type="1">
<li><p>数组表示法：一个一维，一个二维，可以加权值</p>
<p><img src="/images/截屏2019-12-03下午2.35.09.png" alt="截屏2019-12-03下午2.35.09" style="zoom:50%;" /></p></li>
<li><p>邻接表表示法</p>
<p>邻接表，逆邻接表（出入度）</p>
<p><img src="/images/截屏2019-12-03下午2.39.20.png" alt="截屏2019-12-03下午2.39.20" style="zoom:50%;" /></p></li>
<li><p>十字链表表示法（有向图）</p>
<p><img src="/Users/akunda/Desktop/hexo/source/images/截屏2019-12-03下午2.41.12.png" alt="截屏2019-12-03下午2.41.12" style="zoom:50%;" /></p></li>
<li><p>邻接多重表（无向图）</p>
<p>每条弧节点包括：标志域（是否被搜索过），该边依附的两个顶点在顶点数组里的位置，指向下一条依附于两个顶点的边的指针</p>
<p><img src="/images/截屏2019-12-03下午2.42.43.png" alt="截屏2019-12-03下午2.42.43" style="zoom:50%;" /></p></li>
</ol>
<h3 id="图的遍历">图的遍历</h3>
<ol type="1">
<li><p>深度优先遍历</p>
<p>递归，堆栈</p>
<p><img src="/images/截屏2019-12-03下午6.25.27.png" alt="截屏2019-12-03下午6.25.27" style="zoom:50%;" /></p></li>
<li><p>广度优先遍历</p></li>
</ol>
<p><img src="/images/截屏2019-12-03下午6.30.30.png" alt="截屏2019-12-03下午6.30.30" style="zoom:50%;" /></p>
<h3 id="图的连通性">图的连通性</h3>
<ul>
<li><p>连通分量</p></li>
<li><p>生成树，dfs，bfs生成树</p></li>
<li><p>有向图强连通图，顺着一遍，逆着一遍，取交集</p></li>
<li><p>网的最小生成树</p>
<p>mst性质</p>
<ul>
<li>prim算法 分成u，v-u，把点依次纳入u中<img src="/images/截屏2019-12-10下午8.25.48.png" alt="截屏2019-12-10下午8.25.48" style="zoom:50%;" /></li>
<li>kruskai算法：把边按照从小到大依次加入，保证不形成回路</li>
</ul></li>
</ul>
<h3 id="有向无环图dag图">有向无环图（DAG图）</h3>
<ul>
<li><p>AOV图</p></li>
<li><p>拓扑排序（不能有回路DAG）先输出没有入度的</p>
<ul>
<li>顶点表示活动，弧表示约束关系</li>
<li>拓扑排序产生计划</li>
</ul></li>
<li><p>AOE网</p>
<ul>
<li><p>顶点表示事件，弧表示活动，权表示活动时间</p></li>
<li><p>只有一个源点和汇点</p></li>
<li><p>关键路径（最长路径）包括的活动叫关键活动</p></li>
<li><p>活动最早开始时间e（最长路径，max{前一个活动+弧长}），最晚开始时间l，活动余量l-e，关键活动l-e=0</p>
<p>最早发生时间顺推max最迟逆推min</p></li>
<li><p>按拓扑排序计算</p></li>
</ul></li>
</ul>
<h3 id="最短路径">最短路径</h3>
<ul>
<li>dijkstra路径长度递增法 O(n<sup>2</sup>) 类似prim算法</li>
<li>floyd算法O(n<sup>3</sup>)</li>
</ul>
<h2 id="第九章-查找">第九章 查找</h2>
<p>静态查找表，动态查找表（可以增加删除）</p>
<p>ASL平均查找长度</p>
<p>动态查找表：表结构在查找过程中动态生成。eg二叉排序树，哈希表</p>
<h3 id="顺序表查找数组">顺序表查找（数组）</h3>
<p>哨兵技术：（消除越界判定的开销）把给定查找的元素放在第一个，然后从最后一个开始往前查找，从而保证不会越界</p>
<p>ASL=(n+1)/2</p>
<p>O(n)</p>
<h3 id="折半查找法">折半查找法</h3>
<p>有序顺序表（递增）</p>
<p>low mid high</p>
<ul>
<li><p>判定low&lt;=high</p>
<p>mid=[(low+high)/2]</p>
<p>左边查找：low不变，high=mid-1</p>
<p>右边查找：high不变，low=mid+1</p></li>
</ul>
<p>判定树：描述折半查找过程的二叉树，对于某一个节点N，从根节点到N的路径上包含的所有节点，实际上对应于在查找节点N时查找过的所有元素，查找次数=树的层数</p>
<p>O(log(n))</p>
<p>asl=1*1+2*2+3*4+4*8+5*...</p>
<h3 id="分块查找法">分块查找法</h3>
<p>分成很多块，块与块之间有序，块内无序；于是先折半查找，再顺序查找；需要借助索引表（包括每一个块的起始位置和最大值）</p>
<p>ASL'blk=(b+1)/2+(s+1)/2=(s2+2s+n)/(2s)</p>
<p>s=√n效率最高</p>
<h3 id="二叉排序树查找法">二叉排序树查找法</h3>
<ul>
<li><p>二叉排序树T：</p>
<ul>
<li><p>T左子树所有节点值小于T根节点的值</p>
<p>T右子树所有节点值大于T根节点的值</p>
<p>T左右子树均为二叉排序树</p></li>
</ul>
<p>对二叉排序树进行中序遍历，输出为递增序列</p></li>
<li><p>向二叉排序树插入数据</p>
<p>相当于在查找失败时插入</p></li>
<li><p>向二叉排序树删除数据</p>
<p>根据删除节点的子树情况分四种讨论（这里删除的节点是双亲节点的左子树）</p>
<ul>
<li><p>左空右空：直接删除</p></li>
<li><p>左空右不空：将右子树接到双亲结点的左子树上</p></li>
<li><p>左不空右空：将左子树接到双亲结点的左子树上</p></li>
<li><p><font color=red>左不空右不空</font>：</p>
<p>P为删除节点，F为双亲结点，S为P最右边的没有右子树的节点</p>
<ul>
<li>法1 P的左子树接到F左，P右子树接到S右</li>
<li>法2 S代替P，S左子树代替原来的S</li>
</ul></li>
</ul></li>
<li><p>平衡二叉树T（AVL树）：</p>
<p>T左右子树深度只差不超过1</p>
<p>T左右子树均为平衡二叉树</p></li>
<li><p>创建平衡二叉树</p>
<p>依次插入元素，如果不平衡了，对最小不平衡子树进行平衡化处理</p>
<ul>
<li>最小不平衡二叉树：以距离新插入节点最近的，平衡因子&gt;1的节点为根的子树</li>
</ul>
<p>根据市区平衡的插入位置分类</p>
<ul>
<li>LL：单向右旋，右旋右靠 <img src="http://img.blog.csdn.net/20170713212023464?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdGlhbnl1eGluZ3h1YW4=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述" /></li>
<li>RR：单向左旋<img src="http://img.blog.csdn.net/20170713213413602?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdGlhbnl1eGluZ3h1YW4=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述" /></li>
<li>LR：左旋右旋<img src="http://img.blog.csdn.net/20170713215031006?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdGlhbnl1eGluZ3h1YW4=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述" /></li>
<li>RL：右旋左旋<img src="http://img.blog.csdn.net/20170713214216909?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdGlhbnl1eGluZ3h1YW4=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述" /></li>
</ul>
<p>LL , LR ，RR ，RL其实已经为我们提供了最后哪个结点作为新的根指明了方向。如 LR 型最后的根结点为原来的根的左孩子的右孩子，RL 型最后的根结点为原来的根的右孩子的左孩子。只要记住这四种情况，可以很快地推导出所有的情况。</p>
<p>https://zhuanlan.zhihu.com/p/56066942</p>
<p>O(log(n))</p></li>
</ul>
<h3 id="哈希查找法散列">哈希查找法（散列）</h3>
<ul>
<li><p>哈希函数H(key)将key与在哈希表L中的存储位置对应起来</p></li>
<li><p>影响散列查找时间效率的主要因素：与散列表长和散列表中实际元素个数均相关asl=元素个数/哈希表长</p></li>
<li><p>构造哈希函数：</p>
<p>基本原则：均匀，避免冲突情况的过度集中，预期哈希查找的时间效率能达到最佳</p>
<p>常见方法：</p>
<ul>
<li><p>直接定址法</p>
<p>H(key)=a*key+b</p></li>
<li><p>数字分析法</p>
<p>事先分析关键字的每一位，从中选取若干随机位构成哈希地址</p></li>
<li><p>平方取中法</p>
<p>取关键字平方后中间若干位作为哈希地址</p></li>
<li><p>折叠法</p>
<p>将关键字分成位数相同的若干个段，将各段求和作为哈希地址</p></li>
<li><p>余数法</p>
<p>H(key)=key mod p (p&lt;=m) m为哈希表长，p为质数，或不含小于20质因数的合数</p></li>
</ul></li>
<li><p>解决冲突的方法</p>
<ul>
<li><p>开放地址法</p>
<p>在H(key)为起点，取一个增量di作为下一个探测的位置</p>
<p>即H<sub>i</sub>(key)=(H(key)+di) mod m m为哈希表长</p>
<p>di取法</p>
<ul>
<li>线性探测，di取1，2，3……m-1</li>
<li>二次探测，di=1<sup>2</sup>，-1<sup>2</sup>，2<sup>2</sup>，-2<sup>2</sup>……+-k<sup>2</sup> (k&lt;=m/2)</li>
<li>伪随机探测</li>
</ul></li>
<li><p>再哈希法</p>
<p>使用其他哈希函数RH计算关键字key的下一个地址直到不再发生冲突</p></li>
<li><p>链地址法</p>
<p>将关键字的同义词存储在各自的单链表中</p></li>
<li><p>公共溢出区法</p>
<p>当遇到冲突时，统一将所有同义词存储到“公共溢出区”</p></li>
</ul></li>
</ul>
<p>哈希的装填因子a=n/m n为关键字数，m为表长</p>
<h2 id="第十章-内部排序在内存中排序">第十章 内部排序（在内存中排序）</h2>
<h3 id="插入排序">插入排序</h3>
<h4 id="直接插入排序">直接插入排序</h4>
<p>不断插入新的元素使之有序，要确定位置，移动后面元素的位置</p>
<p>不断将要插入的元素放到一个额外存储空间内，使得这个元素的位置空出来，从后往前比较</p>
<ul>
<li><p>最好：正序：比较n-1次，移动0次</p></li>
<li><p>最坏：逆序：比较（2+3+4+n）移动（2+1）+（3+1）+++（n+1）</p></li>
<li><p>分类</p>
<ul>
<li><p>折半插入排序</p>
<p>顺序查找定位变为折半查找定位，比较次数变成nlogn，移动次数不变</p></li>
<li><p>2-路插入排序</p>
<p>需要辅助数组n</p>
<p>首尾视为循环，比较次数不变，平均移动次数减半</p></li>
<li><p>表插入排序</p>
<p>运用循环静态链表，不断修改指针域</p></li>
<li><p>希尔排序</p>
<p>不停分隔子序列，序列内部直接插入排序，最后整个排序</p>
<p>记第i步序列分成的组数为di，总趟数为m，则</p>
<ul>
<li>dm=1</li>
<li>i&lt;j, di&gt;dj</li>
<li>i&lt;j, i!=j, di,dj最大公约数为1</li>
</ul></li>
</ul></li>
</ul>
<h3 id="交换排序">交换排序</h3>
<h4 id="冒泡排序">冒泡排序</h4>
<p>走一趟就确定最后的一个元素</p>
<h4 id="快速排序">快速排序</h4>
<p>思想：low high，把low放到合适位置，并把以low划分为两个子表</p>
<p>low&lt;high时</p>
<p>​ 向左移动high，将首次遇到的小于L[low]的L[high]与L[low]交换</p>
<p>​ 向右移动low，将首次遇到的大于L[high]的L[low]与L[high]交换</p>
<p>形成了一棵二叉树，O(n)-O(logn)</p>
<p>辅助空间log(n)（递归啊）</p>
<h3 id="选择排序">选择排序</h3>
<p>选择最大元素与最后一个元素交换</p>
<h4 id="简单选择排序">简单选择排序</h4>
<p>顺序查找确定最大元素</p>
<h4 id="堆排序">堆排序</h4>
<ul>
<li><p>堆（大顶堆）：构建完全二叉树</p>
<p>a<sub>i</sub>&gt;=a<sub>2i</sub>, a<sub>i</sub>&gt;=a<sub>2i+1</sub></p></li>
<li><p>调整堆：树的左右子树都为堆，但是仅根不满足堆的条件，将其转化为堆</p>
<ul>
<li>思想：将树根与左右子树的最大值交换，重复上述步骤，直到为堆</li>
</ul></li>
<li><p>创建堆：从最大序号的非叶子节点开始逐步到根进行调整堆，时间复杂度n</p></li>
<li><p>堆排序算法：将L转化为大顶堆，将堆的根与最后一个叶子（L最后一个元素）交换，然后除最后一个叶子重复上述步骤，最后层序遍历得到递增序列</p></li>
<li><p>T&lt;O(nlogn)，空间复杂度O(1)</p></li>
</ul>
<h3 id="归并排序">归并排序</h3>
<ul>
<li>思想：先把L（n）看做有n个子表，然后相邻表合并，重复</li>
<li>分析：可以用二叉树表示，T&lt;O(nlogn), S=O(n)</li>
</ul>
<h3 id="基数排序法">基数排序法</h3>
<ul>
<li><p>多关键字排序</p>
<ul>
<li>MSD最主位优先排序，从前往后，需要分割序列</li>
<li>LSD最次位优先排序，从后往前，不需要分割，而且只能用稳定排序算法</li>
</ul></li>
<li><p>基数排序：将每一个位视作一单关键字，采用LSD排序（桶，队列）</p>
<ul>
<li>思想：入桶,出桶重复多边</li>
<li>T=2nd, S=基数*元素个数</li>
</ul></li>
<li><p>稳定排序：冒泡排序，插入排序，归并排序，基数排序，希尔排序</p></li>
<li><p>不稳定排序：选择排序，快速排序，堆排序</p></li>
<li><p>https://www.cnblogs.com/codingmylife/archive/2012/10/21/2732980.html</p></li>
<li><table>
<thead>
<tr class="header">
<th>排序方法</th>
<th>最好情况</th>
<th>平均时间</th>
<th>最坏情况</th>
<th>辅助存储</th>
<th>稳定性</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>简单排序</td>
<td>O(n)</td>
<td>O(n2)</td>
<td>O(n2)</td>
<td>O(1)</td>
<td>稳定*</td>
</tr>
<tr class="even">
<td>快速排序</td>
<td>O(nlgn )</td>
<td>O(nlgn)</td>
<td>O(n2)有序，变成冒泡排序</td>
<td>O(lgn)</td>
<td>不稳定</td>
</tr>
<tr class="odd">
<td>堆排序</td>
<td>O(nlgn )</td>
<td>O(nlgn )</td>
<td>O(nlgn)</td>
<td>O(1)</td>
<td>不稳定</td>
</tr>
<tr class="even">
<td>归并排序</td>
<td>O(nlgn )</td>
<td>O(nlgn )</td>
<td>O(nlgn)</td>
<td>O(n) n</td>
<td>稳定</td>
</tr>
<tr class="odd">
<td>基数排序</td>
<td>O(d(n+rd))</td>
<td>O(d(n+rd))</td>
<td>O(d(n+rd))</td>
<td>O(rd)</td>
<td>稳定</td>
</tr>
<tr class="even">
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr class="odd">
<td>简单选择</td>
<td>O(n2)</td>
<td>O(n2)</td>
<td>O(n2)</td>
<td>O(1)</td>
<td>不稳定*</td>
</tr>
<tr class="even">
<td>直接插入</td>
<td>O(n)正序，比较n-1，移动0</td>
<td>O(n2)</td>
<td>O(n2)逆序，比较i2-&gt;n求和，移动i3-&gt;n+1求和</td>
<td>O(1)哨兵</td>
<td>稳定</td>
</tr>
<tr class="odd">
<td>折半插入</td>
<td>O(nlgn )</td>
<td>O(nlgn )</td>
<td>O(nlgn)</td>
<td>O(1)</td>
<td>稳定</td>
</tr>
</tbody>
</table></li>
<li><p>有序表的合并</p>
<p>最好min{m,n}最坏n+m-1</p></li>
</ul>
]]></content>
      <categories>
        <category>cs</category>
      </categories>
      <tags>
        <tag>sup</tag>
        <tag>sub</tag>
        <tag>font</tag>
        <tag>images</tag>
        <tag>high</tag>
      </tags>
  </entry>
  <entry>
    <title>git</title>
    <url>/2019/11/937fda21d4e1.html</url>
    <content><![CDATA[<blockquote>
<p>git 简介和使用</p>
</blockquote>
<span id="more"></span>
<h2 id="git-命令">git 命令</h2>
<ul>
<li><p><code>git status (-s)</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vim CONTRIBUTING.md</span> </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git status</span> </span><br><span class="line">On branch master </span><br><span class="line">Changes to be committed:   </span><br><span class="line">		(use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</span><br><span class="line">    new file:   README     </span><br><span class="line">    modified:   CONTRIBUTING.md</span><br><span class="line">Changes not staged for commit:   </span><br><span class="line">(use &quot;git add &lt;file&gt;...&quot; to update what will be committed)   </span><br><span class="line">(use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line">    modified:   CONTRIBUTING.md</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p><code>git rm (--cached)</code></p></li>
<li><p><code>git config --global alias.last 'log -1 HEAD'</code></p></li>
</ul>
<h2 id="git-分支">git 分支</h2>
<ul>
<li><p>提交对象</p>
<p>首次提交</p>
<figure>
<img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gh2gnf7ccej31gg0rgn6i.jpg" alt="截屏2020-07-24 下午11.04.55" /><figcaption aria-hidden="true">截屏2020-07-24 下午11.04.55</figcaption>
</figure>
<p>以后的提交</p>
<figure>
<img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gh2go0zfo9j31cc0g0ai4.jpg" alt="截屏2020-07-24 下午11.05.31" /><figcaption aria-hidden="true">截屏2020-07-24 下午11.05.31</figcaption>
</figure></li>
<li><p>Git 的分支，其实本质上仅仅是指向提交对象的可变指针。</p></li>
<li><p><strong>HEAD</strong> 的特殊指针。在 Git 中，它是一个指针，指向当前所在的本地分支（译注：将 HEAD 想象为当前分支的别名）。</p></li>
</ul>
<figure>
<img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gh2h2mi8nrj31d20t278e.jpg" alt="截屏2020-07-24 下午11.19.33" /><figcaption aria-hidden="true">截屏2020-07-24 下午11.19.33</figcaption>
</figure>
<h3 id="合并">合并</h3>
<ul>
<li><p>fast-forward</p>
<figure>
<img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gh2hg1iq2ej31f00mcwi3.jpg" alt="截屏2020-07-24 下午11.32.26" /><figcaption aria-hidden="true">截屏2020-07-24 下午11.32.26</figcaption>
</figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout master</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git merge hotfix</span> </span><br><span class="line">Updating f42c576..3a0874c</span><br><span class="line">Fast-forward </span><br><span class="line">index.html | 2 ++ </span><br><span class="line">1 file changed, 2 insertions(+)</span><br></pre></td></tr></table></figure>
<p>直接指针右移, 没有需要解决的冲突</p></li>
<li><p>分支之间的合并</p></li>
</ul>
<figure>
<img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gh2hi4e4pqj31dw0iugqd.jpg" alt="截屏2020-07-24 下午11.34.27" /><figcaption aria-hidden="true">截屏2020-07-24 下午11.34.27</figcaption>
</figure>
<p>和之间将分支指针向前推进所不同的是，Git 将此次三方合并的结果做了一个新的快照并且自动创建一个新的提 交指向它。这个被称作一次合并提交，它的特别之处在于他有不止一个父提交。</p>
<figure>
<img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gh2hlh6lc1j31c40ekjti.jpg" alt="截屏2020-07-24 下午11.37.40" /><figcaption aria-hidden="true">截屏2020-07-24 下午11.37.40</figcaption>
</figure>
<h3 id="解决冲突">解决冲突</h3>
<p>如果你在两个不同的分支中，对<strong>同一个文件的同一个部分</strong>进行了不同的修 改，Git 就没法干净的合并它们。</p>
<figure>
<img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gh2hpueb36j30q20cmqid.jpg" alt="截屏2020-07-24 下午11.41.53" /><figcaption aria-hidden="true">截屏2020-07-24 下午11.41.53</figcaption>
</figure>
<figure>
<img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gh2htn2dnqj306i04omxm.jpg" alt="截屏2020-07-24 下午11.45.31" /><figcaption aria-hidden="true">截屏2020-07-24 下午11.45.31</figcaption>
</figure>
<p>在你解决了所有文件里的冲突之后，对每个文件使用 git add 命令来将其标记为冲突已解决。一旦暂存这 些原本有冲突的文件，Git 就会将它们标记为冲突已解决。</p>
<h3 id="远程分支">远程分支</h3>
<ul>
<li>git clone</li>
</ul>
<figure>
<img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gh2i5i6y9yj31650u0tgx.jpg" alt="截屏2020-07-24 下午11.56.55" /><figcaption aria-hidden="true">截屏2020-07-24 下午11.56.55</figcaption>
</figure>
<ul>
<li>git fetch</li>
</ul>
<figure>
<img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gh2i6jmqxmj315f0u07bt.jpg" alt="截屏2020-07-24 下午11.57.54" /><figcaption aria-hidden="true">截屏2020-07-24 下午11.57.54</figcaption>
</figure>
<ul>
<li><p>git pull = git fetch + git merge</p>
<figure>
<img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gh2lkjp3oqj31bk0s0wkh.jpg" alt="截屏2020-07-25 上午1.55.11" /><figcaption aria-hidden="true">截屏2020-07-25 上午1.55.11</figcaption>
</figure>
<p>git fetch, git merge</p></li>
</ul>
<figure>
<img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gh2ll5j1dhj31cw0km0xh.jpg" alt="截屏2020-07-25 上午1.55.46" /><figcaption aria-hidden="true">截屏2020-07-25 上午1.55.46</figcaption>
</figure>
<p>​ git push</p>
<p>​ <img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gh2lltvxjaj31aq0g4q7h.jpg" alt="截屏2020-07-25 上午1.56.21" /></p>
<p>​</p>
<ul>
<li><p>rebase</p>
<p>与 git merge 不同, 其实，还有一种方法：你可以提取在 C4 中引入的补丁和修改，然后在 C3 的基础上再应用一次。在 Git 中，这种 操作就叫做 变基。<strong>你可以使用 rebase 命令将提交到某一分支上的所有修改都移至另一分支上，就好像“重新 播放”一样。</strong></p>
<p>它的原理是首先找到这两个分支（即当前分支 experiment、变基操作的目标基底分支 master）的最近共同祖 先 C2，然后对比当前分支相对于该祖先的历次提交，提取相应的修改并存为临时文件，然后将当前分支指向目 标基底 C3, 最后以此将之前另存为临时文件的修改依序应用。</p>
<figure>
<img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gh2k75saijj31ds0e0jtx.jpg" alt="截屏2020-07-25 上午1.07.41" /><figcaption aria-hidden="true">截屏2020-07-25 上午1.07.41</figcaption>
</figure>
<p>变基使得提交历史更加整洁</p></li>
</ul>
<h2 id="git-工具">git 工具</h2>
<ul>
<li>git show SHA-1</li>
</ul>
<h2 id="git-内部原理">git 内部原理</h2>
<h3 id="git-基础">git 基础</h3>
<p><strong>工作区</strong></p>
<p>电脑里能看到的目录</p>
<p><strong>版本库</strong></p>
<p>.git</p>
<p>其中包含了 <strong>stage/index</strong> 暂存区, 即 git add 操作</p>
<figure>
<img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gha6tcriipj30rg0duaf6.jpg" alt="截屏2020-07-31 下午3.29.01" /><figcaption aria-hidden="true">截屏2020-07-31 下午3.29.01</figcaption>
</figure>
<h3 id="git-数据库">git 数据库</h3>
<p><strong>.git 文件</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ls -F1</span><br><span class="line">HEAD</span><br><span class="line">config*</span><br><span class="line">description</span><br><span class="line">hooks/</span><br><span class="line">info/</span><br><span class="line">objects/</span><br><span class="line">refs/</span><br></pre></td></tr></table></figure>
<p>description gitweb 程序使用, 无需关心</p>
<p>config 配置</p>
<p>info 包含一个全局性排除文件</p>
<p>hooks 包含客户端或服务端的钩子脚本</p>
<p>objects 存储所有数据内容</p>
<p>refs 存储指向数据(分支)的提交对象的指针</p>
<p>HEAD 只是目前被检出的分支</p>
<p>index 保存暂存区信息</p>
<p><strong>objects</strong></p>
<h3 id="数据对象">数据对象</h3>
<ul>
<li><p>git init 用于创建一个空的git仓库，或重置一个已存在的git仓库</p></li>
<li><p>git hash-object git底层命令，用于向Git数据库中写入数据</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> <span class="string">&quot;version 1&quot;</span> | git hash-object -w --stdin</span></span><br><span class="line"> 83baae61804e65cc73a7201a7252750c76066a30</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">find .git/objects/ -<span class="built_in">type</span> f</span></span><br><span class="line">.git/objects/83/baae61804e65cc73a7201a7252750c76066a30</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> <span class="string">&quot;version 1&quot;</span> &gt; file.txt</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git hash-object -w file.txt</span></span><br><span class="line">83baae61804e65cc73a7201a7252750c76066a30</span><br></pre></td></tr></table></figure></li>
<li><p>git cat-file git底层命令，用于查看Git数据库中数据</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git cat-file -p 83baa</span></span><br><span class="line">version 1</span><br></pre></td></tr></table></figure></li>
<li><p>问题:</p>
<p>第一，无法记录文件名的变化；</p>
<p>第二，无法记录文件夹的变化；</p>
<p>第三，记忆每一个版本对应的hash值无聊且乏味且不可能；</p>
<p>第四，无法得知文件的变更时序；</p>
<p>第五，缺少对每一次版本变化的说明。</p></li>
</ul>
<h3 id="树对象">树对象</h3>
<p>Git利用树对象（tree object）解决文件名保存的问题，树对象也能够将多个文件组织在一起。</p>
<ul>
<li>git update-index git底层命令，用于创建暂存区</li>
<li>git ls-files --stage git底层命令，用于查看暂存区内容</li>
<li>git write-tree git底层命令，用于将暂存区内容写入一个树对象</li>
</ul>
<p>前两个命令都是对暂存区操作, 第三个则会在 objects 里创建一个树对象</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">find .git/objects -<span class="built_in">type</span> f</span></span><br><span class="line">.git/objects/1f/7a7a472abf3dd9643fd615f6da379c4acb3e3a</span><br><span class="line">.git/objects/83/baae61804e65cc73a7201a7252750c76066a30</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git update-index --add file.txt</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">find .git/objects/ -<span class="built_in">type</span> f</span></span><br><span class="line">.git/objects/1f/7a7a472abf3dd9643fd615f6da379c4acb3e3a</span><br><span class="line">.git/objects/83/baae61804e65cc73a7201a7252750c76066a30</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git write-tree</span></span><br><span class="line">391a4e90ba882dbc9ea93855103f6b1fa6791cf6</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">find .git/objects/ -<span class="built_in">type</span> f</span></span><br><span class="line">.git/objects/39/1a4e90ba882dbc9ea93855103f6b1fa6791cf6</span><br><span class="line">.git/objects/1f/7a7a472abf3dd9643fd615f6da379c4acb3e3a</span><br><span class="line">.git/objects/83/baae61804e65cc73a7201a7252750c76066a30</span><br></pre></td></tr></table></figure>
<p>查看内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git cat-file -t 391a4e <span class="comment"># -t 类型</span></span></span><br><span class="line">tree</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git cat-file -p 391a4e <span class="comment"># -p 内容</span></span></span><br><span class="line">100644 blob 83baa...    file.txt  </span><br></pre></td></tr></table></figure>
<h3 id="commit-对象">commit 对象</h3>
<p>commit对象能够帮你记录什么时间，由什么人，因为什么原因提交了一个新的版本，这个新的版本的父版本又是谁。</p>
<ul>
<li>git commit-tree git 底层命令, 用来创建提交对象</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git write-tree</span></span><br><span class="line">cb0fbcc484a3376b3e70958a05be0299e57ab495</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit-tree cb0fbcc -m <span class="string">&quot;first commit&quot;</span></span></span><br><span class="line">7020a97c0e792f340e00e1bb8edcbafcc4dfb60f</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git cat-file 7020a97</span></span><br><span class="line">tree cb0fbcc484a3376b3e70958a05be0299e57ab495</span><br><span class="line">author john &lt;john@163.com&gt; 1537961478 +0800</span><br><span class="line">committer john &lt;john@163.com&gt; 1537961478 +0800</span><br><span class="line"></span><br><span class="line">first commit</span><br></pre></td></tr></table></figure>
<h2 id="git-工作原理">git 工作原理</h2>
<figure>
<img src="https://pic2.zhimg.com/80/v2-3bc9d5f2c49a713c776e69676d7d56c5_1440w.jpg" alt="img" /><figcaption aria-hidden="true">img</figcaption>
</figure>
<p>Workspace：工作区 Index / Stage：暂存区 Repository：仓库区（或本地仓库） Remote：远程仓库</p>
<h2 id="初次使用-git">初次使用 git</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name &quot;John Doe&quot;</span><br><span class="line">$ git config --global user.email johndoe@example.com</span><br></pre></td></tr></table></figure>
<p>git config 一个用来配置 git 的工具</p>
<p>--global 默认全局, 如果要针对特定 git 仓库修改, 不要使用 global</p>
<p>1.git 回退</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line"></span><br><span class="line">	modified:   readme.txt</span><br><span class="line"></span><br><span class="line">no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</span><br></pre></td></tr></table></figure>
<p>你可以发现，Git会告诉你，<code>git checkout -- file</code>可以丢弃工作区的修改：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git checkout -- readme.txt</span><br></pre></td></tr></table></figure>
<p>总之，就是让这个文件回到最近一次<code>git commit</code>或<code>git add</code>时的状态。</p>
<ol start="2" type="1">
<li>Git同样告诉我们，用命令<code>git reset HEAD &lt;file&gt;</code>可以把暂存区的修改撤销掉（unstage），重新放回工作区：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git reset HEAD readme.txt</span><br><span class="line">Unstaged changes after reset:</span><br><span class="line">M	readme.txt</span><br></pre></td></tr></table></figure>
<ol start="3" type="1">
<li><p>-u参数：关联本地分支和远程分支</p></li>
<li><p>git merge $branch_name 如果有冲突要手动解决(一般是两个分支有不同的提交内容)</p></li>
<li><p>git branch -d $branch_name 删除分支</p></li>
<li><p>git rm --cached $doc_name 删除文件（会影响到远程</p></li>
<li><p>git branch --set-upstream-to=origin/$name</p></li>
<li><p>git branch -vv 查看本地分支和远程分支的对应关系</p></li>
<li><p>git pull <远程主机名> <远程分支名>:<本地分支名></p></li>
<li><p>fatal: refusing to merge unrelated histories</p>
<p>--allow-unrelated-histories</p></li>
<li><p>CRLF和LF</p>
<p><a href="https://blog.csdn.net/ccfxue/article/details/52625806">参考网站</a></p>
<p>crlf：carriage return line feed回车换行</p>
<p>lf：line feed 换行</p>
<p>reason：</p>
<p>When you view changes in a file, Git handles line endings in its own way.Since you're collaborating on projects with Git and GitHub, Git mightproduce unexpected results if, for example, you're working on a Windows machine,and your collaborator has made a change in OS X.</p>
<p>CRLF-&gt;Windows-style</p>
<p>LF-&gt;Unix Style</p>
<p>CR-&gt;Mac Style</p>
<p>CRLF表示句尾使用回车换行两个字符(即我们常在Windows编程时使用""换行)</p>
<p>LF表示表示句尾，只使用换行.</p>
<p>CR表示只使用回车.</p></li>
</ol>
<h1 id="section"></h1>
]]></content>
      <categories>
        <category>program</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>commit</tag>
        <tag>txt</tag>
        <tag>objects</tag>
        <tag>file</tag>
      </tags>
  </entry>
  <entry>
    <title>cmake</title>
    <url>/2023/01/a8b2e588036a.html</url>
    <content><![CDATA[<blockquote>

</blockquote>
<span id="more"></span>
<h1 id="conan">conan</h1>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conan profile detect --force</span><br><span class="line"></span><br><span class="line">Found clang 15.0</span><br><span class="line"><span class="meta prompt_">clang&gt;</span><span class="language-bash">=8, using the major as version</span></span><br><span class="line">Detected profile:</span><br><span class="line">[settings]</span><br><span class="line">arch=x86_64</span><br><span class="line">build_type=Release</span><br><span class="line">compiler=clang</span><br><span class="line">compiler.cppstd=gnu14</span><br><span class="line">compiler.libcxx=libc++</span><br><span class="line">compiler.version=15</span><br><span class="line">os=Macos</span><br><span class="line"></span><br><span class="line">WARN: This profile is a guess of your environment, please check it.</span><br><span class="line">WARN: Defaulted to cppstd=&#x27;gnu17&#x27; for apple-clang.</span><br><span class="line">WARN: The output of this command is not guaranteed to be stable and can change in future Conan versions.</span><br><span class="line">WARN: Use your own profile files for stability.</span><br><span class="line">Saving detected profile to /Users/akunda/.conan2/profiles/default</span><br></pre></td></tr></table></figure>
<h1 id="常用命令">常用命令</h1>
<ul>
<li><p><strong>ADD_LIBRARY</strong></p>
<p>语法 : <code>ADD_LIBRARY(&lt;name&gt; [STATIC | SHARED | MODULE] [source1] [source2 ...])</code></p>
<p>根据源码文件生成目标库。</p>
<p><code>STATIC</code>,<code>SHARED</code> 或者 <code>MODULE</code> 可以指定要创建的库的类型。 STATIC库是链接其他目标时使用的目标文件的存档。 SHARED库是动态链接的，并在运行时加载</p></li>
<li><p>target_link_libraries 该指令的作用为将目标文件与库文件进行链接。该指令的语法如下：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">target_link_libraries</span>(&lt;<span class="keyword">target</span>&gt; [item1] [item2] [...]</span><br><span class="line">                      [[debug|optimized|general] &lt;item&gt;] ...)</span><br></pre></td></tr></table></figure></li>
</ul>
<p>​</p>
<h1 id="mac-vscode-cmake-llvm开发环境">mac vscode cmake llvm开发环境</h1>
<h2 id="包">包</h2>
<p><code>brew install cmake llvm ninja pkgconfig</code></p>
<h2 id="vs-插件">vs 插件</h2>
<p>cmake</p>
<p>cmake tools</p>
<p>codelldb(debug)</p>
<p>clangd</p>
<p>doxygen(快捷键产生注释)</p>
<h2 id="配置文件">配置文件</h2>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cmakelists.txt </span></span><br><span class="line"><span class="keyword">project</span>(hello_world) </span><br><span class="line"><span class="keyword">cmake_minimum_required</span> (VERSTON <span class="number">3.15</span>.<span class="number">0</span>)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD <span class="number">20</span>) </span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_EXTENSTONS <span class="keyword">OFF</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(<span class="variable">$&#123;CMAKE_PROJECT_NAME&#125;</span> hello.cpp)</span><br><span class="line"></span><br><span class="line"><span class="keyword">find_package</span>(fmt REQUIRED)</span><br><span class="line"></span><br><span class="line"><span class="keyword">target_link_libraries</span>(</span><br><span class="line"><span class="variable">$&#123;CMAKE_PROJECT_NAME&#125;</span> PRIVATE</span><br><span class="line">fmt::fmt</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">//.vscode/launch.json</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span><span class="string">&quot;0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line"> <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">   <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;lldb&quot;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span> </span><br><span class="line">   <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Debug&quot;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;command:cmake.LaunchTargetPath&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;internalConsoleOptions&quot;</span><span class="punctuation">:</span> <span class="string">&quot;neveropen&quot;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;console&quot;</span><span class="punctuation">:</span> <span class="string">&quot;integratedTerminal&quot;</span></span><br><span class="line"> <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// build/compile_commands.json</span><br><span class="line">// clang 实际执行编译指令</span><br><span class="line">//settings-&gt;clangd settings-&gt;arguments</span><br><span class="line">//clangd -help</span><br><span class="line"></span><br><span class="line">//.clang-tidty是配置 clang-tidy 的文件</span><br><span class="line">--compile-commands-dir=$(workspaceFolder&#125;/build</span><br><span class="line">--header-insertion=iwyu</span><br><span class="line">--background-index</span><br><span class="line">--clang-tidy</span><br><span class="line">--pch-storage=memory </span><br><span class="line">-j=12</span><br><span class="line">--pretty </span><br></pre></td></tr></table></figure>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># .clang-format</span></span><br><span class="line"><span class="attr">BasedOnStyle:</span> <span class="string">LLVM</span></span><br><span class="line"><span class="attr">UseTab:</span> <span class="string">Never</span></span><br><span class="line"><span class="attr">IndentWidth:</span> <span class="number">4</span></span><br><span class="line"><span class="attr">DerivePointerAlignment:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">PointerAlignment:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">AlwaysBreakAfterReturnType:</span> <span class="string">None</span></span><br><span class="line"><span class="attr">AlwaysBreakTemplateDeclarations:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">AlwaysBreakBeforeMultilineStrings:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">AlignOperands:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">AlignAfterOpenBracket:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">AlignConsecutiveBitFields:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">AlignConsecutiveMacros:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">ConstructorInitializerAllOnOneLineOrOnePerLine:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">AllowAllConstructorInitializersOnNextLine:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">BinPackArguments:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">BinPackParameters:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">IncludeBlocks:</span> <span class="string">Regroup</span></span><br></pre></td></tr></table></figure>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Users &gt; akunda &gt; Library &gt; Application Support &gt; Code &gt; User &gt; snippets &gt; &#123;&#125; cpp.json</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;Main&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span> </span><br><span class="line">    <span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;main&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;int main(int argc, char* argc[]) &#123;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;    $1&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;    return 0;&quot;</span></span><br><span class="line">      <span class="string">&quot;&#125;&quot;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Main function&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>CMake：编辑用户本地 CMake 工具包 CMake: Edit User-Local CMake Kits</p>
<p>cmake-tools-kits.json</p>
<h2 id="流程">流程</h2>
<p><code>cmake config</code> choose toolchain</p>
<p><code>build</code></p>
<h1 id="多层目录">多层目录</h1>
<p>主 cmakelists</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.20</span>)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD <span class="number">20</span>)</span><br><span class="line"><span class="comment"># Set the project name</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_EXPORT_COMPILE_COMMANDS <span class="keyword">ON</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">message</span>(STATUS <span class="string">&quot;Build in main folder&quot;</span>)</span><br><span class="line"><span class="keyword">project</span> (project_temp</span><br><span class="line">    LANGUAGES C CXX</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(src_directory <span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/src)</span><br><span class="line"><span class="keyword">set</span>(test_directory <span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/<span class="keyword">test</span>)</span><br><span class="line"><span class="keyword">set</span>(tool_directory <span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/tool)</span><br><span class="line"><span class="keyword">set</span>(build_directory <span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/build)</span><br><span class="line"><span class="keyword">set</span>(lib_directory <span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/lib)</span><br><span class="line"></span><br><span class="line"><span class="keyword">include_directories</span>(<span class="string">&quot;$&#123;src_directory&#125;/module&quot;</span> <span class="string">&quot;$&#123;src_directory&#125;/tinyxml2&quot;</span>) </span><br><span class="line"><span class="keyword">add_subdirectory</span>(<span class="variable">$&#123;src_directory&#125;</span>/module)       <span class="comment"># 包含下级子目录math</span></span><br><span class="line"><span class="keyword">add_subdirectory</span>(<span class="variable">$&#123;src_directory&#125;</span>/tinyxml2)     <span class="comment"># 在 subdir 中寻找 cmakelists</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#link_libraries(&quot;$&#123;lib_directory&#125;/libmodule.dylib&quot; &quot;$&#123;lib_directory&#125;/libtinyxml2.dylib&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Add an executable</span></span><br><span class="line"><span class="keyword">add_executable</span>(<span class="variable">$&#123;CMAKE_PROJECT_NAME&#125;</span></span><br><span class="line"><span class="variable">$&#123;src_directory&#125;</span>/main.cpp</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">############################################################</span></span><br><span class="line"><span class="comment"># Create a library</span></span><br><span class="line"><span class="comment">############################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Generate the static library from the library sources</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">add_library</span>(module_library STATIC </span><br><span class="line">    <span class="variable">$&#123;src_directory&#125;</span>/module/module.cpp</span><br><span class="line">    <span class="variable">$&#123;src_directory&#125;</span>/module/module.h</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_library</span>(tinyxml2_library STATIC </span><br><span class="line">    <span class="variable">$&#123;src_directory&#125;</span>/tinyxml2/tinyxml2.cpp</span><br><span class="line">    <span class="variable">$&#123;src_directory&#125;</span>/tinyxml2/tinyxml2.h</span><br><span class="line">)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(</span><br><span class="line">    <span class="variable">$&#123;CMAKE_PROJECT_NAME&#125;</span>    </span><br><span class="line">    module_library</span><br><span class="line">    tinyxml2_library</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>动态库 cmakelists</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># set_property(TARGET translator_grammar PROPERTY CXX_STANDARD 17)</span></span><br><span class="line"><span class="comment"># target_link_libraries(translator_grammar PRIVATE diagon_base)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">message</span>(STATUS <span class="string">&quot;Enter tinyxml2 folder&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(MODULE_NAME tinyxml2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">aux_source_directory</span>(. MODULE_SOURCE)  </span><br><span class="line"></span><br><span class="line"><span class="keyword">add_library</span>(<span class="variable">$&#123;MODULE_NAME&#125;</span> SHARED <span class="variable">$&#123;MODULE_SOURCE&#125;</span>)</span><br></pre></td></tr></table></figure>
<h1 id="a-intro">A intro</h1>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set the project name</span></span><br><span class="line"><span class="keyword">project</span> (hello_cmake)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Add an executable</span></span><br><span class="line"><span class="keyword">add_executable</span>(hello_cmake main.cpp)</span><br><span class="line"></span><br><span class="line"><span class="comment">## add_executable($&#123;PROJECT_NAME&#125; main.cpp)</span></span><br></pre></td></tr></table></figure>
<p>The +add_executable()+ command specifies that an executable should be build from the specified source files</p>
<p>The root or top level folder that you run the cmake command from is known as your <strong>CMAKE_BINARY_DIR</strong> and is the root folder for all your binary files.</p>
<p>Out-of-Source Build</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir build</span><br><span class="line">cd build</span><br><span class="line">cmake ..</span><br><span class="line">make .</span><br><span class="line">./hello_cmake</span><br></pre></td></tr></table></figure>
<h1 id="b-header">B header</h1>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set the project name</span></span><br><span class="line"><span class="keyword">project</span> (hello_headers)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create a sources variable with a link to all cpp files to compile</span></span><br><span class="line"><span class="keyword">set</span>(SOURCES</span><br><span class="line">    src/Hello.cpp</span><br><span class="line">    src/main.cpp</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Add an executable with the above sources</span></span><br><span class="line"><span class="keyword">add_executable</span>(hello_headers <span class="variable">$&#123;SOURCES&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set the directories that should be included in the build command for this target</span></span><br><span class="line"><span class="comment"># when running g++ these will be included as -I/directory/path/</span></span><br><span class="line"><span class="keyword">target_include_directories</span>(hello_headers</span><br><span class="line">    PRIVATE </span><br><span class="line">        <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/<span class="keyword">include</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h2 id="cmake-variables">cmake variables</h2>
<p>|CMAKE_SOURCE_DIR |The root source directory</p>
<p>|<strong>CMAKE_CURRENT_SOURCE_DIR</strong> |The current source directory if using sub-projects and directories.</p>
<p>|<strong>PROJECT_SOURCE_DIR</strong> |The source directory of the current cmake project.</p>
<p>|<strong>CMAKE_BINARY_DIR</strong> |The root binary / build directory. This is the directory where you ran the cmake command.</p>
<p>|CMAKE_CURRENT_BINARY_DIR |The build directory you are currently in.</p>
<p>|PROJECT_BINARY_DIR |The build directory for the current project.</p>
<p>The base install location is controlled by the variable <strong>CMAKE_INSTALL_PREFIX</strong></p>
<p>In the previous examples, when running the make command the output only shows the status of the build. To see the full output for debugging purposes you can add +VERBOSE=1+ flag when running make.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make clean</span><br><span class="line">make VERBOSE=1</span><br></pre></td></tr></table></figure>
<h1 id="c-static-library">C static library</h1>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span>(hello_library)</span><br><span class="line"></span><br><span class="line"><span class="comment">############################################################</span></span><br><span class="line"><span class="comment"># Create a library</span></span><br><span class="line"><span class="comment">############################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Generate the static library from the library sources</span></span><br><span class="line"><span class="keyword">add_library</span>(hello_library STATIC </span><br><span class="line">    src/Hello.cpp</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">target_include_directories</span>(hello_library</span><br><span class="line">    PUBLIC </span><br><span class="line">        <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/<span class="keyword">include</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">############################################################</span></span><br><span class="line"><span class="comment"># Create an executable</span></span><br><span class="line"><span class="comment">############################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Add an executable with the above sources</span></span><br><span class="line"><span class="keyword">add_executable</span>(hello_binary </span><br><span class="line">    src/main.cpp</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># link the new hello_library target with the hello_binary target</span></span><br><span class="line"><span class="keyword">target_link_libraries</span>( hello_binary</span><br><span class="line">    PRIVATE </span><br><span class="line">        hello_library</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>This will cause the included directory used in the following places:</p>
<ul>
<li>When compiling the library</li>
<li>When compiling any additional target that links the library.</li>
</ul>
<p>The meaning of scopes are:</p>
<ul>
<li>+PRIVATE+ - the directory is added to this target's include directories</li>
<li>+INTERFACE+ - the directory is added to the include directories for any targets that link this library.</li>
<li>+PUBLIC+ - As above, it is included in this library and also any targets that link this library.</li>
</ul>
<h1 id="d-shared-library">D shared library</h1>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span>(hello_library)</span><br><span class="line"></span><br><span class="line"><span class="comment">############################################################</span></span><br><span class="line"><span class="comment"># Create a library</span></span><br><span class="line"><span class="comment">############################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Generate the shared library from the library sources</span></span><br><span class="line"><span class="keyword">add_library</span>(hello_library SHARED </span><br><span class="line">    src/Hello.cpp</span><br><span class="line">)</span><br><span class="line"><span class="comment">#As shown below, this allows you to reference the target using the alias name when linking it against other targets.</span></span><br><span class="line"><span class="keyword">add_library</span>(hello::library ALIAS hello_library)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">target_include_directories</span>(hello_library</span><br><span class="line">    PUBLIC </span><br><span class="line">        <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/<span class="keyword">include</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">############################################################</span></span><br><span class="line"><span class="comment"># Create an executable</span></span><br><span class="line"><span class="comment">############################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Add an executable with the above sources</span></span><br><span class="line"><span class="keyword">add_executable</span>(hello_binary</span><br><span class="line">    src/main.cpp</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># link the new hello_library target with the hello_binary target</span></span><br><span class="line"><span class="keyword">target_link_libraries</span>( hello_binary</span><br><span class="line">    PRIVATE </span><br><span class="line">        hello::library</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p><strong>Static Libraries:</strong> A <a href="https://www.geeksforgeeks.org/static-vs-dynamic-libraries/">Static library</a> or statically-linked library is a set of routines, external functions and variables which are resolved in a caller at compile-time and copied into a target application by a compiler, linker, or binder, producing an object file and a stand-alone executable. This executable and the process of compiling it are both known as a static build of the program. Historically, libraries could only be static. They are usually faster than the shared libraries because a set of commonly used object files is put into a single library executable file. One can build multiple executables without the need to recompile the file. Because it is a single file to be built, use of link commands are simpler than shared library link commands, because you specify the name of the static library.</p>
<p><strong>Shared Libraries:</strong> <a href="https://www.geeksforgeeks.org/working-with-shared-libraries-set-1/">Shared libraries</a> are .so (or in Windows .dll, or in OS X .dylib) files. These are linked dynamically simply including the address of the library (whereas static linking is a waste of space). Dynamic linking links the libraries at the run-time. Thus, all the functions are in a special place in memory space, and every program can access them, without having multiple copies of them.</p>
<h1 id="e-installation">E installation</h1>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span>(cmake_examples_install)</span><br><span class="line"></span><br><span class="line"><span class="comment">############################################################</span></span><br><span class="line"><span class="comment"># Create a library</span></span><br><span class="line"><span class="comment">############################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Generate the shared library from the library sources</span></span><br><span class="line"><span class="keyword">add_library</span>(cmake_examples_inst SHARED</span><br><span class="line">    src/Hello.cpp</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">target_include_directories</span>(cmake_examples_inst</span><br><span class="line">    PUBLIC </span><br><span class="line">        <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/<span class="keyword">include</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">############################################################</span></span><br><span class="line"><span class="comment"># Create an executable</span></span><br><span class="line"><span class="comment">############################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Add an executable with the above sources</span></span><br><span class="line"><span class="keyword">add_executable</span>(cmake_examples_inst_bin</span><br><span class="line">    src/main.cpp</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># link the new hello_library target with the hello_binary target</span></span><br><span class="line"><span class="keyword">target_link_libraries</span>( cmake_examples_inst_bin</span><br><span class="line">    PRIVATE </span><br><span class="line">        cmake_examples_inst</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">############################################################</span></span><br><span class="line"><span class="comment"># Install</span></span><br><span class="line"><span class="comment">############################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Binaries</span></span><br><span class="line"><span class="comment"># Install the binary generated from the target cmake_examples_inst_bin target to the destination $&#123;CMAKE_INSTALL_PREFIX&#125;/bin</span></span><br><span class="line"><span class="keyword">install</span> (TARGETS cmake_examples_inst_bin</span><br><span class="line">    DESTINATION bin)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Library</span></span><br><span class="line"><span class="comment"># Install the shared library generated from the target cmake_examples_inst target to the destination $&#123;CMAKE_INSTALL_PREFIX&#125;/lib</span></span><br><span class="line"><span class="keyword">install</span> (TARGETS cmake_examples_inst</span><br><span class="line">    LIBRARY DESTINATION lib)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Header files</span></span><br><span class="line"><span class="comment"># Install the header files for developing against the cmake_examples_inst library into the $&#123;CMAKE_INSTALL_PREFIX&#125;/include directory.</span></span><br><span class="line"><span class="keyword">install</span>(DIRECTORY <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/<span class="keyword">include</span>/ </span><br><span class="line">    DESTINATION <span class="keyword">include</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Config</span></span><br><span class="line"><span class="comment"># Install a configuration file to the destination $&#123;CMAKE_INSTALL_PREFIX&#125;/etc</span></span><br><span class="line"><span class="keyword">install</span> (FILES cmake-examples.conf</span><br><span class="line">    DESTINATION etc)</span><br></pre></td></tr></table></figure>
<p><code>make install</code>会把文件装到/usr/local/xxx 中</p>
<p>to uninstall</p>
<p><code>sudo xargs rm &lt; install_manifest.txt</code></p>
<h1 id="f-build-type">F build type</h1>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set a default build type if none was specified</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">NOT</span> CMAKE_BUILD_TYPE <span class="keyword">AND</span> <span class="keyword">NOT</span> CMAKE_CONFIGURATION_TYPES)</span><br><span class="line">  <span class="keyword">message</span>(<span class="string">&quot;Setting build type to &#x27;RelWithDebInfo&#x27; as none was specified.&quot;</span>)</span><br><span class="line">  <span class="keyword">set</span>(CMAKE_BUILD_TYPE RelWithDebInfo CACHE <span class="keyword">STRING</span> <span class="string">&quot;Choose the type of build.&quot;</span> FORCE)</span><br><span class="line">  <span class="comment"># Set the possible values of build type for cmake-gui</span></span><br><span class="line">  <span class="keyword">set_property</span>(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS <span class="string">&quot;Debug&quot;</span> <span class="string">&quot;Release&quot;</span></span><br><span class="line">    <span class="string">&quot;MinSizeRel&quot;</span> <span class="string">&quot;RelWithDebInfo&quot;</span>)</span><br><span class="line"><span class="keyword">endif</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set the project name</span></span><br><span class="line"><span class="keyword">project</span> (build_type)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Add an executable</span></span><br><span class="line"><span class="keyword">add_executable</span>(cmake_examples_build_type main.cpp)</span><br></pre></td></tr></table></figure>
<p>cmake gui 本电脑装在 qt 内</p>
<h1 id="g-compile-flags">G compile flags</h1>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set a default C++ compile flag</span></span><br><span class="line"><span class="comment"># To set additional default compile flags you can add the following to your top level CMakeLists.txt</span></span><br><span class="line"><span class="keyword">set</span> (CMAKE_CXX_FLAGS <span class="string">&quot;$&#123;CMAKE_CXX_FLAGS&#125; -DEX2&quot;</span> CACHE <span class="keyword">STRING</span> <span class="string">&quot;Set C++ Compiler Flags&quot;</span> FORCE)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set the project name</span></span><br><span class="line"><span class="keyword">project</span> (compile_flags)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Add an executable</span></span><br><span class="line"><span class="keyword">add_executable</span>(cmake_examples_compile_flags main.cpp)</span><br><span class="line"></span><br><span class="line"><span class="comment"># compile flag</span></span><br><span class="line"><span class="keyword">target_compile_definitions</span>(cmake_examples_compile_flags </span><br><span class="line">    PRIVATE EX3</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h1 id="h-third-party-lib">H third party lib</h1>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set the project name</span></span><br><span class="line"><span class="keyword">project</span> (third_party_include)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># find a boost install with the libraries filesystem and system</span></span><br><span class="line"><span class="comment"># Boost - Name of the library. This is part of used to find the module file FindBoost.cmake</span></span><br><span class="line"><span class="comment"># 1.46.1 - The minimum version of boost to find</span></span><br><span class="line"><span class="comment"># REQUIRED - Tells the module that this is required and to fail if it cannot be found</span></span><br><span class="line"><span class="comment"># COMPONENTS - The list of components to find in the library.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">find_package</span>(Boost <span class="number">1.46</span>.<span class="number">1</span> REQUIRED COMPONENTS filesystem system)</span><br><span class="line"></span><br><span class="line"><span class="comment"># check if boost was found</span></span><br><span class="line"><span class="keyword">if</span>(Boost_FOUND)</span><br><span class="line">    <span class="keyword">message</span> (<span class="string">&quot;boost found&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>()</span><br><span class="line">    <span class="keyword">message</span> (FATAL_ERROR <span class="string">&quot;Cannot find Boost&quot;</span>)</span><br><span class="line"><span class="keyword">endif</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Add an executable</span></span><br><span class="line"><span class="keyword">add_executable</span>(third_party_include main.cpp)</span><br><span class="line"></span><br><span class="line"><span class="comment"># link against the boost libraries</span></span><br><span class="line"><span class="keyword">target_link_libraries</span>( third_party_include</span><br><span class="line">    PRIVATE</span><br><span class="line">        Boost::filesystem</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>This will search for CMake modules in the format "FindXXX.cmake" from the list of folders in <code>CMAKE_MODULE_PATH</code>. On linux the default search path will include <code>/usr/share/cmake/Modules</code>.</p>
<p>一些变量是 package specific, 需要查看FindXXX.cmake</p>
<h1 id="i-compile-with-clang">I compile with clang</h1>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Set the minimum version of CMake that can be used</span></span><br><span class="line"><span class="comment"># To find the cmake version run</span></span><br><span class="line"><span class="comment"># $ cmake --version</span></span><br><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set the project name</span></span><br><span class="line"><span class="keyword">project</span> (hello_cmake)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Add an executable</span></span><br><span class="line"><span class="keyword">add_executable</span>(hello_cmake main.cpp)</span><br></pre></td></tr></table></figure>
<ul>
<li>CMAKE_C_COMPILER - The program used to compile c code.</li>
<li>CMAKE_CXX_COMPILER - The program used to compile c++ code.</li>
<li>CMAKE_LINKER - The program used to link your binary.</li>
</ul>
<p><code>cmake .. -DCMAKE_C_COMPILER=clang-3.6 -DCMAKE_CXX_COMPILER=clang++-3.6</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cmake .. -DCMAKE_C_COMPILER=/opt/local/bin/clang -DCMAKE_CXX_COMPILER=/opt/local/bin/clang++</span><br></pre></td></tr></table></figure>
<h1 id="j-ninja">J ninja</h1>
<p><code>cmake .. -G Ninja</code></p>
<h1 id="k-import-target">K import target</h1>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set the project name</span></span><br><span class="line"><span class="keyword">project</span> (imported_targets)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># find a boost install with the libraries filesystem and system</span></span><br><span class="line"><span class="keyword">find_package</span>(Boost <span class="number">1.46</span>.<span class="number">1</span> REQUIRED COMPONENTS filesystem system)</span><br><span class="line"></span><br><span class="line"><span class="comment"># check if boost was found</span></span><br><span class="line"><span class="keyword">if</span>(Boost_FOUND)</span><br><span class="line">    <span class="keyword">message</span> (<span class="string">&quot;boost found&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>()</span><br><span class="line">    <span class="keyword">message</span> (FATAL_ERROR <span class="string">&quot;Cannot find Boost&quot;</span>)</span><br><span class="line"><span class="keyword">endif</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Add an executable</span></span><br><span class="line"><span class="keyword">add_executable</span>(imported_targets main.cpp)</span><br><span class="line"></span><br><span class="line"><span class="comment"># link against the boost libraries</span></span><br><span class="line"><span class="keyword">target_link_libraries</span>( imported_targets</span><br><span class="line">    PRIVATE</span><br><span class="line">        Boost::filesystem</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h1 id="l-cpp-standard">L cpp standard</h1>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">2.8</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set the project name</span></span><br><span class="line"><span class="keyword">project</span> (hello_cpp11)</span><br><span class="line"></span><br><span class="line"><span class="comment"># try conditional compilation</span></span><br><span class="line"><span class="keyword">include</span>(CheckCXXCompilerFlag)</span><br><span class="line"><span class="comment"># The line include(CheckCXXCompilerFlag) tells CMake to include this function to make it available for use.</span></span><br><span class="line">CHECK_CXX_COMPILER_FLAG(<span class="string">&quot;-std=c++11&quot;</span> COMPILER_SUPPORTS_CXX11)</span><br><span class="line">CHECK_CXX_COMPILER_FLAG(<span class="string">&quot;-std=c++0x&quot;</span> COMPILER_SUPPORTS_CXX0X)</span><br><span class="line"></span><br><span class="line"><span class="comment"># check results and add flag</span></span><br><span class="line"><span class="keyword">if</span>(COMPILER_SUPPORTS_CXX11)<span class="comment">#</span></span><br><span class="line">    <span class="keyword">set</span>(CMAKE_CXX_FLAGS <span class="string">&quot;$&#123;CMAKE_CXX_FLAGS&#125; -std=c++11&quot;</span>)</span><br><span class="line"><span class="keyword">elseif</span>(COMPILER_SUPPORTS_CXX0X)<span class="comment">#</span></span><br><span class="line">    <span class="keyword">set</span>(CMAKE_CXX_FLAGS <span class="string">&quot;$&#123;CMAKE_CXX_FLAGS&#125; -std=c++0x&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>()</span><br><span class="line">    <span class="keyword">message</span>(STATUS <span class="string">&quot;The compiler $&#123;CMAKE_CXX_COMPILER&#125; has no C++11 support. Please use a different C++ compiler.&quot;</span>)</span><br><span class="line"><span class="keyword">endif</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Add an executable</span></span><br><span class="line"><span class="keyword">add_executable</span>(hello_cpp11 main.cpp)</span><br></pre></td></tr></table></figure>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set the project name</span></span><br><span class="line"><span class="keyword">project</span> (hello_cpp11)</span><br><span class="line"></span><br><span class="line"><span class="comment"># set the C++ standard to C++ 11</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD <span class="number">11</span>)</span><br><span class="line"><span class="comment"># Setting the CMAKE_CXX_STANDARD variable causes the CXX_STANDARD property on all targets. This causes CMake to set the appropriate flag at compille time.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Add an executable</span></span><br><span class="line"><span class="keyword">add_executable</span>(hello_cpp11 main.cpp)</span><br></pre></td></tr></table></figure>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set the project name</span></span><br><span class="line"><span class="keyword">project</span> (hello_cpp11)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Add an executable</span></span><br><span class="line"><span class="keyword">add_executable</span>(hello_cpp11 main.cpp)</span><br><span class="line"></span><br><span class="line"><span class="comment"># set the C++ standard to the appropriate standard for using auto</span></span><br><span class="line"><span class="keyword">target_compile_features</span>(hello_cpp11 PUBLIC cxx_auto_type)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Print the list of known compile features for this version of CMake</span></span><br><span class="line"><span class="keyword">message</span>(<span class="string">&quot;List of compile features: $&#123;CMAKE_CXX_COMPILE_FEATURES&#125;&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>As with other <code>target_*</code> functions, you can specify the scope of the feature for the selected target. This populates the <a href="https://cmake.org/cmake/help/v3.1/prop_tgt/INTERFACE_COMPILE_FEATURES.html#prop_tgt:INTERFACE_COMPILE_FEATURES">INTERFACE_COMPILE_FEATURES</a> property for the target.</p>
<p>The list of available features can be found from the <a href="https://cmake.org/cmake/help/v3.1/variable/CMAKE_CXX_COMPILE_FEATURES.html#variable:CMAKE_CXX_COMPILE_FEATURES">CMAKE_CXX_COMPILE_FEATURES</a> variable. You can obtain a list of the available features using the following code:</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">message</span>(<span class="string">&quot;List of compile features: $&#123;CMAKE_CXX_COMPILE_FEATURES&#125;&quot;</span>)</span><br></pre></td></tr></table></figure>
<h1 id="library">library</h1>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span> (VERSION <span class="number">3.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span>(subprojects)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Add sub directories</span></span><br><span class="line"><span class="keyword">add_subdirectory</span>(sublibrary1)</span><br><span class="line"><span class="keyword">add_subdirectory</span>(sublibrary2)</span><br><span class="line"><span class="keyword">add_subdirectory</span>(subbinary)</span><br><span class="line"></span><br><span class="line"><span class="comment">############################# subbinary</span></span><br><span class="line"><span class="keyword">project</span>(subbinary)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create the executable</span></span><br><span class="line"><span class="keyword">add_executable</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> main.cpp)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Link the static library from subproject1 using its alias sub::lib1</span></span><br><span class="line"><span class="comment"># Link the header only library from subproject2 using its alias sub::lib2</span></span><br><span class="line"><span class="comment"># This will cause the include directories for that target to be added to this project</span></span><br><span class="line"><span class="keyword">target_link_libraries</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span></span><br><span class="line">    sub::lib1</span><br><span class="line">    sub::lib2</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">############################# sublibrary1</span></span><br><span class="line"><span class="comment"># Set the project name</span></span><br><span class="line"><span class="keyword">project</span> (sublibrary1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Add a library with the above sources</span></span><br><span class="line"><span class="keyword">add_library</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> src/sublib1.cpp)</span><br><span class="line"><span class="keyword">add_library</span>(sub::lib1 ALIAS <span class="variable">$&#123;PROJECT_NAME&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">target_include_directories</span>( <span class="variable">$&#123;PROJECT_NAME&#125;</span></span><br><span class="line">    PUBLIC <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/<span class="keyword">include</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">############################# sublibrary2</span></span><br><span class="line"><span class="comment"># Set the project name</span></span><br><span class="line"><span class="keyword">project</span> (sublibrary2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_library</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> INTERFACE)</span><br><span class="line"><span class="keyword">add_library</span>(sub::lib2 ALIAS <span class="variable">$&#123;PROJECT_NAME&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">target_include_directories</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span></span><br><span class="line">    INTERFACE</span><br><span class="line">        <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/<span class="keyword">include</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tree</span><br><span class="line">.</span><br><span class="line">├── CMakeLists.txt</span><br><span class="line">├── subbinary</span><br><span class="line">│   ├── CMakeLists.txt</span><br><span class="line">│   └── main.cpp</span><br><span class="line">├── sublibrary1</span><br><span class="line">│   ├── CMakeLists.txt</span><br><span class="line">│   ├── include</span><br><span class="line">│   │   └── sublib1</span><br><span class="line">│   │       └── sublib1.h</span><br><span class="line">│   └── src</span><br><span class="line">│       └── sublib1.cpp</span><br><span class="line">└── sublibrary2</span><br><span class="line">    ├── CMakeLists.txt</span><br><span class="line">    └── include</span><br><span class="line">        └── sublib2</span><br><span class="line">            └── sublib2.h</span><br></pre></td></tr></table></figure>
<h1 id="code-generationprotobuf">code generation(protobuf)</h1>
<p>During the call to cmake it is possible to create files that use variables from the CMakeLists.txt and cmake cache. During CMake generation the file is copied to a new location and any cmake variables are replaced.</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set the project name</span></span><br><span class="line"><span class="keyword">project</span> (cf_example)</span><br><span class="line"></span><br><span class="line"><span class="comment"># set a project version</span></span><br><span class="line"><span class="keyword">set</span> (cf_example_VERSION_MAJOR <span class="number">0</span>)</span><br><span class="line"><span class="keyword">set</span> (cf_example_VERSION_MINOR <span class="number">2</span>)</span><br><span class="line"><span class="keyword">set</span> (cf_example_VERSION_PATCH <span class="number">1</span>)</span><br><span class="line"><span class="keyword">set</span> (cf_example_VERSION <span class="string">&quot;$&#123;cf_example_VERSION_MAJOR&#125;.$&#123;cf_example_VERSION_MINOR&#125;.$&#123;cf_example_VERSION_PATCH&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Call configure files on ver.h.in to set the version.</span></span><br><span class="line"><span class="comment"># Uses the standard $&#123;VARIABLE&#125; syntax in the file</span></span><br><span class="line"><span class="keyword">configure_file</span>(ver.h.in <span class="variable">$&#123;PROJECT_BINARY_DIR&#125;</span>/ver.h)</span><br><span class="line"></span><br><span class="line"><span class="comment"># configure the path.h.in file.</span></span><br><span class="line"><span class="comment"># This file can only use the @VARIABLE@ syntax in the file</span></span><br><span class="line"><span class="keyword">configure_file</span>(path.h.in <span class="variable">$&#123;PROJECT_BINARY_DIR&#125;</span>/path.h @ONLY)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Add an executable</span></span><br><span class="line"><span class="keyword">add_executable</span>(cf_example</span><br><span class="line">    main.cpp</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># include the directory with the new files</span></span><br><span class="line"><span class="keyword">target_include_directories</span>( cf_example</span><br><span class="line">    PUBLIC</span><br><span class="line">        <span class="variable">$&#123;CMAKE_BINARY_DIR&#125;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#ifndef __PATH_H__</span><br><span class="line">#define __PATH_H__</span><br><span class="line"></span><br><span class="line">// version variable that will be substituted by cmake</span><br><span class="line">// This shows an example using the @ variable type</span><br><span class="line">const char* path = &quot;@CMAKE_SOURCE_DIR@&quot;;</span><br><span class="line"></span><br><span class="line">#endif</span><br></pre></td></tr></table></figure>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set the project name</span></span><br><span class="line"><span class="keyword">project</span> (protobuf_example)</span><br><span class="line"><span class="comment"># 更改位置</span></span><br><span class="line"><span class="keyword">set</span>(Protobuf_PROTOC_EXECUTABLE <span class="string">&quot;/usr/local/Cellar/protobuf/21.9_1/bin/protoc&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># find the protobuf compiler and libraries</span></span><br><span class="line"><span class="keyword">find_package</span>(Protobuf REQUIRED)</span><br><span class="line"></span><br><span class="line"><span class="comment"># check if protobuf was found</span></span><br><span class="line"><span class="keyword">if</span>(PROTOBUF_FOUND)</span><br><span class="line">    <span class="keyword">message</span> (<span class="string">&quot;protobuf found&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>()</span><br><span class="line">    <span class="keyword">message</span> (FATAL_ERROR <span class="string">&quot;Cannot find Protobuf&quot;</span>)</span><br><span class="line"><span class="keyword">endif</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Generate the .h and .cxx files</span></span><br><span class="line">PROTOBUF_GENERATE_CPP(PROTO_SRCS PROTO_HDRS AddressBook.proto)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Print path to generated files</span></span><br><span class="line"><span class="keyword">message</span> (<span class="string">&quot;PROTO_SRCS = $&#123;PROTO_SRCS&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">message</span> (<span class="string">&quot;PROTO_HDRS = $&#123;PROTO_HDRS&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Add an executable</span></span><br><span class="line"><span class="keyword">add_executable</span>(protobuf_example</span><br><span class="line">    main.cpp</span><br><span class="line">    <span class="variable">$&#123;PROTO_SRCS&#125;</span></span><br><span class="line">    <span class="variable">$&#123;PROTO_HDRS&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">target_include_directories</span>(protobuf_example</span><br><span class="line">    PUBLIC</span><br><span class="line">    <span class="variable">$&#123;PROTOBUF_INCLUDE_DIRS&#125;</span></span><br><span class="line">    <span class="variable">$&#123;CMAKE_CURRENT_BINARY_DIR&#125;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># link the exe against the libraries</span></span><br><span class="line"><span class="keyword">target_link_libraries</span>(protobuf_example</span><br><span class="line">    PUBLIC</span><br><span class="line">    <span class="variable">$&#123;PROTOBUF_LIBRARIES&#125;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> tutorial;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="keyword">required</span> <span class="type">string</span> name = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">required</span> <span class="type">int32</span> id = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">optional</span> <span class="type">string</span> email = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">enum </span><span class="title class_">PhoneType</span> &#123;</span><br><span class="line">    MOBILE = <span class="number">0</span>;</span><br><span class="line">    HOME = <span class="number">1</span>;</span><br><span class="line">    WORK = <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">message </span><span class="title class_">PhoneNumber</span> &#123;</span><br><span class="line">    <span class="keyword">required</span> <span class="type">string</span> number = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">optional</span> PhoneType type = <span class="number">2</span> [default = HOME];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">repeated</span> PhoneNumber phone = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">AddressBook</span> &#123;</span><br><span class="line">  <span class="keyword">repeated</span> Person person = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="static-check">static check</h1>
<h2 id="clang-analyzer">clang-analyzer</h2>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span> (VERSION <span class="number">3.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span>(cppcheck_analysis)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use debug build as recommended</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_BUILD_TYPE Debug)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Have cmake create a compile database</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_EXPORT_COMPILE_COMMANDS <span class="keyword">ON</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Add sub directories</span></span><br><span class="line"><span class="keyword">add_subdirectory</span>(subproject1)</span><br><span class="line"><span class="keyword">add_subdirectory</span>(subproject2)</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">scan-build-3.6 cmake ..</span><br><span class="line">scan-build-3.6 make</span><br></pre></td></tr></table></figure>
<h2 id="clang-format">clang-format</h2>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span> (VERSION <span class="number">3.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span>(cppcheck_analysis)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Add a custom CMake Modules directory</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_MODULE_PATH <span class="variable">$&#123;CMAKE_SOURCE_DIR&#125;</span>/cmake/modules</span><br><span class="line">                      <span class="variable">$&#123;CMAKE_MODULE_PATH&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Add sub directories</span></span><br><span class="line"><span class="keyword">add_subdirectory</span>(subproject1)</span><br><span class="line"><span class="keyword">add_subdirectory</span>(subproject2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(CLANG_FORMAT_BIN_NAME clang-format-<span class="number">3.6</span>)</span><br><span class="line"><span class="keyword">set</span>(CLANG_FORMAT_EXCLUDE_PATTERNS  <span class="string">&quot;build/&quot;</span> <span class="variable">$&#123;CMAKE_BINARY_DIR&#125;</span>)</span><br><span class="line"><span class="keyword">find_package</span>(ClangFormat)</span><br></pre></td></tr></table></figure>
<h1 id="unit-test">unit test</h1>
<h1 id="package-management">package management</h1>
<h2 id="intro">intro</h2>
<p>Using your system provided packages is one of the oldest and most common form of package management solutions. For this, you use your systems package installer (e.g. apt, yum) to install libraries and headers into common locations. CMake can then use the <code>find_package()</code> function to search for these and make them available to your program.</p>
<h2 id="vendoring-code">vendoring code</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tree .</span><br><span class="line">├── 3rd_party</span><br><span class="line">│   └── catch2</span><br><span class="line">│       ├── catch2</span><br><span class="line">│       │   └── catch.hpp</span><br><span class="line">│       └── CMakeLists.txt</span><br><span class="line">├── CMakeLists.txt</span><br><span class="line">├── src</span><br><span class="line">│   └── example.cpp</span><br></pre></td></tr></table></figure>
<p>If these projects support CMake directly, it may be possible to do <code>add_subdirectory()</code> on the libraries folder and have that project build and be made available to your code.</p>
<p>If the third party code doesn’t support CMake, you may need to create a "shim" layer on top of the project to allow it to be build and discovered from CMake.</p>
<h2 id="external-project">external project</h2>
<p>A simple example of an external project is as follows:</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">include</span>(ExternalProject)</span><br><span class="line">ExternalProject_Add(googletest</span><br><span class="line">  URL    https://github.com/google/googletest/archive/bfc0ffc8a698072c794ae7299db9cb6866f4c0bc.tar.gz_</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>Once added you will have a target <code>googletest</code> which will attempt to download, build, and install google test when your build your project.</p>
<h1 id="tree-example">tree example</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── CMakeLists.txt</span><br><span class="line">├── LICENSE</span><br><span class="line">├── README.md</span><br><span class="line">├── cmake</span><br><span class="line">│   ├── diagon_fuzzer.cmake <span class="comment">#.cmake?</span></span><br><span class="line">│   └── diagon_test.cmake</span><br><span class="line">├── favicon.png</span><br><span class="line">├── snap</span><br><span class="line">│   ├── gui</span><br><span class="line">│   │   ├── diagon.desktop</span><br><span class="line">│   │   └── diagon.png</span><br><span class="line">│   └── snapcraft.yaml</span><br><span class="line">├── src <span class="comment"># .hpp?</span></span><br><span class="line">│   ├── api.cpp</span><br><span class="line">│   ├── api.hpp</span><br><span class="line">│   ├── environment.h.in</span><br><span class="line">│   ├── favicon-32x32.png</span><br><span class="line">│   ├── filesystem.hpp</span><br><span class="line">│   ├── fuzzer.cpp</span><br><span class="line">│   ├── google-analytics.html</span><br><span class="line">│   ├── index.html</span><br><span class="line">│   ├── input_output_test.cpp</span><br><span class="line">│   ├── main.cpp</span><br><span class="line">│   ├── run_diagon.sh</span><br><span class="line">│   ├── screen <span class="comment">#target_link_libraries add_library</span></span><br><span class="line">│   │   ├── CMakeLists.txt</span><br><span class="line">│   │   ├── Screen.cpp</span><br><span class="line">│   │   └── Screen.h</span><br><span class="line">│   ├── style.css</span><br><span class="line">│   ├── translator</span><br><span class="line">│   │   ├── Factory.cpp</span><br><span class="line">│   │   ├── Factory.h</span><br><span class="line">│   │   ├── Translator.cpp</span><br><span class="line">│   │   ├── Translator.h</span><br><span class="line">│   │   ├── antlr_error_listener.cpp</span><br><span class="line">│   │   ├── antlr_error_listener.h</span><br><span class="line">│   │   ├── flowchart</span><br><span class="line">│   │   │   ├── CMakeLists.txt</span><br><span class="line">│   │   │   ├── Flowchart.cpp</span><br><span class="line">│   │   │   └── Flowchart.g4</span><br><span class="line">│   │   ├── frame</span><br><span class="line">│   │   │   ├── CMakeLists.txt</span><br><span class="line">│   │   │   └── Frame.cpp</span><br><span class="line">│   │   ├── grammar</span><br><span class="line">│   │   │   ├── CMakeLists.txt</span><br><span class="line">│   │   │   └── Grammar.cpp</span><br><span class="line">│   │   ├── graph_dag</span><br><span class="line">│   │   │   ├── CMakeLists.txt</span><br><span class="line">│   │   │   ├── GraphDAG.cpp</span><br><span class="line">│   │   │   └── dag_to_graph.cpp</span><br><span class="line">│   │   ├── graph_planar</span><br><span class="line">│   │   │   ├── CMakeLists.txt</span><br><span class="line">│   │   │   ├── GraphPlanar.cpp</span><br><span class="line">│   │   │   ├── GraphPlanar.g4</span><br><span class="line">│   │   │   └── GraphPlanarEmpty.cpp</span><br><span class="line">│   │   ├── math</span><br><span class="line">│   │   │   ├── CMakeLists.txt</span><br><span class="line">│   │   │   ├── Math.cpp</span><br><span class="line">│   │   │   └── Math.g4</span><br><span class="line">│   │   ├── sequence</span><br><span class="line">│   │   │   ├── CMakeLists.txt</span><br><span class="line">│   │   │   ├── Graph.cpp</span><br><span class="line">│   │   │   ├── Graph.hpp</span><br><span class="line">│   │   │   ├── Sequence.cpp</span><br><span class="line">│   │   │   ├── Sequence.g4</span><br><span class="line">│   │   │   └── Sequence.hpp</span><br><span class="line">│   │   ├── table</span><br><span class="line">│   │   │   ├── CMakeLists.txt</span><br><span class="line">│   │   │   └── Table.cpp</span><br><span class="line">│   │   └── tree</span><br><span class="line">│   │       ├── CMakeLists.txt</span><br><span class="line">│   │       └── Tree.cpp</span><br><span class="line">│   └── util.hpp</span><br><span class="line">├── <span class="built_in">test</span></span><br><span class="line">│   └── Flowchart</span><br><span class="line">│       ├── example</span><br><span class="line">│       │   ├── input</span><br><span class="line">│       │   └── output</span><br><span class="line">│       └── loong-breakable-string</span><br><span class="line">│           ├── input</span><br><span class="line">│           └── output</span><br><span class="line">└── tools</span><br><span class="line">    ├── CMakeLists.txt</span><br><span class="line">    ├── format.sh</span><br><span class="line">    ├── license_headers.cpp</span><br><span class="line">    └── logo.png</span><br><span class="line"></span><br><span class="line">20 directories, 66 files</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>project</tag>
        <tag>executable</tag>
        <tag>library</tag>
        <tag>build</tag>
        <tag>libraries</tag>
      </tags>
  </entry>
  <entry>
    <title>cpp 从入门到汇编</title>
    <url>/2022/01/45f494d95337.html</url>
    <content><![CDATA[<blockquote>
<p>简介: cpp 简要指北</p>
</blockquote>
<ul>
<li><p>mac 下的 c++ 头文件位置 /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX xx.xx.sdk/usr/include/c++</p>
<span id="more"></span></li>
</ul>
<h1 id="inline">inline</h1>
<p>When the program executes the function call instruction the <strong>CPU stores the memory address of the instruction following the function call, copies the arguments of the function on the stack and finally transfers control to the specified function</strong>. The CPU then <strong>executes the function code, stores the function return value in a predefined memory location/register and returns control to the calling function</strong>. This overhead occurs for small functions because execution time of small function is less than the switching time.</p>
<p>Inline function is a function that <strong>is expanded in line when it is called.</strong> When the inline function is called whole code of the inline function gets inserted or substituted at the point of inline function call. This substitution is performed by the <strong>C++ compiler at compile time.</strong> Inline function may increase efficiency if it is small. The syntax for defining the function inline is:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">inline return-type function-name(parameters)</span><br><span class="line">&#123;</span><br><span class="line">    // function code</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<p>Remember, inlining is only a request to the compiler, not a command. Compiler can ignore the request for inlining. <strong>Compiler may not perform inlining</strong> in such circumstances like: \1) If a function contains a loop. (for, while, do-while) \2) If a function contains static variables. \3) If a function is recursive. \4) If a function return type is other than void, and the return statement doesn’t exist in function body. \5) If a function contains switch or goto statement.</p>
<p><strong>Inline functions provide following advantages:</strong> \1) Function call overhead doesn’t occur. \2) It also saves the overhead of push/pop variables on the stack when function is called. \3) It also saves overhead of a return call from a function. \4) When you inline a function, you may enable compiler to perform context specific optimization on the body of function. Such optimizations are not possible for normal function calls. Other optimizations can be obtained by considering the flows of calling context and the called context. \5) Inline function may be useful (if it is small) for embedded systems because inline can yield less code than the function call preamble and return.</p>
<p><strong>Inline function disadvantages:</strong> \1) The <strong>added variables from the inlined function consumes additional registers</strong>, After in-lining function if variables number which are going to use register increases than they may create overhead on register variable resource utilization. This means that when inline function body is substituted at the point of function call, total number of variables used by the function also gets inserted. So the number of register going to be used for the variables will also get increased. So if after function inlining variable numbers increase drastically then it would surely cause an overhead on register utilization.</p>
<p>\2) If you use too many inline functions then the size of the binary executable file will be large, because of the <strong>duplication of same code</strong>.</p>
<p>\3) Too much inlining can also reduce your <strong>instruction cache hit rate</strong>, thus reducing the speed of instruction fetch from that of cache memory to that of primary memory.</p>
<p>\4) Inline function may increase <strong>compile time</strong> overhead if someone changes the code inside the inline function then all the calling location has to be recompiled because compiler would require to replace all the code once again to reflect the changes, otherwise it will continue with old functionality.</p>
<p>\5) Inline functions may not be useful for many embedded systems. Because in embedded systems code size is more important than speed.</p>
<p>\6) Inline functions might cause <strong>thrashing内存抖动</strong> because inlining might increase size of the binary executable file. Thrashing in memory causes performance of computer to degrade.</p>
<p><strong>Inline function and classes:</strong> It is also possible to define the inline function inside the class. <strong>In fact, all the functions defined inside the class are implicitly inline.</strong> Thus, all the restrictions of inline functions are also applied here. If you need to explicitly declare inline function in the class then just declare the function inside the class and define it outside the class using inline keyword. For example:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">S</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">square</span><span class="params">(<span class="type">int</span> s)</span> <span class="comment">// redundant use of inline</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>The above style is considered as a bad programming style. The best programming style is to just write the prototype of function inside the class and specify it as an inline in the function definition. For example:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">S</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">square</span><span class="params">(<span class="type">int</span> s)</span></span>; <span class="comment">// declare the function</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">S::square</span><span class="params">(<span class="type">int</span> s)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>What is wrong with macro?</strong></p>
<p>C++ compiler <strong>checks the argument types of inline functions and necessary conversions</strong> are performed correctly. Preprocessor macro is not capable for doing this. One other thing is that the <strong>macros are managed by preprocessor and inline functions are managed by C++ compiler.</strong></p>
<p>Remember: It is true that all the functions defined inside the class are implicitly inline and C++ compiler will perform inline call of these functions, <strong>but C++ compiler cannot perform inlining if the function is virtual</strong>. The reason is call to a <strong>virtual function is resolved at runtime instead of compile time.</strong> Virtual means wait until runtime and inline means during compilation, if the compiler doesn’t know which function will be called, how it can perform inlining?</p>
<h1 id="整形提升-integer-promotions"><a href="https://en.cppreference.com/w/c/language/conversion">整形提升 Integer Promotions</a></h1>
<p>integer promotion is the implicit conversion of a value of any integer type with <em>rank</em> less or equal to <em>rank</em> of int or of a <a href="https://en.cppreference.com/w/c/language/bit_field">bit field</a> of type _Bool, int, signed int, unsigned int, to the value of type int or unsigned int.</p>
<p>If int can represent the entire range of values of the original type (or the range of values of the original bit field), the value is converted to type int. Otherwise the value is converted to unsigned int.</p>
<p>Integer promotions preserve the value, including the sign:</p>
<h1 id="thread"><a href="https://zhuanlan.zhihu.com/p/389140084">thread</a></h1>
<p>本篇主要对<code>C++11</code>中的线程<code>std::thread</code>作全面的梳理和总结，方便以后在工作中参考和使用。</p>
<h2 id="stdthread介绍及示例">1.<code>std::thread</code>介绍及示例</h2>
<p>首先说明一下，对于以前的编译器， 若要使用<code>C++11</code>的特性，编译时要设定参数如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-std=c++11</span><br></pre></td></tr></table></figure>
<p>这里先写一个简单的线程示例程序。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">thread_one</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">thread_two</span><span class="params">(<span class="type">int</span> num, string&amp; str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;num:&quot;</span> &lt;&lt; num &lt;&lt; <span class="string">&quot;,name:&quot;</span> &lt;&lt; str &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">thread <span class="title">tt</span><span class="params">(thread_one)</span></span>;</span><br><span class="line">    tt.<span class="built_in">join</span>();</span><br><span class="line">    string str = <span class="string">&quot;luckin&quot;</span>;</span><br><span class="line">    <span class="function">thread <span class="title">yy</span><span class="params">(thread_two, <span class="number">88</span>, ref(str))</span></span>;   </span><br><span class="line">      <span class="comment">//这里要注意是以引用的方式调用参数</span></span><br><span class="line">    yy.<span class="built_in">detach</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过代码，我们创建了一个<code>tt</code>线程对象，其参数是函数<code>thread_one</code>，创建完成后被执行，<strong><code>tt.join()</code>是等待子线程执行完成之后，主线程才继续执行，此时主线程会释放掉执行完成后的子线程的资源</strong>。</p>
<p>对于线程对象<code>yy</code>，我们传入了调用函数的两个参数，这里在线程<code>yy</code>执行时，主线程不想等待子线程，故<strong>使用了<code>yy.detach()</code>将子线程从主线程中分离出来，这样主线程就对子线程没有控制权了，子线程执行完成后会自己释放掉资源</strong>。</p>
<h2 id="stdthread重要函数梳理">2.<code>std::thread</code>重要函数梳理</h2>
<blockquote>
<p>thread() noexcept：默认构造函数，创建一个空的<code>thread</code>执行对象； explicit thread(Fn&amp;&amp;fn, Args&amp;&amp;...args)：初始化构造函数，创建一个带函数调用参数的<code>thread</code>，这个<strong>线程是可<code>joinable</code>的</strong>； thread(const thread&amp;) = delete：拷贝构造函数被禁用，意味着<code>thread</code>对象不可拷贝构造； thread(thread&amp;&amp; x) noexcept：<strong>移动构造函数</strong>，调用成功之后，<code>x</code>不代表任何<code>thread</code>执行对象；</p>
</blockquote>
<p>其构造函数的使用示例如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;chrono&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f1</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;=====Thread:&quot;</span> &lt;&lt; n &lt;&lt; <span class="string">&quot;======&quot;</span> &lt;&lt; endl;</span><br><span class="line">      this_thread::<span class="built_in">sleep_for</span>(chrono::<span class="built_in">microseconds</span>(<span class="number">10</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f2</span><span class="params">(<span class="type">int</span>&amp; n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;thread two executing&quot;</span> &lt;&lt; endl;</span><br><span class="line">      ++n;</span><br><span class="line">      this_thread::<span class="built_in">sleep_for</span>(chrono::<span class="built_in">microseconds</span>(<span class="number">10</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line">    thread t1;    <span class="comment">//这是一个空的线程对象，还不是一个线程</span></span><br><span class="line">    <span class="function">thread <span class="title">t2</span><span class="params">(f1, n + <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="function">thread <span class="title">t3</span><span class="params">(f2, ref(n))</span></span>;</span><br><span class="line">    <span class="function">thread <span class="title">t4</span><span class="params">(move(t3))</span></span>;    <span class="comment">//t3不再是一个线程</span></span><br><span class="line">    t2.<span class="built_in">join</span>();</span><br><span class="line">    t4.<span class="built_in">join</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;the result n is:&quot;</span> &lt;&lt; n &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="thread中几个重要的成员函数">3.<code>thread</code>中几个重要的成员函数</h2>
<ul>
<li><code>get_id()</code>：获取线程的ID，它将返回一个类型为<code>std::thread::id</code>的对象。</li>
<li><code>joinable()</code>：检查线程是否可被<code>join</code>。</li>
</ul>
<p><strong>对于<code>join</code>这里值得注意</strong>：</p>
<p>在任意一个时间点上，线程是可结合<code>joinable</code>或者可分离<code>detached</code>的。<strong>一个可结合线程是可以被其它线程回收资源和杀死结束的，而对于<code>detached</code>状态的线程，其资源不能被其它线程回收和杀死，只能等待线程结束才能由系统自动释放</strong>。由默认构造函数创建的线程是不能被<code>join</code>的；另外，若某个线程已执行完任务，但是没有被<code>join</code>的话，该线程依然会被认为是一个活动的执行线程，因此是可以被<code>join</code>的。</p>
<ul>
<li><code>detach()</code>：将当前线程对象所代表的执行实例与此线程对象分离，使得线程可以单独执行。</li>
<li><code>swap()</code>：交换两个线程对象所代表的底层句柄，参数是两个线程对象；</li>
<li><code>std::this_thread::getid()</code>：获取当前线程的ID；</li>
<li><code>std::this_thread::yield()</code>：当前线程放弃执行，操作系统调度另一线程继续执行；</li>
<li><code>sleep_until()</code>：线程休眠至某个指定的时刻，才被重新唤醒；</li>
<li><code>sleep_for()</code>： 线程休眠某个指定的时间片，才被重新唤醒；</li>
</ul>
<h2 id="thread中的互斥量">4.<code>thread</code>中的互斥量</h2>
<p>在多个线程同时访问共享资源时，就需要对资源进行加锁互斥访问，<code>thread</code>提供了四种不同的互斥量：</p>
<ul>
<li><strong>独占式互斥量</strong>：<code>std::mutex</code> 。独占工互斥量加解锁是成对的，同一个线程内独占式互斥量在没有解锁的情况下，再次对其加锁是不正确的，会得到一个未定义的行为。</li>
<li><strong>递归式互斥量</strong>：<code>std::recursive_mutex</code>。递归式互斥量是在同一个线程内互斥量没有解锁的情况下可以再次对其加锁，但其加解锁的次数需要保持一致。这种互斥量平时用得比较少。</li>
<li>允许超时的独占式互斥量：<code>std::timed_mutex</code></li>
<li>允许超时的递归式互斥量：<code>std::recursive_timed_mutex</code></li>
</ul>
<p>下面的代码示例了独占式互斥量的用法：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> g_num = <span class="number">0</span>;</span><br><span class="line">mutex g_mutex;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">thread1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    g_mutex.<span class="built_in">lock</span>();</span><br><span class="line">    g_num = <span class="number">50</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i)</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;thread1:&quot;</span> &lt;&lt; g_num &lt;&lt; endl;</span><br><span class="line">    g_mutex.<span class="built_in">unlock</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">thread2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    lock_guard&lt;mutex&gt;<span class="built_in">lg</span>(g_mutex);   <span class="comment">//用这种方式更安全</span></span><br><span class="line">    g_num = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; ++j)</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;thread2:&quot;</span> &lt;&lt; g_num &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">thread <span class="title">t1</span><span class="params">(thread1)</span></span>;</span><br><span class="line">    <span class="function">thread <span class="title">t2</span><span class="params">(thread2)</span></span>;</span><br><span class="line">    t1.<span class="built_in">join</span>();</span><br><span class="line">    t2.<span class="built_in">join</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>若线程1对共享资源的访问时间较长，这时线程2可能等不了那么久，故设定一个超时时间 ，在超时时间内若线程1中的互斥量还没有解锁，线程2就不等了，继续向下执行，这就是允许超时的互斥量。对于允许超时的互斥量，我们需要用<code>unique_lock</code>来包装。</p>
<p>下面代码示例了允许超时的互斥量的用法：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">timed_mutex g_timed_mutex;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">thread1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">unique_lock&lt;timed_mutex&gt; <span class="title">t1</span><span class="params">(g_timed_mutex)</span></span>;</span><br><span class="line">    <span class="built_in">Sleep</span>(<span class="number">200</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;thread1&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">thread2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">unique_lock&lt;timed_mutex&gt; <span class="title">t1</span><span class="params">(g_timed_mutex, chrono::milliseconds(<span class="number">1000</span>))</span></span>;<span class="comment">//设置超时时间为1秒</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;thread2&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">thread <span class="title">t1</span><span class="params">(thread1)</span></span>;</span><br><span class="line">    <span class="built_in">Sleep</span>(<span class="number">100</span>);   <span class="comment">//让线程1先启动</span></span><br><span class="line">    <span class="function">thread <span class="title">t2</span><span class="params">(thread2)</span></span>;</span><br><span class="line">    t1.<span class="built_in">join</span>();</span><br><span class="line">    t2.<span class="built_in">join</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>本文到此结束！</p>
<h1 id="virtual-function-in-compiling"><a href="https://stackoverflow.com/questions/3211262/what-does-a-compiled-c-class-look-like">virtual function in compiling</a></h1>
<blockquote>
<p>three steps:</p>
<p>create vtb, declare vp, assign vp in constructor</p>
</blockquote>
<p>The classes are (more or less) constructed as regular structs. The methods are (more or less...) <strong>converted into functions which first parameter is "this". References to the class variables are done as an offset to "this".</strong></p>
<p>As far as inheritance, lets quote from the C++ FAQ LITE, which is mirrored here http://www.parashift.com/c++-faq-lite/virtual-functions.html#faq-20.4 . This chapter shows how Virtual functions are called in the real hardware (what does the compile make in machine code.)</p>
<p>Let's work an example. Suppose class Base has 5 virtual functions: <code>virt0()</code> through <code>virt4()</code>.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Your original C++ source code</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> arbitrary_return_type <span class="title">virt0</span><span class="params">(...arbitrary params...)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> arbitrary_return_type <span class="title">virt1</span><span class="params">(...arbitrary params...)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> arbitrary_return_type <span class="title">virt2</span><span class="params">(...arbitrary params...)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> arbitrary_return_type <span class="title">virt3</span><span class="params">(...arbitrary params...)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> arbitrary_return_type <span class="title">virt4</span><span class="params">(...arbitrary params...)</span></span>;</span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><strong>Step #1</strong>: the compiler builds a <strong>static table containing 5 function-pointers</strong>, burying that table into static memory somewhere. Many (not all) compilers define this table while compiling the .cpp that defines Base's first non-inline virtual function. We call that table the <strong>v-table</strong>; let's pretend its technical name is <code>Base::__vtable</code>. If a function pointer fits into one machine word on the target hardware platform, <code>Base::__vtable</code> will end up consuming 5 hidden words of memory. Not 5 per instance, not 5 per function; just 5. It might look something like the following pseudo-code(伪代码):</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Pseudo-code (not C++, not C) for a static table defined within file Base.cpp</span></span><br><span class="line"><span class="comment">// Pretend FunctionPtr is a generic pointer to a generic member function</span></span><br><span class="line"><span class="comment">// (Remember: this is pseudo-code, not C++ code)</span></span><br><span class="line">FunctionPtr Base::__vtable[<span class="number">5</span>] = &#123;</span><br><span class="line">  &amp;Base::virt0, &amp;Base::virt1, &amp;Base::virt2, &amp;Base::virt3, &amp;Base::virt4</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><strong>Step #2</strong>: the compiler adds a <strong>hidden pointer</strong> (typically also a machine-word) to each <strong>object of class Base</strong>. This is called the <strong>v-pointer</strong>. Think of this hidden pointer as a hidden data member, as if the compiler rewrites your class to something like this:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Your original C++ source code</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  ...</span><br><span class="line">  FunctionPtr* __vptr;  ← supplied by the compiler, hidden from the programmer</span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><strong>Step #3</strong>: the compiler <strong>initializes <code>this-&gt;__vptr</code> within each constructor</strong>. The idea is to cause each object's v-pointer to point at its class's v-table, as if it adds the following instruction in each constructor's init-list:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Base::<span class="built_in">Base</span>(...arbitrary params...)</span><br><span class="line">  : __vptr(&amp;Base::__vtable[<span class="number">0</span>])  ← supplied by the compiler, hidden from the programmer</span><br><span class="line">  ...</span><br><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Now let's work out a derived class. Suppose your C++ code defines class Der that inherits from class Base. The compiler repeats steps #1 and #3 (but not #2). In step #1, the compiler creates a hidden v-table, keeping the same function-pointers as in <code>Base::__vtable</code> but <strong>replacing those slots that correspond to overrides</strong>. For instance, if Der overrides <code>virt0()</code> through <code>virt2()</code> and inherits the others as-is, Der's v-table might look something like this (pretend Der doesn't add any new virtuals):</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Pseudo-code (not C++, not C) for a static table defined within file Der.cpp</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Pretend FunctionPtr is a generic pointer to a generic member function</span></span><br><span class="line"><span class="comment">// (Remember: this is pseudo-code, not C++ code)</span></span><br><span class="line">FunctionPtr Der::__vtable[<span class="number">5</span>] = &#123;</span><br><span class="line">  &amp;Der::virt0, &amp;Der::virt1, &amp;Der::virt2, &amp;Base::virt3, &amp;Base::virt4</span><br><span class="line">&#125;;                                        </span><br></pre></td></tr></table></figure>
<p>In step #3, the compiler adds a similar pointer-assignment at the beginning of each of Der's constructors. The idea is to change each Der object's v-pointer so it points at its class's v-table. (This is not a second v-pointer; it's the same v-pointer that was defined in the base class, Base; remember, the compiler does not repeat step #2 in class Der.)</p>
<p>Finally, let's see how the compiler implements a call to a virtual function. Your code might look like this:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Your original C++ code</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mycode</span><span class="params">(Base* p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  p-&gt;<span class="built_in">virt3</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The compiler has no idea whether this is going to call <code>Base::virt3()</code> or <code>Der::virt3()</code> or perhaps the <code>virt3()</code> method of another derived class that doesn't even exist yet. It only knows for sure that you are calling <code>virt3()</code> which happens to be the function in slot #3 of the v-table. It rewrites that call into something like this:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Pseudo-code that the compiler generates from your C++</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mycode</span><span class="params">(Base* p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  p-&gt;__vptr[<span class="number">3</span>](p);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<hr />
<p>I strongly recommend every C++ developer to read the FAQ. It might take several weeks (as it's hard to read and long) but it will teach you a lot about C++ and what can be done with it.</p>
<h1 id="连续声明">连续声明</h1>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Paddle* p1, * p2;</span><br></pre></td></tr></table></figure>
<p>指针!</p>
<h1 id="class-and-typename">class and typename</h1>
<ul>
<li><p>in template they are the same</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="comment">/* class or function declaration */</span>;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;    <span class="comment">/* class or function declaration */</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>typename unique</p>
<p>由于 C++ 允许在类内定义类型别名，且其使用方法与通过类型名访问类成员的方法相同。故而，在类定义不可知的时候，编译器无法知晓类似 <code>Type::foo</code> 的写法具体指的是一个类型还是类内成员。</p></li>
<li><p>class unique</p>
<p>?</p></li>
</ul>
<h1 id="class-memory-layout"><a href="https://www.programmerall.com/article/1953260633/">class memory layout</a></h1>
<p><strong>Elements in Class</strong></p>
<ol start="0" type="1">
<li>Member variables<br />
</li>
<li>Member function<br />
</li>
<li>Static member variable<br />
</li>
<li>Static member function<br />
</li>
<li>Virtual function<br />
</li>
<li>Pure virtual function</li>
</ol>
<p><strong>Factors affecting object size</strong></p>
<ol start="0" type="1">
<li><strong>Member variables</strong><br />
</li>
<li>**Virtual function table pointer (_vftptr)**<br />
</li>
<li>**Virtual base table pointer**（_vbtptr）****<br />
</li>
<li><strong><a href="https://www.cnblogs.com/kekec/archive/2012/10/31/2748955.html">Memory alignment</a></strong></li>
</ol>
<p>A plain (non <code>virtual</code>) member function is just like a C function (except that it has <code>this</code> as an implicit, often first, parameter). For example your <code>getA</code> method is implemented like the following C function (outside of the object, e.g. in the <a href="http://en.wikipedia.org/wiki/Code_segment">code segment</a> of the binary executable) :</p>
<p>A <a href="http://en.wikipedia.org/wiki/Virtual_function">virtual member function</a> is generally implemented thru a <em>vtable</em> (<a href="http://en.wikipedia.org/wiki/Virtual_method_table">virtual method table</a>). An object with some virtual member functions (including destructor) has generally as its first (implicit) member field a pointer to such a table (generated elsewhere by the compiler).</p>
<h2 id="single-class">Single class</h2>
<p>(1). <strong>Empty</strong> class</p>
<figure>
<img src="https://www.programmerall.com/images/785/e7/e737e5eb9a1c03ff81c9e04e70c32a81.png" alt="img" /><figcaption aria-hidden="true">img</figcaption>
</figure>
<p>sizeof(CNull)=1（Used to identify the object）</p>
<p>(2). Class with only <strong>member variables</strong></p>
<figure>
<img src="https://www.programmerall.com/images/408/de/dea7e81d5b7972d759cccc5da7f88478.png" alt="img" /><figcaption aria-hidden="true">img</figcaption>
</figure>
<p>int nVarSize = sizeof(CVariable) = 12</p>
<figure>
<img src="https://www.programmerall.com/images/129/14/14959f5ed9b3f3e9a5106169d2547209.png" alt="img" /><figcaption aria-hidden="true">img</figcaption>
</figure>
<p>Memory layout:</p>
<figure>
<img src="https://www.programmerall.com/images/820/c7/c76f79fd497923d9b5d377591ef4e804.png" alt="img" /><figcaption aria-hidden="true">img</figcaption>
</figure>
<p>(3). Classes with <strong>only virtual functions</strong></p>
<figure>
<img src="https://www.programmerall.com/images/130/27/274775992046eccf696cb609eafcdaf2.png" alt="img" /><figcaption aria-hidden="true">img</figcaption>
</figure>
<p>int nVFuntionSize = sizeof(CVFuction) = 4 (virtual table pointer)</p>
<figure>
<img src="https://www.programmerall.com/images/302/9d/9d317cdcaa5b510d03529b341031a956.png" alt="img" /><figcaption aria-hidden="true">img</figcaption>
</figure>
<p>Memory layout:</p>
<figure>
<img src="https://www.programmerall.com/images/128/ac/ac58a7dd9d3b88dfe416c7b770a4bb50.png" alt="img" /><figcaption aria-hidden="true">img</figcaption>
</figure>
<p>(4). Classes with <strong>member variables and virtual functions</strong></p>
<figure>
<img src="https://www.programmerall.com/images/572/a0/a010936b8c9773211780b86f48773404.png" alt="img" /><figcaption aria-hidden="true">img</figcaption>
</figure>
<p>int nParentSize = sizeof(CParent) = 8</p>
<figure>
<img src="https://www.programmerall.com/images/465/fd/fd9fc47b84bf351085ba51338b854451.png" alt="img" /><figcaption aria-hidden="true">img</figcaption>
</figure>
<p>Memory layout:</p>
<figure>
<img src="https://www.programmerall.com/images/563/95/952f09c0147c160ab2c4a4b5dc4ef16b.png" alt="img" /><figcaption aria-hidden="true">img</figcaption>
</figure>
<h2 id="single-inheritance">Single inheritance</h2>
<p>(including member variables, virtual functions, and virtual function coverage)</p>
<figure>
<img src="https://www.programmerall.com/images/463/63/637fd62d36bca5ad4de15057a7868faf.png" alt="img" /><figcaption aria-hidden="true">img</figcaption>
</figure>
<p>int nChildSize = sizeof(CChildren) = 12</p>
<p>The result displayed in vc (Note: There is also a virtual function CChildren::g1 that is not displayed):</p>
<figure>
<img src="https://www.programmerall.com/images/281/2c/2c830db2a2dcf19b468848f786904069.png" alt="img" /><figcaption aria-hidden="true">img</figcaption>
</figure>
<p>Memory layout:</p>
<figure>
<img src="https://www.programmerall.com/images/417/c3/c3ab0cf99399434a3a5c5597e59220f1.png" alt="img" /><figcaption aria-hidden="true">img</figcaption>
</figure>
<h2 id="multiple-inheritan">Multiple inheritan</h2>
<p>(including member variables, virtual functions, and virtual function coverage)</p>
<figure>
<img src="https://www.programmerall.com/images/841/ef/ef1a3a8b9024df6ecf162d29188de151.png" alt="img" /><figcaption aria-hidden="true">img</figcaption>
</figure>
<p>int nChildSize = sizeof(CChildren) = 20</p>
<p>The result displayed in vc (Note: There are two virtual functions CChildren::f2, CChildren::h2 is not displayed,this Pointer <strong>adjustor</strong>[Adjusted value] Did not print out):</p>
<figure>
<img src="https://www.programmerall.com/images/577/c8/c8c325fef2beb55ccac85749d915e8a9.png" alt="img" /><figcaption aria-hidden="true">img</figcaption>
</figure>
<p>Memory layout:</p>
<figure>
<img src="https://www.programmerall.com/images/482/74/740ccc3c414613726d1db0580fc3a8f2.png" alt="img" /><figcaption aria-hidden="true">img</figcaption>
</figure>
<h2 id="inheritance-with-a-depth-of-2">Inheritance with a depth of 2</h2>
<p>(including member variables, virtual functions, and virtual function coverage)</p>
<figure>
<img src="https://www.programmerall.com/images/501/38/383f54f27decf91277086e6652af8c4d.png" alt="img" /><figcaption aria-hidden="true">img</figcaption>
</figure>
<p>int nGrandSize = sizeof(CGrandChildren) = 24</p>
<p>The result displayed in vc (note: there are three virtual functions CGrandChildren::f2, CChildren::h2, CGrandChildren::f3 are not displayed,thisPointer<strong>adjustor</strong>[Adjusted value] Did not print out):</p>
<figure>
<img src="https://www.programmerall.com/images/160/62/62a008de8fedc9d4319acf0342aaf0c8.png" alt="img" /><figcaption aria-hidden="true">img</figcaption>
</figure>
<p>Memory layout:</p>
<figure>
<img src="https://www.programmerall.com/images/628/44/445528602bc7a24ece6a57ec1ec4fd94.png" alt="img" /><figcaption aria-hidden="true">img</figcaption>
</figure>
<h2 id="repeated-inheritance">Repeated inheritance</h2>
<p>(including member variables, virtual functions, and virtual function coverage)</p>
<figure>
<img src="https://www.programmerall.com/images/357/9d/9de5e626ef9f14eb6a2cf25960fe015d.png" alt="img" /><figcaption aria-hidden="true">img</figcaption>
</figure>
<p>int nGrandSize = sizeof(CGrandChildren) = 28</p>
<figure>
<img src="https://www.programmerall.com/images/701/d7/d7ac32dcd9aad3cd190e6aa5567f852d.png" alt="img" /><figcaption aria-hidden="true">img</figcaption>
</figure>
<p>Memory layout:</p>
<figure>
<img src="https://www.programmerall.com/images/519/a3/a3f697becdc21542f80c4bd6bc850d5f.png" alt="img" /><figcaption aria-hidden="true">img</figcaption>
</figure>
<p>Since there are two copies of m_nAge in the content, we cannot directly access this variable through pGrandChildrenA-&gt;m_nAge,</p>
<p>There will be ambiguity in this way, the compiler cannot know that it should accessCChildren1M_nAge in, orCChildren2M_nAge in.</p>
<p>In order to identify the unique m_nAge, you need to <strong>bring the class name of its scope</strong>. as follows:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> pGrandChildrenA-&gt;CChildren1::m_nAge = <span class="number">1</span>;</span><br><span class="line"><span class="number">2</span> pGrandChildrenA-&gt;CChildren2::m_nAge = <span class="number">2</span>;</span><br></pre></td></tr></table></figure>
<h2 id="single-virtual-inheritance">Single virtual inheritance</h2>
<blockquote>
<h3 id="the-diamond-problemwhat-is-virtual-inheritance">The diamond problem(what is virtual inheritance)</h3>
<p><em>Virtual inheritance</em> is a C++ technique that ensures that only one copy of a base class’s member variables are inherited by second-level derivatives (a.k.a. grandchild derived classes). Without virtual inheritance, if two classes B and C inherit from class A, and class D inherits from both B and C, then D will contain two copies of A’s member variables: one via B, and one via C. These will be accessible independently, using scope resolution.</p>
<p><strong>Instead, if classes B and C inherit virtually from class A, then objects of class D will contain only one set of the member variables from class A.</strong></p>
<p>As you probably guessed, this technique is useful when you have to deal with multiple inheritance and it’s a way to solve the infamous diamond inheritance.</p>
</blockquote>
<p>(including member variables, virtual functions, and virtual function coverage)</p>
<figure>
<img src="https://www.programmerall.com/images/309/fa/fa03df3f4df6647d00fb266caddf236d.png" alt="img" /><figcaption aria-hidden="true">img</figcaption>
</figure>
<p>int nChildSize = sizeof(CChildren) = 20</p>
<p>Memory layout:</p>
<figure>
<img src="https://www.programmerall.com/images/892/93/932b1f306be323fcb69c19b34985264c.png" alt="img" /><figcaption aria-hidden="true">img</figcaption>
</figure>
<h2 id="multiple-virtual-inheritance">Multiple virtual inheritance</h2>
<p>(including member variables, virtual functions, and virtual function coverage)</p>
<ol type="1">
<li>virtual CParent1, CParent2</li>
</ol>
<figure>
<img src="https://www.programmerall.com/images/646/cb/cbbb0345c42eb7c2ce22540a52bb5386.png" alt="img" /><figcaption aria-hidden="true">img</figcaption>
</figure>
<p>int nChildSize = sizeof(CChildren) = 24</p>
<p>Memory layout:</p>
<figure>
<img src="https://www.programmerall.com/images/262/54/544e4b44be0ec086d33844a6afcf181e.png" alt="img" /><figcaption aria-hidden="true">img</figcaption>
</figure>
<ol start="2" type="1">
<li>CParent1, virtual CParent2</li>
</ol>
<figure>
<img src="https://www.programmerall.com/images/577/4d/4dd9dcff81dff8a38dc924e5e46dc919.png" alt="img" /><figcaption aria-hidden="true">img</figcaption>
</figure>
<p>int nChildSize = sizeof(CChildren) = 24</p>
<p>Memory layout:</p>
<figure>
<img src="https://www.programmerall.com/images/771/d3/d37a0c66a3119294621f0b068f014f83.png" alt="img" /><figcaption aria-hidden="true">img</figcaption>
</figure>
<ol start="3" type="1">
<li>virtual CParent1, virtual CParent2</li>
</ol>
<figure>
<img src="https://www.programmerall.com/images/45/25/25019c36b47c9ecc7567c51b816b37dd.png" alt="img" /><figcaption aria-hidden="true">img</figcaption>
</figure>
<p>int nChildSize = sizeof(CChildren) = 28</p>
<p>Memory layout:</p>
<figure>
<img src="https://www.programmerall.com/images/516/ed/ed9f7705303bbc56c83fc2e6239a1f44.png" alt="img" /><figcaption aria-hidden="true">img</figcaption>
</figure>
<p><a href="https://stackoverflow.com/questions/3324721/virtual-tables-and-virtual-pointers-for-multiple-virtual-inheritance-and-type-ca">to see more</a></p>
<h2 id="diamond-virtual-multiple-inheritance">Diamond virtual multiple inheritance</h2>
<p>(including member variables, virtual functions, and virtual function coverage)</p>
<figure>
<img src="https://www.programmerall.com/images/824/2e/2ea97acff318efac0811a600f20d0ad8.png" alt="img" /><figcaption aria-hidden="true">img</figcaption>
</figure>
<p>int nGrandChildSize = sizeof(CGrandChildren) = 36</p>
<p>Memory layout:</p>
<figure>
<img src="https://www.programmerall.com/images/676/21/21aba026ce6774a216e93f7c81690614.png" alt="img" /><figcaption aria-hidden="true">img</figcaption>
</figure>
<h1 id="sizeof">sizeof</h1>
<p>Depending on the computer architecture, a <a href="https://en.wikipedia.org/wiki/Byte">byte</a> may consist of 8 <em>or more</em> bits, the exact number being recorded in <a href="https://en.cppreference.com/w/cpp/types/climits">CHAR_BIT</a>.</p>
<p><strong>sizeof(empty object) = 1</strong></p>
<p><strong>The following <code>sizeof</code> expressions always evaluate to 1:</strong></p>
<ul>
<li><strong>sizeof(char)</strong></li>
<li><strong>sizeof(signed char)</strong></li>
<li><strong>sizeof(unsigned char)</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Empty</span> &#123;&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Base</span> &#123; <span class="type">int</span> a; &#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Derived</span> : Base &#123; <span class="type">int</span> b; &#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Bit</span> &#123; <span class="type">unsigned</span> bit: <span class="number">1</span>; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Empty e;</span><br><span class="line">    Derived d;</span><br><span class="line">    Base&amp; b = d;</span><br><span class="line">    [[maybe_unused]] Bit bit;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">10</span>];</span><br><span class="line">    std::cout </span><br><span class="line">      &lt;&lt; <span class="string">&quot;1) size of empty class:              &quot;</span> &lt;&lt; <span class="keyword">sizeof</span> e        &lt;&lt; <span class="string">&#x27;\n&#x27;</span> <span class="comment">//1</span></span><br><span class="line">      &lt;&lt; <span class="string">&quot;2) size of pointer:                  &quot;</span> &lt;&lt; <span class="keyword">sizeof</span> &amp;e       &lt;&lt; <span class="string">&#x27;\n&#x27;</span> <span class="comment">//8</span></span><br><span class="line"><span class="comment">//    &lt;&lt; &quot;3) size of function:                 &quot; &lt;&lt; sizeof(void())  &lt;&lt; &#x27;\n&#x27; // error</span></span><br><span class="line"><span class="comment">//    &lt;&lt; &quot;4) size of incomplete type:          &quot; &lt;&lt; sizeof(int[])   &lt;&lt; &#x27;\n&#x27; // error</span></span><br><span class="line"><span class="comment">//    &lt;&lt; &quot;5) size of bit field:                &quot; &lt;&lt; sizeof bit.bit  &lt;&lt; &#x27;\n&#x27; // error</span></span><br><span class="line">      &lt;&lt; <span class="string">&quot;6) size of Bit class:                &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(Bit)     &lt;&lt; <span class="string">&#x27;\n&#x27;</span> <span class="comment">//4</span></span><br><span class="line">      &lt;&lt; <span class="string">&quot;7) size of array of 10 int:          &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">int</span>[<span class="number">10</span>]) &lt;&lt; <span class="string">&#x27;\n&#x27;</span> <span class="comment">//40</span></span><br><span class="line">      &lt;&lt; <span class="string">&quot;8) size of array of 10 int (2):      &quot;</span> &lt;&lt; <span class="keyword">sizeof</span> a        &lt;&lt; <span class="string">&#x27;\n&#x27;</span> <span class="comment">//40</span></span><br><span class="line">      &lt;&lt; <span class="string">&quot;9) length of array of 10 int:        &quot;</span> &lt;&lt; ((<span class="keyword">sizeof</span> a) / (<span class="keyword">sizeof</span> *a))   &lt;&lt; <span class="string">&#x27;\n&#x27;</span><span class="comment">// 10</span></span><br><span class="line">      &lt;&lt; <span class="string">&quot;A) length of array of 10 int (2):    &quot;</span> &lt;&lt; ((<span class="keyword">sizeof</span> a) / (<span class="keyword">sizeof</span> a[<span class="number">0</span>])) &lt;&lt; <span class="string">&#x27;\n&#x27;</span><span class="comment">// 10</span></span><br><span class="line">      &lt;&lt; <span class="string">&quot;B) size of the Derived:              &quot;</span> &lt;&lt; <span class="keyword">sizeof</span> d        &lt;&lt; <span class="string">&#x27;\n&#x27;</span><span class="comment">// 8</span></span><br><span class="line">      &lt;&lt; <span class="string">&quot;C) size of the Derived through Base: &quot;</span> &lt;&lt; <span class="keyword">sizeof</span> b        &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;<span class="comment">// 4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="uml">uml</h1>
<p><img src="https://upload-images.jianshu.io/upload_images/5336514-d05e8edc42eb1469.png?imageMogr2/auto-orient/strip|imageView2/2/w/512/format/webp" alt="img" style="zoom:33%;" /></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+表示 public</span><br><span class="line">-表示 private  </span><br><span class="line">#表示 protected </span><br><span class="line">~表示 default,也就是包权限  </span><br><span class="line">_下划线表示 static  </span><br><span class="line">斜体表示抽象  </span><br></pre></td></tr></table></figure>
<p>单向箭头关联 A--&gt;B, A 有 B 类型的指针</p>
<p>虚线箭头依赖 A~~&gt;B, A 依赖于 B</p>
<p>实心箭头组合 A&lt;*&gt;--&gt;B, A 中有(聚合了) B, 且 B 不能独立于 A</p>
<p>空心箭头聚合 A◇--&gt;B, A 中有(聚合了) B, B 能独立于 A</p>
<p>空心箭头继承 A--|&gt;B, A 继承自 B</p>
<p>虚线空心箭头 A~~|&gt;B, A 实现了 B 的接口</p>
<h1 id="initialization">initialization</h1>
<p>Depending on context, the initializer may invoke:</p>
<ul>
<li><p><a href="https://en.cppreference.com/w/cpp/language/value_initialization">Value initialization</a>, e.g. <a href="http://en.cppreference.com/w/cpp/string/basic_string">std::string</a> s{}; This is the initialization performed when an object is constructed with an <strong>empty</strong> initializer.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">T1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> mem1;</span><br><span class="line">    std::string mem2;</span><br><span class="line">&#125;; <span class="comment">// implicit default constructor</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">T2</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> mem1;</span><br><span class="line">    std::string mem2;</span><br><span class="line">    <span class="built_in">T2</span>(<span class="type">const</span> T2&amp;) &#123; &#125; <span class="comment">// user-provided copy constructor</span></span><br><span class="line">&#125;;                    <span class="comment">// no default constructor</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">T3</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> mem1;</span><br><span class="line">    std::string mem2;</span><br><span class="line">    <span class="built_in">T3</span>() &#123; &#125; <span class="comment">// user-provided default constructor</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">std::string s&#123;&#125;; <span class="comment">// class =&gt; default-initialization, the value is &quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n&#123;&#125;;                <span class="comment">// scalar =&gt; zero-initialization, the value is 0</span></span><br><span class="line">    <span class="type">double</span> f = <span class="built_in">double</span>();    <span class="comment">// scalar =&gt; zero-initialization, the value is 0.0</span></span><br><span class="line">    <span class="type">int</span>* a = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">10</span>](); <span class="comment">// array =&gt; value-initialization of each element</span></span><br><span class="line">                            <span class="comment">//          the value of each element is 0</span></span><br><span class="line">    T1 t1&#123;&#125;;                <span class="comment">// class with implicit default constructor =&gt;</span></span><br><span class="line">                            <span class="comment">//     t1.mem1 is zero-initialized, the value is 0</span></span><br><span class="line">                            <span class="comment">//     t1.mem2 is default-initialized, the value is &quot;&quot;</span></span><br><span class="line"><span class="comment">//  T2 t2&#123;&#125;;                // error: class with no default constructor</span></span><br><span class="line">    T3 t3&#123;&#125;;                <span class="comment">// class with user-provided default constructor =&gt;</span></span><br><span class="line">                            <span class="comment">//     t3.mem1 is default-initialized to indeterminate value</span></span><br><span class="line">                            <span class="comment">//     t3.mem2 is default-initialized, the value is &quot;&quot;</span></span><br><span class="line">    <span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">v</span><span class="params">(<span class="number">3</span>)</span></span>;  <span class="comment">// value-initialization of each element</span></span><br><span class="line">                            <span class="comment">// the value of each element is 0</span></span><br><span class="line">    <span class="keyword">delete</span>[] a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><a href="https://en.cppreference.com/w/cpp/language/direct_initialization">Direct initialization</a>, e.g. <a href="http://en.cppreference.com/w/cpp/string/basic_string">std::string</a> s("hello"); Initializes an object from explicit set of constructor arguments.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">    <span class="type">int</span> mem;</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">Foo</span><span class="params">(<span class="type">int</span> n)</span> : mem(n) &#123;</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">std::string <span class="title">s1</span><span class="params">(<span class="string">&quot;test&quot;</span>)</span></span>; <span class="comment">// constructor from const char*</span></span><br><span class="line">    <span class="function">std::string <span class="title">s2</span><span class="params">(<span class="number">10</span>, <span class="string">&#x27;a&#x27;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">std::unique_ptr&lt;<span class="type">int</span>&gt; <span class="title">p</span><span class="params">(<span class="keyword">new</span> <span class="type">int</span>(<span class="number">1</span>))</span></span>; <span class="comment">// OK: explicit constructors allowed</span></span><br><span class="line"><span class="comment">//  std::unique_ptr&lt;int&gt; p = new int(1); // error: constructor is explicit</span></span><br><span class="line"></span><br><span class="line">    <span class="function">Foo <span class="title">f</span><span class="params">(<span class="number">2</span>)</span></span>; <span class="comment">// f is direct-initialized:</span></span><br><span class="line">              <span class="comment">// constructor parameter n is copy-initialized from the rvalue 2</span></span><br><span class="line">              <span class="comment">// f.mem is direct-initialized from the parameter n</span></span><br><span class="line"><span class="comment">//  Foo f2 = 2; // error: constructor is explicit</span></span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; s1 &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; s2 &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; *p &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; f.mem  &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><a href="https://en.cppreference.com/w/cpp/language/copy_initialization">Copy initialization</a>, e.g. <a href="http://en.cppreference.com/w/cpp/string/basic_string">std::string</a> s = "hello"; Initializes an object from another object.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">A</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">operator</span> <span class="title">int</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="number">12</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">B</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">B</span>(<span class="type">int</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::string s = <span class="string">&quot;test&quot;</span>;        <span class="comment">// OK: constructor is non-explicit</span></span><br><span class="line">    std::string s2 = std::<span class="built_in">move</span>(s); <span class="comment">// this copy-initialization performs a move</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  std::unique_ptr&lt;int&gt; p = new int(1); // error: constructor is explicit</span></span><br><span class="line">    <span class="function">std::unique_ptr&lt;<span class="type">int</span>&gt; <span class="title">p</span><span class="params">(<span class="keyword">new</span> <span class="type">int</span>(<span class="number">1</span>))</span></span>;  <span class="comment">// OK: direct-initialization</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n = <span class="number">3.14</span>;    <span class="comment">// floating-integral conversion</span></span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> b = n; <span class="comment">// const doesn&#x27;t matter</span></span><br><span class="line">    <span class="type">int</span> c = b;       <span class="comment">// ...either way</span></span><br><span class="line"></span><br><span class="line">    A a;</span><br><span class="line">    B b0 = <span class="number">12</span>;</span><br><span class="line"><span class="comment">//  B b1 = a;       // &lt; error: conversion from &#x27;A&#x27; to non-scalar type &#x27;B&#x27; requested</span></span><br><span class="line">    B b2&#123;a&#125;;        <span class="comment">// &lt; identical, calling A::operator int(), then B::B(int)</span></span><br><span class="line">    B b3 = &#123;a&#125;;     <span class="comment">// &lt;</span></span><br><span class="line">    <span class="keyword">auto</span> b4 = B&#123;a&#125;; <span class="comment">// &lt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  b0 = a;         // &lt; error, assignment operator overload needed </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><a href="https://en.cppreference.com/w/cpp/language/list_initialization">List initialization</a>, e.g. <a href="http://en.cppreference.com/w/cpp/string/basic_string">std::string</a> s{'a', 'b', 'c'}; Initializes an object from <em>braced-init-list</em>.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; mem = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;; <span class="comment">// list-initialization of a non-static member</span></span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; mem2;</span><br><span class="line">    <span class="built_in">Foo</span>() : mem2&#123;<span class="number">-1</span>, <span class="number">-2</span>, <span class="number">-3</span>&#125; &#123;&#125; <span class="comment">// list-initialization of a member in constructor</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">std::pair&lt;std::string, std::string&gt; <span class="title">f</span><span class="params">(std::pair&lt;std::string, std::string&gt; p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;p.second, p.first&#125;; <span class="comment">// list-initialization in return statement</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n0&#123;&#125;;     <span class="comment">// value-initialization (to zero)</span></span><br><span class="line">    <span class="type">int</span> n1&#123;<span class="number">1</span>&#125;;    <span class="comment">// direct-list-initialization</span></span><br><span class="line">    std::string s1&#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>&#125;; <span class="comment">// initializer-list constructor call</span></span><br><span class="line">    std::string s2&#123;s1, <span class="number">2</span>, <span class="number">2</span>&#125;;           <span class="comment">// regular constructor call</span></span><br><span class="line">    std::string s3&#123;<span class="number">0x61</span>, <span class="string">&#x27;a&#x27;</span>&#125;; <span class="comment">// initializer-list ctor is preferred to (int, char)</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n2 = &#123;<span class="number">1</span>&#125;; <span class="comment">// copy-list-initialization</span></span><br><span class="line">    <span class="type">double</span> d = <span class="type">double</span>&#123;<span class="number">1.2</span>&#125;; <span class="comment">// list-initialization of a prvalue, then copy-init</span></span><br><span class="line">    <span class="keyword">auto</span> s4 = std::string&#123;<span class="string">&quot;HelloWorld&quot;</span>&#125;; <span class="comment">// same as above, no temporary created since C++17</span></span><br><span class="line"></span><br><span class="line">    std::map&lt;<span class="type">int</span>, std::string&gt; m = &#123; <span class="comment">// nested list-initialization</span></span><br><span class="line">           &#123;<span class="number">1</span>, <span class="string">&quot;a&quot;</span>&#125;,</span><br><span class="line">           &#123;<span class="number">2</span>, &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>&#125; &#125;,</span><br><span class="line">           &#123;<span class="number">3</span>, s1&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="built_in">f</span>(&#123;<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>&#125;).first <span class="comment">// list-initialization in function call</span></span><br><span class="line">              &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">const</span> <span class="title">int</span> <span class="params">(&amp;ar)</span>[2] </span>= &#123;<span class="number">1</span>,<span class="number">2</span>&#125;; <span class="comment">// binds a lvalue reference to a temporary array</span></span><br><span class="line">    <span class="type">int</span>&amp;&amp; r1 = &#123;<span class="number">1</span>&#125;; <span class="comment">// binds a rvalue reference to a temporary int</span></span><br><span class="line"><span class="comment">//  int&amp; r2 = &#123;2&#125;; // error: cannot bind rvalue to a non-const lvalue ref</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  int bad&#123;1.0&#125;; // error: narrowing conversion</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> uc1&#123;<span class="number">10</span>&#125;; <span class="comment">// okay</span></span><br><span class="line"><span class="comment">//  unsigned char uc2&#123;-1&#125;; // error: narrowing conversion</span></span><br><span class="line"></span><br><span class="line">    Foo f;</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; n0 &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; n1 &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; n2 &lt;&lt; <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">              &lt;&lt; s1 &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; s2 &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; s3 &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> p: m)</span><br><span class="line">        std::cout &lt;&lt; p.first &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; p.second &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> n: f.mem)</span><br><span class="line">        std::cout &lt;&lt; n &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> n: f.mem2)</span><br><span class="line">        std::cout &lt;&lt; n &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><a href="https://en.cppreference.com/w/cpp/language/aggregate_initialization">Aggregate initialization</a>, e.g. char a[3] = {'a', 'b'}; Initializes an aggregate from braced-init-list.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">S</span> &#123;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line">        <span class="type">int</span> j;</span><br><span class="line">        <span class="type">int</span> a[<span class="number">3</span>];</span><br><span class="line">    &#125; b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    S s1 = &#123; <span class="number">1</span>, &#123; <span class="number">2</span>, <span class="number">3</span>, &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125; &#125; &#125;;</span><br><span class="line">    S s2 = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;; <span class="comment">// same, but with brace elision 括号省略</span></span><br><span class="line">    S s3&#123;<span class="number">1</span>, &#123;<span class="number">2</span>, <span class="number">3</span>, &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125; &#125; &#125;; <span class="comment">// same, using direct-list-initialization syntax</span></span><br><span class="line">    S s4&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;; <span class="comment">// error until CWG 1270:</span></span><br><span class="line">                            <span class="comment">// brace elision only allowed with equals sign</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> ar[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;; <span class="comment">// ar is int[3]</span></span><br><span class="line">    <span class="type">int</span> ab[] (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">// (C++20) ab is int[3]</span></span><br><span class="line"><span class="comment">//  char cr[3] = &#123;&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;&#125;; // too many initializer clauses</span></span><br><span class="line">    <span class="type">char</span> cr[<span class="number">3</span>] = &#123;<span class="string">&#x27;a&#x27;</span>&#125;; <span class="comment">// array initialized as &#123;&#x27;a&#x27;, &#x27;\0&#x27;, &#x27;\0&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> ar2d1[<span class="number">2</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">1</span>, <span class="number">2</span>&#125;, &#123;<span class="number">3</span>, <span class="number">4</span>&#125;&#125;; <span class="comment">// fully-braced 2D array: &#123;1, 2&#125;</span></span><br><span class="line">                                        <span class="comment">//                        &#123;3, 4&#125;</span></span><br><span class="line">    <span class="type">int</span> ar2d2[<span class="number">2</span>][<span class="number">2</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;; <span class="comment">// brace elision: &#123;1, 2&#125;</span></span><br><span class="line">                                    <span class="comment">//                &#123;3, 4&#125;</span></span><br><span class="line">    <span class="type">int</span> ar2d3[<span class="number">2</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">1</span>&#125;, &#123;<span class="number">2</span>&#125;&#125;;   <span class="comment">// only first column: &#123;1, 0&#125;</span></span><br><span class="line">                                    <span class="comment">//                    &#123;2, 0&#125;</span></span><br><span class="line"></span><br><span class="line">    std::array&lt;<span class="type">int</span>, 3&gt; std_ar2&#123; &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125; &#125;;  <span class="comment">// std::array is an aggregate</span></span><br><span class="line">    std::array&lt;<span class="type">int</span>, 3&gt; std_ar1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;; <span class="comment">// brace-elision okay</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  int ai[] = &#123; 1, 2.0 &#125;; // narrowing conversion from double to int:</span></span><br><span class="line">                           <span class="comment">// error in C++11, okay in C++03</span></span><br><span class="line"></span><br><span class="line">    std::string ars[] = &#123;std::<span class="built_in">string</span>(<span class="string">&quot;one&quot;</span>), <span class="comment">// copy-initialization</span></span><br><span class="line">                         <span class="string">&quot;two&quot;</span>,              <span class="comment">// conversion, then copy-initialization</span></span><br><span class="line">                         &#123;<span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;e&#x27;</span>&#125; &#125;; <span class="comment">// list-initialization</span></span><br><span class="line">    <span class="keyword">union</span> <span class="title class_">U</span> &#123;</span><br><span class="line">        <span class="type">int</span> a;</span><br><span class="line">        <span class="type">const</span> <span class="type">char</span>* b;</span><br><span class="line">    &#125;;</span><br><span class="line">    U u1 = &#123;<span class="number">1</span>&#125;; <span class="comment">// OK, first member of the union</span></span><br><span class="line"><span class="comment">//  U u2 = &#123; 0, &quot;asdf&quot; &#125;; // error: too many initializers for union</span></span><br><span class="line"><span class="comment">//  U u3 = &#123; &quot;asdf&quot; &#125;; // error: invalid conversion to int</span></span><br><span class="line"></span><br><span class="line">    [](<span class="keyword">auto</span>...) &#123; std::<span class="built_in">puts</span>(<span class="string">&quot;Garbage unused variables... Done.&quot;</span>); &#125; (</span><br><span class="line">        s1, s2, s3, s4, ar, ab, cr, ar2d1, ar2d2, ar2d3, std_ar2, std_ar1, u1</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// aggregate</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">base1</span> &#123; <span class="type">int</span> b1, b2 = <span class="number">42</span>; &#125;;</span><br><span class="line"><span class="comment">// non-aggregate</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">base2</span> &#123;</span><br><span class="line">  <span class="built_in">base2</span>() : <span class="built_in">b3</span>(<span class="number">42</span>) &#123;&#125;</span><br><span class="line">  <span class="type">int</span> b3;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// aggregate in C++17</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">derived</span> : base1, base2 &#123; <span class="type">int</span> d; &#125;;</span><br><span class="line">derived d1&#123; &#123;<span class="number">1</span>, <span class="number">2</span>&#125;, &#123; &#125;, <span class="number">4</span>&#125;; <span class="comment">// d1.b1 = 1, d1.b2 = 2,  d1.b3 = 42, d1.d = 4</span></span><br><span class="line">derived d2&#123; &#123;    &#125;, &#123; &#125;, <span class="number">4</span>&#125;; <span class="comment">// d2.b1 = 0, d2.b2 = 42, d2.b3 = 42, d2.d = 4</span></span><br></pre></td></tr></table></figure></li>
<li><p><a href="https://en.cppreference.com/w/cpp/language/reference_initialization">Reference initialization</a>, e.g. char&amp; c = a[0]; Binds a reference to an object.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">S</span> &#123;</span><br><span class="line">    <span class="type">int</span> mi;</span><br><span class="line">    <span class="type">const</span> std::pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&amp; mp; <span class="comment">// reference member</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(<span class="type">int</span>)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">A</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">B</span> : A &#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="keyword">operator</span> <span class="type">int</span>&amp;() &#123; <span class="keyword">return</span> n; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">B <span class="title">bar</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">B</span>(); &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//int&amp; bad_r;      // error: no initializer</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span>&amp; ext_r; <span class="comment">// OK</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//  Lvalues</span></span><br><span class="line">    <span class="type">int</span> n = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span>&amp; r1 = n;                    <span class="comment">// lvalue reference to the object n</span></span><br><span class="line">    <span class="function"><span class="type">const</span> <span class="type">int</span>&amp; <span class="title">cr</span><span class="params">(n)</span></span>;               <span class="comment">// reference can be more cv-qualified</span></span><br><span class="line">    <span class="keyword">volatile</span> <span class="type">int</span>&amp; cv&#123;n&#125;;            <span class="comment">// any initializer syntax can be used</span></span><br><span class="line">    <span class="type">int</span>&amp; r2 = r1;                   <span class="comment">// another lvalue reference to the object n</span></span><br><span class="line"><span class="comment">//  int&amp; bad = cr;                  // error: less cv-qualified</span></span><br><span class="line">    <span class="type">int</span>&amp; r3 = <span class="built_in">const_cast</span>&lt;<span class="type">int</span>&amp;&gt;(cr); <span class="comment">// const_cast is needed</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">void</span> (&amp;rf)(<span class="type">int</span>) = foo; <span class="comment">// lvalue reference to function</span></span><br><span class="line">    <span class="type">int</span> ar[<span class="number">3</span>];</span><br><span class="line">    <span class="built_in">int</span> (&amp;ra)[<span class="number">3</span>] = ar;     <span class="comment">// lvalue reference to array</span></span><br><span class="line"></span><br><span class="line">    B b;</span><br><span class="line">    A&amp; base_ref = b;        <span class="comment">// reference to base subobject</span></span><br><span class="line">    <span class="type">int</span>&amp; converted_ref = b; <span class="comment">// reference to the result of a conversion</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  Rvalues</span></span><br><span class="line"><span class="comment">//  int&amp; bad = 1;        // error: cannot bind lvalue ref to rvalue</span></span><br><span class="line">    <span class="type">const</span> <span class="type">int</span>&amp; cref = <span class="number">1</span>; <span class="comment">// bound to rvalue</span></span><br><span class="line">    <span class="type">int</span>&amp;&amp; rref = <span class="number">1</span>;      <span class="comment">// bound to rvalue</span></span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> A&amp; cref2 = <span class="built_in">bar</span>(); <span class="comment">// reference to A subobject of B temporary</span></span><br><span class="line">    A&amp;&amp; rref2 = <span class="built_in">bar</span>();      <span class="comment">// same</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span>&amp;&amp; xref = <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&amp;&amp;&gt;(n); <span class="comment">// bind directly to n</span></span><br><span class="line"><span class="comment">//  int&amp;&amp; copy_ref = n;                 // error: can&#x27;t bind to an lvalue</span></span><br><span class="line">    <span class="type">double</span>&amp;&amp; copy_ref = n;              <span class="comment">// bind to an rvalue temporary with value 1.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  Restrictions on temporary lifetimes</span></span><br><span class="line">    std::ostream&amp; buf_ref = std::<span class="built_in">ostringstream</span>() &lt;&lt; <span class="string">&#x27;a&#x27;</span>; <span class="comment">// the ostringstream temporary</span></span><br><span class="line">                      <span class="comment">// was bound to the left operand of operator&lt;&lt;</span></span><br><span class="line">                      <span class="comment">// but its lifetime ended at the semicolon</span></span><br><span class="line">                      <span class="comment">// so buf_ref is a dangling reference</span></span><br><span class="line"></span><br><span class="line">    S a &#123;<span class="number">1</span>, &#123;<span class="number">2</span>, <span class="number">3</span>&#125; &#125;;         <span class="comment">// temporary pair &#123;2, 3&#125; bound to the reference member</span></span><br><span class="line">                              <span class="comment">// a.mp and its lifetime is extended to match </span></span><br><span class="line">                              <span class="comment">// the lifetime of object a</span></span><br><span class="line">    S* p = <span class="keyword">new</span> S&#123;<span class="number">1</span>, &#123;<span class="number">2</span>, <span class="number">3</span>&#125; &#125;; <span class="comment">// temporary pair &#123;2, 3&#125; bound to the reference</span></span><br><span class="line">                              <span class="comment">// member p-&gt;mp, but its lifetime ended at the semicolon</span></span><br><span class="line">                              <span class="comment">// p-&gt;mp is a dangling reference</span></span><br><span class="line">    <span class="keyword">delete</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="types-in-cpp">types in cpp</h1>
<ul>
<li><p>Object types</p>
<ul>
<li><p>Scalars scalars are primitive objects which contain <strong>a single value</strong> and are not composed of other C++ objects.</p>
<ol type="1">
<li><p>arithmetic (integral, float)</p></li>
<li><p>pointers: <code>T *</code> for any type <code>T</code></p></li>
<li><p>enum</p></li>
<li><p>pointer-to-member</p></li>
<li><p><code>nullptr_t</code></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(std::<span class="type">nullptr_t</span> nullp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// Passed a null pointer</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol></li>
<li><p>Arrays: <code>T[]</code> or <code>T[N]</code> for any complete, non-reference type <code>T</code></p></li>
<li><p>Classes: <code>class Foo</code> or <code>struct Bar</code></p>
<ol type="1">
<li>Trivial classes</li>
<li>Aggregates</li>
<li>POD classes</li>
<li>(etc. etc.)</li>
</ol></li>
<li><p>Unions: <code>union Zip</code></p></li>
</ul></li>
<li><p>References types: <code>T &amp;</code>, <code>T &amp;&amp;</code> for any object or free-function type <code>T</code></p></li>
<li><p>Function types</p>
<ul>
<li>Free functions: <code>R foo(Arg1, Arg2, ...)</code></li>
<li>Member functions: <code>R T::foo(Arg1, Arg2, ...)</code></li>
</ul></li>
<li><p><code>void</code></p></li>
</ul>
<p>POD-classes, POD-unions, scalar types, and arrays of such types are collectively called <strong><em>POD-types.</em></strong></p>
<h1 id="aggregates-and-podplain-old-data"><a href="https://stackoverflow.com/questions/4178175/what-are-aggregates-and-pods-and-how-why-are-they-special">aggregates and POD(plain old data)</a></h1>
<h2 id="c03">c++03</h2>
<ul>
<li><p>An aggregate is</p>
<ol type="1">
<li>an array or</li>
<li>a class (clause 9) with <strong>no user-declared constructors (12.1), no private or protected non-static data members (clause 11), no base classes (clause 10), and no virtual functions (10.3).</strong></li>
</ol>
<ul>
<li>An aggregate class can have a user-declared/user-defined copy-assignment operator and/or destructor</li>
<li>An array is an aggregate even if it is an array of non-aggregate class type.</li>
<li>This does not mean an aggregate class cannot have constructors, in fact it can have a default constructor and/or a copy constructor as long as they are <strong>implicitly declared by the compiler</strong>, and not explicitly by the user</li>
</ul></li>
<li><p>aggregate feature</p>
<p>They, unlike non-aggregate classes, can be initialized with curly braces <code>&#123;&#125;</code>.</p>
<p>We should understand that memberwise initialization with braces implies that the class is nothing more than the sum of its members.</p></li>
<li><p>POD</p>
<p>A POD-struct is an aggregate class that has <strong>no non-static data members of type non-POD-struct, non-POD-union (or array of such types) or reference,</strong> and <strong>has no user-defined copy assignment operator and no user-defined destructor</strong>. Similarly, a POD-union is an aggregate union that has no non-static data members of type non-POD-struct, non-POD-union (or array of such types) or reference, and has no user-defined copy assignment operator and no user-defined destructor. A POD class is a class that is either a POD-struct or a POD-union.</p>
<p>An aggregate class is called a POD if <strong>it has no user-defined copy-assignment operator and destructor and none of its nonstatic members is a non-POD class, array of non-POD, or a reference</strong>.</p></li>
</ul>
<h2 id="c11">c++11</h2>
<p>A POD struct is a non-union class that is both a trivial class and a standard-layout class, and has no non-static data members of type non-POD struct, non-POD union (or array of such types). Similarly, a POD union is a union that is both a trivial class and a standard layout class, and has no non-static data members of type non-POD struct, non-POD union (or array of such types). A POD class is a class that is either a POD struct or a POD union.</p>
<ul>
<li><p>trivial classes</p>
<p>Basically this means that a copy or move constructor is trivial if it is not user-provided, the class has nothing virtual in it, and this property holds recursively for all the members of the class and for the base class.</p></li>
<li><p>standard layout</p>
<p>The standard mentions that these are useful for communicating with other languages, and that's because a standard-layout class has the same memory layout of the equivalent C struct or union.</p></li>
</ul>
<h1 id="const-in-function">const in function</h1>
<p>A "const function", denoted with the keyword <code>const</code> after a function declaration, <strong>makes it a compiler error for this class function to change a member variable of the class</strong>. However, reading of a class variables is okay inside of the function, but writing inside of this function will generate a compiler error.</p>
<p>Another way of thinking about such "const function" is by viewing a class function as a normal function taking an implicit <code>this</code> pointer. So a method <code>int Foo::Bar(int random_arg)</code> (<strong>without the const</strong> at the end) results in a function like <code>int Foo_Bar(Foo* this, int random_arg)</code>, and a call such as <code>Foo f; f.Bar(4)</code> will internally correspond to something like <code>Foo f; Foo_Bar(&amp;f, 4)</code>. Now adding the const at the end (<code>int Foo::Bar(int random_arg) const</code>) can then be understood as a declaration <strong>with a const this pointer</strong>: <code>int Foo_Bar(const Foo* this, int random_arg)</code>. Since the type of <code>this</code> in such case is const, no modifications of member variables are possible.</p>
<h1 id="const-in-pointer">const in pointer</h1>
<ul>
<li><code>int*</code> - pointer to int</li>
<li><code>int const *</code> - pointer to const int</li>
<li><code>int * const</code> - const pointer to int</li>
<li><code>int const * const</code> - const pointer to const int</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> ci = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> i2 = <span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span>* pi1 = &amp;ci;</span><br><span class="line"><span class="type">int</span>* <span class="type">const</span> pi2 = &amp;i;</span><br><span class="line">*pi1 = <span class="number">2</span>;<span class="comment">//error read only</span></span><br><span class="line">*pi2 = <span class="number">3</span>;</span><br><span class="line">pi2 = &amp;i2;<span class="comment">//error cannot assign</span></span><br><span class="line">pi1 = &amp;i;</span><br><span class="line">*pi1 = <span class="number">2</span>;<span class="comment">//error read only</span></span><br></pre></td></tr></table></figure>
<h1 id="traits"><a href="https://www.internalpointers.com/post/quick-primer-type-traits-modern-cpp">traits</a></h1>
<p><strong>Type traits</strong> are a clever technique used in C++ template metaprogramming that gives you the ability to inspect and transform the properties of <em>types</em>.</p>
<p>For example, given a generic type <code>T</code> — it could be <code>int</code>, <code>bool</code>, <code>std::vector</code> or whatever you want — with type traits you can ask the compiler some questions: is it an integer? Is it a function? Is it a pointer? Or maybe a class? Does it have a destructor? Can you copy it? Will it throw exceptions? ... and so on. This is extremely useful in <strong>conditional compilation</strong>, where you instruct the compiler to pick the right path according to the type in input. We will see an example shortly.</p>
<p>The beauty of these techniques is that everything takes place at <em>compile time</em> with no runtime penalties: it's template metaprogramming, after all.</p>
<h1 id="typedef-in-stl">typedef in stl</h1>
<p>private 底下的那些，主要就是因为原类型名完整写出来太长，于是取个短名字。</p>
<p>public 底下那些，除了名字长以外，通常还有很重要一个原因：就是标准规定实现某种类型（典型的如容器，比如本例的 std::map），需要对外提供这些类型。最典型如图中的“iterator”和“const_iterator”，就是因为STL中的（正经）容器，需要对外提供“迭代器”类型和“常量迭代器”类型。 这样，当有一天你需要遍历一个 容器，比如map时，你才可以方便地这样写：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> ( std::map&lt;std::string, <span class="type">int</span>&gt;::const_iterator it = m.<span class="built_in">cbegin</span>(); it != m.<span class="built_in">cend</span>(); ++it)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure>
<p>那个 const_iterator 哪来的？就是在 map&lt;K, V&gt; 里定义的那个 typedef 。 链接：https://www.zhihu.com/question/441345616/answer/1699499726</p>
<h1 id="adl-argument-dependent-lookup">ADL argument-dependent lookup</h1>
<p>Argument-dependent lookup, also known as ADL, or Koenig lookup [<a href="https://en.cppreference.com/w/cpp/language/adl#cite_note-1">1]</a>, is the set of rules for looking up the unqualified function names in <a href="https://en.cppreference.com/w/cpp/language/operator_other">function-call expressions</a>, including implicit function calls to <a href="https://en.cppreference.com/w/cpp/language/operators">overloaded operators</a>. These function names are looked up in the namespaces of their arguments in addition to the scopes and namespaces considered by the usual <a href="https://en.cppreference.com/w/cpp/language/lookup">unqualified name lookup</a>.</p>
<p>Argument-dependent lookup makes it possible to use operators defined in a different namespace. Example:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Test\n&quot;</span>; <span class="comment">// There is no operator&lt;&lt; in global namespace, but ADL</span></span><br><span class="line">                           <span class="comment">// examines std namespace because the left argument is in</span></span><br><span class="line">                           <span class="comment">// std and finds std::operator&lt;&lt;(std::ostream&amp;, const char*)</span></span><br><span class="line">    <span class="keyword">operator</span>&lt;&lt;(std::cout, <span class="string">&quot;Test\n&quot;</span>); <span class="comment">// same, using function call notation</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// however,</span></span><br><span class="line">    std::cout &lt;&lt; endl; <span class="comment">// Error: &#x27;endl&#x27; is not declared in this namespace.</span></span><br><span class="line">                       <span class="comment">// This is not a function call to endl(), so ADL does not apply</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">endl</span>(std::cout); <span class="comment">// OK: this is a function call: ADL examines std namespace</span></span><br><span class="line">                     <span class="comment">// because the argument of endl is in std, and finds std::endl</span></span><br><span class="line"></span><br><span class="line">    (endl)(std::cout); <span class="comment">// Error: &#x27;endl&#x27; is not declared in this namespace.</span></span><br><span class="line">                       <span class="comment">// The sub-expression (endl) is not a function call expression</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="dependent-name-name-binding"><a href="https://en.cppreference.com/w/cpp/language/dependent_name">dependent name</a> &amp; name binding</h1>
<p>inside the definition of a <a href="https://en.cppreference.com/w/cpp/language/templates">template</a> (both <a href="https://en.cppreference.com/w/cpp/language/class_template">class template</a> and <a href="https://en.cppreference.com/w/cpp/language/function_template">function template</a>), the meaning of some constructs may differ from one instantiation to another. In particular, types and expressions may <strong>depend on types of type template parameters and values of non-type template parameters.</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">X</span> : B&lt;T&gt; <span class="comment">// &quot;B&lt;T&gt;&quot; is dependent on T</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">typename</span> T::A* pa; <span class="comment">// &quot;T::A&quot; is dependent on T</span></span><br><span class="line">                       <span class="comment">// (see below for the meaning of this use of &quot;typename&quot;)</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(B&lt;T&gt;* pb)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">static</span> <span class="type">int</span> i = B&lt;T&gt;::i; <span class="comment">// &quot;B&lt;T&gt;::i&quot; is dependent on T</span></span><br><span class="line">        pb-&gt;j++; <span class="comment">// &quot;pb-&gt;j&quot; is dependent on T</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>name binding</p>
<p>为模板显式或隐式使用的每个名字寻找其声明 的过程称为名字绑定</p>
<p>模板中使用的名字分为依赖性名字 dependent name, 非依赖性名字</p>
<ul>
<li><p>dependent name 依赖于模板参数的名字, 在实例化点完成绑定 默认情况下, 编译器假定 dependent name 不是类型名, 如果需要, 必须用 typename 显式声明</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Container&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fct</span><span class="params">(Container&amp; c)</span></span>&#123;</span><br><span class="line">  Container::value_type v1 = c[<span class="number">7</span>];<span class="comment">//error</span></span><br><span class="line">  <span class="keyword">typename</span> Container::value_type v2 = c[<span class="number">9</span>];<span class="comment">//coorect</span></span><br><span class="line">  <span class="keyword">auto</span> v3 = c[<span class="number">11</span>];<span class="comment">//correct</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//或者使用别名</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">using</span> Value_type&lt;T&gt; = <span class="keyword">typename</span> T::value_type;</span><br></pre></td></tr></table></figure></li>
<li><p>independent name 不依赖于模板参数的名字, 在定义点完成绑定</p></li>
</ul></li>
</ul>
<h1 id="qualified-name">qualified name</h1>
<p>A <em>qualified</em> name is a name that appears on the right hand side of the scope resolution operator <code>::</code> (see also <a href="https://en.cppreference.com/w/cpp/language/identifiers#Qualified_identifiers">qualified identifiers</a>).</p>
<h1 id="nested-class">nested class</h1>
<p>A nested class is a class which is declared in another enclosing class. A nested class is a member and as such has the same access rights as any other member.</p>
<h1 id="typename">typename</h1>
<p><a href="https://stackoverflow.com/questions/610245/where-and-why-do-i-have-to-put-the-template-and-typename-keywords">Where and why do I have to put the "template" and "typename" keywords?</a></p>
<p>(See <a href="https://stackoverflow.com/a/17579889/4561887">here also for my C++11 answer</a>)</p>
<p>In order to parse a C++ program, the compiler needs to know whether certain names are types or not. The following example demonstrates that:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">t * f;</span><br></pre></td></tr></table></figure>
<p>How should this be parsed? For many languages a compiler doesn't need to know the meaning of a name in order to parse and basically know what action a line of code does. In C++, the above however can yield vastly different interpretations depending on what <code>t</code> means. If it's a type, then it will be a declaration of a pointer <code>f</code>. However if it's not a type, it will be a multiplication. So the C++ Standard says at paragraph (3/7):</p>
<blockquote>
<p>Some names denote types or templates. In general, <strong>whenever a name is encountered it is necessary to determine whether that name denotes one of these entities</strong> before continuing to parse the program that contains it. The process that determines this is called <strong>name lookup.</strong></p>
</blockquote>
<p>How will the compiler find out what a name <code>t::x</code> refers to, if <code>t</code> refers to a template type parameter? <code>x</code> could be a static int data member that could be multiplied or could equally well be a nested class or typedef that could yield to a declaration. <strong>If a name has this property - that it can't be looked up until the actual template arguments are known - then it's called a *dependent name* (it "depends" on the template parameters).</strong></p>
<p>You might recommend to just wait till the user instantiates the template:</p>
<blockquote>
<p><em>Let's wait until the user instantiates the template, and then later find out the real meaning of <code>t::x \* f;</code>.</em></p>
</blockquote>
<p>This will work and actually is allowed by the Standard as a possible implementation approach. These compilers basically copy the template's text into an internal buffer, and only when an instantiation is needed, they parse the template and possibly detect errors in the definition. But instead of bothering the template's users (poor colleagues!) with errors made by a template's author, other implementations choose to check templates early on and give errors in the definition as soon as possible, before an instantiation even takes place.</p>
<p>So there has to be a way to tell the compiler that certain names are types and that certain names aren't.</p>
<h1 id="the-typename-keyword">The "typename" keyword</h1>
<p>The answer is: <em>We</em> decide how the compiler should parse this. If <code>t::x</code> is a dependent name, then we need to prefix it by <code>typename</code> to tell the compiler to parse it in a certain way. The Standard says at (14.6/2):</p>
<blockquote>
<p>A name used in a template declaration or definition and that is dependent on a template-parameter <strong>is assumed not to name a type</strong> unless the applicable name lookup finds a type name or the name is qualified by the keyword typename.</p>
</blockquote>
<p>There are many names for which <code>typename</code> is not necessary, because the compiler can, with the applicable name lookup in the template definition, figure out how to parse a construct itself - for example with <code>T *f;</code>, when <code>T</code> is a type template parameter. But for <code>t::x * f;</code> to be a declaration, it must be written as <code>typename t::x *f;</code>. If you omit the keyword and the name is taken to be a non-type, but when instantiation finds it denotes a type, the usual error messages are emitted by the compiler. Sometimes, the error consequently is given at definition time:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// t::x is taken as non-type, but as an expression the following misses an operator between the two names or a semicolon separating them.</span></span><br><span class="line">t::x f;</span><br></pre></td></tr></table></figure>
<p><em>The syntax allows <code>typename</code> only before qualified names</em> - it is therefor taken as granted that unqualified names are always known to refer to types if they do so.</p>
<p>A similar gotcha exists for names that denote templates, as hinted at by the introductory text.</p>
<h1 id="the-template-keyword">The "template" keyword</h1>
<p>Remember the initial quote above and how the Standard requires special handling for templates as well? Let's take the following innocent-looking example:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">boost::function&lt; <span class="type">int</span>() &gt; f;</span><br></pre></td></tr></table></figure>
<p>It might look obvious to a human reader. Not so for the compiler. Imagine the following arbitrary definition of <code>boost::function</code> and <code>f</code>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> boost &#123; <span class="type">int</span> function = <span class="number">0</span>; &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </span><br><span class="line">  <span class="type">int</span> f = <span class="number">0</span>;</span><br><span class="line">  boost::function&lt; <span class="type">int</span>() &gt; f; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>That's actually a <strong>valid <em>expression</em></strong>! It uses the less-than operator to compare <code>boost::function</code> against zero (<code>int()</code>), and then uses the greater-than operator to compare the resulting <code>bool</code> against <code>f</code>. However as you might well know, <code>boost::function</code> <a href="http://www.boost.org/doc/libs/1_54_0/doc/html/function.html">in real life</a> is a template, so the compiler knows (14.2/3):</p>
<blockquote>
<p>After name lookup (3.4) finds that a name is a template-name, if this name is followed by a &lt;, the &lt; is always taken as the beginning of a template-argument-list and never as a name followed by the less-than operator.</p>
</blockquote>
<p>Now we are back to the same problem as with <code>typename</code>. What if we can't know yet whether the name is a template when parsing the code? We will need to insert <code>template</code> immediately before the template name, as specified by <code>14.2/4</code>. This looks like:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">t::<span class="keyword">template</span> <span class="built_in">f</span>&lt;<span class="type">int</span>&gt;(); <span class="comment">// call a function template</span></span><br></pre></td></tr></table></figure>
<p>Template names can not only occur after a <code>::</code> but also after a <code>-&gt;</code> or <code>.</code> in a class member access. You need to insert the keyword there too:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>-&gt;<span class="keyword">template</span> <span class="built_in">f</span>&lt;<span class="type">int</span>&gt;(); <span class="comment">// call a function template</span></span><br></pre></td></tr></table></figure>
<h1 id="dependencies">Dependencies</h1>
<p>For the people that have thick Standardese books on their shelf and that want to know what exactly I was talking about, I'll talk a bit about how this is specified in the Standard.</p>
<p>In template declarations some constructs have different meanings depending on what template arguments you use to instantiate the template: Expressions may have different types or values, variables may have different types or function calls might end up calling different functions. Such constructs are generally said to <em>depend</em> on template parameters.</p>
<p>The Standard defines precisely the rules by whether a construct is dependent or not. It separates them into logically different groups: One catches types, another catches expressions. Expressions may depend by their value and/or their type. So we have, with typical examples appended:</p>
<ul>
<li>Dependent types (e.g: a type template parameter <code>T</code>)</li>
<li>Value-dependent expressions (e.g: a non-type template parameter <code>N</code>)</li>
<li>Type-dependent expressions (e.g: a cast to a type template parameter <code>(T)0</code>)</li>
</ul>
<p>Most of the rules are intuitive and are built up recursively: For example, a type constructed as <code>T[N]</code> is a dependent type if <code>N</code> is a value-dependent expression or <code>T</code> is a dependent type. The details of this can be read in section <code>(14.6.2/1</code>) for dependent types, <code>(14.6.2.2)</code> for type-dependent expressions and <code>(14.6.2.3)</code> for value-dependent expressions.</p>
<h1 id="dependent-names">Dependent names</h1>
<p>The Standard is a bit unclear about what <em>exactly</em> is a <em>dependent name</em>. On a simple read (you know, the principle of least surprise), all it defines as a <em>dependent name</em> is the special case for function names below. But since clearly <code>T::x</code> also needs to be looked up in the instantiation context, it also needs to be a dependent name (fortunately, as of mid C++14 the committee has started to look into how to fix this confusing definition).</p>
<p>To avoid this problem, I have resorted to a simple interpretation of the Standard text. Of all the constructs that denote dependent types or expressions, a subset of them represent names. Those names are therefore "dependent names". A name can take different forms - the Standard says:</p>
<blockquote>
<p>A name is a use of an identifier (2.11), operator-function-id (13.5), conversion-function-id (12.3.2), or template-id (14.2) that denotes an entity or label (6.6.4, 6.1)</p>
</blockquote>
<p>An identifier is just a plain sequence of characters / digits, while the next two are the <code>operator +</code> and <code>operator type</code> form. The last form is <code>template-name &lt;argument list&gt;</code>. All these are names, and by conventional use in the Standard, a name can also include qualifiers that say what namespace or class a name should be looked up in.</p>
<p>A value dependent expression <code>1 + N</code> is not a name, but <code>N</code> is. The subset of all dependent constructs that are names is called <em>dependent name</em>. Function names, however, may have different meaning in different instantiations of a template, but unfortunately are not caught by this general rule.</p>
<h1 id="dependent-function-names">Dependent function names</h1>
<p>Not primarily a concern of this article, but still worth mentioning: Function names are an exception that are handled separately. An identifier function name is dependent not by itself, but by the type dependent argument expressions used in a call. In the example <code>f((T)0)</code>, <code>f</code> is a dependent name. In the Standard, this is specified at <code>(14.6.2/1)</code>.</p>
<h1 id="additional-notes-and-examples">Additional notes and examples</h1>
<p>In enough cases we need both of <code>typename</code> and <code>template</code>. Your code should look like the following</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> Tail&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">UnionNode</span> : <span class="keyword">public</span> Tail &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> U&gt; <span class="keyword">struct</span> <span class="title class_">inUnion</span> &#123;</span><br><span class="line">        <span class="keyword">typedef</span> <span class="keyword">typename</span> Tail::<span class="keyword">template</span> inUnion&lt;U&gt; dummy;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>The keyword <code>template</code> doesn't always have to appear in the last part of a name. It can appear in the middle before a class name that's used as a scope, like in the following example</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typename</span> t::<span class="keyword">template</span> iterator&lt;<span class="type">int</span>&gt;::value_type v;</span><br></pre></td></tr></table></figure>
<p>In some cases, the keywords are forbidden, as detailed below</p>
<ul>
<li><p>On the name of a dependent base class you are not allowed to write <code>typename</code>. It's assumed that the name given is a class type name. This is true for both names in the base-class list and the constructor initializer list:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">derive_from_Has_type</span> : <span class="comment">/* typename */</span> SomeBase&lt;T&gt;::type </span><br><span class="line">&#123; &#125;;</span><br></pre></td></tr></table></figure></li>
<li><p>In using-declarations it's not possible to use <code>template</code> after the last <code>::</code>, and the C++ committee <a href="http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_closed.html#109">said</a> not to work on a solution.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">derive_from_Has_type</span> : SomeBase&lt;T&gt; &#123;</span><br><span class="line">   <span class="keyword">using</span> SomeBase&lt;T&gt;::<span class="keyword">template</span> type; <span class="comment">// error</span></span><br><span class="line">   <span class="keyword">using</span> <span class="keyword">typename</span> SomeBase&lt;T&gt;::type; <span class="comment">// typename *is* allowed</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="size_t"><a href="https://jeremybai.github.io/blog/2014/09/10/size-t">size_t</a></h1>
<p>每一个标准C实现应该选择足够大的无符号整形来代表该平台上最大可能出现的对象大小。</p>
<p>适当地使用size_t还会使你的代码变得如同自带文档。当你看到一个对象声明为size_t类型，你马上就知道它代表字节大小或数组索引，而不是错误代码或者是一个普通的算术值。</p>
<h1 id="compiler-default">compiler default</h1>
<h2 id="default-constructor">default constructor</h2>
<p>If no user-declared constructors of any kind are provided for a class type (struct, class, or union), the compiler will always declare a default constructor as an <code>inline public</code> member of its class.</p>
<p>it has the same effect as a user-defined constructor with <strong>empty body and empty initializer list.</strong></p>
<h2 id="destructor">destructor</h2>
<p>If no user-declared prospective (since C++20)destructor is provided for a <a href="https://en.cppreference.com/w/cpp/language/class">class type</a> (struct, class, or union), the compiler will always declare a destructor as an <code>inline public</code> member of its class.</p>
<p>This implicitly-defined destructor has an <strong>empty body.</strong></p>
<h2 id="copy-constructor">copy constructor</h2>
<p>This implicitly-declared copy constructor has the form T::T(const T&amp;) if all of the following are true:</p>
<ul>
<li>each direct and virtual base <code>B</code> of <code>T</code> has a copy constructor whose parameters are const B&amp; or const volatile B&amp;;</li>
<li>each non-static data member <code>M</code> of <code>T</code> of class type or array of class type has a copy constructor whose parameters are const M&amp; or const volatile M&amp;.</li>
</ul>
<p>For non-union class types (class and struct), the constructor performs full member-wise copy of the object's <strong>bases and non-static members</strong>, in their initialization order, using direct initialization.</p>
<h2 id="copy-assignment">copy assignment</h2>
<p>For non-union class types (class and struct), the operator performs member-wise copy assignment of the object's <strong>bases and non-static members</strong>, in their initialization order, using <strong>built-in assignment for the scalars and copy assignment operator for class types</strong>.</p>
<h2 id="move-assignment">move assignment</h2>
<p>For non-union class types (class and struct), the move assignment operator performs full member-wise move assignment of the object's direct <strong>bases and immediate non-static members</strong>, in their declaration order, using <strong>built-in assignment for the scalars, memberwise move-assignment for arrays, and move assignment operator for class types</strong> (called non-virtually).</p>
<h1 id="unix-linux-gnu">UNIX Linux GNU</h1>
<ul>
<li>UNIX 非开源 AT&amp;T</li>
<li>BSD 为 UNIX 一个开源版本</li>
<li>GNU(GNU is not UNIX) 开源软件项目</li>
<li>Linux Linus 写的内核, 属于类 UNIX, 兼容 POSIX</li>
</ul>
<h1 id="运算符重载-operator-overload"><a href="https://en.cppreference.com/w/cpp/language/operators">运算符重载 operator overload</a></h1>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">T</span>&#123;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    std::string s;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">T</span>(T &amp;t):<span class="built_in">i</span>(t.i), <span class="built_in">s</span>(t.s)&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//copy assignment</span></span><br><span class="line">    T&amp; <span class="keyword">operator</span>=(<span class="type">const</span> T&amp; other)&#123;<span class="keyword">return</span> *<span class="keyword">this</span>;&#125;</span><br><span class="line">    <span class="comment">//move assignment</span></span><br><span class="line">    T&amp; <span class="keyword">operator</span>=(T&amp;&amp; other)&#123;<span class="keyword">return</span> *<span class="keyword">this</span>;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//stream extraction</span></span><br><span class="line">    <span class="keyword">friend</span> std::ostream&amp; <span class="keyword">operator</span>&lt;&lt;(std::ostream&amp; os, <span class="type">const</span> T&amp; obj);</span><br><span class="line">    <span class="comment">//stream insertion</span></span><br><span class="line">    <span class="keyword">friend</span> std::istream&amp; <span class="keyword">operator</span>&gt;&gt;(std::istream&amp; is, <span class="type">const</span> T&amp; obj);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//prefix ++</span></span><br><span class="line">    T&amp; <span class="keyword">operator</span> ++()&#123;<span class="keyword">return</span> *<span class="keyword">this</span>;&#125;</span><br><span class="line">    <span class="comment">//postfix ++</span></span><br><span class="line">    T <span class="keyword">operator</span> ++(<span class="type">int</span>)&#123;</span><br><span class="line">        T old = *<span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">operator</span>++();</span><br><span class="line">        <span class="keyword">return</span> old;</span><br><span class="line">    &#125;</span><br><span class="line">    T&amp; <span class="keyword">operator</span> --()&#123;<span class="keyword">return</span> *<span class="keyword">this</span>;&#125;</span><br><span class="line">    <span class="comment">//postfix --</span></span><br><span class="line">    T <span class="keyword">operator</span> --(<span class="type">int</span>)&#123;</span><br><span class="line">        T old = *<span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">operator</span>--();</span><br><span class="line">        <span class="keyword">return</span> old;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//+, +=</span></span><br><span class="line">    T&amp; <span class="keyword">operator</span>+=(<span class="type">const</span> T&amp; rhs)&#123;<span class="keyword">return</span> *<span class="keyword">this</span>;&#125;</span><br><span class="line">    <span class="keyword">friend</span> T <span class="keyword">operator</span>+(T lhs, <span class="type">const</span> T&amp; rhs)&#123;</span><br><span class="line">        lhs += rhs;</span><br><span class="line">        <span class="keyword">return</span> lhs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//comparison &lt; first</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="built_in">operator</span>&lt; (<span class="type">const</span> T&amp; lhs, <span class="type">const</span> T&amp; rhs)&#123; <span class="comment">/* do actual comparison */</span> &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>&gt; (<span class="type">const</span> T&amp; lhs, <span class="type">const</span> T&amp; rhs)&#123; <span class="keyword">return</span> rhs &lt; lhs; &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;=(<span class="type">const</span> T&amp; lhs, <span class="type">const</span> T&amp; rhs)&#123; <span class="keyword">return</span> !(lhs &gt; rhs); &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>&gt;=(<span class="type">const</span> T&amp; lhs, <span class="type">const</span> T&amp; rhs)&#123; <span class="keyword">return</span> !(lhs &lt; rhs); &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> T&amp; lhs, <span class="type">const</span> T&amp; rhs)&#123; <span class="comment">/* do actual comparison */</span> &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>!=(<span class="type">const</span> T&amp; lhs, <span class="type">const</span> T&amp; rhs)&#123; <span class="keyword">return</span> !(lhs == rhs); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//function call</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//pointer</span></span><br><span class="line">    T&amp; <span class="keyword">operator</span>*() &#123;<span class="keyword">return</span> *<span class="keyword">this</span>;&#125;</span><br><span class="line">    T* <span class="keyword">operator</span>-&gt;()&#123;<span class="keyword">return</span> &amp;(<span class="keyword">operator</span>*());&#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//type cast</span></span><br><span class="line">      <span class="function"><span class="keyword">operator</span> <span class="title">int</span><span class="params">()</span> <span class="type">const</span> </span>&#123;<span class="keyword">return</span> i;&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line">std::ostream&amp; <span class="keyword">operator</span>&lt;&lt;(std::ostream&amp; os, <span class="type">const</span> T&amp; obj)&#123;<span class="keyword">return</span> os;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line">std::istream&amp; <span class="keyword">operator</span>&gt;&gt;(std::istream&amp; is, <span class="type">const</span> T&amp; obj)&#123;<span class="keyword">return</span> is;&#125;</span><br></pre></td></tr></table></figure>
<p>注:</p>
<ul>
<li><p>&lt;&lt; &gt;&gt; 运算符重载</p>
<p>These operators must be overloaded as a global function. And if we want to allow them to access private data members of the class, we must make them friend.</p>
<p><strong>Why these operators must be overloaded as global?</strong> In operator overloading, if an operator <strong>is overloaded as a member, then it must be a member of the object on the left side of the operator</strong>. For example, consider the statement “ob1 + ob2” (let ob1 and ob2 be objects of two different classes). To make this statement compile, we must overload ‘+’ in a class of ‘ob1’ or make ‘+’ a global function. The operators ‘&lt;&lt;‘ and ‘&gt;&gt;’ are called like ‘cout &lt;&lt; ob1’ and ‘cin &gt;&gt; ob1’. So if we want to make them a member method, then they must be made members of ostream and istream classes, which is not a good option most of the time. Therefore, these operators are overloaded as global functions with two parameters, cout and object of user-defined class.</p></li>
<li><p>public or private?</p></li>
<li><p>(+, +=)Binary operators are typically implemented as non-members to maintain symmetry (for example, when adding a complex number and an integer, if <code>operator+</code> is a member function of the complex type, then only complex+integer would compile, and not integer+complex).Since for every binary arithmetic operator there exists a corresponding compound assignment operator, canonical forms of binary operators are implemented in terms of their compound assignments:</p></li>
<li><p>Standard algorithms such as <a href="http://en.cppreference.com/w/cpp/algorithm/sort">std::sort</a> and containers such as <a href="http://en.cppreference.com/w/cpp/container/set">std::set</a> expect operator&lt; to be defined, by default</p></li>
<li><p>++ --++</p>
<p>++lvalue ⇒ lvalue+=1 ⇒ lvalue = lvalue+1</p>
<p>y=x++ ⇒ y=(t=x, x=x+1, t)</p></li>
</ul>
<h1 id="自引用-this">自引用 this</h1>
<p>状态更新函数, 一种很有用的技术是令他们返回已更新对象的返回值</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">Date&amp; <span class="title">Date::add_year</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(d==<span class="number">29</span> &amp;&amp; m==<span class="number">2</span> &amp;&amp; !<span class="built_in">leapyear</span>(y+n))&#123;</span><br><span class="line">    d=<span class="number">1</span>;</span><br><span class="line">    m=<span class="number">3</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  y+=n;</span><br><span class="line">  <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在类 X 的 nonconst 成员函数中, this 的类型时 X*</p>
<p>在类 X 的 const 成员函数中, this 的类型时 const X*</p>
<h1 id="explicit">explicit</h1>
<p><code>explicit</code>的作用是用来声明类构造函数是显示调用的，而非隐式调用，所以只用于修饰单参构造函数。因为无参构造函数和多参构造函数本身就是显示调用的。再加上<code>explicit</code>关键字也没有什么意义。</p>
<h1 id="internal-linkage">internal linkage</h1>
<p>When you write an implementation file (<code>.cpp</code>, <code>.cxx</code>, etc) your compiler generates a <strong>translation unit</strong>. This is the source file from your implementation plus all the headers you <code>#include</code> in it.</p>
<p><em>Internal linkage</em> refers to everything only <strong>in scope of a translation unit</strong>.</p>
<p><em>External linkage</em> refers to things that exist beyond a particular translation unit. In other words, <strong>accessible through the whole program</strong>, which is the combination of all translation units (or object files).</p>
<p>You can explicitly control the linkage of a symbol by using the <code>extern</code> and <code>static</code> keywords. If the linkage is not specified then the default linkage is <code>extern</code> (external linkage) for non-<code>const</code> symbols and <code>static</code> (internal linkage) for <code>const</code> symbols.</p>
<p>Note that instead of using <code>static</code> (internal linkage), it is better to use <a href="https://stackoverflow.com/questions/154469/unnamed-anonymous-namespaces-vs-static-functions"><em>anonymous</em> namespaces</a> into which you can also put <code>class</code>es. Though they allow <code>extern</code> linkage, anonymous namespaces are unreachable from other translation units, making linkage <em>effectively</em> <code>static</code>.</p>
<h1 id="重载">重载</h1>
<p>重载解析与函数声明的次序无关</p>
<p>重载解析过程中不考虑函数的返回类型, 独立于上下文</p>
<h1 id="对象与引用">对象与引用</h1>
<h2 id="对象">对象</h2>
<h3 id="临时对象">临时对象</h3>
<p>除非我们把临时对象绑定到引用上或者用它初始化一个命名对象, 否则大多数时候在临时对象所在的完整表达式末尾, 他就被销毁了</p>
<h3 id="普通对象">普通对象</h3>
<p>对象(object) --&gt; 一段内存空间</p>
<h2 id="引用">引用</h2>
<h3 id="左值引用">左值引用</h3>
<p>有身份的对象的引用</p>
<h3 id="右值引用"><a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n2027.html">右值引用</a></h3>
<p>可移动的对象的引用</p>
<h2 id="左值右值引用">左值右值引用</h2>
<figure>
<img src="https://tva1.sinaimg.cn/large/008i3skNgy1gxbenbxsxmj30e60323yf.jpg" alt="image-20211212221135490" /><figcaption aria-hidden="true">image-20211212221135490</figcaption>
</figure>
<p>有身份 i</p>
<p>可移动 m</p>
<p>The original definition of lvalues and rvalues from the earliest days of C is as follows: <strong>An <em>lvalue</em> is an expression <code>e</code> that may appear on the left or on the right hand side of an assignment, whereas an <em>rvalue</em> is an expression that can only appear on the right hand side of an assignment.</strong></p>
<p>An <em>lvalue</em> is an expression that refers to a <strong>memory location</strong> and allows us to take the address of that <strong>memory location</strong> <strong>via the <code>&amp;</code> operator</strong>. An <em>rvalue</em> is an expression that is not an lvalue.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">X <span class="title">foo</span><span class="params">()</span></span>;</span><br><span class="line">X x;</span><br><span class="line"><span class="comment">// perhaps use x in various ways</span></span><br><span class="line">x = <span class="built_in">foo</span>();</span><br></pre></td></tr></table></figure>
<p>其中<code>x = foo()</code>包括以下步骤</p>
<ul>
<li>clones the resource from the temporary returned by <code>foo</code>,</li>
<li>destructs the resource held by <code>x</code> and replaces it with the clone,</li>
<li>destructs the temporary and thereby releases its resource.</li>
</ul>
<p>move action is aimed to swap the resource instead of clone it</p>
<p>you can overload in different ways</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(X&amp; x)</span></span>; <span class="comment">// lvalue reference overload</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(X&amp;&amp; x)</span></span>; <span class="comment">// rvalue reference overload</span></span><br><span class="line"></span><br><span class="line">X x;</span><br><span class="line"><span class="function">X <span class="title">foobar</span><span class="params">()</span></span>;</span><br><span class="line"><span class="built_in">foo</span>(x); <span class="comment">// argument is lvalue: calls foo(X&amp;)</span></span><br><span class="line"><span class="built_in">foo</span>(<span class="built_in">foobar</span>()); <span class="comment">// argument is rvalue: calls foo(X&amp;&amp;)</span></span><br><span class="line"></span><br><span class="line">X&amp; X::<span class="keyword">operator</span>=(X <span class="type">const</span> &amp; rhs); <span class="comment">// classical implementation</span></span><br><span class="line">X&amp; X::<span class="keyword">operator</span>=(X&amp;&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// Move semantics: exchange content between this and rhs</span></span><br><span class="line">  <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">string var &#123;<span class="string">&quot;hello&quot;</span>&#125;;</span><br><span class="line"><span class="function">string <span class="title">f</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">string&amp; r1&#123;var&#125;;</span><br><span class="line">string&amp; r2&#123;<span class="built_in">f</span>()&#125;;<span class="comment">//error f() is rvalue</span></span><br><span class="line">string&amp; r3&#123;<span class="string">&quot;hello&quot;</span>&#125;;<span class="comment">//error 不允许绑定到临时变量</span></span><br><span class="line"></span><br><span class="line">string&amp;&amp; rr1&#123;<span class="built_in">f</span>()&#125;;</span><br><span class="line">string&amp;&amp; rr2&#123;var&#125;;<span class="comment">//error var is lvalue</span></span><br><span class="line">string&amp;&amp; rr3&#123;<span class="string">&quot;hello&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> string&amp; cr1 &#123;<span class="string">&quot;hello&quot;</span>&#125;;</span><br></pre></td></tr></table></figure>
<p>除非我们把临时对象绑定到引用上或者用它初始化一个命名对象, 否则大多数时候在临时对象所在的完整表达式末尾, 他就被销毁了</p>
<p>临时量可以用作 const 引用或者命名对象的初始化器(见why rvalue is allowed to passed by const reference)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">fs</span><span class="params">(string&amp; s1, string&amp; s2)</span></span>&#123;</span><br><span class="line">    <span class="type">const</span> string&amp; cs = s1+s2;<span class="comment">//ok</span></span><br><span class="line">    string ss = s1+s2;<span class="comment">//ok</span></span><br><span class="line"></span><br><span class="line">    string&amp; s = s1+s2;<span class="comment">//error</span></span><br><span class="line">        <span class="comment">//non-const lvalue reference to type &#x27;basic_string&lt;...&gt;&#x27; cannot bind to a temporary of type &#x27;basic_string&lt;...&gt;&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="why-rvalue-is-allowed-to-passed-by-const-reference"><a href="https://herbsutter.com/2008/01/01/gotw-88-a-candidate-for-the-most-important-const/">why rvalue is allowed to passed by const reference</a></h1>
<p>C++ deliberately specifies that <strong>binding a temporary object to a reference <em>to const</em> on the stack lengthens the lifetime of the temporary to the lifetime of the reference itself</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Example 1 legal</span></span><br><span class="line"><span class="function">string <span class="title">f</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="string">&quot;abc&quot;</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">g</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">const</span> string&amp; s = <span class="built_in">f</span>();</span><br><span class="line">  cout &lt;&lt; s &lt;&lt; endl;    <span class="comment">// can we still use the &quot;temporary&quot; object? yes</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Example 2 illegal</span></span><br><span class="line"><span class="function">string <span class="title">f</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="string">&quot;abc&quot;</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">g</span><span class="params">()</span> </span>&#123;</span><br><span class="line">string&amp; s = <span class="built_in">f</span>();       <span class="comment">// still legal? no</span></span><br><span class="line">  cout &lt;&lt; s &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Example 3</span></span><br><span class="line"></span><br><span class="line"><span class="function">Derived <span class="title">factory</span><span class="params">()</span></span>; <span class="comment">// construct a Derived object</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">g</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">const</span> Base&amp; b = <span class="built_in">factory</span>(); <span class="comment">// calls Derived::Derived here</span></span><br><span class="line">  <span class="comment">// … use b …</span></span><br><span class="line">&#125; <span class="comment">// calls Derived::~Derived directly here — not Base::~Base + virtual dispatch!</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//example to explain eg3</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">base</span> &#123;</span><br><span class="line">    ~<span class="built_in">base</span>() &#123; std::cout &lt;&lt; <span class="string">&quot;base&quot;</span>&lt;&lt;endl; &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">derived</span> : base &#123;</span><br><span class="line">    ~<span class="built_in">derived</span>() &#123; std::cout &lt;&lt; <span class="string">&quot;derived&quot;</span>&lt;&lt;endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">derived <span class="title">f</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;f&quot;</span>&lt;&lt;endl;</span><br><span class="line">    derived d;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;f&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    base * p = <span class="keyword">new</span> derived;</span><br><span class="line">    <span class="keyword">delete</span> p;</span><br><span class="line">    <span class="type">const</span> base&amp; c = <span class="built_in">f</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//output: </span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">base</span></span><br><span class="line"><span class="comment">f</span></span><br><span class="line"><span class="comment">f</span></span><br><span class="line"><span class="comment">derived</span></span><br><span class="line"><span class="comment">base</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//~base 不是虚函数, 说明 c 的销毁直接调用 ~derived, </span></span><br><span class="line"><span class="comment">//而不是~base + virtual dispatch</span></span><br><span class="line"><span class="comment">//所以例子3 说明的就是 temporary binded to const ref 析构函数直接调用 temporary 类型的析构函数</span></span><br></pre></td></tr></table></figure>
<p>only lvalues can be bound to references to non-const.</p>
<h1 id="初始化">初始化</h1>
<p>使用=进行初始化可能会发生窄化转换, 使用初始化列表不会, 所以推荐使用初始化列表, 但是 auto 不推荐, 因为会得到 list 类型.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">X a1 &#123;v&#125;;</span><br><span class="line">X a2 = &#123;v&#125;;</span><br><span class="line">X a3 = v;</span><br><span class="line"><span class="function">X <span class="title">a4</span><span class="params">(v)</span></span>;</span><br><span class="line"><span class="comment">//newß</span></span><br><span class="line">CTest*  pTest = <span class="keyword">new</span>  <span class="built_in">CTest</span>();</span><br></pre></td></tr></table></figure>
<p>缺少初始化容器</p>
<ul>
<li>全局变量, 局部 static 变量, static 成员会执行{} 初始化</li>
<li>局部变量, 堆对象, 除非位于默认构造函数中, 否则不会进行默认初始化</li>
</ul>
<h1 id="raw-string">raw string</h1>
<p>C++11 引入了原始字符串。最基本的用法是<code>R"(...)"</code>，由<code>R</code>开头，双引号内包围着<code>(...)</code>，实际的字符序列是小括号内的内容，小括号是字符序列的定界符。当然，左小括号和右小括号是首位对应的。</p>
<p>“原始”（raw）体现在字符串里的字符一就是一，二就是二，不会给你转义。也就是说，传统的<code>"\\n"</code>除了字符串结尾符，仅包含换行符，而原始字符串<code>R"(\\n)"</code>则包含反斜杠和字符<code>n</code>，这是明显的不同。</p>
<p>从现在来看，貌似已经很好的解决问题了，但如果字符序列里包含<code>)"</code>，如<code>R"(坐标: "(x,y)")"</code>，此时编译器是懵的，因为<code>"(</code>对应了两个<code>)"</code>。在这种情况下，我们可以选择其他定界符，如，<code>R"&amp;(坐标: "(x,y)")&amp;"</code>。语法如下：<code>R"delim(...)delim"</code>，<code>delim</code>的选取比较灵活，最长不超过16个字符，且不为小括号、空白、控制字符和反斜杠。</p>
<figure>
<img src="https://tva1.sinaimg.cn/large/008i3skNgy1gxad138yhzj30rk0igwgr.jpg" alt="image-20211212003002953" /><figcaption aria-hidden="true">image-20211212003002953</figcaption>
</figure>
<h1 id="变量与类型">变量与类型</h1>
<ul>
<li>类型 type: 定义一组可能的值以及一组操作</li>
<li>对象 object: 存放某类型的内存空间</li>
<li>值 value: 一组二进制位, 含义由其类型决定</li>
<li>变量 variable: 是一个命名的对象</li>
</ul>
<h1 id="函数对象函子">函数对象(函子)</h1>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Less_than</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> T val;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Less_than</span>(<span class="type">const</span> T&amp; v) :<span class="built_in">val</span>(v)&#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> T&amp; x)</span> <span class="type">const</span> </span>&#123;<span class="keyword">return</span> x&lt;val;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//function call</span></span><br><span class="line"></span><br><span class="line">Less_than&lt;<span class="type">int</span>&gt; lti &#123;<span class="number">42</span>&#125;;</span><br><span class="line"><span class="built_in">lti</span>(<span class="number">36</span>);</span><br></pre></td></tr></table></figure>
<h1 id="模板-template">模板 template</h1>
<p>模板类声明</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Vector</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">      <span class="built_in">Vector</span>(<span class="type">int</span> s);</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>模板函数声明</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">Vector&lt;T&gt;::<span class="built_in">Vector</span>(<span class="type">int</span> s)&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="enum">enum</h1>
<p>使用 enum class 定义枚举类型时不能与 int 类型互相转换, 运算只有&gt; &lt; ==, 而且 enum class 的枚举值名字位于 enum 局部作用域内</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum class</span> <span class="title class_">Traffic_light</span> &#123;red, yellow, green&#125;;</span><br><span class="line">Traffic_light l = Traffic_light::red;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Warning</span> &#123;green, yellow, orange, red&#125;;</span><br><span class="line">Warning w = green;</span><br></pre></td></tr></table></figure>
<h1 id="literal-type"><a href="https://en.cppreference.com/w/cpp/named_req/LiteralType">literal type</a></h1>
<p>Literal types are the types of <a href="https://en.cppreference.com/w/cpp/language/constexpr"><code>constexpr</code> variables</a> and they can be constructed, manipulated, and returned from <a href="https://en.cppreference.com/w/cpp/language/constexpr"><code>constexpr</code> functions</a>.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">A</span> &#123; <span class="function"><span class="keyword">constexpr</span> <span class="title">A</span><span class="params">(<span class="type">int</span>)</span> </span>= <span class="keyword">delete</span>; <span class="type">char</span> c; &#125;;  <span class="comment">// A is a literal type</span></span><br><span class="line"><span class="keyword">constexpr</span> A v = std::<span class="built_in">bit_cast</span>&lt;A&gt;(<span class="string">&#x27;0&#x27;</span>);  <span class="comment">// OK in C++20</span></span><br><span class="line">                                        <span class="comment">// v has literal type and thus can be constexpr</span></span><br></pre></td></tr></table></figure>
<h1 id="constexpr"><a href="https://en.cppreference.com/w/cpp/language/constexpr">constexpr</a></h1>
<p>编译时求值</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="type">double</span> <span class="title">func1</span><span class="params">(<span class="type">double</span> i)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="type">double</span> <span class="title">func2</span><span class="params">(<span class="type">double</span> i)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">12</span>+<span class="number">13</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> * argv[])</span> </span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> I = <span class="number">17</span>;</span><br><span class="line">    <span class="type">int</span> var = <span class="number">17</span>;</span><br><span class="line"><span class="comment">//    constexpr double x1 = sqrt(I);</span></span><br><span class="line"><span class="comment">//    constexpr double x2 = sqrt(var);</span></span><br><span class="line">    <span class="type">const</span> <span class="type">double</span> x3 = <span class="built_in">sqrt</span>(I);</span><br><span class="line">    <span class="keyword">constexpr</span> <span class="type">double</span> x4 = <span class="number">17</span>+<span class="number">18</span>;</span><br><span class="line">    <span class="keyword">constexpr</span> <span class="type">double</span> x5 = I;</span><br><span class="line"><span class="comment">//    constexpr double x6 = var;</span></span><br><span class="line">    <span class="keyword">constexpr</span> <span class="type">double</span> x7 = <span class="built_in">func1</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">constexpr</span> <span class="type">double</span> x8 = <span class="built_in">func2</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">constexpr</span> <span class="type">double</span> x9 = <span class="built_in">func1</span>(I);</span><br><span class="line"><span class="comment">//    constexpr double x10 = func1(var);</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//注释掉的代码为错误代码</span></span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">const</span> <span class="type">int</span> <span class="title">array_size1</span> <span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Error, constant expression required in array declaration</span></span><br><span class="line"><span class="comment">//???</span></span><br><span class="line"><span class="type">int</span> array[<span class="built_in">array_size1</span>(<span class="number">10</span>)];    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="type">int</span> <span class="title">array_size2</span> <span class="params">(<span class="type">int</span> x)</span> </span>&#123; </span><br><span class="line">  <span class="keyword">return</span> x+<span class="number">1</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// OK, constexpr functions can be evaluated at compile time</span></span><br><span class="line"><span class="comment">// and used in contexts that require constant expressions. </span></span><br><span class="line"><span class="type">int</span> array[<span class="built_in">array_size2</span>(<span class="number">10</span>)];     </span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">S</span> &#123;</span><br><span class="line">  <span class="built_in">S</span>() &#123; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">constexpr</span> <span class="title">S</span><span class="params">(<span class="type">int</span>)</span> </span>&#123; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">constexpr</span> <span class="keyword">virtual</span> <span class="type">int</span> <span class="title">f</span><span class="params">()</span> </span>&#123;  <span class="comment">// Error, f must not be virtual.</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">55</span>;</span><br><span class="line">  &#125;       </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">NL</span> &#123;</span><br><span class="line">  ~<span class="built_in">NL</span>() &#123; &#125;  <span class="comment">// The user-provided destructor (even if it is trivial) </span></span><br><span class="line">             <span class="comment">// makes the type a non-literal type.</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> NL <span class="title">f1</span><span class="params">()</span> </span>&#123;  <span class="comment">// Error, return type of f1 must be a literal type.</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">NL</span>();</span><br><span class="line">&#125;       </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="type">int</span> <span class="title">f2</span><span class="params">(NL)</span> </span>&#123;  <span class="comment">// Error, the parameter type NL is not a literal type.</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">55</span>; </span><br><span class="line">&#125;                 </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> S <span class="title">f3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">S</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> &#123; val = <span class="built_in">f3</span>() &#125;;  <span class="comment">// Error, initialization of the return value in f3()</span></span><br><span class="line">                      <span class="comment">// uses a non-constexpr constructor.</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="type">void</span> <span class="title">f4</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;  <span class="comment">// Error, return type should not be void.</span></span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="type">int</span> <span class="title">f5</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; <span class="comment">// Error, function body contains more than</span></span><br><span class="line">  <span class="keyword">if</span> (x&lt;<span class="number">0</span>)                <span class="comment">// return statement.</span></span><br><span class="line">    x = -x;</span><br><span class="line">  <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="c-v-qualified-class"><a href="https://en.cppreference.com/w/cpp/language/cv">c-v qualified class</a></h1>
<p>const and volatile class</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// non cv_qualified </span></span><br><span class="line"><span class="type">int</span> first; </span><br><span class="line"><span class="type">char</span> *second; </span><br><span class="line"></span><br><span class="line"><span class="comment">// cv-qualified </span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> third; </span><br><span class="line"><span class="keyword">volatile</span> <span class="type">char</span> * fourth; </span><br></pre></td></tr></table></figure>
<p>For any type <code>T</code> (including incomplete types), other than <a href="https://en.cppreference.com/w/cpp/language/functions">function type</a> or <a href="https://en.cppreference.com/w/cpp/language/reference">reference type</a>, there are three more distinct types in the C++ type system: <em>const-qualified</em> <code>T</code>, <em>volatile-qualified</em> <code>T</code>, and <em>const-volatile-qualified</em> <code>T</code>.</p>
<ul>
<li><strong><em>const object</em></strong> - an object whose type is <em>const-qualified</em>, or a non-mutable subobject of a const object. <strong>Such object cannot be modified: attempt to do so directly is a compile-time error</strong>, and attempt to do so indirectly (e.g., by modifying the const object through a reference or pointer to non-const type) results in undefined behavior.</li>
<li><strong><em>volatile object</em></strong> - an object whose type is <em>volatile-qualified</em>, or a subobject of a volatile object, or a mutable subobject of a const-volatile object. Every access (read or write operation, member function call, etc.) made through a glvalue(A <em>glvalue expression</em> is either lvalue or xvalue.) expression of volatile-qualified type is treated as a visible side-effect for the <a href="https://en.cppreference.com/w/cpp/language/as_if">purposes of optimization</a> (that is, within a single thread of execution, volatile accesses cannot be optimized out or reordered with another visible side effect that is <a href="https://en.cppreference.com/w/cpp/language/eval_order">sequenced-before</a> or sequenced-after the volatile access. This makes volatile objects suitable for communication with a <a href="https://en.cppreference.com/w/cpp/utility/program/signal">signal handler</a>, but not with another thread of execution, see <a href="https://en.cppreference.com/w/cpp/atomic/memory_order">std::memory_order</a>). Any attempt to refer to a volatile object through a <a href="https://en.cppreference.com/w/cpp/language/value_category#glvalue">glvalue</a> of non-volatile type (e.g. through a reference or pointer to non-volatile type) results in undefined behavior.</li>
<li><strong><em>const volatile object</em></strong> - an object whose type is <em>const-volatile-qualified</em>, a non-mutable subobject of a const volatile object, a const subobject of a volatile object, or a non-mutable volatile subobject of a const object. Behaves as both a const object and as a volatile object.</li>
</ul>
<h1 id="accumulation">accumulation</h1>
<p><code>#include &lt;numeric&gt;</code></p>
<h1 id="c11-vscode">c++11 vscode</h1>
<p>"clang.cxxflags": ["-std=c++14"]</p>
<p>setting.json</p>
<p><strong>C++ Clang Command Adapter</strong> 删除!!!! 原因应该是这个插件不继承c_cpp_properties.json中设置的C++版本</p>
<h1 id="mid">mid</h1>
<p><code>mid = (l+r)/2;</code></p>
<p><code>mid = l+(r-l)/2;</code></p>
<p>防溢出</p>
<h1 id="stdvectorbool"><a href="http://blog.csdn.net/haolexiao/article/details/56837445">std::vector&lt;bool&gt;</a></h1>
<p>vector<bool>并不是一个STL容器，不是一个STL容器，不是一个STL容器！</p>
<p>首先<strong>vector&lt; bool&gt; 并不是一个通常意义上的<a href="https://www.zhihu.com/search?q=vector容器&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A148258487%7D">vector容器</a></strong>，这个源自于历史遗留问题。 早在C++98的时候，就有vector&lt; bool&gt;这个类型了，但是因为当时为了考虑到节省空间的想法，<strong>所以vector&lt; bool&gt;里面不是一个Byte一个Byte储存的，它是一个bit一个bit储存的！</strong></p>
<p>因为C++没有直接去给一个bit来操作，所以用operator[]的时候，正常容器返回的应该是一个对应元素的引用，但是对于vector&lt; bool&gt;实际上访问的是一个"proxy reference"而不是一个"true reference"，返回的是"std::vector&lt; bool&gt;:reference"类型的对象。 而一般情况情况下</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="type">bool</span>&gt; c&#123; <span class="literal">false</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">true</span>, <span class="literal">false</span> &#125;; </span><br><span class="line"><span class="type">bool</span> b = c[<span class="number">0</span>]; </span><br><span class="line"><span class="keyword">auto</span> d = c[<span class="number">0</span>]; </span><br></pre></td></tr></table></figure>
<p>对于b的初始化它其实暗含了一个隐式的类型转换。</p>
<p><strong>此时 auto 代表的是一个右值引用</strong></p>
<p>而对于d，它的类型并不是bool，而是一个vector&lt; bool&gt;中的一个内部类。</p>
<p>而此时如果修改d的值，c中的值也会跟着修改</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">d = true;</span><br><span class="line">for(auto i:c)</span><br><span class="line">    cout&lt;&lt;i&lt;&lt;&quot; &quot;;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line">//上式会输出1 1 0 1 0</span><br></pre></td></tr></table></figure>
<p>而如果c被销毁，d就会变成一个悬垂指针，再对d操作就属于未定义行为。</p>
<p>而为什么说vector&lt; bool&gt;不是一个标准容器，就是因为它不能支持一些容器该有的基本操作，诸如取地址给指针初始化操作</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="type">bool</span>&gt; c&#123; <span class="literal">false</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">true</span>, <span class="literal">false</span> &#125;; </span><br><span class="line">&amp;tmp = c[<span class="number">0</span>];    <span class="comment">//错误，不能编译，对于引用来说，因为c[0]不是一个左值 </span></span><br><span class="line"><span class="type">bool</span> *p = &amp;c[<span class="number">0</span>];    <span class="comment">//错误，不能编译，因为无法将一个临时量地址给绑定到指针 ``` </span></span><br></pre></td></tr></table></figure>
<p>The <a href="http://en.cppreference.com/w/cpp/container/vector">std::vector</a>&lt;bool&gt; specialization defines <a href="http://en.cppreference.com/w/cpp/container/vector">std::vector</a>&lt;bool&gt;::reference as a publicly-accessible nested class. <a href="http://en.cppreference.com/w/cpp/container/vector">std::vector</a>&lt;bool&gt;::reference proxies the behavior of references to a single bit in <a href="http://en.cppreference.com/w/cpp/container/vector">std::vector</a>&lt;bool&gt;.</p>
<p>The primary use of <a href="http://en.cppreference.com/w/cpp/container/vector">std::vector</a>&lt;bool&gt;::reference is to provide an l-value that can be returned from <code>operator[]</code>.</p>
<p>Any reads or writes to a vector that happen via a <a href="http://en.cppreference.com/w/cpp/container/vector">std::vector</a>&lt;bool&gt;::reference potentially read or write to the entire underlying vector.</p>
<h1 id="for-循环">for 循环</h1>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> i : array)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="varient-type-in-for-range-loop"><a href="https://blog.petrzemek.net/2016/08/17/auto-type-deduction-in-range-based-for-loops/">varient type in for range loop</a></h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">std::vector&lt;<span class="type">bool</span>&gt; v&#123;<span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> x : v) &#123;</span><br><span class="line">  x = <span class="literal">true</span>; <span class="comment">// Changes the element inside v!</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>After the loop ends, <code>v</code> will contain <code>true, true, true</code>, which is clearly something you would not expect. See <a href="https://isocpp.org/blog/2012/11/on-vectorbool">this blog post</a> for more details. Here, instead of using <code>auto</code>, it is better to explicitly specify the type (<code>bool</code>). With <code>bool</code>, it will work as expected: the contents of the vector will be left unchanged.</p>
<p>Using just <code>auto</code> will not work when iterating over ranges containing move-only types, such as <a href="http://en.cppreference.com/w/cpp/memory/unique_ptr"><code>std::unique_ptr</code></a>. As <code>auto</code> creates a copy of each element in the range, the compilation will fail because move-only types cannot be copied.</p>
<h3 id="const-auto-dont-use">const auto (dont use)</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">const</span> <span class="keyword">auto</span> x : range)</span><br></pre></td></tr></table></figure>
<p>The use of <code>const auto</code> may suggest that you want to work with an immutable copy of each element. However, when would you want this? Why not use <code>const auto&amp;</code>? Why creating a copy when you will not be able to change it? And, even if you wanted this, from a code-review standpoint, it looks like you forgot to put <code>&amp;</code> after <code>auto</code>. Therefore, I see <strong>no reason</strong> for using <code>const auto</code>. Use <code>const auto&amp;</code> instead.</p>
<h3 id="auto">auto&amp;</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span>&amp; x : range)</span><br></pre></td></tr></table></figure>
<p>Use <code>auto&amp;</code> <strong>when you want to modify elements in the range in non-generic code</strong>. The first part of the previous sentence should be clear as <code>auto&amp;</code> will create references to the original elements in the range. To see why this code should not be used in generic code (e.g. inside templates), take a look at the following function template:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Sets all elements in the given range to the given value.</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Range, <span class="keyword">typename</span> Value&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">set_all_to</span><span class="params">(Range&amp; range, <span class="type">const</span> Value&amp; value)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; x : range) &#123;    </span><br><span class="line">    x = value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>It will work. Well, most of the time. Until someone tries to use it on the dreaded <code>std::vector&lt;bool&gt;</code>. Then, the example will fail to compile because dereferencing an iterator of <code>std::vector&lt;bool&gt;</code> yields a temporary proxy object, which cannot bind to an lvalue reference (<code>auto&amp;</code>). As we will see shortly, the solution is to use “one more <code>&amp;</code>” when writing generic code.</p>
<p>(error: non-const lvalue reference to type '__bit_reference&lt;...&gt;' cannot bind to a temporary of type '__bit_reference&lt;...&gt;')</p>
<h3 id="const-auto-read-only">const auto&amp; (read only)</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">const</span> <span class="keyword">auto</span>&amp; x : range)</span><br></pre></td></tr></table></figure>
<p>Use <code>const auto&amp;</code> <strong>when you want read-only access to elements in the range</strong>, even in generic code. This is the number one choice for iterating over a range when all you want to is read its elements. <strong>No copies are made</strong> and the compiler can verify that you indeed do not modify the elements.</p>
<p>Nevertheless, keep in mind that even though you will not be able to modify the elements in the range directly, you may still be able to modify them indirectly. For example, when the elements in the range are <a href="https://en.wikipedia.org/wiki/Smart_pointer">smart pointers</a>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">std::string name;  <span class="comment">// ...</span></span><br><span class="line">&#125;; </span><br><span class="line">std::vector&lt;std::unique_ptr&lt;Person&gt;&gt; v;<span class="comment">// ...</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">const</span> <span class="keyword">auto</span>&amp; x : v) &#123;</span><br><span class="line">    x-&gt;name = <span class="string">&quot;John Doe&quot;</span>; <span class="comment">// This will change the name of all people in v.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>In such situations, you have to pay close attention to what you are doing because the compiler will not help you, even if you write <code>const auto&amp;</code>.</p>
<h3 id="auto-1">auto&amp;&amp;</h3>
<blockquote>
<p><a href="https://isocpp.org/blog/2012/11/universal-references-in-c11-scott-meyers">see more for &amp;&amp;</a></p>
<p>The essence of the issue is that “<code>&amp;&amp;</code>” in a type declaration sometimes means rvalue reference, but sometimes it means <em>either</em> rvalue reference <em>or</em> lvalue reference. As such, some occurrences of “<code>&amp;&amp;</code>” in source code may actually have the meaning of “<code>&amp;</code>”, i.e., have the syntactic <em>appearance</em> of an rvalue reference (“<code>&amp;&amp;</code>”), but the <em>meaning</em> of an lvalue reference (“<code>&amp;</code>”). References where this is possible are more flexible than either lvalue references or rvalue references. Rvalue references may bind only to rvalues, for example, and lvalue references, in addition to being able to bind to lvalues, may bind to rvalues only under restricted circumstances.[1] In contrast, references declared with “<code>&amp;&amp;</code>” that may be either lvalue references or rvalue references may bind to <em>anything</em>. Such unusually flexible references deserve their own name. I call them <em>universal references</em>.</p>
<p><strong>If a variable or parameter is declared to have type <code>T&amp;&amp;</code> for some deduced(推断) type <code>T</code>, that variable or parameter is a <em>universal reference</em>.</strong></p>
<p>In practice, almost all universal references are parameters to <strong>function templates</strong>.Because the type deduction rules for <strong><code>auto</code>-</strong>declared variables are essentially the same as for templates, it’s also possible to have <code>auto</code>-declared universal references.</p>
<p>i.e. auto&amp;&amp;</p>
<p>i.e. template&lt;typename T&gt; void f(T&amp;&amp; param)</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp;&amp; x : range)</span><br></pre></td></tr></table></figure>
<p>Use <code>auto&amp;&amp;</code> <strong>when you want to modify elements in the range in generic code</strong>. To elaborate, <code>auto&amp;&amp;</code> is a <a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4164.pdf">forwarding reference</a>, also known as a <a href="https://isocpp.org/blog/2012/11/universal-references-in-c11-scott-meyers">universal reference</a>. It behaves as follows:</p>
<ul>
<li>When initialized with an <a href="http://en.cppreference.com/w/cpp/language/value_category">lvalue</a>, it creates an <a href="http://en.cppreference.com/w/cpp/language/reference">lvalue reference</a>.</li>
<li>When initialized with an <a href="http://en.cppreference.com/w/cpp/language/value_category">rvalue</a>, it creates an <a href="http://en.cppreference.com/w/cpp/language/reference">rvalue reference</a>.</li>
</ul>
<p>A detailed explanation of forwarding references is outside of scope of the present post. For more details, see <a href="https://isocpp.org/blog/2012/11/universal-references-in-c11-scott-meyers">this article</a> by Scott Meyers. Anyway, the use of <code>auto&amp;&amp;</code> allows us to write generic loops that can also modify elements of ranges yielding proxy objects, such as our friend (or foe?) <a href="http://en.cppreference.com/w/cpp/container/vector_bool"><code>std::vector&lt;bool&gt;</code></a>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Sets all elements in the given range to the given value.// Now working even with std::vector&lt;bool&gt;.</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Range, <span class="keyword">typename</span> Value&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">set_all_to</span><span class="params">(Range&amp; range, <span class="type">const</span> Value&amp; value)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span>&amp;&amp; x : range) &#123; </span><br><span class="line">    <span class="comment">// Notice &amp;&amp; instead of &amp;.    </span></span><br><span class="line">    x = value;  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Now, you may wonder: if <code>auto&amp;&amp;</code> works even in generic code, why should I ever use <code>auto&amp;</code>? As Howard Hinnant puts it, liberate use of <code>auto&amp;&amp;</code> results in so-called <a href="http://stackoverflow.com/a/13130795/2580955">confuscated code</a>: code that unnecessarily confuses people. My advice is to use <code>auto&amp;</code> in non-generic code and <code>auto&amp;&amp;</code> only in generic code(generic programming 泛型编程).</p>
<p>By the way, there was a <a href="http://open-std.org/jtc1/sc22/wg21/docs/papers/2014/n3853.htm">proposal for C++1z</a> to allow writing just <code>for (x : range)</code>, which would be translated into <code>for (auto&amp;&amp; x : range)</code>. Such range-based for loops were called <a href="http://stackoverflow.com/questions/25468486/what-are-terse-ranged-based-for-loops">terse</a>. However, this proposal was <a href="https://botondballo.wordpress.com/2014/11/23/trip-report-c-standards-meeting-in-urbana-champaign-november-2014/">removed from consideration</a> and will not be part of C++.</p>
<h3 id="const-autodont-use">const auto&amp;&amp;(dont use)</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">const</span> <span class="keyword">auto</span>&amp;&amp; x : range)</span><br></pre></td></tr></table></figure>
<p>This variant will bind only to rvalues, which you will not be able to modify or move because of the <code>const</code>. This makes it less than useless. Hence, there is <strong>no reason</strong> for choosing this variant over <code>const auto&amp;</code>.</p>
<h3 id="decltypeauto">decltype(auto)</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for(decltype(auto) x : range) // C++14</span><br></pre></td></tr></table></figure>
<p><a href="https://en.wikipedia.org/wiki/C++14">C++14</a> introduced <a href="https://en.wikipedia.org/wiki/C++14#Alternate_type_deduction_on_declaration"><code>decltype(auto)</code></a>. It means: apply automatic type deduction, but use <a href="http://en.cppreference.com/w/cpp/language/decltype"><code>decltype</code></a> rules. Whereas <code>auto</code> strips down top-level <a href="http://en.cppreference.com/w/cpp/language/cv">cv qualifiers</a> and references, <code>decltype</code> preserves them.</p>
<blockquote>
<p>see more for auto and decltype</p>
</blockquote>
<p>As is stated in <a href="https://isocpp.org/wiki/faq/cpp14-language#decltype-auto">this C++ FAQ</a>, <code>decltype(auto)</code> is primarily useful for deducing the return type of forwarding functions and similar wrappers. However, it is not intended to be a widely used feature beyond that. And indeed, <a href="http://stackoverflow.com/questions/38421392/range-based-for-loop-with-decltypeauto">there seems to be <strong>no reason</strong> for using it in range-based for loops</a>.</p>
<h3 id="summary">Summary</h3>
<p>To summarize:</p>
<ul>
<li>Use <code>auto</code> when you want to work with a <strong>copy</strong> of elements in the range.(<strong>except for bool,</strong> use bool instead of auto)</li>
<li>Use <code>auto&amp;</code> when you want to <strong>modify elements in the range in non-generic code.</strong></li>
<li>Use <code>auto&amp;&amp;</code> when you want to <strong>modify elements in the range in generic code.</strong></li>
<li>Use <code>const auto&amp;</code> when you want <strong>read-only</strong> access to elements in the range (even in generic code).</li>
</ul>
<p>Other variants are generally less useful.</p>
<h1 id="decltype"><a href="https://en.cppreference.com/w/cpp/language/decltype">decltype</a></h1>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;type_traits&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">A</span> &#123; <span class="type">double</span> x; &#125;;</span><br><span class="line"><span class="type">const</span> A* a;</span><br><span class="line"></span><br><span class="line"><span class="keyword">decltype</span>(a-&gt;x) y;       <span class="comment">// type of y is double (declared type)</span></span><br><span class="line"><span class="keyword">decltype</span>((a-&gt;x)) z = y; <span class="comment">// type of z is const double&amp; (lvalue expression)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">add</span><span class="params">(T t, U u)</span> -&gt; <span class="title">decltype</span><span class="params">(t + u)</span> </span></span><br><span class="line"><span class="function"><span class="comment">// return type depends on template parameters</span></span></span><br><span class="line"><span class="function"><span class="comment">// return type can be deduced since C++14</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> t + u;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">const</span> <span class="type">int</span>&amp; <span class="title">getRef</span><span class="params">(<span class="type">const</span> <span class="type">int</span>* p)</span> </span>&#123; <span class="keyword">return</span> *p; &#125;</span><br><span class="line"><span class="built_in">static_assert</span>(std::is_same_v&lt;<span class="keyword">decltype</span>(getRef), <span class="type">const</span> <span class="type">int</span>&amp;(<span class="type">const</span> <span class="type">int</span>*)&gt;);</span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">getRefFwdBad</span><span class="params">(<span class="type">const</span> <span class="type">int</span>* p)</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">getRef</span>(p); &#125;</span><br><span class="line"><span class="built_in">static_assert</span>(std::is_same_v&lt;<span class="keyword">decltype</span>(getRefFwdBad), <span class="built_in">int</span>(<span class="type">const</span> <span class="type">int</span>*)&gt;,</span><br><span class="line">    <span class="string">&quot;Just returning auto isn&#x27;t perfect forwarding.&quot;</span>);</span><br><span class="line"><span class="function"><span class="keyword">decltype</span>(<span class="keyword">auto</span>) <span class="title">getRefFwdGood</span><span class="params">(<span class="type">const</span> <span class="type">int</span>* p)</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">getRef</span>(p); &#125;</span><br><span class="line"><span class="built_in">static_assert</span>(std::is_same_v&lt;<span class="keyword">decltype</span>(getRefFwdGood), <span class="type">const</span> <span class="type">int</span>&amp;(<span class="type">const</span> <span class="type">int</span>*)&gt;,</span><br><span class="line">    <span class="string">&quot;Returning decltype(auto) perfectly forwards the return type.&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Alternatively:</span></span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">getRefFwdGood1</span><span class="params">(<span class="type">const</span> <span class="type">int</span>* p)</span> -&gt; <span class="title">decltype</span><span class="params">(getRef(p))</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">getRef</span>(p); &#125;</span><br><span class="line"><span class="built_in">static_assert</span>(std::is_same_v&lt;<span class="keyword">decltype</span>(getRefFwdGood1), <span class="type">const</span> <span class="type">int</span>&amp;(<span class="type">const</span> <span class="type">int</span>*)&gt;,</span><br><span class="line">    <span class="string">&quot;Returning decltype(return expression) also perfectly forwards the return type.&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">33</span>;</span><br><span class="line">    <span class="keyword">decltype</span>(i) j = i * <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;i and j are the same type? &quot;</span> &lt;&lt; std::boolalpha</span><br><span class="line">              &lt;&lt; std::is_same_v&lt;<span class="keyword">decltype</span>(i), <span class="keyword">decltype</span>(j)&gt; &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;i = &quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;, &quot;</span></span><br><span class="line">              &lt;&lt; <span class="string">&quot;j = &quot;</span> &lt;&lt; j &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> f = [](<span class="type">int</span> a, <span class="type">int</span> b) -&gt; <span class="type">int</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> a * b;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">decltype</span>(f) g = f; <span class="comment">// the type of a lambda function is unique and unnamed</span></span><br><span class="line">    i = <span class="built_in">f</span>(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">    j = <span class="built_in">g</span>(<span class="number">3</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;i = &quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;, &quot;</span></span><br><span class="line">              &lt;&lt; <span class="string">&quot;j = &quot;</span> &lt;&lt; j &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="reverse-iterator">reverse iterator</h1>
<p><code>std::reverse_iterator</code> produces a new iterator that moves from the end to the beginning of the sequence defined by the underlying bidirectional iterator.</p>
<figure>
<img src="https://upload.cppreference.com/mwiki/images/3/39/range-rbegin-rend.svg" alt="range-rbegin-rend.svg" /><figcaption aria-hidden="true">range-rbegin-rend.svg</figcaption>
</figure>
<h1 id="c.h文件-.h文件里不要定义变量可以声明"><a href="https://www.cnblogs.com/laojie4321/archive/2012/03/30/2425015.html">.c&amp;.h文件</a> .h文件里不要定义变量，可以声明！！</h1>
<ul>
<li><p>一个经典错误。3a222 在a.h头文件中定义变量temp并初始化，即显式初始化。int temp = 0；</p>
<p>a.c b.c文件中都包含了a.h头文件，则在编译时会出现：multiple definition of `a’的错误。</p>
<p>a.h中定义变量temp，不初始化为0即为不显示初始化。</p>
<p>不显示初始化不出错原因： —— 不显式的初始化，在C语言中（C++中不是这样的），则先假定为声明，多次声明是没错的，最后才是定义。</p></li>
</ul>
<h1 id="内置变量">内置变量</h1>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bool:         所占字节数：1    最大值：1        最小值：0</span><br><span class="line">char:         所占字节数：1    最大值：        最小值：?</span><br><span class="line">signed char:     所占字节数：1    最大值：        最小值：?</span><br><span class="line">unsigned char:     所占字节数：1    最大值：?        最小值：</span><br><span class="line">wchar_t:     所占字节数：4    最大值：2147483647        最小值：-2147483648</span><br><span class="line">short:         所占字节数：2    最大值：32767        最小值：-32768</span><br><span class="line">int:         所占字节数：4    最大值：2147483647    最小值：-2147483648</span><br><span class="line">unsigned:     所占字节数：4    最大值：4294967295    最小值：0</span><br><span class="line">long:         所占字节数：8    最大值：9223372036854775807    最小值：-9223372036854775808</span><br><span class="line">unsigned long:     所占字节数：8    最大值：18446744073709551615    最小值：0</span><br><span class="line">double:     所占字节数：8    最大值：1.79769e+308    最小值：2.22507e-308</span><br><span class="line">long double:     所占字节数：16    最大值：1.18973e+4932    最小值：3.3621e-4932</span><br><span class="line">float:         所占字节数：4    最大值：3.40282e+38    最小值：1.17549e-38</span><br><span class="line">size_t:     所占字节数：8    最大值：18446744073709551615    最小值：0</span><br><span class="line">string:     所占字节数：24</span><br></pre></td></tr></table></figure>
<h1 id="extern">Extern</h1>
<p>用extern来<strong>声明</strong>在别的文件中已经存在的变量和函数，而且格式必须严格一致（比如数组不等价于指针）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="type">int</span> x;</span><br></pre></td></tr></table></figure>
<p>其实相当于只声明, 不定义.</p>
<ul>
<li><strong>static</strong> 存储类指示编译器在程序的生命周期内保持局部变量的存在，而不需要在每次它进入和离开作用域时进行创建和销毁。因此，使用 static 修饰局部变量可以在函数调用之间保持局部变量的值。</li>
</ul>
<h1 id="传参">传参</h1>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">调用类型</th>
<th style="text-align: left;">描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"><a href="https://www.runoob.com/cplusplus/cpp-function-call-by-value.html">传值调用</a></td>
<td style="text-align: left;">该方法把参数的实际值复制给函数的形式参数。在这种情况下，修改函数内的形式参数对实际参数没有影响。</td>
</tr>
<tr class="even">
<td style="text-align: left;"><a href="https://www.runoob.com/cplusplus/cpp-function-call-by-pointer.html">指针调用</a></td>
<td style="text-align: left;">该方法把参数的地址复制给形式参数。在函数内，该地址用于访问调用中要用到的实际参数。这意味着，修改形式参数会影响实际参数。</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><a href="https://www.runoob.com/cplusplus/cpp-function-call-by-reference.html">引用调用</a></td>
<td style="text-align: left;">该方法把参数的引用复制给形式参数。在函数内，该引用用于访问调用中要用到的实际参数。这意味着，修改形式参数会影响实际参数。</td>
</tr>
</tbody>
</table>
<ul>
<li>参数可以有默认值</li>
</ul>
<h1 id="lambda表达式">lambda表达式</h1>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">[capture](parameters)-&gt;return_type&#123;body&#125;</span><br></pre></td></tr></table></figure>
<p>每当你定义一个<code>lambda</code>表达式后，编译器会自动生成一个匿名类（这个类当然重载了<code>()</code>运算符），我们称为闭包类型（closure type）。那么在运行时，这个<code>lambda</code>表达式就会返回一个匿名的闭包实例，其实一个右值。所以，我们上面的<code>lambda</code>表达式的结果就是一个个闭包。闭包的一个强大之处是其可以通过传值或者引用的方式捕捉其封装作用域内的变量，前面的方括号就是用来定义捕捉模式以及变量，我们又将其称为<code>lambda</code>捕捉块。</p>
<p>捕获列表[]: [&amp;]通过引用捕获, [=]通过值捕获, [this]成员通过引用捕获</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> add_x = [x](<span class="type">int</span> a) &#123; <span class="keyword">return</span> a + x; &#125;;  <span class="comment">// 复制捕捉x</span></span><br><span class="line">    <span class="keyword">auto</span> multiply_x = [&amp;x](<span class="type">int</span> a) &#123; <span class="keyword">return</span> a * x; &#125;;  <span class="comment">// 引用捕捉x</span></span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="built_in">add_x</span>(<span class="number">10</span>) &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; <span class="built_in">multiply_x</span>(<span class="number">10</span>) &lt;&lt; endl;</span><br><span class="line">    <span class="comment">// 输出：20 100</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> C, <span class="keyword">class</span> Oper&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">for_all</span><span class="params">(C&amp; c, Oper op)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; x:c)</span><br><span class="line">        <span class="built_in">op</span>(*x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vetcor&lt;unique_ptr&lt;Shape&gt;&gt; v;</span><br><span class="line">for_all(v, [](Shape&amp; s)&#123;s.<span class="built_in">draw</span>();&#125;)</span><br><span class="line"></span><br><span class="line">[=]()-&gt;<span class="type">int</span>&#123;<span class="keyword">if</span>(y) <span class="keyword">return</span> <span class="number">1</span>; <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">2</span>;&#125;</span><br></pre></td></tr></table></figure>
<h1 id="虚函数-虚基类">虚函数 虚基类</h1>
<figure>
<img src="https://jacktang816.github.io/img/cpp/virtualFunction/vptrLocation.png" alt="img" /><figcaption aria-hidden="true">img</figcaption>
</figure>
<h2 id="虚函数">虚函数</h2>
<p>➢ 编译程序为有虚函数的类创建一个虚函数入口地址表VFT，</p>
<p>➢ 表首地址存放在对象的起始单元中。</p>
<p>➢ 当对象调用虚函数时，通过其起始单元得到VFT首址，</p>
<p>动态绑定到相应的函数成员。</p>
<figure>
<img src="https://tva1.sinaimg.cn/large/008i3skNgy1gxacrfe7eaj30pa09q75b.jpg" alt="截屏2021-11-12 上午11.43.14" /><figcaption aria-hidden="true">截屏2021-11-12 上午11.43.14</figcaption>
</figure>
<p>vtbl (virtual function table) 指明了每个类在运行时应该调用 which 虚函数</p>
<p>每个类有一个自己的vtbl</p>
<p>开销: 每个对象需要一个额外的指针即指向 vtbl 的指针, 每个类需要一个 vtbl</p>
<p>https://stackoverflow.com/questions/3324721/virtual-tables-and-virtual-pointers-for-multiple-virtual-inheritance-and-type-ca</p>
<p><strong>question:</strong></p>
<p>I am little confused about vptr and representation of objects in the memory, and hope you can help me understand the matter better.</p>
<ol type="1">
<li>Consider <code>B</code> inherits from <code>A</code> and both define virtual functions <code>f()</code>. From what I learned the representation of an object of class B in the memory looks like this:<code>[ vptr | A | B ]</code> and the <code>vtbl</code> that <code>vptr</code> points to contains <code>B::f()</code>. I also understood that casting the object from <code>B</code> to <code>A</code> does nothing except ignoring the <code>B</code> part at the end of the object. Is it true? Doesn't this behavior is wrong? We want that object of type <code>A</code> to execute <code>A::f()</code> method and not <code>B::f()</code>.</li>
<li>Are there a number of <code>vtables</code> in the system as the number of classes?</li>
<li>How will a <code>vtable</code> of class that inherits from two or more classes look like? How will the object of C be represented in the memory?</li>
<li>Same as question 3 but with virtual inheritance.</li>
</ol>
<p><strong>answer:</strong></p>
<p>The following is true for GCC (and it seems true for LLVM <a href="https://llvm.org/docs/CompilerWriterInfo.html#abi">link</a>), but may also be true for the compiler you're using. All these is implementation-dependent, and is not governed by C++ standard. However, GCC write its own binary standard document, <a href="http://static.coldattic.info/cxx-abi/abi.html">Itanium ABI</a>.</p>
<p>I tried to explain basic concepts of how virtual tables are laid out in more simple words as a part of my <a href="http://coldattic.info/post/3/">article about virtual function performance in C++</a>, which you may find useful. Here are answers to your questions:</p>
<ol type="1">
<li><p>A more correct way to depict internal representation of the object is:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">| vptr | ======= | ======= |  &lt;-- your object</span><br><span class="line">       |----A----|         |</span><br><span class="line">       |---------B---------|</span><br></pre></td></tr></table></figure>
<p><code>B</code> <em>contains</em> its base class <code>A</code>, <strong>it just adds a couple of his own members after its end.</strong></p>
<p>Casting from <code>B*</code> to <code>A*</code> indeed does nothing, it returns the same pointer, and <code>vptr</code> remains the same. But, in a nutshell, <strong>virtual functions are not always called via vtable</strong>. Sometimes they're called just like the other functions.</p>
<p>Here's more detailed explanation. You should distinguish two ways of calling member function:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">A a, *aptr;</span><br><span class="line">a.<span class="built_in">func</span>();         <span class="comment">// the call to A::func() is precompiled!</span></span><br><span class="line">aptr-&gt;A::<span class="built_in">func</span>();  <span class="comment">// ditto</span></span><br><span class="line">aptr-&gt;<span class="built_in">func</span>();     <span class="comment">// calls virtual function through vtable.</span></span><br><span class="line">                  <span class="comment">// It may be a call to A::func() or B::func().</span></span><br></pre></td></tr></table></figure>
<p>The thing is that it's known <em>at compile time</em> how the function will be called: via vtable or just will be a usual call. And the thing is that <strong>the type of a casting expression is known at compile time</strong>, and therefore the compiler chooses the right function at compile time.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">B b, *bptr;          </span><br><span class="line"><span class="built_in">static_cast</span>&lt;A&gt;(b)::<span class="built_in">func</span>(); <span class="comment">//calls A::func, because the type</span></span><br><span class="line">   <span class="comment">// of static_cast&lt;A&gt;(b) is A!</span></span><br></pre></td></tr></table></figure>
<p>It doesn't even look inside vtable in this case!</p></li>
<li><p>Generally, no. A class can have several vtables if it inherits from several bases, each having its own vtable. Such set of virtual tables forms a "virtual table group" (see pt. 3).</p>
<p>Class also needs a set of construction vtables, to correctly distpatch virtual functions when constructing bases of a complex object. You can read further in <a href="http://static.coldattic.info/cxx-abi/abi.html#vtable-ctor">the standard I linked</a>.</p></li>
<li><p>Here's an example. Assume <strong><code>C</code> inherits from <code>A</code> and <code>B</code></strong>, each class defining <code>virtual void func()</code>, as well as <code>a</code>,<code>b</code> or <code>c</code> virtual function relevant to its name.</p>
<p>The <code>C</code> will have a vtable group of two vtables. It will share one vtable with <code>A</code> (the vtable where the own functions of the current class go is called "primary"), and a vtable for <code>B</code> will be appended:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">| C::<span class="built_in">func</span>()   |   <span class="built_in">a</span>()  |  <span class="built_in">c</span>()  || C::<span class="built_in">func</span>()  |   <span class="built_in">b</span>()   |</span><br><span class="line">|---- vtable <span class="keyword">for</span> A ----|        |---- vtable <span class="keyword">for</span> B ----| </span><br><span class="line">|--- <span class="string">&quot;primary virtual table&quot;</span> --||- <span class="string">&quot;secondary vtable&quot;</span> -|</span><br><span class="line">|-------------- <span class="keyword">virtual</span> table group <span class="keyword">for</span> C -------------|</span><br></pre></td></tr></table></figure>
<p>The representation of object in memory will look nearly the same way its vtable looks like. Just add a <code>vptr</code> before every vtable in a group, and you'll have a rough estimate how the data are laid out inside the object. You may read about it in the <a href="http://static.coldattic.info/cxx-abi/abi.html#layout">relevant section</a> of the GCC binary standard.</p></li>
<li><p>Virtual bases (some of them) are laid out at the end of vtable group. This is done because each class should have only one virtual base, and if they were mingled with "usual" vtables, then compiler couldn't re-use parts of constructed vtables to making those of derived classes. This would lead to computing unnecessary offsets and would decrease performance.</p>
<p>Due to such a placement, virtual bases also introduce into their vtables additional elements: <code>vcall</code> offset (<strong>to get address of a final overrider when jumping from the pointer to a virtual base inside a complete object</strong> to the beginning of the class that overrides the virtual function) for each virtual function defined there. Also each virtual base adds <code>vbase</code> offsets, w<strong>hich are inserted into vtable of the derived class; they allow to find where the data of the virtual base begin</strong> (it can't be precompiled since the actual address depends on the hierarchy: virtual bases are at the end of object, and the shift from beginning varies depending on how many non-virtual classes the current class inherits.).</p></li>
</ol>
<p>Woof, I hope I didn't introduce much unnecessary complexity. In any case, you may refer to the original standard, or to any document of your own compiler.</p>
<h2 id="虚基类">虚基类</h2>
<p>Virtual inheritance is there to solve this problem(菱形继承). When you specify virtual when inheriting your classes, you're telling the compiler that you only want a single instance.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123; <span class="keyword">public</span>: <span class="function"><span class="type">void</span> <span class="title">Foo</span><span class="params">()</span> </span>&#123;&#125; &#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> : <span class="keyword">public</span> <span class="keyword">virtual</span> A &#123;&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> : <span class="keyword">public</span> <span class="keyword">virtual</span> A &#123;&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span> : <span class="keyword">public</span> B, <span class="keyword">public</span> C &#123;&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="声明-定义">声明 定义</h1>
<p>区分声明与定义</p>
<p>1、一种是需要建立存储空间的。例如：int a 在声明的时候就已经建立了存储空间。</p>
<p>2、另一种是不需要建立存储空间的。 例如：extern int a 其中变量a是在别的文件中定义的</p>
<p>声明是向编译器介绍名字－－标识符。它告诉编译器“这个函数或变量在某处可找到。</p>
<p>而定义是说：“在这里建立变量”或“在这里建立函数”。它为名字分配存储空间。无论定义的是函数还是变量，编译器都要为它们在定义点分配存储空间。对于变量，编译器确定变量的大小，然后在内存中开辟空间来保存其数据，对于函数，编译器会生成代码，这些代码最终也要占用一定的内存。</p>
<p><strong>基本类型变量的声明和定义是同时产生的, 对于对象来说则是分开的</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">A a; <span class="comment">//对象声明</span></span><br><span class="line">a = <span class="keyword">new</span> <span class="built_in">A</span>(); <span class="comment">//对象定义(初始化)</span></span><br></pre></td></tr></table></figure>
<p>所谓定义就是（编译器）创建一个对象，为这个对象分配一块内存，并给它取上一个名字，这个名字就是就是我们经常所说的变量名或对象名。</p>
<p>声明有2重含义：</p>
<p>（1） 告诉编译器，这个名字已经匹配到一块内存上，下面的代码用到变量或者对象是在别的地方定义的。声明可以出现多次。</p>
<p>（2） 告诉编译器，这个名字已经被预定了，别的地方再也不能用它来作为变量名或对象名。</p>
<p><strong><em>*定义和声明的最重要区别就是：*</em></strong></p>
<p><strong><em>*定义创建对象并为这个对象分配了内存，声明没有分配内存。*</em></strong></p>
<p>函数原型: 在<a href="https://zh.wikipedia.org/wiki/程序设计">计算机编程</a>中，<strong>函数原型</strong>（英语：<strong>Function prototype</strong>）或<strong>函数接口</strong>（英语：<strong>Function interface</strong>）是用于指定函数的名称和<a href="https://zh.wikipedia.org/wiki/类型特征">类型特征</a>（<a href="https://zh.wikipedia.org/wiki/元数">元数</a>，参数的<a href="https://zh.wikipedia.org/wiki/資料類型">数据类型</a>和返回值类型）的一种省略了函数体的<a href="https://zh.wikipedia.org/wiki/子程序">函数</a><a href="https://zh.wikipedia.org/w/index.php?title=声明&amp;action=edit&amp;redlink=1">声明</a>。</p>
<h1 id="strcut和class的区别"><a href="(https://www.jianshu.com/p/409f931c17d9)">strcut和class的区别</a></h1>
<ol type="1">
<li>默认的继承访问权。class默认的是private,strcut默认的是public(union 也是 public)。</li>
<li>默认访问权限：struct作为数据结构的实现体，它默认的数据访问控制是public的，而class作为对象的实现体，它默认的成员变量访问控制是private的。</li>
<li>“class”这个关键字还用于定义模板参数，就像“typename”。但关建字“struct”不用于定义模板参数</li>
<li>class和struct在使用大括号{ }上的区别 关于使用大括号初始化 1.）class和struct如果定义了构造函数的话，都不能用大括号进行初始化 2.）如果没有定义构造函数，struct可以用大括号初始化。 3.）如果没有定义构造函数，且所有成员变量全是public的话，class可以用大括号初始化</li>
</ol>
<h1 id="namespace">namespace</h1>
<p>类的头文件应该是自己形成一个命名空间, 然后 cpp <strong>文件因为是相当于在类外进行定义</strong>所以要使用命名空间指明函数定义</p>
<h1 id="explicit-implicit">explicit implicit</h1>
<p>上面的代码中, "CxString string2 = 10;" 这句为什么是可以的呢? 在C++中, 如果的<strong>构造函数只有一个参数</strong>时, 那么在编译的时候就会有一个<strong>缺省的转换操作:将该构造函数对应数据类型的数据转换为该类对象.</strong> 也就是说 "CxString string2 = 10;" 这段代码, 编译器自动将整型转换为CxString类对象, 实际上等同于下面的操作:</p>
<p><code>CxString string2(10);</code></p>
<p>即隐式转换</p>
<p>当使用 explicit 关键字修饰构造函数以后, 就能避免这种操作</p>
<p>默认情况下构造函数都是 implicit 的</p>
<h1 id="friend-友元">friend 友元</h1>
<p>原则上, 类的私有（private）和受保护（protected）成员不能从声明它们的同一类外部访问。但是, 此规则不适用于友元 "friends"。</p>
<p>以friend关键字修饰的函数或类称为友元函数或友元类。</p>
<p><strong>友元函数</strong>是可以直接访问类的私有成员的非成员函数。它是定义在类外的普通函数，它不属于任何类，但需要在类的定义中加以声明，声明时只需在友元的名称前加上关键字friend，其格式如下：</p>
<p><code>friend 类型 函数名(形式参数);</code></p>
<p><strong>友元类</strong>的所有成员函数都是另一个类的友元函数，都可以访问另一个类中的隐藏信息（包括私有成员和保护成员）。</p>
<p>　　当希望一个类可以存取另一个类的私有成员时，可以将该类声明为另一类的友元类。定义友元类的语句格式如下：</p>
<p><code>friend class 类名;</code></p>
<p>其中：friend和class是关键字，类名必须是程序中的一个已定义过的类。</p>
<p><strong>使用友元类时注意</strong>：</p>
<p>　　1、友元关系不能被继承。</p>
<p>　　2、友元关系是单向的，不具有交换性。若类B是类A的友元，类A不一定是类B的友元，要看在类中是否有相应的声明。</p>
<p>　　3、友元关系具有非传递性。若类B是类A的友元，类C是B的友元，类C不一定是类A的友元，同样要看类中是否有相应的申明。</p>
<h1 id="public-protect-private-继承">public protect private 继承</h1>
<p>类继承方式 -&gt; 基类成员的访问权限</p>
<p><strong>继承无法访问父变量的 private 成员</strong></p>
<p><strong>访问权限</strong></p>
<p><strong>private</strong>：私有成员</p>
<p>仅可被本类的函数成员访问</p>
<p>不能被派生类、其它类和普通函数访问</p>
<p><strong>protected</strong>：受保护成员</p>
<p>可被本类和派生类的函数成员访问</p>
<p>不能被其它类函数成员和普通函数访问</p>
<p><strong>public</strong>：公有成员</p>
<p>可被任何函数成员和普通函数访问</p>
<p><strong>继承权限</strong> <strong>public继承</strong> 派生类通过public继承，基类的各种权限不变 。 派生类的成员函数，可以访问基类的public成员、protected成员，但是无法访问基类的private成员。 派生类的实例变量，可以访问基类的public成员，但是无法访问protected、private成员，仿佛基类的成员之间加到了派生类一般。 可以将public继承看成派生类将基类的public,protected成员囊括到派生类，但是不包括private成员。</p>
<p><strong>protected继承</strong> 派生类通过protected继承，基类的public成员在派生类中的权限变成了protected 。protected和private不变。 派生类的成员函数，可以访问基类的public成员、protected成员，但是无法访问基类的private成员。 派生类的实例变量，无法访问基类的任何成员，因为基类的public成员在派生类中变成了protected。 可以将protected继承看成派生类将基类的public,protected成员囊括到派生类，全部作为派生类的protected成员，但是不包括private成员。 private成员是基类内部的隐私，除了友元，所有人员都不得窥探。派生类的友元，都不能访问</p>
<p><strong>private继承</strong> 派生类通过private继承，基类的所有成员在派生类中的权限变成了private。 派生类的成员函数，可以访问基类的public成员、protected成员，但是无法访问基类的private成员。 派生类的实例变量，无法访问基类的任何成员，因为基类的所有成员在派生类中变成了private。 可以将private继承看成派生类将基类的public,protected成员囊括到派生类，全部作为派生类的private成员，但是不包括private成员。 private成员是基类内部的隐私，除了友元，所有人员都不得窥探。派生类的友元，都不能访问</p>
<p><strong>总结：继承修饰符，就像是一种筛子，将基类的成员筛到派生类。public、protected、private，就是筛子的眼。</strong> <strong>通过public继承，所有基类成员（除了private），public、protected都到了派生类里面，public筛眼比较大，不会改变访问权限。</strong> <strong>通过protected继承，所有基类成员（除了private），public、protected都到了派生类里面，protected筛眼大小适中，所有过来的成员都变成了protected。</strong> <strong>通过private继承，所有基类成员（除了private），public、protected都到了派生类里面，private筛眼最小，所有过来的成员都变成了private。</strong></p>
<h1 id="隐式转换和显式转换">隐式转换和显式转换</h1>
<p>隐式转换: 比如 double = int, 或者调用构造函数的那种(见explicit implicit)</p>
<p>显式转换: 又称强制类型转换. 比如 int(), static_cast</p>
<p>保护值不被改变的隐式类型转换称为"提升", 如整型提升</p>
<p>浮点到整数发生截断, -1.6 → -1</p>
<h1 id="返回引用">返回引用</h1>
<p>当返回的值不是引用型时，编译器会专门给返回值分配出一块内存的</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">T <span class="title">function1</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="function">T <span class="title">t</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">  <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line">T x = <span class="built_in">function1</span>();</span><br></pre></td></tr></table></figure>
<p>这里的过程是： 1.创建命名对象t 2.<strong>拷贝构造一个无名的临时对象，并返回这个临时对象</strong> 3.由临时对象拷贝构造对象x 4.T x=function1();这句语句结束时，析构临时对象 这里一共生成了3个对象，一个命名对象t，一个临时对象作为返回值，一个命名对象x。</p>
<p>返回引用, 其实就是返回了一个对象的引用, 新对象 = 返回的引用, 调用了拷贝构造函数</p>
<h1 id="静态数据成员">静态数据成员</h1>
<p>静态成员变量必须?要在类外部定义(c++11 整型可在内), 因为要在对象创建之前就分配内存</p>
<p>They can't be initialised inside the class, but they can be initialised outside the class, in a source file:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// inside the class</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Thing</span> &#123;</span><br><span class="line">    <span class="type">static</span> string RE_ANY;</span><br><span class="line">    <span class="type">static</span> string RE_ANY_RELUCTANT;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// in the source file</span></span><br><span class="line">string Thing::RE_ANY = <span class="string">&quot;([^\\n]*)&quot;</span>;</span><br><span class="line">string Thing::RE_ANY_RELUCTANT = <span class="string">&quot;([^\\n]*?)&quot;</span>;</span><br></pre></td></tr></table></figure>
<p>Essentially it's because <code>x</code> exists independently of the number of <em>instances</em> of <code>A</code> that are created.</p>
<p>So storage for <code>x</code> needs to be defined somewhere - you can't rely on an instance of <code>A</code> to do that, and that's what</p>
<p>in exactly one translation unit, does.</p>
<p>When the <code>const</code> qualifier is present, the static variable can be considered as a constant expression. Initializing it in the class definition goes to that effect. It's just some constant value, may not even need any storage.</p>
<p>But in the other case, it's not a constant expression. It definitely needs storage. And as <span class="citation" data-cites="Bathsheba">@Bathsheba</span> points out, it needs to be defined in only one translation unit (pre-C++17). Generally speaking, a declaration that contains an initializer is also a definition. So it just can't be initialized when declared.</p>
<h1 id="缺省参数-默认参数">缺省参数 (默认参数)</h1>
<p>带缺省值的参数必须放在参数列表的最后面。因为传参是从右向左的(<em>arguments</em> are pushed onto the stack from <em>right to left</em>)。</p>
<p>即默认参数往右必须全是默认参数</p>
<p>缺省参数不能同时在函数声明和定义中出现，只能二者留其一。</p>
<h1 id="构造函数">构造函数</h1>
<p>在构造函数体前初始化：只读成员、引用成员、对象成员, 包括在声明时初始化和在列表中初始化</p>
<h1 id="作用域">作用域</h1>
<p>从小到大可以分为五级：</p>
<p>① 作用于表达式内 (常量)</p>
<p>② 作用于函数成员内 (函数参数、局部变量、局部类型)</p>
<p>③ 作用于类或派生类内 (数据/函数/类型 成员)</p>
<p>④ 作用于基类内 (数据/函数/类型 成员)</p>
<p>⑤ 作用于虚基类内 (数据/函数/类型 成员)</p>
<p>虚基类 &gt; 基类 &gt; 类/派生类 &gt; 成员函数 &gt; 表达式内</p>
<h1 id="成员指针">成员指针</h1>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Class Student &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> number;</span><br><span class="line">……</span><br><span class="line">&#125;；</span><br><span class="line"></span><br><span class="line"><span class="function">Student <span class="title">xu</span><span class="params">(<span class="number">123</span>,<span class="string">&quot;Xuxiangyang&quot;</span>,<span class="number">100</span>)</span></span>;</span><br><span class="line"><span class="function">Student <span class="title">zhang</span><span class="params">(<span class="number">456</span>,”Zhangsan”,<span class="number">99</span>)</span></span>;</span><br><span class="line"><span class="type">int</span> *p=&amp;xu.number; <span class="comment">// p 指向对象 xu中的number</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> Student::*q = &amp;Student::number; <span class="comment">// q 数据成员指针</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//int Student::*q; q= &amp;Student::number;</span></span><br><span class="line">cout &lt;&lt; xu.*q&lt;&lt;endl; <span class="comment">// cout &lt;&lt; xu.number &lt;&lt;endl; </span></span><br><span class="line">cout &lt;&lt; zhang.*q &lt;&lt;endl;</span><br><span class="line"><span class="type">int</span> *p = &amp;Student::number; <span class="comment">//无法从 Student::* 转换为 int ***</span></span><br></pre></td></tr></table></figure>
<p>对于普通指针变量来说，其值是它所指向的地址，0表示空指针。 而对于数据成员指针变量来说，其值是数据成员所在地址相对于对象起始地址的偏移值，空指针用-1表示</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">X</span> &#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="type">int</span> b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> VALUE_OF_PTR(p)     (*(long*)&amp;p)</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> X::*p = <span class="number">0</span>;  <span class="comment">// VALUE_OF_PTR(p) == -1</span></span><br><span class="line">    p = &amp;X::a;      <span class="comment">// VALUE_OF_PTR(p) == 0</span></span><br><span class="line">    p = &amp;X::b;      <span class="comment">// VALUE_OF_PTR(p) == 4</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="堆与栈"><a href="https://blog.csdn.net/hairetz/article/details/4141043">堆与栈</a></h1>
<p>https://zhuanlan.zhihu.com/p/344377490</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">void</span>* p0;</span><br><span class="line">    <span class="type">void</span>* p1;</span><br><span class="line">    <span class="type">void</span>* p2;</span><br><span class="line">    <span class="type">void</span>* p3;</span><br><span class="line">    <span class="type">const</span> <span class="type">void</span>* p4;</span><br><span class="line">    <span class="type">const</span> <span class="type">void</span>* p5;</span><br><span class="line">    <span class="type">void</span>* p6;</span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> <span class="type">void</span>* pi;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span>* pc = <span class="string">&quot;123&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    string* s456 = <span class="keyword">new</span> string&#123;<span class="string">&quot;456&quot;</span>&#125;;</span><br><span class="line">    string s123 = <span class="string">&quot;123&quot;</span>;</span><br><span class="line">    string s234 &#123;<span class="string">&quot;234&quot;</span>&#125;;</span><br><span class="line">    <span class="type">const</span> string cs123 = <span class="string">&quot;123&quot;</span>;</span><br><span class="line">    <span class="type">const</span> string cs234 = <span class="string">&quot;234&quot;</span>;</span><br><span class="line">    <span class="type">static</span> string ss456 = <span class="string">&quot;456&quot;</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    p0 = pc;</span><br><span class="line">    p1 = s456;</span><br><span class="line">    p2 = &amp;s123;</span><br><span class="line">    p3 = &amp;s234;</span><br><span class="line">    p4 = &amp;cs123;</span><br><span class="line">    p5 = &amp;cs234;</span><br><span class="line">    p6 = &amp;ss456;</span><br><span class="line">    pi = &amp;i;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;p0&lt;&lt;endl&lt;&lt;p1&lt;&lt;endl&lt;&lt;p2&lt;&lt;endl&lt;&lt;p3&lt;&lt;endl&lt;&lt;p4&lt;&lt;endl&lt;&lt;p5&lt;&lt;endl&lt;&lt;p6&lt;&lt;endl&lt;&lt;pi&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">0x10b906e21    char* pc = &quot;123&quot;</span></span><br><span class="line"><span class="comment">0x10b9071b8    static string ss456 = &quot;456&quot;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">0x600002b1d120 string* s456 = new string&#123;&quot;456&quot;&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">0x7ff7b45fc900 string s123&#123;&quot;123&quot;&#125;</span></span><br><span class="line"><span class="comment">0x7ff7b45fc8e8 string s234&#123;&quot;234&quot;&#125;</span></span><br><span class="line"><span class="comment">0x7ff7b45fc8d0 const string cs123 = &quot;123&quot;</span></span><br><span class="line"><span class="comment">0x7ff7b45fc8b8 const string cs234 = &quot;234&quot;</span></span><br><span class="line"><span class="comment">0x7ff7bda118d4 const int i = 1</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">可以看出 <span class="type">static</span> 和字符串常量在一个位置</span><br></pre></td></tr></table></figure>
<h2 id="预备知识程序的内存分配">预备知识—程序的内存分配</h2>
<figure>
<img src="https://pic1.zhimg.com/80/v2-6b739f63e83c84d07db2b7badcbe472c_1440w.jpg" alt="img" /><figcaption aria-hidden="true">img</figcaption>
</figure>
<p>一个由C/C++编译的程序占用的内存分为以下几个部分</p>
<p>关于 bss 和数据段的区别https://zhuanlan.zhihu.com/p/28659560</p>
<p><strong>data段</strong> :用于存放在编译阶段(而非运行时)就能确定的数据，可读可写。也是通常所说的静态存储区，赋了初值的全局变量、常量和静态变量都存放在这个域。</p>
<p>而<strong>bss段</strong>不在可执行文件中，由系统初始化。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> ar[<span class="number">30000</span>];</span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">......</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> ar[<span class="number">300000</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span> &#125;;</span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>发现程序2编译之后所得的可执行文件比程序1大得多。</p>
<p>区别很明显，程序1位于bss段，程序2位于data段，两者的区别在于：</p>
<p>全局的未初始化变量存在于bss段中，具体体现为一个占位符，全局的已初始化变量存于data段中，而函数内的自动变量都在栈上分配空间。</p>
<p>bss不占用可执行文件空间，其内容由操作系统初始化（清零），裸机程序需要自行手动清零。</p>
<p>而data段则需要占用可执行文件空间，其内容由程序初始化，因此造成了上述情况。</p>
<p><strong>注意</strong>：</p>
<p>bss段（未手动初始化的数据）并不给该段的数据分配空间，只是记录数据所需空间的大小。</p>
<p>data段（已手动初始化的数据）为数据分配空间，数据保存在目标文件中。</p>
<p>data段包含经过初始化的全局变量以及它们的值。</p>
<p>BSS段的大小从可执行文件中得到，然后链接器得到这个大小的内存块，紧跟在数据段后面。当这个内存区进入程序的地址空间后全部清零，包含data和bss段的整个区段此时通常称为数据区。</p>
<ol type="1">
<li><p><strong>Code Segment（代码区）</strong></p>
<p>也称Text Segment，存放可执行程序的机器码。</p>
<p><strong>Data Segment (数据区）</strong></p>
<p>存放已初始化的全局和静态变量， 常量数据（如<a href="https://www.zhihu.com/search?q=字符串&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22article%22%2C%22sourceId%22%3A344377490%7D">字符串</a>常量）。</p>
<p><strong>BSS（Block started by symbol)</strong> better save space</p>
<p>存放未初始化的全局和静态变量。（默认设为0）</p>
<p><strong>Heap（堆）</strong></p>
<p>从低地址向高地址增长。容量大于栈，程序中动态分配的内存在此区域。</p>
<p><strong>Stack（栈）</strong></p>
<p>从高地址向低地址增长。由编译器自动管理分配。程序中的局部变量、函数参数值、返回变量等存在此区域。</p></li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main.cpp  </span></span><br><span class="line"><span class="type">int</span>  a  =  <span class="number">0</span>;  全局初始化区  </span><br><span class="line"><span class="type">char</span>  *p1;  全局未初始化区  </span><br><span class="line"><span class="built_in">main</span>()  </span><br><span class="line">&#123;  </span><br><span class="line">  <span class="type">int</span>  b;  栈  </span><br><span class="line">  <span class="type">char</span>  s[]  =  <span class="string">&quot;abc&quot;</span>;  栈  </span><br><span class="line">  <span class="type">char</span>  *p2;  栈  </span><br><span class="line">  <span class="type">char</span>  *p3  =  <span class="string">&quot;123456&quot;</span>;  <span class="number">123456</span>/<span class="number">0</span>在常量区，p3在栈上。  </span><br><span class="line">  <span class="type">static</span>  <span class="type">int</span>  c  =<span class="number">0</span>；  全局（静态）初始化区  </span><br><span class="line">  p1  =  (<span class="type">char</span>  *)<span class="built_in">malloc</span>(<span class="number">10</span>);  </span><br><span class="line">  p2  =  (<span class="type">char</span>  *)<span class="built_in">malloc</span>(<span class="number">20</span>);  </span><br><span class="line">  <span class="comment">//分配得来得10和20字节的区域就在堆区。  </span></span><br><span class="line">  <span class="built_in">strcpy</span>(p1,  <span class="string">&quot;123456&quot;</span>);  <span class="comment">//123456/0放在常量区，编译器可能会将它与p3所指向的&quot;123456&quot;优化成一个地方。  </span></span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<h2 id="堆和栈的理论知识">堆和栈的理论知识</h2>
<h3 id="申请方式">申请方式</h3>
<ul>
<li>stack:<br />
由系统自动分配。 例如，声明在函数中一个局部变量 int b; 系统自动在栈中为b开辟空间<br />
</li>
<li>heap:<br />
需要程序员自己申请，并指明大小，在c中malloc函数<br />
如p1 = (char *)malloc(10);<br />
在C++中用new运算符<br />
如p2 = new char[10];<br />
<strong>但是注意p1、p2本身是在栈中的。</strong></li>
</ul>
<h3 id="申请后系统的响应">申请后系统的响应</h3>
<ul>
<li>栈：只要栈的剩余空间大于所申请空间，系统将为程序提供内存，否则将报异常提示栈溢出。<br />
</li>
<li>堆：首先应该知道操作系统有一个记录空闲内存地址的链表，当系统收到程序的申请时，会遍历该链表，寻找第一个空间大于所申请空间的堆结点，然后将该结点从空闲结点链表中删除，并将该结点的空间分配给程序 ，另外，对于大多数系统，会在这块内存空间中的首地址处记录本次分配的大小，这样，代码中的delete语句才能正确的释放本内存空间。 另外，由于找到的堆结点的大小不一定正好等于申请的大小，系统会自动的将多余的那部 分重新放入空闲链表中。</li>
</ul>
<h3 id="申请大小的限制">申请大小的限制</h3>
<ul>
<li>栈：在Windows下,栈是向低地址扩展的数据结构，是一块连续的内存的区域。这句话的意思是栈顶的地址和栈的最大容量是系统预先规定好的，在WINDOWS下，栈的大小是2M（也有的说是1M，总之是一个编译时就确定的常数），如果申请的空间超过栈的剩余空间时，将提示overflow。因此，能从栈获得的空间较小。<br />
</li>
<li>堆：堆是向高地址扩展的数据结构，是不连续的内存区域。这是由于系统是用链表来存储空闲内存地址的，自然是不连续的，而链表的遍历方向是由低地址向高地址。堆的大小受限于计算机系统中有效的虚拟内存。由此可见，堆获得的空间比较灵活，也比较大。</li>
</ul>
<h3 id="申请效率的比较">申请效率的比较：</h3>
<ul>
<li>栈由系统自动分配，速度较快。但程序员是无法控制的。<br />
</li>
<li>堆是由new分配的内存，一般速度比较慢，而且容易产生内存碎片,不过用起来最方便.<br />
另外，在WINDOWS 下，最好的方式是用VirtualAlloc分配内存，他不是在堆，也不是在栈, 是直接在进程的地址空间中保留一块内存，虽然用起来最不方便。但是速度快，也最灵活。</li>
</ul>
<h3 id="堆和栈中的存储内容">堆和栈中的存储内容</h3>
<ul>
<li>栈：在函数调用时，第一个进栈的是主函数中的下一条指令（函数调用语句的下一条可执行语句）的地址，然后是函数的各个参数，在大多数的C编译器中，参数是由右往左入栈的，然后是函数中的局部变量。注意静态变量是不入栈的。<br />
当本次函数调用结束后，局部变量先出栈，然后是参数，最后栈顶指针指向最开始存的地址，也就是主函数中的下一条指令，程序由该点继续运行。<br />
</li>
<li>堆：一般是在堆的头部用一个字节存放堆的大小。堆中的具体内容由程序员安排。</li>
</ul>
<h3 id="存取效率的比较">存取效率的比较</h3>
<p>char s1[] = "aaaaaaaaaaaaaaa";<br />
char *s2 = "bbbbbbbbbbbbbbbbb";<br />
aaaaaaaaaaa是在运行时刻赋值的；<br />
而bbbbbbbbbbb是在编译时就确定的；<br />
但是，在以后的存取中，在栈上的数组比指针所指向的字符串(例如堆)快。 比如：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span>  <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">  <span class="type">char</span>  a  =  <span class="number">1</span>;  </span><br><span class="line">  <span class="type">char</span>  c[]  =  <span class="string">&quot;1234567890&quot;</span>;</span><br><span class="line">  <span class="type">char</span>  *p  =<span class="string">&quot;1234567890&quot;</span>; </span><br><span class="line">  a  =  c[<span class="number">1</span>];  </span><br><span class="line">  a  =  p[<span class="number">1</span>];  </span><br><span class="line">  <span class="keyword">return</span>;  </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>对应的汇编代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10:  a  =  c[1];  </span><br><span class="line">00401067  8A  4D  F1  mov  cl,byte  ptr  [ebp-0Fh]  </span><br><span class="line">0040106A  88  4D  FC  mov  byte  ptr  [ebp-4],cl  </span><br><span class="line">11:  a  =  p[1];  </span><br><span class="line">0040106D  8B  55  EC  mov  edx,dword  ptr  [ebp-14h]  </span><br><span class="line">00401070  8A  42  01  mov  al,byte  ptr  [edx+1]  </span><br><span class="line">00401073  88  45  FC  mov  byte  ptr  [ebp-4],al  </span><br></pre></td></tr></table></figure>
<p>第一种在读取时直接就把字符串中的元素读到寄存器cl中，而第二种则要先把指针值读到edx中，再根据edx读取字符，显然慢了。</p>
<h2 id="各自优点">各自优点</h2>
<h3 id="堆heap"><strong>堆（heap）</strong></h3>
<p>堆是一个内存空间，这个内存控件可以由程序员分配和释放，当然部分语言自带 GC（ Garbage Collection 垃圾回收），部分堆内存可以由 GC 回收。</p>
<p>堆是程序在运行的时候<strong>请求操作系统分配给自己内存</strong>。由于从操作系统管理的内存分配，所以在分配和销毁时都要占用时间，因此用堆的效率相对栈来说略低。但是堆的优点在于，<strong>编译器不必知道要从堆里分配多少内存空间，也不必知道存储的数据要在堆里停留多长的时间</strong>，因此用堆保存数据时会得到更大的灵活性。因此，为达到这种灵活性，在堆里分配存储空间时会花掉相对更长的时间，这也是效率低于栈的原因。</p>
<h3 id="栈stack"><strong>栈（stack）</strong></h3>
<p>栈是由<strong>编译器自动分配和释放</strong>的，存放函数的参数值，局部变量的值等。也请注意，这里说的栈 不是数据结构中的栈，大家千万不要混淆。这里请注意，栈是由由系统自动分配。</p>
<p>栈的优势是，<strong>存取速度比堆要快，仅次于寄存器</strong>，栈数据可以共享。但缺点是，存在栈中的数据大小与生存期必须是确定的，缺乏灵活性。</p>
<h1 id="类型转换"><a href="https://blog.csdn.net/ydar95/article/details/69822540">类型转换</a></h1>
<blockquote>
<p>const_cast , static_cast , dynamic_cast , reinterpret_cast</p>
</blockquote>
<h2 id="c风格的强制转换">C风格的强制转换</h2>
<p>C风格的强制转换(Type Cast)容易理解,不管什么类型的转换都可以使用使用下面的方式.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">TypeName b = (TypeName)a;<span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>当然,C++也是支持C风格的强制转换,但是C风格的强制转换可能带来一些隐患,让一些问题难以察觉.所以C++提供了一组可以用在不同场合的强制转换的函数.</p>
<h2 id="c-四种强制转换类型函数">C++ 四种强制转换类型函数</h2>
<h3 id="const_cast">const_cast</h3>
<p>1、常量指针被转化成非常量的指针，并且仍然指向原来的对象； 2、常量引用被转换成非常量的引用，并且仍然指向原来的对象； 3、const_cast一般用于修改指针。如const char *p形式。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 原始数组</span></span><br><span class="line">    <span class="type">int</span> ary[<span class="number">4</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印数据</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">        std::cout &lt;&lt; ary[i] &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 常量化数组指针</span></span><br><span class="line">    <span class="type">const</span> <span class="type">int</span>*c_ptr = ary;</span><br><span class="line">    <span class="comment">//c_ptr[1] = 233;   //error</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过const_cast&lt;Ty&gt; 去常量</span></span><br><span class="line">    <span class="type">int</span> *ptr = <span class="built_in">const_cast</span>&lt;<span class="type">int</span>*&gt;(c_ptr);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改数据</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">        ptr[i] += <span class="number">1</span>;    <span class="comment">//pass</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印修改后的数据</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">        std::cout &lt;&lt; ary[i] &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*  out print</span></span><br><span class="line"><span class="comment">    1   2   3   4</span></span><br><span class="line"><span class="comment">    2   3   4   5</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p>注意:对于在定义为常量的参数,使用const_cast可能会有不同的效果.类似代码如下</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> c_val = <span class="number">233</span>;  <span class="comment">//声明为常量类型</span></span><br><span class="line">    <span class="type">int</span> &amp;use_val = <span class="built_in">const_cast</span>&lt;<span class="type">int</span>&amp;&gt;(c_val); <span class="comment">//使用去const 引用</span></span><br><span class="line">    <span class="type">int</span> *ptr_val = <span class="built_in">const_cast</span>&lt;<span class="type">int</span>*&gt;(&amp;c_val);<span class="comment">//使用去const 指针</span></span><br><span class="line"></span><br><span class="line">    use_val = <span class="number">666</span>;  <span class="comment">//未定义行为</span></span><br><span class="line">    std::cout &lt;&lt; c_val &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; use_val &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; *ptr_val &lt;&lt; std::endl;</span><br><span class="line">    *ptr_val = <span class="number">110</span>; <span class="comment">//未定义行为</span></span><br><span class="line">    std::cout &lt;&lt; c_val &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; use_val &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; *ptr_val &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 在 vs2017 下 输出为</span></span><br><span class="line"><span class="comment">    233 666 666</span></span><br><span class="line"><span class="comment">    233 110 110</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p>未定义行为:C++标准对此类行为没有做出明确规定.同一份代码在使用不同的编译器会有不同的效果.在 vs2017 下, 虽然代码中 <em>c_val , use_val , ptr_val</em> 看到的地址是一样的.但是c_val的值并没有改变.有可能在某种编译器实现后,这一份代码的<em>c_val</em> 会被改变.也有可能编译器对这类行为直接 <em>error</em> 或 <em>warning</em>.</p>
<h3 id="static_cast">static_cast</h3>
<ol type="1">
<li>static_cast 作用和<strong>C语言风格强制转换</strong>的效果基本一样，由于没有运行时类型检查来保证转换的安全性，所以这类型的强制转换和C语言风格的强制转换都有安全隐患。</li>
<li>用于类层次结构中基类（父类）和派生类（子类）之间指针或引用的转换。注意：进行上行转换（把派生类的指针或引用转换成基类表示）是安全的；进行下行转换（把基类指针或引用转换成派生类表示）时，由于没有动态类型检查，所以是不安全的。</li>
<li>用于基本数据类型之间的转换，如把int转换成char，把int转换成enum。这种转换的安全性需要开发者来维护。</li>
<li>static_cast不能转换掉原有类型的const、volatile、或者 __unaligned属性。(前两种可以使用const_cast 来去除)</li>
<li>在c++ primer 中说道：<strong>c++ 的任何的隐式转换都是使用 <em>static_cast</em></strong> 来实现。</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 常规的使用方法 */</span></span><br><span class="line"><span class="type">float</span> f_pi=<span class="number">3.141592f</span></span><br><span class="line"><span class="type">int</span>   i_pi=<span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(f_pi); <span class="comment">/// i_pi 的值为 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* class 的上下行转换 */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span>&#123;</span><br><span class="line">    <span class="comment">// something</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sub</span>:<span class="keyword">public</span> Base&#123;</span><br><span class="line">    <span class="comment">// something</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  上行 Sub -&gt; Base</span></span><br><span class="line"><span class="comment">//编译通过，安全</span></span><br><span class="line">Sub sub;</span><br><span class="line">Base *base_ptr = <span class="built_in">static_cast</span>&lt;Base*&gt;(&amp;sub);  </span><br><span class="line"></span><br><span class="line"><span class="comment">//  下行 Base -&gt; Sub</span></span><br><span class="line"><span class="comment">//编译通过，不安全</span></span><br><span class="line">Base base;</span><br><span class="line">Sub *sub_ptr = <span class="built_in">static_cast</span>&lt;Sub*&gt;(&amp;base);    </span><br></pre></td></tr></table></figure>
<h3 id="dynamic_cast">dynamic_cast</h3>
<p><em>dynamic_cast</em>强制转换,应该是这四种中最特殊的一个,因为他涉及到面向对象的多态性和程序运行时的状态,也与编译器的属性设置有关.所以不能完全使用C语言的强制转换替代,它也是最常有用的,最不可缺少的一种强制转换.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Base</span>() &#123;&#125;</span><br><span class="line">    ~<span class="built_in">Base</span>() &#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;I&#x27;m Base&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">i_am_virtual_foo</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sub</span>: <span class="keyword">public</span> Base&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Sub</span>() &#123;&#125;</span><br><span class="line">    ~<span class="built_in">Sub</span>() &#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;I&#x27;m Sub&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">i_am_virtual_foo</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Sub-&gt;Base&quot;</span> &lt;&lt; endl;</span><br><span class="line">    Sub * sub = <span class="keyword">new</span> <span class="built_in">Sub</span>();</span><br><span class="line">    sub-&gt;<span class="built_in">print</span>();</span><br><span class="line">    Base* sub2base = <span class="built_in">dynamic_cast</span>&lt;Base*&gt;(sub);</span><br><span class="line">    <span class="keyword">if</span> (sub2base != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        sub2base-&gt;<span class="built_in">print</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;&lt;sub-&gt;base&gt; sub2base val is: &quot;</span> &lt;&lt; sub2base &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl &lt;&lt; <span class="string">&quot;Base-&gt;Sub&quot;</span> &lt;&lt; endl;</span><br><span class="line">    Base *base = <span class="keyword">new</span> <span class="built_in">Base</span>();</span><br><span class="line">    base-&gt;<span class="built_in">print</span>();</span><br><span class="line">    Sub  *base2sub = <span class="built_in">dynamic_cast</span>&lt;Sub*&gt;(base);</span><br><span class="line">    <span class="keyword">if</span> (base2sub != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        base2sub-&gt;<span class="built_in">print</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt;<span class="string">&quot;&lt;base-&gt;sub&gt; base2sub val is: &quot;</span>&lt;&lt; base2sub &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> sub;</span><br><span class="line">    <span class="keyword">delete</span> base;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* vs2017 输出为下</span></span><br><span class="line"><span class="comment">Sub-&gt;Base</span></span><br><span class="line"><span class="comment">I&#x27;m Sub</span></span><br><span class="line"><span class="comment">I&#x27;m Base</span></span><br><span class="line"><span class="comment">&lt;sub-&gt;base&gt; sub2base val is: 00B9E080   // 注:这个地址是系统分配的,每次不一定一样</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Base-&gt;Sub</span></span><br><span class="line"><span class="comment">I&#x27;m Base</span></span><br><span class="line"><span class="comment">&lt;base-&gt;sub&gt; base2sub val is: 00000000   // VS2017的C++编译器,对此类错误的转换赋值为nullptr</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p>从上边的代码和输出结果可以看出: <strong>对于<em>从子类到基类的指针转换</em> ,dynamic_cast 成功转换,没有什么运行异常,且达到预期结果</strong> <strong>而<em>从基类到子类的转换</em> , dynamic_cast 在转换时也没有报错,但是输出给 <em>base2sub</em> 是一个 <em>nullptr</em> ,说明dynami_cast 在程序运行时对类型转换对<em>“运行期类型信息”（Runtime type information，RTTI）</em>进行了检查.</strong> 这个检查主要来自<em>虚函数(virtual function)</em> 在C++的面对对象思想中，虚函数起到了很关键的作用，当一个类中拥有至少一个虚函数，那么编译器就会构建出一个虚函数表(virtual method table)来指示这些函数的地址，假如继承该类的子类定义并实现了一个同名并具有同样函数签名（function siguature）的方法重写了基类中的方法，那么虚函数表会将该函数指向新的地址。此时多态性就体现出来了：当我们将基类的指针或引用指向子类的对象的时候，调用方法时，就会顺着虚函数表找到对应子类的方法而非基类的方法。<em>因此注意下代码中 Base 和 Sub 都有声明定义的一个虚函数 ” i_am_virtual_foo” ,我这份代码的 Base 和 Sub 使用 dynami_cast 转换时检查的运行期类型信息,可以说就是这个虚函数</em></p>
<h3 id="reinterpret_cast">reinterpret_cast</h3>
<p><strong>reinterpret_cast 运算符并不会改变括号中运算对象的值，而是对该对象从位模式上进行重新解释”</strong></p>
<p>reinterpret_cast是强制类型转换符用来处理无关类型转换的，通常为操作数的位模式提供较低层次的重新解释！但是他仅仅是重新解释了给出的对象的比特模型，并没有进行二进制的转换！ 他是用在任意的指针之间的转换，引用之间的转换，指针和足够大的int型之间的转换，整数到指针的转换，在下面的文章中将给出. 请看一个简单代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdint&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> *ptr = <span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">233</span>);</span><br><span class="line">    <span class="type">uint32_t</span> ptr_addr = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">uint32_t</span>&gt;(ptr);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;ptr 的地址: &quot;</span> &lt;&lt; hex &lt;&lt; ptr &lt;&lt; endl</span><br><span class="line">        &lt;&lt; <span class="string">&quot;ptr_addr 的值(hex): &quot;</span> &lt;&lt; hex &lt;&lt; ptr_addr &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">delete</span> ptr;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">ptr 的地址: 0061E6D8</span></span><br><span class="line"><span class="comment">ptr_addr 的值(hex): 0061e6d8</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p>上述代码将指针ptr的地址的值转换成了 <em>unsigned int</em> 类型的ptr_addr 的整数值. 提供下IBM C++ 对 reinterpret_cast 推荐使用的地方 A pointer to any integral type large enough to hold it （指针转向足够大的整数类型） A value of integral or enumeration type to a pointer （从整形或者enum枚举类型转换为指针） A pointer to a function to a pointer to a function of a different type （从指向函数的指针转向另一个不同类型的指向函数的指针） A pointer to an object to a pointer to an object of a different type （从一个指向对象的指针转向另一个不同类型的指向对象的指针） A pointer to a member to a pointer to a member of a different class or type, if the types of the members are both function types or object types （从一个指向成员的指针转向另一个指向类成员的指针！或者是类型，如果类型的成员和函数都是函数类型或者对象类型）</p>
<p>下面这个例子来自 MSDN 的一个<a href="https://msdn.microsoft.com/en-us/library/e0w9f63b(VS.80).aspx">哈希函数辅助</a></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// expre_reinterpret_cast_Operator.cpp  </span></span><br><span class="line"><span class="comment">// compile with: /EHsc  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>  </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Returns a hash code based on an address  </span></span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">short</span> <span class="title">Hash</span><span class="params">(<span class="type">void</span> *p)</span> </span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> val = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">unsigned</span> <span class="type">int</span>&gt;(p);</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">unsigned</span> <span class="type">short</span>)(val ^ (val &gt;&gt; <span class="number">16</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++)</span><br><span class="line">        cout &lt;&lt; <span class="built_in">Hash</span>(a + i) &lt;&lt; endl;</span><br><span class="line">&#125;<span class="number">123456789101112131415</span></span><br></pre></td></tr></table></figure>
<h2 id="结尾">结尾</h2>
<p>在使用强制转换的时候,请先考虑清楚我们真的需要使用强制转换和我们应该使用那种强制转换. 我这只是简单的介绍这四种强制转换的用途,以上是自己的理解,文章中肯定有各种问题错误,希望大家帮忙指出矫正,本文仅供参考. 谢谢阅读.</p>
<h1 id="effective-c">Effective c++</h1>
<h2 id="绪论">绪论</h2>
<p>声明式: 告诉编译器某个东西的名称和类型</p>
<p>签名式(signature): 每个函数的声明揭示其签名式, 也就是参数和返回类型</p>
<p>定义式: 提供给编译器 一些声明式的细节, 对对象而言, 定义式是编译器为此对象拨发内存的地址; 对函数或者函数模板而言, 定义式提供了代码本体; 对于 class 而言定义式列出他们的成员</p>
<p>copy 构造函数定义了一个对象如何 passed by value</p>
<p>接口: 函数的签名或 class 内可访问的元素</p>
<h2 id="const-成员函数">const 成员函数</h2>
<p>不会对这个类的对象的数据成员作出任何改变, 即在 const 成员函数中无法赋值</p>
<table>
<thead>
<tr class="header">
<th>对象可否调用函数</th>
<th style="text-align: center;">const 对象</th>
<th style="text-align: center;">noconst 对象</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>const 成员函数</td>
<td style="text-align: center;">yes</td>
<td style="text-align: center;">yes</td>
</tr>
<tr class="even">
<td>noconst 成员函数</td>
<td style="text-align: center;">no</td>
<td style="text-align: center;">yes</td>
</tr>
</tbody>
</table>
<p>const 成员函数也不要提供修改途径(比如返回引用), 虽然可以通过编译</p>
<p>可以通过 <code>mutable</code> 在 const 函数中改变对象的数据</p>
<h2 id="构造函数-1">构造函数</h2>
<p>在构造函数中赋值相当于先初始化再赋值, 有开销 所以要用初始化列表赋值, 对象成员的初始化是在进入构造函数本体之前</p>
<p>调用构造函数初始化成员</p>
<p>避免编译器自动生成的 copy 构造函数和 copy 运算符, 声明为 private</p>
<h2 id="析构函数">析构函数</h2>
<p>析构函数的运作方式是, 最深层派生(most derived)的那个 class 其虚构函数最先被调用, 然后是调用其每一个 base class 的析构函数</p>
<p><strong>How does the compiler then call the base destructors?</strong></p>
<p>The process of destructing an object takes more operations than those you write inside the body of the destructor. When the compiler generates the code for the destructor, it adds extra code both before and after the user defined code.</p>
<p>Before the first line of a user defined destructor is called, <strong>the compiler injects code that will make the type of the object be that of the destructor being called.</strong> That is, right before <code>~derived</code> is entered, the compiler <strong>adds code that will modify the <code>vptr</code> to refer to the <code>vtable</code> of <code>derived</code>,</strong> so that effectively, the runtime type of the object <em>becomes</em> <code>derived</code> (*).</p>
<p>After the last line of your user defined code, <strong>the compiler injects calls to the member destructors as well as base destructor(s)</strong>. This is performed <strong><em>disabling</em> dynamic dispatch</strong>, which means that it will no longer come all the way down to the just executed destructor. <strong>It is the equivalent of adding <code>this-&gt;~mybase();</code></strong> for each base of the object (in reverse order of declaration of the bases) at the end of the destructor.</p>
<p>With virtual inheritance, things get a bit more complex, but overall they follow this pattern.</p>
<p><em>EDIT</em> (forgot the (<em>)): (</em>) The standard mandates in §12/3:</p>
<blockquote>
<p>When a virtual function is called directly or indirectly from a constructor (including from the mem-initializer for a data member) or from a destructor, and the object to which the call applies is the object under construction or destruction, the function called is the one defined in the constructor or destructor’s own class or in one of its bases, but not a function overriding it in a class derived from the constructor or destructor’s class, or overriding it in one of the other base classes of the most derived object.</p>
</blockquote>
<p>That requirement implies that the runtime type of the object is that of the class being constructed/destructed at this time, even if the original object that is being constructed/destructed is of a derived type. A simple test to verify this implementation can be:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">base</span> &#123;</span><br><span class="line">   <span class="keyword">virtual</span> ~<span class="built_in">base</span>() &#123; <span class="built_in">f</span>(); &#125;</span><br><span class="line">   <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123; std::cout &lt;&lt; <span class="string">&quot;base&quot;</span>; &#125;</span><br><span class="line">  <span class="comment">//call to virtual method &quot;base::f&quot; during destruction bypasses virtual dispatch</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">derived</span> : base &#123;</span><br><span class="line">   <span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123; std::cout &lt;&lt; <span class="string">&quot;derived&quot;</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   base * p = <span class="keyword">new</span> derived;</span><br><span class="line">   <span class="keyword">delete</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// output: base</span></span><br></pre></td></tr></table></figure>
<h2 id="运算符">运算符</h2>
<p>调用 base 的运算符</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Base::<span class="keyword">operator</span> = (target);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>language</category>
      </categories>
      <tags>
        <tag>int</tag>
        <tag>std</tag>
        <tag>function</tag>
        <tag>const</tag>
        <tag>cppreference</tag>
      </tags>
  </entry>
  <entry>
    <title>java</title>
    <url>/2020/01/c283701d8e64.html</url>
    <content><![CDATA[<h1 id="java-背景">Java 背景</h1>
<blockquote>
<p>简单介绍java的基础知识</p>
</blockquote>
<span id="more"></span>
<ul>
<li><p>Java SE(Java Platform,Standard Edition)，应该先说这个，因为这个是标准版本。 Java EE (Java Platform，Enterprise Edition)，java 的企业版本 Java ME(Java Platform，Micro Edition)，java的微型版本, 移动设备和嵌入式</p>
<p>JavaSE 可以开发和部署在桌面、服务器、嵌入式环境和实时环境中使用的 Java 应用程序。是EE，和ME的基础。一般就是指JDK（Java Development Kit<strong>（</strong>JDK）是<a href="https://zh.wikipedia.org/wiki/昇陽電腦">太阳微系统</a>针对<a href="https://zh.wikipedia.org/wiki/Java">Java</a>开发人员发布的免费<a href="https://zh.wikipedia.org/wiki/软件开发工具包">软件开发工具包</a>（SDK，Software development kit））。就是Java的基础语法（变量、方法、类之间的调用、关系，继承、接口、线程之类的），工具包（java.util.* ）,或者其他的一些封装</p>
<p>PS：</p>
<ol type="1">
<li><p>java程序设计语言</p></li>
<li><p>JVM java虚拟机</p></li>
<li><p>java API类库</p></li>
<li><p>辅助工具如javac</p>
<p>1+2+3+4=jdk（java开发的环境），2+3=jre（java运行的环境）</p></li>
</ol>
<p>JavaEE，其实是一套规范，就是用java语言做企业开发（目前看来就是开发一些动态网站，或者对外提供调用服务的网站，或者其他没接触过的。。。）中的一整套规范，比如类怎么封装，网页的请求要用什么方法处理，语言编码一类的处理，拦截器啊什么的定义，请求返回得有什么信息。。。（具体看servlet的接口就知道了） 比如：tomcat就是按照这套规范开发的容器软件，还有什么weblogic，JBoss、Resin等等 正因为我们开发网站（使用JSP，Servelet。。或者封装了这些的框架：SSH。。。）可以放在tomcat，也可以放在JBoss。。。。，因为都是按照一个规范开发的东西，实际使用的还是JavaSE的那些东西，多出来的就是EE的一些规范类的封装代码。</p>
<p>JavaME 是微型版本，顾名思义，使用在手机啊，小设备啊上面的Java版本，特点就是小，相比JavaSE精简了很大一部分东西，（增加了一些小设备上的专有API，？？？这个不是很确定）， 我在2009年培训的时候，这个还写过游戏，还用在移动啊什么的开发上，可是后来你们应该知道了。。。安卓时代来临了。</p>
<p>安卓中既然用的是Java，那么Java的语法应该都是适用的。所以SE是核心基础。其他的都是使用方法方式不同。</p>
<p>文件名必须与公共的类名一致，文件后缀为.java 如果有多个类，且没有public类，文件名可与任一类名相同 一个JAVA源文件最多只能有一个public类 如果一个Java源文件包含多个class，那么编译后会产生多个.class文件</p></li>
</ul>
<h1 id="java基础">java基础</h1>
<h2 id="基础">基础</h2>
<ul>
<li><p>工具</p>
<p>javac 编译, java 运行, jdb 调试</p></li>
<li><p>版本</p>
<p>java SE 桌面, java EE 服务器, java ME 嵌入式移动设备</p></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">xxx</span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    ......;</span><br><span class="line">    <span class="type">int</span>[] array = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">7</span>];<span class="comment">//数组定义</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">double</span> value : myList) &#123;</span><br><span class="line">    	sum += value;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>JVM</p>
<p>java源码编译后生成.class 文件, 由字节码构成</p></li>
<li><p>源文件.java -&gt; 编译后.class</p></li>
<li><p>栈: 方法调用和局部变量</p></li>
<li><p>堆: 所有的对象</p></li>
<li><p>i/o</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="comment">//构造函数Scanner的参数类型也可为java.io.File</span></span><br><span class="line"><span class="comment">//这是Scanner就从文件而不是标准输入流读取数据</span></span><br><span class="line"><span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> scanner.nextDouble( ); </span><br><span class="line">方法：</span><br><span class="line">    nextByte( )、nextShort( )、nextInt( )</span><br><span class="line">    nextLong( )、nextFloat( )、nextDouble( )</span><br><span class="line">    next( ) 读入一个字符串</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>标识符: 标识符是由字母、数字、下划线(_)、美元符号($)组成的字符序列, 标识符必须以字母、下划线(_)、美元符号($)开头。不能以数字开头。</p></li>
</ul>
<h2 id="数据类型">数据类型</h2>
<ul>
<li><p>整数: byte 8, short 16, int 32, long 64</p></li>
<li><p>小数: float 32, double 64</p></li>
<li><p>boolean 未明确定义, char 16</p></li>
<li><p>数组也是对象</p></li>
<li><p>主数据包装</p>
<p>Boolean Character Byte Short Integer Long Float Double</p>
<p><code>Integer wrap = new Integer(i);</code></p>
<p><code>int unwrap = wrap.intValue();</code></p>
<p><code>int x = Integer.parseInt("2");</code></p></li>
<li><p>默认int double, 比如<code>char c = (char)12;</code> 必须强制类型转换</p></li>
<li><p>1e2 是double类型, 1e2f是float类型</p></li>
<li><p>switch(exp), exp结果只呢个为byte, char, short, int , enum 等不大于int的类型</p></li>
<li><p>bool-exp ? exp-true : exp-false</p></li>
<li><p>ASCII :  4位16进制数</p></li>
</ul>
<h2 id="函数">函数</h2>
<ul>
<li>对象作为参数, 传入的是对象(指针)的拷贝</li>
<li>实例变量(类中声明)不定义会有初始值(0, null), 局部变量不会有, 编译会报错</li>
<li>对象比较: == 是否指向同一对象, .equals() 完全相等</li>
</ul>
<h2 id="实用类">实用类</h2>
<h3 id="arraylist">ArrayList</h3>
<p><code>ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;();</code></p>
<p>不能使用[]</p>
<p>如何引入 ArrayList?</p>
<ol type="1">
<li><code>import java.util.ArrayList;</code></li>
<li><code>java.util.ArrayList&lt;String&gt; list = new java.util.ArrayList&lt;String&gt;()</code></li>
</ol>
<h2 id="类">类</h2>
<h3 id="继承">继承</h3>
<table>
<thead>
<tr class="header">
<th><strong>访问权限</strong></th>
<th><strong>本类</strong></th>
<th><strong>本包</strong></th>
<th><strong>子类</strong></th>
<th><strong>它包</strong></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>public</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td>√</td>
</tr>
<tr class="even">
<td>protected</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td>X</td>
</tr>
<tr class="odd">
<td>包级(默认)</td>
<td>√</td>
<td>√</td>
<td>X</td>
<td>X</td>
</tr>
<tr class="even">
<td>private</td>
<td>√</td>
<td>X</td>
<td>X</td>
<td>X</td>
</tr>
</tbody>
</table>
<p>所有类都继承自Object, Object 不是抽象类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//object 方法</span></span><br><span class="line">equals();</span><br><span class="line">getClass();</span><br><span class="line">hashCode(); <span class="comment">//唯一 id</span></span><br><span class="line">toString();</span><br></pre></td></tr></table></figure>
<p><code>public class classson extends classfather&#123;&#125;</code></p>
<p>调用父类方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="built_in">super</span>.method();</span><br><span class="line">  ...;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>权限:</p>
<p>public 会被继承, private 不会被继承</p></li>
<li><p>final 修饰方法: 不可被覆盖</p></li>
<li><p>覆盖 override: 参数一样, 返回类型一样或者是之前返回类型的子类, 权限需要更开放(public 不能覆盖成 private)</p></li>
<li><p>重载 overload: 参数不一样, 返回可以不一样, 但不能只改变返回类型, 权限任意改变</p></li>
<li><p>覆盖特性：一旦父类中的实例方法被子类覆盖，同时用父类型的引用变量引用了子类对象，这时不能通过这个父类型引用变量去访问被覆盖的父类方法(即这时被覆盖的父类方法不可再被发现)。因为实例方法具有多态性（晚期绑定）</p>
<p>在子类类体函数中可以使用super调用被覆盖的父类方法。</p>
<p>˜隐藏特性：指父类的变量（实例变量、静态变量）和静态方法在子类被重新定义，但由于类的变量和静态方法没有多态性，因此通过父类型引用变量访问的一定是父类变量、静态方法(即被隐藏的可再发现)。</p></li>
<li><p>根据引用判断还是根据确实类型判断?</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Father</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;father&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Son</span> <span class="variable">son</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">        <span class="type">Father</span> <span class="variable">father</span> <span class="operator">=</span> son;</span><br><span class="line">        son.m();</span><br><span class="line">        father.m();</span><br><span class="line">        <span class="comment">//father.m_only(); 无法通过编译</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;son&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m_only</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;son only&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出: son son</p></li>
<li><p>强制类型转换: <code>Dog d = (Dog)o;</code> 检查是否可以转换: <code>if(o isstanceof Dog)</code></p></li>
<li><p>不支持多重继承, 请使用接口</p></li>
</ul>
<h3 id="多态">多态</h3>
<p>父类引用 = 子类对象</p>
<p>那么我们可以根据以上情况总结出多态成员访问的特点： <strong>成员变量</strong> 编译看左边(父类),运行看左边(父类) <strong>成员方法</strong> 编译看左边(父类)，运行看右边(子类)。动态绑定 <strong>静态方法</strong> 编译看左边(父类)，运行看左边(父类)。 (静态和类相关，算不上重写，所以，访问还是左边的) <strong>只有非静态的成员方法,编译看左边,运行看右边</strong></p>
<p><strong>不能使用子类特有的成员属性和子类特有的成员方法。</strong></p>
<p>因此一旦引用变量o指向了B类型对象（A o = new B()）， o.m()调用的永远是B的m，再也无法通过o调用A的m，哪怕强制转换都不行:((A)o).m();调用的还是B的m</p>
<h3 id="抽象类">抽象类</h3>
<p><code>abstract public class abclass&#123;&#125;</code> 必须被继承</p>
<ul>
<li>抽象方法: <code>public abstract void func();</code> 不可以在非抽象类中声明抽象方法, 必须被<strong>覆盖</strong>, 函数体为空</li>
</ul>
<h3 id="接口-interface">接口 interface</h3>
<p><code>public class sonClass extends fatherClass implements interfaceClass1, interfaceClass2</code></p>
<p>纯的抽象类</p>
<p>继承接口以后必须要实现接口的抽象方法</p>
<p>接口中的所有数据字段隐含为public static final</p>
<p>接口体中的所有方法隐含为public abstract</p>
<p>一个接口可以继承多个接口</p>
<p>eg. Comparable 接口, 实现public int compareTo(Object o);</p>
<h3 id="构造函数">构造函数</h3>
<p>新建数组不会实例化数组内容</p>
<p>只有在没有任何构造函数时, 编译器才会自动生成无参构造函数</p>
<figure>
<img src="https://tva1.sinaimg.cn/large/008i3skNgy1gpvddcdaxyj311k0f4wun.jpg" alt="截屏2021-04-25 上午1.56.01" /><figcaption aria-hidden="true">截屏2021-04-25 上午1.56.01</figcaption>
</figure>
<p>父类的构造函数必须在子类之前完成</p>
<p>调用父类构造函数<code>super();</code>, 且必须为第一个语句 调用其他本身的构造函数<code>this();</code>, 且必须为第一个语句 但不能同时调用</p>
<h3 id="初始化块">初始化块</h3>
<p>•初始化块是Java类中可以出现的第四种成员（前三种包括属性、方法、构造函数），分为实例初始化块和静态初始化块。</p>
<p>•实例初始化模块（instance initialization block，IIB）是一个用大括号括住的语句块，直接嵌套于类体中，不在方法内。</p>
<p>•它的作用就像把它放在了类中每个构造方法的最开始位置。用于初始化对象。<strong>实例初始化块先于构造函数执行</strong></p>
<p>•作用：如果多个构造方法共享一段代码，并且每个构造方法不会调用其他构造方法，那么可以把这段公共代码放在初始化模块中。</p>
<p>•一个类可以有多个初始化模块，模块按照在类中出现的顺序执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> numOfObjects;</span><br><span class="line">  <span class="keyword">private</span> String title</span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Book</span><span class="params">(String title)</span>&#123;</span><br><span class="line">    numOfObjects++;</span><br><span class="line">    <span class="built_in">this</span>.title = title;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Book</span><span class="params">(<span class="type">int</span> id)</span>&#123;</span><br><span class="line">    numOfObjects++;</span><br><span class="line">    <span class="built_in">this</span>.id = id</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> numOfObjects;</span><br><span class="line">  <span class="keyword">private</span> String title</span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Book</span><span class="params">(String title)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.title = title;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Book</span><span class="params">(<span class="type">int</span> id)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.id = id</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  &#123;</span><br><span class="line">    numOfObjects++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行次序</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> <span class="number">0</span>;		<span class="comment">//执行次序：1</span></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Book</span><span class="params">(<span class="type">int</span> id)</span>&#123;		<span class="comment">//执行次序：4</span></span><br><span class="line">    <span class="built_in">this</span>.id = id		</span><br><span class="line">  &#125;</span><br><span class="line">  &#123;</span><br><span class="line">     <span class="comment">//实例初始化块			//执行次序：2</span></span><br><span class="line">  &#125;</span><br><span class="line">  &#123;</span><br><span class="line">     <span class="comment">//实例初始化块			//执行次序：3</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> <span class="number">0</span>;	<span class="comment">//执行次序：1</span></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Book</span><span class="params">(<span class="type">int</span> id)</span>&#123;</span><br><span class="line">	 <span class="built_in">this</span>.id = id 		    		</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line">     <span class="comment">//静态初始化块			//执行次序：2</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line">     <span class="comment">//静态初始化块			//执行次序：3</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="super">super</h3>
<p>super不能用于静态上下文（即静态方法和静态初始化块里不能使用super），this也不能用于静态上下文</p>
<p>super.data（如果父类属性在子类可访问）</p>
<p>super.method(parameters)（如果父类方法在子类可访问）</p>
<p>不能使用super.super.p()这样的super链</p>
<p>如果子类中没有显式地调用父类的构造函数，那么将自动调用父类不带参数的构造函数，因为编译器会偷偷地在子类构造函数第一条语句前加上super() ；</p>
<h3 id="final">final</h3>
<p>final 变量: 不能被改变</p>
<p>final 方法: 不能被覆盖</p>
<p>final class: 不能被继承</p>
<h3 id="静态">静态</h3>
<p><code>Math.abs();</code></p>
<p>静态方法无法调用非静态变量, 不能调用非静态方法</p>
<p>静态变量: 每个类一个</p>
<p>静态变量会在该类任何对象初始化前初始化 静态变量会在该类任何静态方法执行前就初始化</p>
<p>常量 = final + static 必须初始化</p>
<h2 id="异常">异常</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">  <span class="type">MyClass</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyClass</span>();</span><br><span class="line">  ...</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>抛出的异常数量要与 catch 相匹配</p>
<p>catch 从小到大</p>
<h2 id="io">i/o</h2>
<h3 id="序列化">序列化</h3>
<p>Serializable 接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ObjectOutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;filename&quot;</span>));</span><br><span class="line">os.writeObject(...);</span><br><span class="line">os.close();</span><br></pre></td></tr></table></figure>
<p>跳过序列化: transient</p>
<h3 id="文件">文件</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Son</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">FileWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;filename&quot;</span>);</span><br><span class="line">            writer.write(<span class="string">&quot;str&quot;</span>);</span><br><span class="line">            writer.close();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="线程">线程</h2>
<ol type="1">
<li>实现 Runnable 类</li>
<li><code>Thread thread = new Thread(runnable);</code></li>
<li><code>thread.start();</code></li>
</ol>
<p>Runnable 类 <code>public void run()&#123;...&#125;</code></p>
<p><code>synchronized</code> 修饰方法, 只能被单一线程存取</p>
<h2 id="网络">网络</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MySocketDemo</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8899</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="type">InputStreamReader</span> <span class="variable">stream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(socket.getInputStream());</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(stream);</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> reader.readLine();</span><br><span class="line">        </span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(socket.getOutputStream());</span><br><span class="line">        writer.println(<span class="string">&quot;msg&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">sever</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">8899</span>);</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">severSocket</span> <span class="operator">=</span> sever.accept();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="泛型">泛型</h2>
<h3 id="collections">Collections</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ToBeCompared</span>&#123;</span><br><span class="line">  ArrayList&lt;Song&gt; songList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Song&gt;();</span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">Comparer</span> <span class="keyword">implements</span> <span class="title class_">Comparator</span>&lt;Song&gt;&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Song one, Song two)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> one.xxxx/compareTo(two.xxx);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">go</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">Comparer</span> <span class="variable">com</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Comparer</span>();</span><br><span class="line">    Collections.sort(songList, com);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>Class&lt;? extends Person&gt; clz2;</code> 引用clz2可以指向Person及其子类的类型信息</p>
<h2 id="打包">打包</h2>
<p>JAR: java archive</p>
<p><code>java -jar xxx.jar</code></p>
<h1 id="tips">tips</h1>
<ul>
<li><p>Math.random()生成 0-1 的值</p></li>
<li><p>数字格式化 <code>String s = String.format("%,.2f aha", 492.23);</code></p></li>
<li><p>package就是cpp中的namespace package语句必须出现在.java文件第一行，前面不能有注释行也不能有空白行，该.java文件里定义的所有内容（类、接口、枚举）都属于package所定义的包里。如果.java文件第一行没有package语句，则该文件定义的所有内容位于default包（缺省名字空间），但不推荐。</p></li>
<li><p>hashcode https://zhuanlan.zhihu.com/p/78249480</p></li>
<li><p>数组长度为length而不是length()</p></li>
<li></li>
</ul>
]]></content>
      <categories>
        <category>language</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>public</tag>
        <tag>father</tag>
        <tag>book</tag>
        <tag>string</tag>
      </tags>
  </entry>
  <entry>
    <title>markdown</title>
    <url>/2019/11/6c479cde9f30.html</url>
    <content><![CDATA[<p>链接格式：[显示文字](网址)</p>
<p>页内跳转</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[你是谁](#傻狍子)</span><br><span class="line">### 傻狍子</span><br><span class="line"></span><br><span class="line">&lt;a href=&quot;#233&quot;&gt;我想笑&lt;/a&gt;</span><br><span class="line">&lt;span name = &quot;233&quot;&gt;233&lt;/span&gt;</span><br></pre></td></tr></table></figure>
<p>不要用base64！！！！</p>
<p>上标&lt;sup&gt;&lt;/sup&gt;</p>
<p>下标&lt;sub&gt;&lt;/sub&gt;</p>
<p>简单地 <sub> 格式化 </sub></p>
<span id="more"></span>
<figure>
<img src="https://cdn.sspai.com/2019/05/24/89bba4dfdfb49b8d3c129ce1157a54b1.png" alt="img" /><figcaption aria-hidden="true">img</figcaption>
</figure>
<p>表格:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">| 左对齐 | 右对齐 | 居中对齐 |</span><br><span class="line">| :-----| ----: | :----: |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br></pre></td></tr></table></figure>
<p>流程图:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">st=&gt;start: start</span><br><span class="line">op=&gt;operation: operation</span><br><span class="line">cd=&gt;condition: yes or no</span><br><span class="line">e=&gt;end: end</span><br><span class="line">st-&gt;op-&gt;cd</span><br><span class="line">cd(yes)-&gt;e</span><br><span class="line">cd(no)-&gt;op</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">st=&gt;start: start</span><br><span class="line">op=&gt;operation: operation</span><br><span class="line">cd=&gt;condition: yes or no</span><br><span class="line">e=&gt;end: end</span><br><span class="line">st-&gt;op-&gt;cd</span><br><span class="line">cd(yes)-&gt;e</span><br><span class="line">cd(no)-&gt;op</span><br></pre></td></tr></table></figure>
<p><a href="https://www.jianshu.com/p/1ce5772560c1">语法1</a></p>
<p><a href="https://www.cnblogs.com/hongdada/p/9776547.html#下标">语法 2</a></p>
<figure>
<img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gjnxhtcc77j30i20b4mz9.jpg" alt="image-20201013192453713" /><figcaption aria-hidden="true">image-20201013192453713</figcaption>
</figure>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">&quot;黑体&quot;</span>&gt;</span></span>我是黑体字<span class="language-xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">&quot;微软雅黑&quot;</span>&gt;</span></span>我是微软雅黑<span class="language-xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">&quot;STCAIYUN&quot;</span>&gt;</span></span>我是华文彩云<span class="language-xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">red</span>&gt;</span></span>我是红色<span class="language-xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">#008000</span>&gt;</span></span>我是绿色<span class="language-xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">Blue</span>&gt;</span></span>我是蓝色<span class="language-xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span>=<span class="string">5</span>&gt;</span></span>我是尺寸<span class="language-xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">&quot;黑体&quot;</span> <span class="attr">color</span>=<span class="string">green</span> <span class="attr">size</span>=<span class="string">5</span>&gt;</span></span>我是黑体，绿色，尺寸为5<span class="language-xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p><font face="黑体">我是黑体字</font> <font face="微软雅黑">我是微软雅黑</font> <font face="STCAIYUN">我是华文彩云</font> <font color=red>我是红色</font> <font color=#008000>我是绿色</font> <font color=Blue>我是蓝色</font> <font size=5>我是尺寸</font> <font face="黑体" color=green size=5>我是黑体，绿色，尺寸为5</font></p>
<p>绘图</p>
<p>https://blog.csdn.net/lis_12/article/details/80693975</p>
]]></content>
      <categories>
        <category>language</category>
      </categories>
      <tags>
        <tag>sub</tag>
        <tag>font</tag>
        <tag>face</tag>
        <tag>color</tag>
        <tag>yes</tag>
      </tags>
  </entry>
  <entry>
    <title>cppdoc</title>
    <url>/2023/02/0c6f4ca91eef.html</url>
    <content><![CDATA[<blockquote>

</blockquote>
<span id="more"></span>
<h1 id="expressions">Expressions</h1>
<p>Each C++ expression is characterized by two independent properties: A type and a value category.</p>
<p>each expression belongs to exactly one of the three primary value categories: <strong>prvalue, xvalue, and lvalue.</strong></p>
<h2 id="value-categories">Value categories</h2>
<h3 id="glvalue-generalized-lvalue">glvalue (“generalized” lvalue)</h3>
<p>is an expression whose evaluation determines the <strong>identity of an object or function</strong>;</p>
<p>Properties:</p>
<ul>
<li>A glvalue may be implicitly converted to a prvalue with lvalue-to-rvalue, array-to-pointer, or function-to-pointer <a href="https://en.cppreference.com/w/cpp/language/implicit_conversion">implicit conversion</a>.</li>
<li>A glvalue may be <a href="https://en.cppreference.com/w/cpp/language/object#Polymorphic_objects">polymorphic</a>: the <a href="https://en.cppreference.com/w/cpp/language/type#Dynamic_type">dynamic type</a> of the object it identifies is not necessarily the static type of the expression.</li>
<li>A glvalue can have <a href="https://en.cppreference.com/w/cpp/language/type#Incomplete_type">incomplete type</a>, where permitted by the expression.</li>
</ul>
<h3 id="lvalue">*lvalue</h3>
<p>(so-called, historically, because lvalues could appear on the left-hand side of an assignment expression) is a <strong>glvalue that is not an xvalue;</strong>(lvalue's resources cannot be reused?)</p>
<p>examples</p>
<ul>
<li><p>the <strong>name</strong> of a variable, a function, a <a href="https://en.cppreference.com/w/cpp/language/template_parameters#Non-type_template_parameter">template parameter object</a> (since C++20), or a data member, regardless of type</p></li>
<li><p>a function call or an overloaded operator expression, whose <strong>return type is lvalue reference</strong></p></li>
<li><p>a <strong>+=</strong> b, and all other built-in <a href="https://en.cppreference.com/w/cpp/language/operator_assignment">assignment and compound assignment</a> expressions;</p></li>
<li><p><strong>++a</strong> and --a, the built-in <a href="https://en.cppreference.com/w/cpp/language/operator_incdec#Built-in_prefix_operators">pre-increment and pre-decrement</a> expressions;</p></li>
<li><p><code>a, b</code>, the built-in <a href="https://en.cppreference.com/w/cpp/language/operator_other#Built-in_comma_operator"><strong>comma</strong></a> expression, where b is an lvalue;</p></li>
<li><p><code>a ? b : c</code>, the <a href="https://en.cppreference.com/w/cpp/language/operator_other#Conditional_operator">ternary conditional</a> expression for certain b and c (e.g., when both are lvalues of the same type, but see <a href="https://en.cppreference.com/w/cpp/language/operator_other#Conditional_operator">definition</a> for detail);</p></li>
<li><p><strong>*p</strong>, the built-in <a href="https://en.cppreference.com/w/cpp/language/operator_member_access#Built-in_indirection_operator">indirection</a> expression</p></li>
<li><p>a <strong><a href="https://en.cppreference.com/w/cpp/language/string_literal">string literal</a>,</strong> such as <code>"Hello, world!"</code>;</p></li>
<li><p>成员</p>
<ul>
<li><code>a.m</code>, <strong>except</strong> where <code>m</code> is a member enumerator or a non-static member function, or where a is an rvalue and <code>m</code> is a non-static data member of object type;</li>
<li><code>p-&gt;m</code>, the built-in <a href="https://en.cppreference.com/w/cpp/language/operator_member_access#Built-in_member_access_operators">member of pointer</a> expression, <strong>except</strong> where <code>m</code> is a member enumerator or a non-static member function;</li>
<li><code>a.*mp</code>, the <a href="https://en.cppreference.com/w/cpp/language/operator_member_access#Built-in_pointer-to-member_access_operators">pointer to member of object</a> expression, where a is an lvalue and <code>mp</code> is a pointer to data member;</li>
</ul></li>
<li><p>a cast expression to <strong>lvalue reference type</strong>, such as static_cast&lt;int&amp;&gt;(x);</p></li>
<li><table>
<colgroup>
<col style="width: 100%" />
</colgroup>
<thead>
<tr class="header">
<th>(since C++11)</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>a function call or an overloaded operator expression, whose return type is rvalue reference to function;</td>
</tr>
<tr class="even">
<td>a cast expression to rvalue reference to function type, such as static_cast&lt;void (&amp;&amp;)(int)&gt;(x).</td>
</tr>
</tbody>
</table></li>
<li><p>? a non-type <a href="https://en.cppreference.com/w/cpp/language/template_parameters">template parameter</a> of an lvalue reference type;</p></li>
</ul>
<p>Properties:</p>
<ul>
<li><p>Address of an lvalue may be taken by built-in address-of operator <code>&amp;</code></p></li>
<li><p>A modifiable lvalue may be used as the left-hand operand of the built-in assignment and compound assignment operators.</p></li>
<li><p>An lvalue may be used to <a href="https://en.cppreference.com/w/cpp/language/reference_initialization">initialize an lvalue reference</a>; this associates a new name with the object identified by the expression.</p></li>
</ul>
<h3 id="xvalue-an-expiring-value">*xvalue (an “eXpiring” value)</h3>
<p><strong>is a glvalue</strong> that denotes an object whose <strong>resources can be reused;</strong></p>
<p>examples</p>
<ul>
<li><p><code>a.m</code>, the <a href="https://en.cppreference.com/w/cpp/language/operator_member_access#Built-in_member_access_operators">member of object</a> expression, <strong>where a is an rvalue and <code>m</code> is a non-static data member</strong> of an object type;</p></li>
<li><p><code>a.*mp</code>, the <a href="https://en.cppreference.com/w/cpp/language/operator_member_access#Built-in_pointer-to-member_access_operators">pointer to member of object</a> expression, where <strong>a is an rvalue and <code>mp</code> is a pointer to data member;</strong></p></li>
<li><p>a ? b : c, the <a href="https://en.cppreference.com/w/cpp/language/operator_other#Conditional_operator">ternary conditional</a> expression for certain b and c (see <a href="https://en.cppreference.com/w/cpp/language/operator_other#Conditional_operator">definition</a> for detail);</p></li>
<li></li>
<li><table>
<colgroup>
<col style="width: 100%" />
</colgroup>
<thead>
<tr class="header">
<th>(since C++11)</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>a function call or an overloaded operator expression, whose <strong>return type is rvalue reference to object</strong>, such as std::move(x);</td>
</tr>
<tr class="even">
<td>a[n], the built-in <a href="https://en.cppreference.com/w/cpp/language/operator_member_access#Built-in_subscript_operator">subscript</a> expression, where one operand is an array rvalue;</td>
</tr>
<tr class="odd">
<td>a cast expression to rvalue reference to object type, such as static_cast&lt;char&amp;&amp;&gt;(x);</td>
</tr>
<tr class="even">
<td>(since C++17)</td>
</tr>
<tr class="odd">
<td>any expression that designates a <strong>temporary</strong> object, after <a href="https://en.cppreference.com/w/cpp/language/implicit_conversion#Temporary_materialization">temporary materialization</a>.</td>
</tr>
</tbody>
</table></li>
</ul>
<h3 id="prvalue-pure-rvalue">*prvalue (“pure” rvalue)</h3>
<p>is an expression whose evaluation</p>
<ul>
<li>computes the value of an operand of a built-in <strong>operator</strong> (such prvalue has no <em>result object</em>), or</li>
<li><strong>initializes an object</strong> (such prvalue is said to have a <em>result object</em>).</li>
</ul>
<p>examples</p>
<ul>
<li><p><strong>a <a href="https://en.cppreference.com/w/cpp/language/expressions#Literals">literal</a> (except for <a href="https://en.cppreference.com/w/cpp/language/string_literal">string literal</a>)</strong>, such as 42, true or nullptr;</p></li>
<li><p>a function call or an overloaded operator expression, whose <strong>return type is non-reference</strong>, such as str.substr(1, 2), str1 + str2, or it++;</p></li>
<li><p><strong>a++</strong> and a--, the built-in <a href="https://en.cppreference.com/w/cpp/language/operator_incdec#Built-in_postfix_operators">post-increment and post-decrement</a> expressions;</p></li>
<li><p><strong>a + b</strong>, and all other built-in <a href="https://en.cppreference.com/w/cpp/language/operator_arithmetic">arithmetic</a> expressions;</p></li>
<li><p><strong>&amp;a</strong>, the built-in <a href="https://en.cppreference.com/w/cpp/language/operator_member_access#Built-in_address-of_operator">address-of</a> expression;</p></li>
<li><p>成员</p>
<ul>
<li>a.m, the <a href="https://en.cppreference.com/w/cpp/language/operator_member_access#Built-in_member_access_operators">member of object</a> expression, where <code>m</code> is a member enumerator or a non-static member function[<a href="https://en.cppreference.com/w/cpp/language/value_category#cite_note-pmfc-2">2]</a>;</li>
<li>p-&gt;m, the built-in <a href="https://en.cppreference.com/w/cpp/language/operator_member_access#Built-in_member_access_operators">member of pointer</a> expression, where <code>m</code> is a member enumerator or a non-static member function[<a href="https://en.cppreference.com/w/cpp/language/value_category#cite_note-pmfc-2">2]</a>;</li>
<li>a.*mp, the <a href="https://en.cppreference.com/w/cpp/language/operator_member_access#Built-in_pointer-to-member_access_operators">pointer to member of object</a> expression, where <code>mp</code> is a pointer to <strong>member function</strong>[<a href="https://en.cppreference.com/w/cpp/language/value_category#cite_note-pmfc-2">2]</a>;</li>
<li>p-&gt;*mp, the built-in <a href="https://en.cppreference.com/w/cpp/language/operator_member_access#Built-in_pointer-to-member_access_operators">pointer to member of pointer</a> expression, where <code>mp</code> is a pointer to <strong>member function</strong>[<a href="https://en.cppreference.com/w/cpp/language/value_category#cite_note-pmfc-2">2]</a>;</li>
</ul></li>
<li><p><code>a, b</code>, the built-in <a href="https://en.cppreference.com/w/cpp/language/operator_other#Built-in_comma_operator">comma</a> expression, where b is an rvalue;</p></li>
<li><p><code>a ? b : c</code>, the <a href="https://en.cppreference.com/w/cpp/language/operator_other#Conditional_operator">ternary conditional</a> expression for certain b and c (see <a href="https://en.cppreference.com/w/cpp/language/operator_other#Conditional_operator">definition</a> for detail);</p></li>
<li><p>a cast expression to <strong>non-reference type</strong>, such as static_cast&lt;double&gt;(x), <a href="http://en.cppreference.com/w/cpp/string/basic_string">std::string</a>, or (int)42;</p></li>
<li><p>the <a href="https://en.cppreference.com/w/cpp/language/this"><code>this</code></a> pointer;</p></li>
<li><p>an <a href="https://en.cppreference.com/w/cpp/language/enum">enumerator</a>;</p></li>
<li><p>? a non-type <a href="https://en.cppreference.com/w/cpp/language/template_parameters">template parameter</a> of a scalar type;</p></li>
<li><table>
<thead>
<tr class="header">
<th>(since C++11)</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>a <a href="https://en.cppreference.com/w/cpp/language/lambda">lambda expression</a>, such as <code>[](int x)&#123; return x * x; &#125;;</code></td>
</tr>
<tr class="even">
<td>(since C++20)</td>
</tr>
<tr class="odd">
<td>a <a href="https://en.cppreference.com/w/cpp/language/constraints">requires-expression</a>, such as requires (T i) { typename T::type; };</td>
</tr>
<tr class="even">
<td>a specialization of a <a href="https://en.cppreference.com/w/cpp/language/constraints">concept</a>, such as <a href="http://en.cppreference.com/w/cpp/concepts/equality_comparable">std::equality_comparable</a><int>.</td>
</tr>
</tbody>
</table></li>
</ul>
<p>Properties:</p>
<ul>
<li><p>A prvalue <strong>cannot be <a href="https://en.cppreference.com/w/cpp/language/object#Polymorphic_objects">polymorphic</a></strong>: the <a href="https://en.cppreference.com/w/cpp/language/type#Dynamic_type">dynamic type</a> of the object it denotes is always the type of the expression.</p></li>
<li><p>A non-class non-array prvalue cannot be <strong><a href="https://en.cppreference.com/w/cpp/language/cv">cv-qualified</a>,</strong> unless it is <a href="https://en.cppreference.com/w/cpp/language/implicit_conversion#Temporary_materialization">materialized</a> in order to be <a href="https://en.cppreference.com/w/cpp/language/reference_initialization">bound to a reference</a> to a cv-qualified type (since C++17). (Note: a function call or cast expression may result in a prvalue of non-class cv-qualified type, but the cv-qualifier is generally immediately stripped out.)</p></li>
<li><p>A prvalue cannot have <a href="https://en.cppreference.com/w/cpp/language/type#Incomplete_type">incomplete type</a> (except for type void, see below, or when used in <a href="https://en.cppreference.com/w/cpp/language/decltype"><code>decltype</code></a> specifier)</p></li>
<li><p>A prvalue cannot have <a href="https://en.cppreference.com/w/cpp/language/abstract_class">abstract class type</a> or an array thereof.</p></li>
</ul>
<h3 id="rvalue">rvalue</h3>
<p>(so-called, historically, because rvalues could appear on the right-hand side of an assignment expression) <strong>is a prvalue or an xvalue.</strong></p>
<p>Properties:</p>
<ul>
<li><p><strong>Address of an rvalue cannot be taken</strong> by built-in address-of operator: &amp;int(), &amp;i++[<a href="https://en.cppreference.com/w/cpp/language/value_category#cite_note-3">3]</a>, &amp;42, and &amp;std::move(x) are invalid.</p></li>
<li><p>An rvalue can't be used as the left-hand operand of the built-in assignment or compound assignment operators.</p></li>
<li><p>An rvalue may be used to <a href="https://en.cppreference.com/w/cpp/language/reference_initialization">initialize a <strong>const lvalue reference</strong></a>, in which case the lifetime of the object identified by the rvalue is <a href="https://en.cppreference.com/w/cpp/language/reference_initialization#Lifetime_of_a_temporary">extended</a> until the scope of the reference ends.</p></li>
<li></li>
<li><table>
<colgroup>
<col style="width: 100%" />
</colgroup>
<thead>
<tr class="header">
<th>(since C++11)</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>An rvalue may be used to <a href="https://en.cppreference.com/w/cpp/language/reference_initialization">initialize an rvalue reference</a>, in which case the lifetime of the object identified by the rvalue is <a href="https://en.cppreference.com/w/cpp/language/reference_initialization#Lifetime_of_a_temporary">extended</a> until the scope of the reference ends.</td>
</tr>
<tr class="even">
<td>When used as a function argument and when <a href="https://en.cppreference.com/w/cpp/language/overload_resolution">two overloads</a> of the function are available, <strong>one taking rvalue reference parameter and the other taking lvalue reference to const parameter</strong>, an rvalue binds to the rvalue reference overload (thus, if both copy and move constructors are available, an rvalue argument invokes the <a href="https://en.cppreference.com/w/cpp/language/move_constructor">move constructor</a>, and likewise with copy and move assignment operators).</td>
</tr>
</tbody>
</table></li>
</ul>
<h3 id="c11-expressions-that">C++11, expressions that:</h3>
<ul>
<li>have identity and cannot be moved from are called <em>lvalue</em> expressions;</li>
<li>have identity and can be moved from are called <em>xvalue</em> expressions;</li>
<li>do not have identity and can be moved from are called <em>prvalue</em> ("pure rvalue") expressions;</li>
<li>do not have identity and cannot be moved from are not used[<a href="https://en.cppreference.com/w/cpp/language/value_category#cite_note-6">6]</a>.</li>
</ul>
<p>The expressions that have identity are called "glvalue expressions" (glvalue stands for "generalized lvalue"). Both lvalues and xvalues are glvalue expressions.</p>
<p>The expressions that can be moved from are called "rvalue expressions". Both prvalues and xvalues are rvalue expressions.</p>
<h1 id="rtti">RTTI</h1>
<ul>
<li>dynamic_cast</li>
<li>typeid</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;typeinfo&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;boost/core/demangle.hpp&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Base</span> &#123; <span class="keyword">virtual</span> ~<span class="built_in">Base</span>() = <span class="keyword">default</span>; &#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Derived</span> : Base &#123;&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Base b1;</span><br><span class="line">    Derived d1;</span><br><span class="line"> </span><br><span class="line">    <span class="type">const</span> Base *pb = &amp;b1;</span><br><span class="line">    std::cout &lt;&lt; <span class="built_in">typeid</span>(*pb).<span class="built_in">name</span>() &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    pb = &amp;d1;</span><br><span class="line">    std::cout &lt;&lt; <span class="built_in">typeid</span>(*pb).<span class="built_in">name</span>() &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"> </span><br><span class="line">    std::string real_name = boost::core::<span class="built_in">demangle</span>(<span class="built_in">typeid</span>(pb).<span class="built_in">name</span>());</span><br><span class="line">    std::cout &lt;&lt; <span class="built_in">typeid</span>(pb).<span class="built_in">name</span>() &lt;&lt; <span class="string">&quot; =&gt; &quot;</span> &lt;&lt; real_name &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"> </span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;c++filt =&gt; &quot;</span> &lt;&lt; std::flush;</span><br><span class="line">    std::string s = <span class="built_in">typeid</span>(pb).<span class="built_in">name</span>();</span><br><span class="line">    std::<span class="built_in">system</span>((<span class="string">&quot;c++filt -t &quot;</span> + s).<span class="built_in">data</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="tips">tips</h1>
<ul>
<li><code>""</code>运算符</li>
<li></li>
</ul>
<h1 id="类型-type">类型 type</h1>
<ul>
<li>对象类型是除了函数类型、引用类型以及可有 cv 限定的 void 类型以外的（可有 cv 限定的）类型（参阅 <a href="https://zh.cppreference.com/w/cpp/types/is_object">std::is_object</a>）；</li>
<li><a href="https://zh.cppreference.com/w/cpp/named_req/ScalarType">标量类型</a>是（可有 cv 限定的）算术、指针、成员指针、枚举和 <a href="http://zh.cppreference.com/w/cpp/types/nullptr_t">std::nullptr_t</a> (C++11 起) 类型（参阅 <a href="https://zh.cppreference.com/w/cpp/types/is_scalar">std::is_scalar</a>）；</li>
<li><a href="https://zh.cppreference.com/w/cpp/named_req/TrivialType">平凡类型</a>（参阅 <a href="https://zh.cppreference.com/w/cpp/types/is_trivial">std::is_trivial</a>）、<a href="https://zh.cppreference.com/w/cpp/named_req/PODType">POD 类型</a>（参阅 <a href="https://zh.cppreference.com/w/cpp/types/is_pod">std::is_pod</a>）、<a href="https://zh.cppreference.com/w/cpp/named_req/LiteralType">字面类型</a>（参阅 <a href="https://zh.cppreference.com/w/cpp/types/is_literal_type">std::is_literal_type</a>）和其他类别，列于<a href="https://zh.cppreference.com/w/cpp/types">类型特征库</a>中，或作为<a href="https://zh.cppreference.com/w/cpp/named_req">具名类型要求</a>。</li>
</ul>
<h2 id="静态类型-动态类型">静态类型 动态类型</h2>
<p>对程序进行编译时分析所得到的表达式的类型被称为表达式的<em>静态类型</em>。程序执行时静态类型不会更改。</p>
<p>如果某个<a href="https://zh.cppreference.com/w/cpp/language/value_category">泛左值表达式</a>指代某个<a href="https://zh.cppreference.com/w/cpp/language/object">多态对象</a>，那么它的最终派生对象的类型被称为它的动态类型。</p>
<p><a href="https://zh.cppreference.com/w/cpp/language/types">基础类型</a></p>
<h1 id="定义">定义</h1>
<p><em>定义</em>是完全定义了声明中所引入的实体的<a href="https://zh.cppreference.com/w/cpp/language/declarations">声明</a>。<strong>除了</strong>以下情况外的声明都是定义：</p>
<ul>
<li>无函数体的函数声明：</li>
<li>带有<a href="https://zh.cppreference.com/w/cpp/language/storage_duration">存储类说明符</a> extern 或者<a href="https://zh.cppreference.com/w/cpp/language/language_linkage">语言链接</a>说明符（例如 extern "C"）而无初始化器的所有声明：</li>
<li>在类定义中的非 inline (C++17 起) <a href="https://zh.cppreference.com/w/cpp/language/static">静态数据成员</a>的声明：</li>
<li>通过<a href="https://zh.cppreference.com/w/cpp/language/class#.E5.89.8D.E7.BD.AE.E5.A3.B0.E6.98.8E">前置声明</a>或通过在其他声明中使用详细类型说明符）对类名字进行的声明：</li>
<li>枚举的<a href="https://zh.cppreference.com/w/cpp/language/enum">不可见声明</a>：</li>
<li><a href="https://zh.cppreference.com/w/cpp/language/template_parameters">模板形参</a>的声明：</li>
<li>并非定义的函数声明中的形参声明：</li>
<li><a href="https://zh.cppreference.com/w/cpp/language/typedef">typedef</a> 声明：</li>
<li><a href="https://zh.cppreference.com/w/cpp/language/type_alias">别名声明</a>：</li>
<li><a href="https://zh.cppreference.com/w/cpp/language/using_declaration">using 声明</a>：</li>
</ul>
<h2 id="odr-one-definition-rule">ODR one definition rule</h2>
<p>任何变量、函数、类类型、枚举类型、<a href="https://zh.cppreference.com/w/cpp/language/constraints">概念</a> (C++20 起)或模板，在每个翻译单元中都只允许有一个定义（其中部分可以有多个声明，但只允许有一个定义）。</p>
<p>非正式地说：</p>
<ol type="1">
<li><p>一个对象在它的值被读取（除非它是编译时常量）或写入，或它的地址被取，或者被引用绑定时，这个对象被 ODR 使用。</p></li>
<li><p>使用“所引用的对象在编译期未知”的引用时，这个引用被 ODR 使用。</p></li>
<li><p>1个函数在被调用或它的地址被取时，被 ODR 使用。 如果一个对象、引用或函数被 ODR 使用，那么程序中必须有它的定义；否则通常会有链接时错误。</p></li>
</ol>
<h2 id="常量表达式">常量表达式</h2>
<p>定义能在编译时求值的<a href="https://zh.cppreference.com/w/cpp/language/expressions">表达式</a>。</p>
<p>这种表达式能用做非类型模板实参、数组大小，并用于其他要求常量表达式的语境</p>
<p><em>常量表达式（constant expression）</em>是</p>
<ul>
<li>指代下列之一的左值 (C++14 前)泛左值 (C++14 起)<em>核心常量表达式</em>
<ul>
<li>拥有静态存储期且非临时的对象，或</li>
<li>拥有静态存储期的临时对象，但它的值满足下文对纯右值的约束(C++14 起)，或</li>
<li>非<a href="https://zh.cppreference.com/w/cpp/language/consteval">立即</a> (C++20 起)函数</li>
</ul></li>
<li>它的值满足下列约束的纯右值<em>核心常量表达式</em>
<ul>
<li>如果它的值是类类型对象，那么它的每个引用类型的非静态数据成员均指代满足上述对左值 (C++14 前)泛左值 (C++14 起)约束的实体</li>
<li>如果它的值具有指针类型，那么它保有
<ul>
<li>拥有静态存储期的对象的地址</li>
<li>拥有静态存储期的对象的末尾后一位置的地址</li>
<li>非<a href="https://zh.cppreference.com/w/cpp/language/consteval">立即</a> (C++20 起)函数的地址</li>
<li>空指针值</li>
</ul></li>
<li>如果它的值具有成员函数指针类型，那么它不代表<a href="https://zh.cppreference.com/w/cpp/language/consteval">立即函数</a>(C++20 起)</li>
<li>如果它的值具有类或数组类型，那么每个子对象均满足这些对值的约束</li>
</ul></li>
</ul>
<h1 id="对象">对象</h1>
<p>C++ 程序可以创建、销毁、引用、访问并操作<em>对象</em>。</p>
<p>在 C++ 中，一个对象拥有这些性质：</p>
<ul>
<li>大小（可以使用 <a href="https://zh.cppreference.com/w/cpp/language/sizeof"><code>sizeof</code></a> 获取）；</li>
<li>对齐要求（可以使用 <a href="https://zh.cppreference.com/w/cpp/language/alignof"><code>alignof</code></a> 获取）；</li>
<li><a href="https://zh.cppreference.com/w/cpp/language/storage_duration">存储期</a>（自动、静态、动态、线程局部）；</li>
<li><a href="https://zh.cppreference.com/w/cpp/language/lifetime">生存期</a>（与存储期绑定或者临时）</li>
<li><a href="https://zh.cppreference.com/w/cpp/language/type">类型</a>；</li>
<li>值（可能是不确定的，例如<a href="https://zh.cppreference.com/w/cpp/language/default_initialization">默认初始化</a>的非类类型）；</li>
<li><a href="https://zh.cppreference.com/w/cpp/language/identifiers#.E5.90.8D.E5.AD.97">名字</a>（可选）。</li>
</ul>
<h2 id="生存期-lifetime">生存期 lifetime</h2>
<p>对象的生存期在以下时刻开始：</p>
<ul>
<li><p>获得拥有它的类型的正确大小与对齐的存储，并且</p></li>
<li><p>完成它的初始化（如果存在）（包括不经由构造函数或经由<a href="https://zh.cppreference.com/w/cpp/language/default_constructor#.E5.B9.B3.E5.87.A1.E9.BB.98.E8.AE.A4.E6.9E.84.E9.80.A0.E5.87.BD.E6.95.B0">平凡默认构造函数</a>的<a href="https://zh.cppreference.com/w/cpp/language/default_initialization">默认初始化</a>），除非</p>
<ul>
<li><p>如果该对象是<a href="https://zh.cppreference.com/w/cpp/language/union#.E6.88.90.E5.91.98.E7.94.9F.E5.AD.98.E6.9C.9F">联合体成员</a>或它的子对象，那么它的生存期在该联合体成员是联合体中的被初始化成员，或它被设为活跃才会开始，或者</p></li>
<li><p>如果该对象内嵌于联合体对象，那么它的生存期在平凡特殊成员函数赋值或构造含有它的联合体对象时开始，或者</p></li>
<li><p>数组对象的生存期可以因为该对象被 <a href="https://zh.cppreference.com/w/cpp/memory/allocator/allocate">std::allocator::allocate</a> 分配而开始。</p></li>
</ul></li>
</ul>
<p>对象的生存期在以下时刻结束：</p>
<ul>
<li>如果该对象是非类类型，那么在销毁该对象时（可能经由伪析构函数调用销毁），或者</li>
<li>如果该对象是类类型，那么在<a href="https://zh.cppreference.com/w/cpp/language/destructor">析构函数</a>调用开始时，或者</li>
<li>该对象所占据的存储被释放，或被不内嵌于它的对象所重用时。</li>
</ul>
<p>对象的生存期与它的存储的生存期相同，或者内嵌于其中，参见<a href="https://zh.cppreference.com/w/cpp/language/storage_duration">存储期</a>。</p>
<p><a href="https://zh.cppreference.com/w/cpp/language/reference">引用</a>的生存期，从它的初始化完成之时开始，并与标量对象以相同的方式结束。</p>
<p>注意：被引用对象的生存期可能在引用的生存期结束之前就会结束，这会造成<a href="https://zh.cppreference.com/w/cpp/language/reference#.E6.82.AC.E5.9E.82.E5.BC.95.E7.94.A8">悬垂引用</a>。</p>
<p>非静态数据成员和基类子对象的生存期按照<a href="https://zh.cppreference.com/w/cpp/language/initializer_list#.E5.88.9D.E5.A7.8B.E5.8C.96.E9.A1.BA.E5.BA.8F">类初始化顺序</a>开始和结束。</p>
<h3 id="临时对象的生存期">临时对象的生存期</h3>
<p>在下列情况中进行纯右值的<a href="https://zh.cppreference.com/w/cpp/language/implicit_conversion#.E4.B8.B4.E6.97.B6.E9.87.8F.E5.AE.9E.E8.B4.A8.E5.8C.96">实质化</a>，从而能将它作为泛左值使用，即 (C++17 起)创建临时对象：</p>
<table>
<colgroup>
<col style="width: 85%" />
<col style="width: 14%" />
</colgroup>
<thead>
<tr class="header">
<th><a href="https://zh.cppreference.com/w/cpp/language/reference_initialization">绑定引用到纯右值</a></th>
<th></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>以花括号初始化器<a href="https://zh.cppreference.com/w/cpp/language/list_initialization">列表初始化</a> <a href="http://zh.cppreference.com/w/cpp/utility/initializer_list">std::initializer_list</a><T> 类型的对象时</td>
<td>(C++11 起)</td>
</tr>
<tr class="even">
<td>函数返回纯右值<br />创建纯右值的<a href="https://zh.cppreference.com/w/cpp/language/expressions#.E8.BD.AC.E6.8D.A2">类型转换</a>（<a href="https://zh.cppreference.com/w/cpp/language/explicit_cast">包括</a> T(a,b,c) 和 T{}），<br /><a href="https://zh.cppreference.com/w/cpp/language/lambda">lambda 表达式</a>(C++11 起)<br />要求对初始化器进行类型转换的<a href="https://zh.cppreference.com/w/cpp/language/copy_initialization">复制初始化</a>，<br /><a href="https://zh.cppreference.com/w/cpp/language/reference_initialization">将引用绑定</a>到不同但可以转换的类型，或绑定到位域。</td>
<td>(C++17 前)</td>
</tr>
<tr class="odd">
<td>当对类类型的纯右值进行<a href="https://zh.cppreference.com/w/cpp/language/operator_member_access#.E5.86.85.E5.BB.BA.E7.9A.84.E6.88.90.E5.91.98.E8.AE.BF.E9.97.AE.E8.BF.90.E7.AE.97.E7.AC.A6">成员访问</a>时<br />当对数组纯右值进行<a href="https://zh.cppreference.com/w/cpp/language/array#.E6.95.B0.E7.BB.84.E5.88.B0.E6.8C.87.E9.92.88.E9.80.80.E5.8C.96">数组向指针</a>转换或者<a href="https://zh.cppreference.com/w/cpp/language/operator_member_access#.E5.86.85.E5.BB.BA.E7.9A.84.E4.B8.8B.E6.A0.87.E8.BF.90.E7.AE.97.E7.AC.A6">下标运算</a>时<br />对 <a href="https://zh.cppreference.com/w/cpp/language/sizeof"><code>sizeof</code></a> 和 <a href="https://zh.cppreference.com/w/cpp/language/typeid"><code>typeid</code></a> 的不求值操作数<br />当纯右值被用作<a href="https://zh.cppreference.com/w/cpp/language/expressions#.E5.BC.83.E5.80.BC.E8.A1.A8.E8.BE.BE.E5.BC.8F">弃值表达式</a>时<br />如果实现支持的话，在<a href="https://zh.cppreference.com/w/cpp/language/operator_other#.E5.86.85.E5.BB.BA.E7.9A.84.E5.87.BD.E6.95.B0.E8.B0.83.E7.94.A8.E8.BF.90.E7.AE.97.E7.AC.A6">函数调用表达式</a>中传递或者返回<a href="https://zh.cppreference.com/w/cpp/named_req/TriviallyCopyable"><em>可平凡复制</em> <em>(TriviallyCopyable)</em></a>的类型的对象（这对应的是在 CPU 寄存器中传递结构体的情况）时</td>
<td>(C++17 起)</td>
</tr>
<tr class="even">
<td>临时对象的实质化通常会尽可能地被推迟，以免创建不必要的临时对象：参见<a href="https://zh.cppreference.com/w/cpp/language/copy_elision">复制消除</a></td>
<td>(C++17 起)</td>
</tr>
</tbody>
</table>
<p>所有临时对象的销毁都是在（词法上）包含创建它的位置的<a href="https://zh.cppreference.com/w/cpp/language/expressions#.E5.AE.8C.E6.95.B4.E8.A1.A8.E8.BE.BE.E5.BC.8F">完整表达式</a>的求值过程的最后一步进行的，而当创建了多个临时对象时，它们是以被创建的相反顺序销毁的。即便求值过程以抛出异常而终止也是如此。</p>
<p>对此有两种例外情况：</p>
<ul>
<li>可以通过绑定到 const 左值引用或右值引用 (C++11 起)来延长临时对象的生存期，细节见<a href="https://zh.cppreference.com/w/cpp/language/reference_initialization#.E4.B8.B4.E6.97.B6.E9.87.8F.E7.94.9F.E5.AD.98.E6.9C.9F">引用初始化</a>。</li>
<li>在对数组的某个元素使用含有默认实参的默认或复制构造函数进行初始化时，对该默认实参求值所创建或复制的临时对象的生存期将在该数组的下一个元素的初始化开始之前终止。</li>
</ul>
<h2 id="存储期-storage_duration">存储期 storage_duration</h2>
<p>存储类说明符是一个名字的<a href="https://zh.cppreference.com/w/cpp/language/declarations">声明语法</a>的<em>声明说明符序列</em>的一部分。它与名字的<a href="https://zh.cppreference.com/w/cpp/language/scope">作用域</a>一同控制名字的两个独立性质：它的“存储期”和它的“链接”。</p>
<ul>
<li><code>auto</code> 或 (C++11 前)无说明符 - <em>自动</em>存储期。</li>
<li><code>register</code> - <em>自动</em>存储期，另提示编译器将此对象置于处理器的寄存器。(弃用) (C++17 前)</li>
<li><code>static</code> - <em>静态</em>或<em>线程</em>存储期和<em>内部</em>链接。</li>
<li><code>extern</code> - <em>静态</em>或<em>线程</em>存储期和<em>外部</em>链接。</li>
<li><code>thread_local</code> - <em>线程</em>存储期</li>
<li><code>mutable</code> - 不影响存储期或链接。</li>
</ul>
<p>程序中的所有<a href="https://zh.cppreference.com/w/cpp/language/object">对象</a>都具有下列存储期之一：</p>
<ul>
<li><p>自动（automatic）存储期。这类对象的存储在外围代码块开始时分配，并在结束时解分配。未声明为 static、extern 或 thread_local 的所有局部对象均拥有此存储期。</p></li>
<li><p>静态（static）存储期。这类对象的<strong>存储在程序开始时分配，并在程序结束时解分配。</strong>这类对象只存在一个实例。所有在命名空间（包含全局命名空间）作用域声明的对象，加上声明带有 static 或 extern 的对象均拥有此存储期。有关拥有此存储期的对象的初始化的细节，见非局部变量与静态局部变量。</p></li>
<li><p><strong><em>线程（thread）</em></strong>存储期。这类对象的存储在线程开始时分配，并在线程结束时解分配。每个线程拥有它自身的对象实例。只有声明为 <code>thread_local</code> 的对象拥有此存储期。<code>thread_local</code> 能与 <code>static</code> 或 <code>extern</code> 一同出现，它们用于调整链接。关于具有此存储期的对象的初始化的细节，见<a href="https://zh.cppreference.com/w/cpp/language/initialization#.E9.9D.9E.E5.B1.80.E9.83.A8.E5.8F.98.E9.87.8F">非局部变量</a>和<a href="https://zh.cppreference.com/w/cpp/language/storage_duration#.E9.9D.99.E6.80.81.E5.B1.80.E9.83.A8.E5.8F.98.E9.87.8F">静态局部变量</a>。</p></li>
<li><p><strong><em>动态（dynamic）</em></strong>存储期。这类对象的存储是通过使用<a href="https://zh.cppreference.com/w/cpp/memory">动态内存分配</a>函数来按请求进行分配和解分配的。关于具有此存储期的对象的初始化的细节，见 <a href="https://zh.cppreference.com/w/cpp/language/new">new 表达式</a>。</p></li>
</ul>
<h2 id="多态对象">多态对象</h2>
<p>声明或继承了至少一个虚函数的类类型的对象是多态对象。每个多态对象中，实现都会储存额外的信息（在所有现存的实现中，如果没被编译器优化掉的话，这就是一个指针），它被用于进行<a href="https://zh.cppreference.com/w/cpp/language/virtual">虚函数</a>的调用，RTTI 功能特性（<a href="https://zh.cppreference.com/w/cpp/language/dynamic_cast"><code>dynamic_cast</code></a> 和 <a href="https://zh.cppreference.com/w/cpp/language/typeid"><code>typeid</code></a>）也用它在运行时确定对象创建时所用的类型，而不管使用它的表达式是什么类型。</p>
<p>对于非多态对象，值的解释方式由使用对象的表达式所确定，这在编译期就已经决定了。</p>
<h2 id="对齐">对齐</h2>
<p>每个<a href="https://zh.cppreference.com/w/cpp/language/type">对象类型</a>都具有被称为<em>对齐要求（alignment requirement）</em>的性质，它是一个整数（类型是 <a href="https://zh.cppreference.com/w/cpp/types/size_t">std::size_t</a>，总是 2 的幂），表示这个类型的不同对象所能分配放置的连续相邻地址之间的字节数。</p>
<table>
<colgroup>
<col style="width: 85%" />
<col style="width: 14%" />
</colgroup>
<thead>
<tr class="header">
<th>可以用 <a href="https://zh.cppreference.com/w/cpp/language/alignof"><code>alignof</code></a> 或 <a href="https://zh.cppreference.com/w/cpp/types/alignment_of">std::alignment_of</a> 来查询类型的对齐要求。可以使用指针对齐函数 <a href="https://zh.cppreference.com/w/cpp/memory/align">std::align</a> 来获取某个缓冲区中经过适当对齐的指针，还可以使用 <a href="https://zh.cppreference.com/w/cpp/types/aligned_storage">std::aligned_storage</a> 来获取经过适当对齐的存储区。</th>
<th>(C++11 起)</th>
</tr>
</thead>
<tbody>
</tbody>
</table>
<p>每个对象类型在该类型的所有对象上强制该类型的对齐要求；可以使用 <a href="https://zh.cppreference.com/w/cpp/language/alignas"><code>alignas</code></a> 来要求更严格的对齐（更大的对齐要求） (C++11 起)。</p>
<p>为了使<a href="https://zh.cppreference.com/w/cpp/language/class">类</a>中的所有非静态成员都符合对齐要求，会在一些成员后面插入一些<a href="https://zh.cppreference.com/w/cpp/language/object#.E5.AF.B9.E8.B1.A1.E8.A1.A8.E7.A4.BA.E4.B8.8E.E5.80.BC.E8.A1.A8.E7.A4.BA">填充位</a>。</p>
<h1 id="实参依赖查找">实参依赖查找</h1>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">	    std::cout &lt;&lt; <span class="string">&quot;测试\n&quot;</span>; <span class="comment">// 全局命名空间中没有 operator&lt;&lt;，但 ADL 检验 std 命名空间，</span></span><br><span class="line">	                           <span class="comment">// 因为左实参在 std 命名空间中</span></span><br><span class="line">	                           <span class="comment">// 并找到 std::operator&lt;&lt;(std::ostream&amp;, const char*)</span></span><br><span class="line">	    <span class="keyword">operator</span>&lt;&lt;(std::cout, <span class="string">&quot;测试\n&quot;</span>); <span class="comment">// 同上，用函数调用记法</span></span><br><span class="line">	 </span><br><span class="line">	    <span class="comment">// 然而，</span></span><br><span class="line">	    std::cout &lt;&lt; endl; <span class="comment">// 错误：&#x27;endl&#x27; 未在此命名空间中声明。</span></span><br><span class="line">	                       <span class="comment">// 这不是对 endl() 的函数调用，所以不适用 ADL</span></span><br><span class="line">	 </span><br><span class="line">	    <span class="built_in">endl</span>(std::cout); <span class="comment">// OK：这是函数调用：ADL 检验 std 命名空间，</span></span><br><span class="line">	                     <span class="comment">// 因为 endl 的实参在 std 中，并找到了 std::endl</span></span><br><span class="line">	 </span><br><span class="line">	    (endl)(std::cout); <span class="comment">// 错误：&#x27;endl&#x27; 未在此命名空间声明。</span></span><br><span class="line">	                       <span class="comment">// 子表达式 (endl) 不是函数调用表达式</span></span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<h1 id="关键字">关键字</h1>
<h2 id="cvconst-与-volatile类型限定符">cv（const 与 volatile）类型限定符</h2>
<blockquote>
<p>暴论: const 在编译时处理, 常量表达式const expression在编译时就可求值</p>
</blockquote>
<p>除了<a href="https://zh.cppreference.com/w/cpp/language/functions">函数类型</a>或<a href="https://zh.cppreference.com/w/cpp/language/reference">引用类型</a>以外的任何类型 <code>T</code>（包括不完整类型），C++ 类型系统中有另外三个独立的类型：<em>const-限定的</em> <code>T</code>、<em>volatile-限定的</em> <code>T</code> 及 <em>const-volatile-限定的</em> <code>T</code>。</p>
<p>注意：<a href="https://zh.cppreference.com/w/cpp/language/array">数组类型</a>被当做与它的元素类型有相同的 cv 限定。</p>
<p>当对象创建时，所用的 cv 限定符（可以是<a href="https://zh.cppreference.com/w/cpp/language/declarations">声明</a>中的 <em>声明说明符序列</em> 或 <em>声明符</em> 的一部分，或者是 <a href="https://zh.cppreference.com/w/cpp/language/new">new 表达式</a>中的 <em>类型标识</em> 的一部分）决定对象的常量性或易变性，如下所示：</p>
<ul>
<li><strong><em>常量对象</em></strong>——类型是 <em>const-限定的</em> 对象，或常量对象的非<em>可变</em>（mutable）子对象。这种对象不能被修改：直接尝试这么做是<strong>编译时错误</strong>，而间接尝试这么做（例如通过到非常量类型的引用或指针修改常量对象）的行为未定义。</li>
<li><strong><em>易变对象</em></strong>——类型是 <em>volatile-限定的</em> 对象，或易变对象的子对象，或常量易变对象的<em>可变</em>子对象。每次访问（读或写、调用成员函数等）易变类型之泛左值表达式[<a href="https://zh.cppreference.com/w/cpp/language/cv#cite_note-1">1]</a>，都当作<a href="https://zh.cppreference.com/w/cpp/language/as_if">优化</a>方面可见的副作用（即在单个执行线程内，<strong>易变对象访问不能被优化掉，或者与另一<a href="https://zh.cppreference.com/w/cpp/language/eval_order">先于或后于</a>该易变对象访问的可见副作用进行重排序</strong>。这使得易变对象适用于与<a href="https://zh.cppreference.com/w/cpp/utility/program/signal">信号处理函数</a>而非另一执行线程交流，参阅 <a href="https://zh.cppreference.com/w/cpp/atomic/memory_order">std::memory_order</a>）。试图通过非易变类型的<a href="https://zh.cppreference.com/w/cpp/language/value_category#.E6.B3.9B.E5.B7.A6.E5.80.BC">泛左值</a>访问易变对象（例如，通过到非易变类型的引用或指针）的行为未定义。</li>
<li><strong><em>常量易变对象</em></strong>——类型是 <em>const-volatile-限定的</em> 对象，常量易变对象的非<em>可变</em>子对象，易变对象的常量子对象，或常量对象的非<em>可变</em>易变子对象。同时表现为常量对象与易变对象。</li>
</ul>
<p>每个 cv 限定符（const 和 volatile）在任何 cv 限定符序列中都最多只能出现一次。例如 const const 和 volatile const volatile 都不是合法的 cv 限定符序列。</p>
<p><strong>非静态成员函数</strong>可以带 cv 限定符序列（const、volatile 或 const 和 volatile 的组合）声明，这些限定符在<a href="https://zh.cppreference.com/w/cpp/language/function">函数声明</a>中的形参列表之后出现。带有不同 cv 限定符（或无限定）的函数具有不同类型，从而可以相互重载。</p>
<p>在有 cv 限定符的函数体内，*this 有同样的 cv 限定，例如在有 const 限定符的成员函数中只能正常地调用其他有 const 限定符的成员函数。（如果应用了 <a href="https://zh.cppreference.com/w/cpp/language/const_cast"><code>const_cast</code></a>，或通过不涉及 <a href="https://zh.cppreference.com/w/cpp/language/this"><code>this</code></a> 的访问路径，那么仍然可以调用没有 const 限定符的成员函数。）</p>
<h2 id="constexpr">constexpr</h2>
<p><code>constexpr</code> - 指定变量或函数的值可以在<a href="https://zh.cppreference.com/w/cpp/language/constant_expression">常量表达式</a>中出现</p>
<p><code>constexpr</code> 说明符声明<strong>编译时</strong>可以对函数或变量求值。这些变量和函数（给定了合适的函数实参的情况下）即可用于需要编译期<a href="https://zh.cppreference.com/w/cpp/language/constant_expression">常量表达式</a>的地方。</p>
<p>声明对象或非静态成员函数 (C++14 前)时使用 constexpr 说明符则同时蕴含 const。声明函数或<a href="https://zh.cppreference.com/w/cpp/language/static">静态</a>成员变量 (C++17 起)时使用 constexpr 说明符则同时蕴含 inline。如果一个函数或函数模板的某个声明拥有 <code>constexpr</code> 说明符，那么它的所有声明都必须含有该说明符。</p>
<h2 id="decltype">decltype</h2>
<ol type="1">
<li>如果实参是没有括号的<a href="https://zh.cppreference.com/w/cpp/language/identifiers">标识表达式</a>或没有括号的<a href="https://zh.cppreference.com/w/cpp/language/operator_member_access">类成员访问</a>表达式，那么 <code>decltype</code> 产生以该表达式命名的实体的类型。如果没有这种实体或该实参指名了一组重载函数，那么程序非良构。</li>
</ol>
<table>
<colgroup>
<col style="width: 85%" />
<col style="width: 14%" />
</colgroup>
<thead>
<tr class="header">
<th>如果实参是指名某个<a href="https://zh.cppreference.com/w/cpp/language/structured_binding">结构化绑定</a>的没有括号的<a href="https://zh.cppreference.com/w/cpp/language/identifiers">标识表达式</a>，那么 <code>decltype</code> 产生其<em>被引用类型</em>（在关于结构化绑定声明的说明中有所描述）。</th>
<th>(C++17 起)</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>如果实参是指名某个<a href="https://zh.cppreference.com/w/cpp/language/template_parameters#.E9.9D.9E.E7.B1.BB.E5.9E.8B.E6.A8.A1.E6.9D.BF.E5.BD.A2.E5.8F.82">非类型模板形参</a>的没有括号的<a href="https://zh.cppreference.com/w/cpp/language/identifiers">标识表达式</a>，那么 <code>decltype</code> 生成该模板形参的类型（当该模板形参以占位符类型声明时，类型会先进行任何所需的类型推导）。</td>
<td>(C++20 起)</td>
</tr>
</tbody>
</table>
<ol start="2" type="1">
<li>如果实参是其他类型为 <code>T</code> 的任何表达式，且</li>
</ol>
<p>​ a) 如果 <em>表达式</em> 的<a href="https://zh.cppreference.com/w/cpp/language/value_category">值类别</a>是<em>亡值</em>，将会 <code>decltype</code> 产生 <code>T&amp;&amp;</code>；</p>
<p>​ b) 如果 <em>表达式</em> 的值类别是<em>左值</em>，将会 <code>decltype</code> 产生 <code>T&amp;</code>；</p>
<p>​ c) 如果 <em>表达式</em> 的值类别是<em>纯右值</em>，将会 <code>decltype</code> 产生 <code>T</code>。</p>
<table>
<colgroup>
<col style="width: 85%" />
<col style="width: 14%" />
</colgroup>
<thead>
<tr class="header">
<th>如果 <em>表达式</em> 是返回类类型纯右值的函数调用，或是右操作数为这种函数调用的<a href="https://zh.cppreference.com/w/cpp/language/operator_other">逗号表达式</a>，那么不会对该纯右值引入临时量。</th>
<th>(C++17 前)</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>如果 <em>表达式</em> 是除了（可带括号的）<a href="https://zh.cppreference.com/w/cpp/language/consteval">立即调用</a>以外的 (C++20 起)纯右值，那么不会从该纯右值<a href="https://zh.cppreference.com/w/cpp/language/implicit_conversion#.E4.B8.B4.E6.97.B6.E9.87.8F.E5.AE.9E.E8.B4.A8.E5.8C.96">实质化</a>临时对象：即这种纯右值没有结果对象。</td>
<td>(C++17 起)</td>
</tr>
</tbody>
</table>
<p>该类型不需要是<a href="https://zh.cppreference.com/w/cpp/language/type#.E4.B8.8D.E5.AE.8C.E6.95.B4.E7.B1.BB.E5.9E.8B">完整类型</a>或拥有可用的<a href="https://zh.cppreference.com/w/cpp/language/destructor">析构函数</a>，而且类型可以是<a href="https://zh.cppreference.com/w/cpp/language/abstract_class">抽象的</a>。此规则不适用于其子表达式：decltype(f(g())) 中，g() 必须有完整类型，但 f() 不必。</p>
<h2 id="explicit">explicit</h2>
<ol type="1">
<li>指定构造函数或转换函数 (C++11 起)或<a href="https://zh.cppreference.com/w/cpp/language/class_template_argument_deduction">推导指引</a> (C++17 起)为显式，即它不能用于<a href="https://zh.cppreference.com/w/cpp/language/implicit_conversion">隐式转换</a>和<a href="https://zh.cppreference.com/w/cpp/language/copy_initialization">复制初始化</a>。</li>
</ol>
<table>
<thead>
<tr class="header">
<th>2. explicit 说明符可以与常量表达式一同使用。函数在且只会在该常量表达式求值为 true 时是显式的。</th>
<th>(C++20 起)</th>
</tr>
</thead>
<tbody>
</tbody>
</table>
<p>explicit 说明符只能在类定义之内的构造函数或转换函数 (C++11 起)的 <em>声明说明符序列</em> 中出现。</p>
<h2 id="static">static</h2>
<h3 id="存储说明">存储说明</h3>
<p><code>static</code> 说明符只能搭配（函数形参列表外的）对象声明、（块作用域外的）函数声明及匿名联合体声明。当用于声明类成员时，它会声明一个<a href="https://zh.cppreference.com/w/cpp/language/static">静态成员</a>。当用于声明对象时，它指定静态存储期（除非与 <code>thread_local</code> 协同出现）。在命名空间作用域内声明时，它指定<strong>内部链接</strong>(名字可从当前翻译单元中的所有作用域使用。 在命名空间作用域声明的下列任何名字均具有内部链接；即未声明为 <code>static</code> 的函数具有外部链接)。</p>
<p><strong><em>静态（static）</em></strong>存储期。这类对象的存储在程序开始时分配，并在程序结束时解分配。这类对象只存在一个实例。所有在命名空间（包含全局命名空间）作用域声明的对象，加上声明带有 <code>static</code> 或 <code>extern</code> 的对象均拥有此存储期。有关拥有此存储期的对象的初始化的细节，见<a href="https://zh.cppreference.com/w/cpp/language/initialization#.E9.9D.9E.E5.B1.80.E9.83.A8.E5.8F.98.E9.87.8F">非局部变量</a>与<a href="https://zh.cppreference.com/w/cpp/language/storage_duration#.E9.9D.99.E6.80.81.E5.B1.80.E9.83.A8.E5.8F.98.E9.87.8F">静态局部变量</a>。</p>
<p><strong>非局部变量</strong>, 所有具有静态<a href="https://zh.cppreference.com/w/cpp/language/storage_duration">存储期</a>的非局部变量的初始化会作为程序启动的一部分在 <a href="https://zh.cppreference.com/w/cpp/language/main_function">main 函数</a>的执行之前进行（除非被延迟，见下文）。所有具有线程局部存储期的非局部变量的初始化会作为线程启动的一部分进行，按顺序早于线程函数的执行开始。对于这两种变量，初始化发生于两个截然不同的阶段：</p>
<p>有两种静态初始化的形式：</p>
<p>\1) 如果可能，那么应用<a href="https://zh.cppreference.com/w/cpp/language/constant_initialization">常量初始化</a>。(设置<a href="https://zh.cppreference.com/w/cpp/language/storage_duration">静态</a>变量的初值为编译时常量。)</p>
<p>\2) 否则非局部静态及线程局域变量会被<a href="https://zh.cppreference.com/w/cpp/language/zero_initialization">零初始化</a>。</p>
<p>实践中：</p>
<ul>
<li>常量初始化通常在编译期进行。预先被计算的对象表示会作为程序映像的一部分存储下来。如果编译器没有这样做，那么它仍然必须保证该初始化发生早于任何动态初始化。</li>
<li>零初始化的变量将被置于程序映像的 <code>.bss</code> 段，它不占据磁盘空间，并在加载程序时由操作系统以零填充。</li>
</ul>
<h3 id="静态局部变量">静态局部变量</h3>
<p>在块作用域声明且带有 <code>static</code> 或 <code>thread_local</code> (C++11 起) 说明符的变量拥有静态或线程 (C++11 起)存储期，但在控制首次经过它的声明时才会被初始化（除非它被<a href="https://zh.cppreference.com/w/cpp/language/zero_initialization">零初始化</a>或<a href="https://zh.cppreference.com/w/cpp/language/constant_initialization">常量初始化</a>，这可以在首次进入块前进行）。在其后所有的调用中，声明都会被跳过。</p>
<p>如果初始化<a href="https://zh.cppreference.com/w/cpp/language/throw">抛出异常</a>，那么不认为变量被初始化，且控制下次经过该声明时将再次尝试初始化。</p>
<p>如果初始化递归地进入正在初始化的变量的块，那么行为未定义。</p>
<table>
<colgroup>
<col style="width: 85%" />
<col style="width: 14%" />
</colgroup>
<thead>
<tr class="header">
<th>如果多个线程试图同时初始化同一静态局部变量，那么初始化严格发生一次（类似的行为也可对任意函数以 <a href="https://zh.cppreference.com/w/cpp/thread/call_once">std::call_once</a> 来达成）。注意：此功能特性的通常实现均使用双检查锁定模式的变体，这使得对已初始化的局部静态变量检查的运行时开销减少为单次非原子的布尔比较。</th>
<th>(C++11 起)</th>
</tr>
</thead>
<tbody>
</tbody>
</table>
<p>块作用域静态变量的析构函数在初始化已成功的情况下<a href="https://zh.cppreference.com/w/cpp/utility/program/exit">在程序退出时</a>被调用。</p>
<p>在相同<a href="https://zh.cppreference.com/w/cpp/language/inline">内联函数</a>（可以是隐式内联）的所有定义中，函数局部的静态对象均指代在一个翻译单元中定义的同一对象，只要函数拥有外部链接。</p>
<h3 id="静态成员">静态成员</h3>
<h2 id="inline">inline</h2>
<p>inline 说明符，在用于函数的 <a href="https://zh.cppreference.com/w/cpp/language/declarations#.E8.AF.B4.E6.98.8E.E7.AC.A6">声明说明符序列</a> 时，将函数声明为一个 <em>内联（inline）函数</em>。</p>
<p>整个定义都在 <a href="https://zh.cppreference.com/w/cpp/language/classes">class/struct/union 的定义</a>内且被附着到全局模块 (C++20 起)的函数是隐式的内联函数，无论它是成员函数还是非成员 friend 函数。</p>
<table>
<colgroup>
<col style="width: 85%" />
<col style="width: 14%" />
</colgroup>
<thead>
<tr class="header">
<th>声明有 constexpr 的函数是隐式的内联函数。弃置的函数是隐式的内联函数：它的（弃置）定义可以在多于一个翻译单元中出现。</th>
<th>(C++11 起)</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>inline 说明符，在用于具有静态存储期的变量（静态类成员或命名空间作用域变量）的 <a href="https://zh.cppreference.com/w/cpp/language/declarations#.E8.AF.B4.E6.98.8E.E7.AC.A6">声明说明符序列</a> 时，将变量声明为<em>内联变量</em>。声明为 constexpr 的静态成员变量（但不是命名空间作用域变量）是隐式的内联变量。</td>
<td>(C++17 起)</td>
</tr>
</tbody>
</table>
<h3 id="解释">解释</h3>
<p><em>内联函数</em>或<em>内联变量</em> (C++17 起)具有下列性质：</p>
<ol type="1">
<li>内联函数或变量 (C++17 起)的定义必须在访问它的翻译单元中可达（不一定要在访问点前）。</li>
<li>带<a href="https://zh.cppreference.com/w/cpp/language/storage_duration#.E5.A4.96.E9.83.A8.E8.BF.9E.E6.8E.A5">外部连接</a>的 inline 函数或变量 (C++17 起)（例如不声明为 static）拥有下列额外属性：
<ol type="1">
<li>内联函数或变量 (C++17 起)在程序中可以有<a href="https://zh.cppreference.com/w/cpp/language/definition#.E5.8D.95.E4.B8.80.E5.AE.9A.E4.B9.89.E8.A7.84.E5.88.99.EF.BC.88ODR.EF.BC.89">多于一次定义</a>，只要每个定义都出现在不同翻译单元中（对于非静态的内联函数和变量 (C++17 起)）且所有定义等同即可。例如，内联函数或内联变量 (C++17 起)可以在被多个源文件所 #include 的头文件中定义。</li>
<li>它必须在每个翻译单元中都被声明为 inline 。</li>
<li>它在每个翻译单元中都拥有相同的地址。</li>
</ol></li>
</ol>
<p>在内联函数中，</p>
<ul>
<li>所有函数定义中的函数局部静态对象在所有翻译单元间共享（它们都指代相同的在某一个翻译单元中定义的对象）</li>
<li>所有函数定义中所定义的类型同样在所有翻译单元中相同。</li>
</ul>
<table>
<thead>
<tr class="header">
<th>命名空间作用域的内联 const 变量默认具有<a href="https://zh.cppreference.com/w/cpp/language/storage_duration#.E5.A4.96.E9.83.A8.E8.BF.9E.E6.8E.A5">外部连接</a>（这点与非内联非 volatile 的有 const 限定的变量不同）</th>
<th>(C++17 起)</th>
</tr>
</thead>
<tbody>
</tbody>
</table>
<p>inline 关键词的本意是作为给优化器的指示器，以指示优先采用<a href="https://en.wikipedia.org/wiki/inline_expansion">函数的内联替换</a>而非进行函数调用，即并不执行将控制转移到函数体内的函数调用 CPU 指令，而是代之以执行函数体的一份副本而无需生成调用。这会避免函数调用的开销（传递实参及返回结果），但它可能导致更大的可执行文件，因为函数体必须被复制多次。</p>
<p>因为关键词 inline 的含义是非强制的，编译器拥有对任何未标记为 inline 的函数使用内联替换的自由，和对任何标记为 inline 的函数生成函数调用的自由。这些优化选择不改变上述关于多个定义和共享静态变量的规则。</p>
<table>
<thead>
<tr class="header">
<th>由于关键词 inline 对于函数的含义已经变为“容许多次定义”而不是“优先内联”，因此这个含义也扩展到了变量。</th>
<th>(C++17 起)</th>
</tr>
</thead>
<tbody>
</tbody>
</table>
<h4 id="注解">注解</h4>
<p>如果具有外部连接的内联函数或变量 (C++17 起)在不同翻译单元中的定义不同，那么行为未定义。</p>
<p>inline 说明符不能用于块作用域内（函数内部）的函数或变量 (C++17 起)声明。</p>
<p>inline 说明符不能重声明在翻译单元中已定义为非内联的函数或变量 (C++17 起)。</p>
<p>隐式生成的成员函数和任何在它的首条声明中声明为预置的成员函数，与任何其他在类定义内定义的函数一样是内联的。</p>
<p>如果一个内联函数在不同翻译单元中被声明，那么它的<a href="https://zh.cppreference.com/w/cpp/language/default_arguments">默认实参</a>的积累集合必须在每个翻译单元的末尾相同。</p>
<p>在 C 中，内联函数不必在每个翻译单元声明为 inline（最多一个可以是非 inline 或 extern inline），函数定义不必相同（但如果程序依赖于调用的是哪个函数则行为未指明），且函数局部的静态变量在同一函数的不同定义间不同。</p>
<table>
<thead>
<tr class="header">
<th>关于内联静态成员的额外规则见<a href="https://zh.cppreference.com/w/cpp/language/static">静态数据成员</a>。内联变量消除了将 C++ 代码打包为只有头文件的库的主要障碍。</th>
<th>(C++17 起)</th>
</tr>
</thead>
<tbody>
</tbody>
</table>
<h1 id="表达式">表达式</h1>
<h2 id="初等表达式">初等表达式</h2>
<p>初等表达式包括以下各项：</p>
<ul>
<li><a href="https://zh.cppreference.com/w/cpp/language/this"><code>this</code></a></li>
<li>字面量（例如 2 或 "Hello, world"）</li>
<li>标识表达式，包括
<ul>
<li>经过适当声明的<a href="https://zh.cppreference.com/w/cpp/language/identifiers#.E6.97.A0.E9.99.90.E5.AE.9A.E7.9A.84.E6.A0.87.E8.AF.86.E7.AC.A6">无限定的标识符</a>（例如 n 或 cout），</li>
<li>经过适当声明的<a href="https://zh.cppreference.com/w/cpp/language/identifiers#.E6.9C.89.E9.99.90.E5.AE.9A.E7.9A.84.E6.A0.87.E8.AF.86.E7.AC.A6">有限定的标识符</a>（例如 <a href="https://zh.cppreference.com/w/cpp/string/basic_string/npos">std::string::npos</a>），以及</li>
<li>在<a href="https://zh.cppreference.com/w/cpp/language/declarations#.E5.A3.B0.E6.98.8E.E7.AC.A6">声明符</a>中将要声明的标识符</li>
</ul></li>
</ul>
<table>
<thead>
<tr class="header">
<th><a href="https://zh.cppreference.com/w/cpp/language/lambda">lambda 表达式</a></th>
<th>(C++11 起)</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="https://zh.cppreference.com/w/cpp/language/fold">折叠表达式</a></td>
<td>(C++17 起)</td>
</tr>
<tr class="even">
<td><a href="https://zh.cppreference.com/w/cpp/language/constraints">requires 表达式</a></td>
<td>(C++20 起)</td>
</tr>
</tbody>
</table>
<p>括号中的任何表达式也被归类为初等表达式：这确保了括号具有比任何运算符更高的优先级。括号保持值、类型和值类别不变。</p>
<h1 id="值-value">值 value</h1>
<p>每个 C++ <a href="https://zh.cppreference.com/w/cpp/language/expressions">表达式</a>（带有操作数的操作符、字面量、变量名等）可按照两种独立的特性加以辨别：<em>类型</em>和<em>值类别 (value category)</em>。每个表达式都具有某种非引用类型，且每个表达式只属于三种基本值类别中的一种：<em>纯右值 (prvalue)</em>、<em>亡值 (xvalue)</em>、<em>左值 (lvalue)</em>。</p>
<h2 id="泛左值-glvalue">泛左值 (glvalue)</h2>
<p>（“泛化 (generalized)”的左值）是一个表达式，其值可确定某个对象或函数的标识；</p>
<p><em>泛左值</em>表达式包括左值、亡值。</p>
<p>性质：</p>
<ul>
<li>泛左值可以通过左值到右值、数组到指针或函数到指针<a href="https://zh.cppreference.com/w/cpp/language/implicit_conversion">隐式转换</a>转换成纯右值。</li>
<li>泛左值可以是<a href="https://zh.cppreference.com/w/cpp/language/object#.E5.A4.9A.E6.80.81.E5.AF.B9.E8.B1.A1">多态的</a>：它标识的对象的<a href="https://zh.cppreference.com/w/cpp/language/types#.E5.8A.A8.E6.80.81.E7.B1.BB.E5.9E.8B">动态类型</a>不必是该表达式的静态类型。</li>
<li>泛左值可以具有<a href="https://zh.cppreference.com/w/cpp/language/types#.E4.B8.8D.E5.AE.8C.E6.95.B4.E7.B1.BB.E5.9E.8B">不完整类型</a>，只要表达式中容许。</li>
</ul>
<h2 id="纯右值-prvalue">纯右值 (prvalue)</h2>
<p>（“纯 (pure)”的右值）是求值符合下列之一的表达式：</p>
<ul>
<li>计算某个运算符的操作数的值（这种纯右值没有<em>结果对象</em>）</li>
<li>初始化某个对象（称这种纯右值有一个<em>结果对象</em>）。</li>
</ul>
<p>下列表达式是<em>纯右值表达式</em>：</p>
<ul>
<li><strong>（除了<a href="https://zh.cppreference.com/w/cpp/language/string_literal">字符串字面量</a>之外的）<a href="https://zh.cppreference.com/w/cpp/language/expressions#.E5.AD.97.E9.9D.A2.E9.87.8F">字面量</a>，例如 42、true 或 nullptr</strong>；</li>
<li><strong>返回类型是非引用</strong>的函数调用或重载运算符表达式，例如 str.substr(1, 2)、str1 + str2 或 it++；</li>
<li>a++ 和 a--，内建的<a href="https://zh.cppreference.com/w/cpp/language/operator_incdec#.E5.86.85.E5.BB.BA.E7.9A.84.E5.90.8E.E7.BD.AE.E8.BF.90.E7.AE.97.E7.AC.A6">后置自增与后置自减</a>表达式；</li>
<li>a + b、a % b、a &amp; b、a &lt;&lt; b，以及其他所有内建的<a href="https://zh.cppreference.com/w/cpp/language/operator_arithmetic">算术</a>表达式；</li>
<li>a &amp;&amp; b、a || b、!a，内建的<a href="https://zh.cppreference.com/w/cpp/language/operator_logical">逻辑</a>表达式；</li>
<li>a &lt; b、a == b、a &gt;= b 以及其他所有内建的<a href="https://zh.cppreference.com/w/cpp/language/operator_comparison">比较</a>表达式；</li>
<li>&amp;a，内建的<a href="https://zh.cppreference.com/w/cpp/language/operator_member_access#.E5.86.85.E5.BB.BA.E7.9A.84.E5.8F.96.E5.9C.B0.E5.9D.80.E8.BF.90.E7.AE.97.E7.AC.A6">取地址</a>表达式；</li>
<li>a.m，<a href="https://zh.cppreference.com/w/cpp/language/operator_member_access#.E5.86.85.E5.BB.BA.E7.9A.84.E6.88.90.E5.91.98.E8.AE.BF.E9.97.AE.E8.BF.90.E7.AE.97.E7.AC.A6">对象成员</a>表达式，其中 <code>m</code> 是<strong>成员枚举项或非静态成员函数</strong>[<a href="https://zh.cppreference.com/w/cpp/language/value_category#cite_note-pmfc-2">2]</a>；</li>
<li>p-&gt;m，内建的<a href="https://zh.cppreference.com/w/cpp/language/operator_member_access#.E5.86.85.E5.BB.BA.E7.9A.84.E6.88.90.E5.91.98.E8.AE.BF.E9.97.AE.E8.BF.90.E7.AE.97.E7.AC.A6">指针成员</a>表达式，其中 <code>m</code> 是成员枚举项或非静态成员函数[<a href="https://zh.cppreference.com/w/cpp/language/value_category#cite_note-pmfc-2">2]</a>；</li>
<li>a.*mp，<a href="https://zh.cppreference.com/w/cpp/language/operator_member_access#.E5.86.85.E5.BB.BA.E7.9A.84.E6.88.90.E5.91.98.E6.8C.87.E9.92.88.E8.AE.BF.E9.97.AE.E8.BF.90.E7.AE.97.E7.AC.A6">对象的成员指针</a>表达式，其中 <code>mp</code> 是成员函数指针[<a href="https://zh.cppreference.com/w/cpp/language/value_category#cite_note-pmfc-2">2]</a>}；</li>
<li>p-&gt;*mp，内建的<a href="https://zh.cppreference.com/w/cpp/language/operator_member_access#.E5.86.85.E5.BB.BA.E7.9A.84.E6.88.90.E5.91.98.E6.8C.87.E9.92.88.E8.AE.BF.E9.97.AE.E8.BF.90.E7.AE.97.E7.AC.A6">指针的成员指针</a>表达式，其中 <code>mp</code> 是成员函数指针[<a href="https://zh.cppreference.com/w/cpp/language/value_category#cite_note-pmfc-2">2]</a>；</li>
<li>a, b，内建的<a href="https://zh.cppreference.com/w/cpp/language/operator_other#.E5.86.85.E5.BB.BA.E7.9A.84.E9.80.97.E5.8F.B7.E8.A1.A8.E8.BE.BE.E5.BC.8F">逗号</a>表达式，其中 b 是右值；</li>
<li>a ? b : c，对某些 b 和 c 的<a href="https://zh.cppreference.com/w/cpp/language/operator_other#.E6.9D.A1.E4.BB.B6.E8.BF.90.E7.AE.97.E7.AC.A6">三元条件</a>表达式（细节见<a href="https://zh.cppreference.com/w/cpp/language/operator_other#.E6.9D.A1.E4.BB.B6.E8.BF.90.E7.AE.97.E7.AC.A6">定义</a>）；</li>
<li>转换到非引用类型的转型表达式，例如 static_cast<double>(x)、<a href="http://zh.cppreference.com/w/cpp/string/basic_string">std::string</a> 或 (int)42；</li>
<li><a href="https://zh.cppreference.com/w/cpp/language/this"><code>this</code></a> 指针；???</li>
<li><a href="https://zh.cppreference.com/w/cpp/language/enum">枚举项</a>;</li>
<li>具有标量类型的非类型<a href="https://zh.cppreference.com/w/cpp/language/template_parameters">模板形参</a>；</li>
</ul>
<table>
<thead>
<tr class="header">
<th><a href="https://zh.cppreference.com/w/cpp/language/lambda">lambda 表达式</a>，例如 <a href="int%20x"></a>{ return x * x; }；</th>
<th>(C++11 起)</th>
</tr>
</thead>
<tbody>
</tbody>
</table>
<table>
<colgroup>
<col style="width: 85%" />
<col style="width: 14%" />
</colgroup>
<thead>
<tr class="header">
<th><a href="https://zh.cppreference.com/w/cpp/language/constraints">requires 表达式</a>，例如 requires (T i) { typename T::type; }；<a href="https://zh.cppreference.com/w/cpp/language/constraints">概念</a>的特化，例如 std::equality_comparable<int>。</th>
<th>(C++20 起)</th>
</tr>
</thead>
<tbody>
</tbody>
</table>
<p>性质：</p>
<ul>
<li>与右值相同（见下文）。</li>
<li>纯右值不具有<a href="https://zh.cppreference.com/w/cpp/language/object#.E5.A4.9A.E6.80.81.E5.AF.B9.E8.B1.A1">多态</a>：它所标识的对象的<a href="https://zh.cppreference.com/w/cpp/language/types#.E5.8A.A8.E6.80.81.E7.B1.BB.E5.9E.8B">动态类型</a>始终是该表达式的类型。</li>
<li>非类非数组的纯右值不能有 <a href="https://zh.cppreference.com/w/cpp/language/cv">cv 限定</a>，除非它被<a href="https://zh.cppreference.com/w/cpp/language/implicit_conversion#.E4.B8.B4.E6.97.B6.E9.87.8F.E5.AE.9E.E8.B4.A8.E5.8C.96">实质化</a>以<a href="https://zh.cppreference.com/w/cpp/language/reference_initialization">绑定</a>到 cv 限定类型的引用 (C++17 起)。（注意：函数调用或转型表达式可能生成非类的 cv 限定类型的纯右值，但它的 cv 限定符通常被立即剥除。）</li>
<li>纯右值不能具有<a href="https://zh.cppreference.com/w/cpp/language/type#.E4.B8.8D.E5.AE.8C.E6.95.B4.E7.B1.BB.E5.9E.8B">不完整类型</a>（除了类型 void（见下文），或在 <a href="https://zh.cppreference.com/w/cpp/language/decltype"><code>decltype</code></a> 说明符中使用之外）</li>
<li>纯右值不能具有<a href="https://zh.cppreference.com/w/cpp/language/abstract_class">抽象类类型</a>或它的数组类型。</li>
</ul>
<h2 id="亡值-xvalue">亡值 (xvalue)</h2>
<p>（“将亡 (expiring)”的值）是代表它的资源能够被重新使用的对象或位域的泛左值；</p>
<p>下列表达式是<em>亡值表达式</em>：</p>
<ul>
<li>a.m，<a href="https://zh.cppreference.com/w/cpp/language/operator_member_access#.E5.86.85.E5.BB.BA.E7.9A.84.E6.88.90.E5.91.98.E8.AE.BF.E9.97.AE.E8.BF.90.E7.AE.97.E7.AC.A6">对象成员</a>表达式，其中 <code>a</code> 是右值且 <code>m</code> 是对象类型的非静态数据成员；</li>
<li>a.*mp，<a href="https://zh.cppreference.com/w/cpp/language/operator_member_access#.E5.86.85.E5.BB.BA.E7.9A.84.E6.88.90.E5.91.98.E6.8C.87.E9.92.88.E8.AE.BF.E9.97.AE.E8.BF.90.E7.AE.97.E7.AC.A6">对象的成员指针</a>表达式，其中 a 是右值且 <code>mp</code> 是数据成员指针；</li>
<li>a ? b : c，对某些 b 和 c 的<a href="https://zh.cppreference.com/w/cpp/language/operator_other#.E6.9D.A1.E4.BB.B6.E8.BF.90.E7.AE.97.E7.AC.A6">三元条件</a>表达式（细节见<a href="https://zh.cppreference.com/w/cpp/language/operator_other#.E6.9D.A1.E4.BB.B6.E8.BF.90.E7.AE.97.E7.AC.A6">定义</a>）；</li>
</ul>
<table>
<colgroup>
<col style="width: 85%" />
<col style="width: 14%" />
</colgroup>
<thead>
<tr class="header">
<th>返回类型是对象的右值引用的函数调用或重载运算符表达式，例如 std::move(x)；a[n]，内建的<a href="https://zh.cppreference.com/w/cpp/language/operator_member_access#.E5.86.85.E5.BB.BA.E7.9A.84.E4.B8.8B.E6.A0.87.E8.BF.90.E7.AE.97.E7.AC.A6">下标</a>表达式，它的操作数之一是数组右值；转换到对象的右值引用类型的转型表达式，例如 static_cast&lt;char&amp;&amp;&gt;(x)；</th>
<th>(C++11 起)</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>在<a href="https://zh.cppreference.com/w/cpp/language/implicit_conversion#.E4.B8.B4.E6.97.B6.E9.87.8F.E5.AE.9E.E8.B4.A8.E5.8C.96">临时量实质化</a>后，任何指代该临时对象的表达式。</td>
<td>(C++17 起)</td>
</tr>
</tbody>
</table>
<p>性质：</p>
<ul>
<li>与右值相同（见下文）。</li>
<li>与泛左值相同（见下文）。</li>
</ul>
<p>特别是，与所有的右值类似，亡值可以绑定到右值引用上，而且与所有的泛左值类似，亡值可以是<a href="https://zh.cppreference.com/w/cpp/language/object#.E5.A4.9A.E6.80.81.E5.AF.B9.E8.B1.A1">多态的</a>，而且非类的亡值可以有 <a href="https://zh.cppreference.com/w/cpp/language/cv">cv 限定</a>。</p>
<h2 id="左值-lvalue">左值 (lvalue)</h2>
<p>（如此称呼的历史原因是，左值可以在赋值表达式的左边出现）是非亡值的泛左值；</p>
<p>下列表达式是<em>左值表达式</em>：</p>
<ul>
<li>变量、函数、<a href="https://zh.cppreference.com/w/cpp/language/template_parameters#.E9.9D.9E.E7.B1.BB.E5.9E.8B.E6.A8.A1.E6.9D.BF.E5.BD.A2.E5.8F.82">模板形参对象</a> (C++20 起)或数据成员的<strong>名字</strong>，不论类型，例如 <a href="http://zh.cppreference.com/w/cpp/io/cin">std::cin</a> 或 <a href="http://zh.cppreference.com/w/cpp/io/manip/endl">std::endl</a>。即使变量的类型是右值引用，由它的名字构成的表达式仍是左值表达式；</li>
<li><strong>返回类型是左值引用</strong>的函数调用或重载运算符表达式，例如 <a href="http://zh.cppreference.com/w/cpp/string/basic_string/getline">std::getline</a>(<a href="http://zh.cppreference.com/w/cpp/io/cin">std::cin</a>, str)、<a href="http://zh.cppreference.com/w/cpp/io/cout">std::cout</a> &lt;&lt; 1、str1 = str2 或 ++it；</li>
<li>a = b，a += b，a %= b，以及所有其他内建的<a href="https://zh.cppreference.com/w/cpp/language/operator_assignment"><strong>赋值</strong>及复合赋值</a>表达式；</li>
<li><strong>++a 和 --a</strong>，内建的<a href="https://zh.cppreference.com/w/cpp/language/operator_incdec#.E5.86.85.E5.BB.BA.E7.9A.84.E5.89.8D.E7.BD.AE.E8.BF.90.E7.AE.97.E7.AC.A6">前置自增与前置自减</a>表达式；</li>
<li>*p，内建的<a href="https://zh.cppreference.com/w/cpp/language/operator_member_access#.E5.86.85.E5.BB.BA.E7.9A.84.E9.97.B4.E6.8E.A5.E5.AF.BB.E5.9D.80.E8.BF.90.E7.AE.97.E7.AC.A6">间接寻址</a>表达式；</li>
<li>a[n] 和 n[a]，内建的<a href="https://zh.cppreference.com/w/cpp/language/operator_member_access#.E5.86.85.E5.BB.BA.E7.9A.84.E4.B8.8B.E6.A0.87.E8.BF.90.E7.AE.97.E7.AC.A6">下标</a>表达式，当 <code>a[n]</code> 中的一个操作数是数组左值时 (C++11 起)；</li>
<li>a.m，<a href="https://zh.cppreference.com/w/cpp/language/operator_member_access#.E5.86.85.E5.BB.BA.E7.9A.84.E6.88.90.E5.91.98.E8.AE.BF.E9.97.AE.E8.BF.90.E7.AE.97.E7.AC.A6">对象成员</a>表达式，除了 <code>m</code> 是成员枚举项或非静态成员函数，或者 a 是右值而 <code>m</code> 是对象类型的非静态数据成员的情况；</li>
<li>p-&gt;m，内建的<a href="https://zh.cppreference.com/w/cpp/language/operator_member_access#.E5.86.85.E5.BB.BA.E7.9A.84.E6.88.90.E5.91.98.E8.AE.BF.E9.97.AE.E8.BF.90.E7.AE.97.E7.AC.A6">指针成员</a>表达式，除了 <code>m</code> 是成员枚举项或非静态成员函数的情况；</li>
<li>a.*mp，<a href="https://zh.cppreference.com/w/cpp/language/operator_member_access#.E5.86.85.E5.BB.BA.E7.9A.84.E6.88.90.E5.91.98.E6.8C.87.E9.92.88.E8.AE.BF.E9.97.AE.E8.BF.90.E7.AE.97.E7.AC.A6">对象的成员指针</a>表达式，其中 a 是左值且 <code>mp</code> 是数据成员指针；</li>
<li>p-&gt;*mp，内建的<a href="https://zh.cppreference.com/w/cpp/language/operator_member_access#.E5.86.85.E5.BB.BA.E7.9A.84.E6.88.90.E5.91.98.E6.8C.87.E9.92.88.E8.AE.BF.E9.97.AE.E8.BF.90.E7.AE.97.E7.AC.A6">指针的成员指针</a>表达式，其中 <code>mp</code> 是数据成员指针；</li>
<li>a, b，内建的<strong><a href="https://zh.cppreference.com/w/cpp/language/operator_other#.E5.86.85.E5.BB.BA.E7.9A.84.E9.80.97.E5.8F.B7.E8.BF.90.E7.AE.97.E7.AC.A6">逗号</a>表达式</strong>，其中 b 是左值；</li>
<li>a ? b : c，对某些 b 和 c 的<a href="https://zh.cppreference.com/w/cpp/language/operator_other#.E6.9D.A1.E4.BB.B6.E8.BF.90.E7.AE.97.E7.AC.A6">三元条件</a>表达式（例如，当它们都是同类型左值时，但细节见<a href="https://zh.cppreference.com/w/cpp/language/operator_other#.E6.9D.A1.E4.BB.B6.E8.BF.90.E7.AE.97.E7.AC.A6">定义</a>）；</li>
<li><a href="https://zh.cppreference.com/w/cpp/language/string_literal"><strong>字符串字面量</strong></a>，例如 "Hello, world!"；</li>
<li>转换到左值引用类型的转型表达式，例如 static_cast&lt;int&amp;&gt;(x)；</li>
<li>具有左值引用类型的非类型<a href="https://zh.cppreference.com/w/cpp/language/template_parameters">模板形参</a>；</li>
</ul>
<table>
<colgroup>
<col style="width: 85%" />
<col style="width: 14%" />
</colgroup>
<thead>
<tr class="header">
<th>返回类型是到函数的<strong>右值引用</strong>的函数调用表达式或重载的运算符表达式；转换到函数的右值引用类型的转型表达式，如 static_cast&lt;void (&amp;&amp;)(int)&gt;(x)。</th>
<th>(C++11 起)</th>
</tr>
</thead>
<tbody>
</tbody>
</table>
<p>性质：</p>
<ul>
<li>与泛左值相同（见下文）。</li>
<li>可以通过内建的取址运算符取左值的地址：&amp;++i[<a href="https://zh.cppreference.com/w/cpp/language/value_category#cite_note-1">1]</a> 及 &amp;<a href="http://zh.cppreference.com/w/cpp/io/manip/endl">std::endl</a> 是合法表达式。</li>
<li>可修改的左值可用作内建赋值和内建复合赋值运算符的左操作数。</li>
<li>左值可以用来<a href="https://zh.cppreference.com/w/cpp/language/reference_initialization">初始化左值引用</a>；这会将一个新名字关联给该表达式所标识的对象。</li>
</ul>
<h2 id="右值-rvalue">右值 (rvalue)</h2>
<p>（如此称呼的历史原因是，右值可以在赋值表达式的右边出现）是纯右值或者亡值。</p>
<p><em>右值表达式</em>包括纯右值、亡值。</p>
<p>性质：</p>
<ul>
<li>右值不能由内建的取址运算符取地址：&amp;int()、&amp;i++[<a href="https://zh.cppreference.com/w/cpp/language/value_category#cite_note-3">3]</a>、&amp;42 及 &amp;std::move(x) 是非法的。</li>
<li>右值不能用作内建赋值运算符及内建复合赋值运算符的左操作数。</li>
<li><strong>右值可以用来<a href="https://zh.cppreference.com/w/cpp/language/reference_initialization">初始化 const 左值引用</a>，这种情况下该右值所标识的对象的生存期被<a href="https://zh.cppreference.com/w/cpp/language/reference_initialization#.E4.B8.B4.E6.97.B6.E5.AF.B9.E8.B1.A1.E7.9A.84.E7.94.9F.E5.AD.98.E6.9C.9F">延长</a>到该引用的作用域结尾。</strong></li>
</ul>
<table>
<colgroup>
<col style="width: 85%" />
<col style="width: 14%" />
</colgroup>
<thead>
<tr class="header">
<th>右值可以用来<a href="https://zh.cppreference.com/w/cpp/language/reference_initialization">初始化右值引用</a>，这种情况下该右值所标识的对象的生存期被<a href="https://zh.cppreference.com/w/cpp/language/reference_initialization#.E4.B8.B4.E6.97.B6.E5.AF.B9.E8.B1.A1.E7.9A.84.E7.94.9F.E5.AD.98.E6.9C.9F">延长</a>到该引用的作用域结尾。当被用作函数实参且该函数有两种<a href="https://zh.cppreference.com/w/cpp/language/overload_resolution">重载</a>可用，其中之一接受右值引用的形参而另一个接受 const 的左值引用的形参时，右值将被绑定到右值引用的重载之上（从而，当复制与移动构造函数均可用时，以右值实参将调用它的<a href="https://zh.cppreference.com/w/cpp/language/move_constructor">移动构造函数</a>，复制和移动赋值运算符与此类似）。</th>
<th>(C++11 起)</th>
</tr>
</thead>
<tbody>
</tbody>
</table>
<h2 id="c11">c++11</h2>
<p>随着移动语义引入到 C++11 之中，值类别被重新进行了定义，以区别表达式的两种独立的性质[<a href="https://zh.cppreference.com/w/cpp/language/value_category#cite_note-5">5]</a>：</p>
<ul>
<li><em>拥有身份 (identity)</em>：可以确定表达式是否与另一表达式指代同一实体，例如通过比较它们所标识的对象或函数的（直接或间接获得的）地址；</li>
<li><em>可被移动</em>：<a href="https://zh.cppreference.com/w/cpp/language/move_constructor">移动构造函数</a>、<a href="https://zh.cppreference.com/w/cpp/language/move_assignment">移动赋值运算符</a>或实现了移动语义的其他函数重载能够绑定于这个表达式。</li>
</ul>
<p>C++11 中：</p>
<ul>
<li>拥有身份且不可被移动的表达式被称作<em>左值 (lvalue)</em>表达式；</li>
<li>拥有身份且可被移动的表达式被称作<em>亡值 (xvalue)</em>表达式；</li>
<li>不拥有身份且可被移动的表达式被称作<em>纯右值 (prvalue)</em>表达式；</li>
<li>不拥有身份且不可被移动的表达式无法使用[<a href="https://zh.cppreference.com/w/cpp/language/value_category#cite_note-6">6]</a>。</li>
</ul>
<p>拥有身份的表达式被称作“泛左值 (glvalue) 表达式”。左值和亡值都是泛左值表达式。</p>
<p>可被移动的表达式被称作“右值 (rvalue) 表达式”。纯右值和亡值都是右值表达式。</p>
<h2 id="求值顺序">求值顺序</h2>
<p>求值任何表达式的任何部分，包括求值函数参数的顺序都<em>未指明</em>（除了下列的一些例外）。编译器能以任何顺序求值任何操作数和其他子表达式，并且可以在再次求值同一表达式时选择另一顺序。</p>
<p>C++ 中无从左到右或从右到左求值的概念。这不会与运算符的从左到右及从右到左结合性混淆：表达式 a() + b() + c() 由于 operator+ 的从左到右结合性被分析成 (a() + b()) + c()，但在运行时可以首先、最后或者在 a() 和 b() 之间对 c() 求值：</p>
<h3 id="规则">规则</h3>
<p>\1) <a href="https://zh.cppreference.com/w/cpp/language/expressions#.E5.AE.8C.E6.95.B4.E8.A1.A8.E8.BE.BE.E5.BC.8F">完整表达式</a>的每次值计算和副作用都按顺序早于下一个完整表达式的每个值计算和副作用。</p>
<p>\2) 任何<a href="https://zh.cppreference.com/w/cpp/language/expressions#.E8.BF.90.E7.AE.97.E7.AC.A6">运算符</a>的各操作数的值计算（但非副作用）都按顺序早于该运算符结果的值计算（但非副作用）。</p>
<p>\3) 调用函数时（无论函数是否内联，且无论是否使用显式函数调用语法），与任何实参表达式或与指代被调用函数的后缀表达式关联的每个值计算和副作用，都按顺序早于被调用函数体内的每个表达式或语句的执行。</p>
<p>\4) 内建<a href="https://zh.cppreference.com/w/cpp/language/operator_incdec#.E5.86.85.E5.BB.BA.E7.9A.84.E5.90.8E.E7.BD.AE.E8.BF.90.E7.AE.97.E7.AC.A6">后自增与后自减</a>运算符的<strong>值计算按顺序早于它的副作用</strong>。</p>
<p>\5) 内建<a href="https://zh.cppreference.com/w/cpp/language/operator_incdec#.E5.86.85.E5.BB.BA.E7.9A.84.E5.89.8D.E7.BD.AE.E8.BF.90.E7.AE.97.E7.AC.A6">前自增与前自减</a>运算符的<strong>副作用按顺序早于它的值计算</strong>（作为由复合赋值的定义所致的隐含规则）。</p>
<p>\6) 内建<a href="https://zh.cppreference.com/w/cpp/language/operator_logical">逻辑</a>与（AND）运算符 &amp;&amp; 和内建逻辑或（OR）运算符 || 的第一（左）操作数的每个值计算和副作用，<strong>按顺序早于第二（右）操作数</strong>的每个值计算和副作用。</p>
<p>\7) 与<a href="https://zh.cppreference.com/w/cpp/language/operator_other#.E6.9D.A1.E4.BB.B6.E8.BF.90.E7.AE.97.E7.AC.A6">条件运算符</a> <strong>?:</strong> 中的第一个表达式关联的每个值计算和副作用，都按顺序早于与第二或第三表达式关联的每个值计算和副作用。</p>
<p>\8) 内建<a href="https://zh.cppreference.com/w/cpp/language/operator_assignment#.E5.86.85.E5.BB.BA.E7.9A.84.E7.9B.B4.E6.8E.A5.E8.B5.8B.E5.80.BC">赋值</a>运算符和所有内建<a href="https://zh.cppreference.com/w/cpp/language/operator_assignment#.E5.86.85.E5.BB.BA.E7.9A.84.E5.A4.8D.E5.90.88.E8.B5.8B.E5.80.BC">复合</a>赋值运算符的副作用（修改左参数），都按顺序晚于左右参数的值计算（但非副作用），且按顺序早于赋值表达式的值计算（即早于返回指代被修改对象的引用之时）。</p>
<p>\9) 内建<a href="https://zh.cppreference.com/w/cpp/language/operator_other#.E5.86.85.E5.BB.BA.E7.9A.84.E9.80.97.E5.8F.B7.E8.BF.90.E7.AE.97.E7.AC.A6">逗号运算符</a> , 的第一个（左）参数的每个值计算和副作用都按顺序早于第二个（右）参数的每个值计算和副作用。</p>
<p>\10) <a href="https://zh.cppreference.com/w/cpp/language/list_initialization">列表初始化</a>中，在大括号中用逗号分隔的任何给定的初始化器子句的每个值计算和副作用都<em>按顺序早于</em>逗号后的任何给定的初始化器子句的每个值计算和副作用</p>
<p>\11) 如果某个函数调用既不按顺序早于又不按顺序晚于另一函数调用，那么它们是顺序不确定的（程序必须表现为<a href="https://zh.cppreference.com/w/cpp/language/as_if">如同</a>组成不同函数调用的 CPU 指令决不会交错，即使函数被内联也是如此）。</p>
<table>
<colgroup>
<col style="width: 85%" />
<col style="width: 14%" />
</colgroup>
<thead>
<tr class="header">
<th>规则 11 有一个例外：在 <a href="https://zh.cppreference.com/w/cpp/algorithm/execution_policy_tag_t"><code>std::execution::par_unseq</code></a> 执行策略下执行的标准库算法所作的函数调用是<em>无顺序的</em>，并且可以任意交错。</th>
<th>(C++17 起)</th>
</tr>
</thead>
<tbody>
</tbody>
</table>
<p>\12) 对分配函数（<a href="https://zh.cppreference.com/w/cpp/memory/new/operator_new"><code>operator new</code></a>）的调用相对于 <a href="https://zh.cppreference.com/w/cpp/language/new">new 表达式</a>中构造函数参数的求值来说，是顺序不确定的 (C++17 前)按顺序早于它 (C++17 起)。</p>
<p>\13) 从函数返回时，作为求值函数调用结果的<strong>临时量的复制初始化按顺序早于在 <a href="https://zh.cppreference.com/w/cpp/language/return">return 语句</a>的操作数末尾处对所有临时量的销毁</strong>，而这些销毁进一步<em>按顺序早于</em>对环绕 return 语句的块的所有局部变量的销毁。</p>
<table>
<colgroup>
<col style="width: 85%" />
<col style="width: 14%" />
</colgroup>
<thead>
<tr class="header">
<th>14) 函数调用表达式中，指名函数的表达式按顺序早于每个参数表达式和每个默认实参。<br />15) 函数调用表达式中，每个形参的初始化的值计算和副作用相对于任何其他形参的初始化的值计算和副作用是顺序不确定的。<br />16) 用运算符写法进行调用时，每个重载的运算符都会遵循它所重载的内建运算符的定序规则。<br />17) 下标表达式 E1[E2] 中，E1 的每个值计算和副作用都按顺序早于 E2 的每个值计算和副作用。<br />18) 成员指针表达式 E1.<em>E2 或 E1-&gt;</em>E2 中，E1 的每个值计算和副作用都按顺序早于 E2 的每个值计算和副作用（除非 E1 的动态类型不含 E2 所指的成员）。<br />19) 移位运算符表达式 E1 &lt;&lt; E2 和 E1 &gt;&gt; E2 中，E1 的每个值计算和副作用都按顺序早于 E2 的每个值计算和副作用。<br />20) 每个简单赋值表达式 E1 = E2 和每个复合赋值表达式 E1 @= E2 中，E2 的每个值计算和副作用都按顺序早于 E1 的每个值计算和副作用。<br />21) 带括号的初始化器中的逗号分隔的表达式列表中的每个表达式，如同函数调用一般求值（顺序不确定）。</th>
<th>(C++17 起)</th>
</tr>
</thead>
<tbody>
</tbody>
</table>
]]></content>
      <tags>
        <tag>cppreference</tag>
        <tag>language</tag>
        <tag>cpp</tag>
        <tag>com</tag>
        <tag>表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>rust</title>
    <url>/2023/03/8e79e78184fa.html</url>
    <content><![CDATA[<blockquote>

</blockquote>
<span id="more"></span>
<h1 id="安装">安装</h1>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl --proto &#x27;=https&#x27; --tlsv1.2 https://sh.rustup.rs -sSf | sh</span><br></pre></td></tr></table></figure>
<p>检查环境变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export PATH=&quot;$HOME/.cargo/bin:$PATH&quot;</span><br></pre></td></tr></table></figure>
<h2 id="rust-ecosystem">rust ecosystem</h2>
<ul>
<li><code>rustc</code>: the Rust compiler which turns <code>.rs</code> files into binaries and other intermediate formats.</li>
<li><code>cargo</code>: the Rust dependency manager and build tool. Cargo knows how to download dependencies hosted on <a href="https://crates.io/">https://crates.io</a> and it will pass them to <code>rustc</code> when building your project. Cargo also comes with a built-in test runner which is used to execute unit tests.</li>
<li><code>rustup</code>: the Rust toolchain installer and updater. This tool is used to install and update <code>rustc</code> and <code>cargo</code> when new versions of Rust is released. In addition, <code>rustup</code> can also download documentation for the standard library. You can have multiple versions of Rust installed at once and <code>rustup</code> will let you switch between them as needed.</li>
</ul>
<h2 id="hello-world">hello world</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cargo new coding</span><br><span class="line">cd coding</span><br><span class="line">cargo run</span><br><span class="line">cargo test</span><br><span class="line">cargo build</span><br><span class="line">cargo build --release</span><br></pre></td></tr></table></figure>
<p>You can add dependencies for your project by editing <code>Cargo.toml</code>. When you run <code>cargo</code> commands, it will automatically download and compile missing dependencies for you.</p>
<h1 id="syntax">syntax</h1>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Hello,?world!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;              <span class="comment">// Program entry point</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">x</span>: <span class="type">i32</span> = <span class="number">6</span>;  <span class="comment">// Mutable variable binding</span></span><br><span class="line">    <span class="built_in">print!</span>(<span class="string">&quot;&#123;x&#125;&quot;</span>);       <span class="comment">// Macro for printing</span></span><br><span class="line">    <span class="keyword">while</span> x != <span class="number">1</span> &#123;       <span class="comment">// No parenthesis around expression</span></span><br><span class="line">        <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span> &#123;  <span class="comment">// Math like in other languages</span></span><br><span class="line">            x = x / <span class="number">2</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            x = <span class="number">3</span> * x + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">print!</span>(<span class="string">&quot; -&gt; &#123;x&#125;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>interger default to be i32</li>
<li>string default to be utf-8</li>
<li>var default to be immutable</li>
</ul>
<h2 id="compile-time-guarantees">compile time guarantees</h2>
<ul>
<li>No uninitialized variables.</li>
<li>No memory leaks (<em>mostly</em>, see notes).</li>
<li>No double-frees.</li>
<li>No use-after-free.</li>
<li>No <code>NULL</code> pointers.</li>
<li>No forgotten locked mutexes.</li>
<li>No data races between threads.</li>
<li>No iterator invalidation.</li>
</ul>
<h2 id="runtime-guarantees">runtime guarantees</h2>
<ul>
<li><p>No undefined behavior at runtime:</p>
<ul>
<li><p>Array access is bounds checked.</p></li>
<li><p>Integer overflow is defined.</p></li>
</ul></li>
</ul>
<h2 id="loops">loops</h2>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">array</span> = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>];</span><br><span class="line">    <span class="built_in">print!</span>(<span class="string">&quot;Iterating over array:&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> <span class="variable">n</span> <span class="keyword">in</span> array &#123;</span><br><span class="line">        <span class="built_in">print!</span>(<span class="string">&quot; &#123;n&#125;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print!</span>(<span class="string">&quot;Iterating over range:&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">0</span>..<span class="number">3</span> &#123;</span><br><span class="line">        <span class="built_in">print!</span>(<span class="string">&quot; &#123;&#125;&quot;</span>, array[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="iterator">iterator</h2>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">v</span>: <span class="type">Vec</span>&lt;<span class="type">i8</span>&gt; = <span class="built_in">vec!</span>[<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>];</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">iter</span> = v.<span class="title function_ invoke__">iter</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;v[0]: &#123;:?&#125;&quot;</span>, iter.<span class="title function_ invoke__">next</span>());</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;v[1]: &#123;:?&#125;&quot;</span>, iter.<span class="title function_ invoke__">next</span>());</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;v[2]: &#123;:?&#125;&quot;</span>, iter.<span class="title function_ invoke__">next</span>());</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;No more items: &#123;:?&#125;&quot;</span>, iter.<span class="title function_ invoke__">next</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="const">const</h2>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> DIGEST_SIZE: <span class="type">usize</span> = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">const</span> ZERO: <span class="type">Option</span>&lt;<span class="type">u8</span>&gt; = <span class="title function_ invoke__">Some</span>(<span class="number">42</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">compute_digest</span>(text: &amp;<span class="type">str</span>) <span class="punctuation">-&gt;</span> [<span class="type">u8</span>; DIGEST_SIZE] &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">digest</span> = [ZERO.<span class="title function_ invoke__">unwrap_or</span>(<span class="number">0</span>); DIGEST_SIZE];</span><br><span class="line">    <span class="title function_ invoke__">for</span> (idx, &amp;b) <span class="keyword">in</span> text.<span class="title function_ invoke__">as_bytes</span>().<span class="title function_ invoke__">iter</span>().<span class="title function_ invoke__">enumerate</span>() &#123;</span><br><span class="line">        digest[idx % DIGEST_SIZE] = digest[idx % DIGEST_SIZE].<span class="title function_ invoke__">wrapping_add</span>(b);</span><br><span class="line">    &#125;</span><br><span class="line">    digest</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">digest</span> = <span class="title function_ invoke__">compute_digest</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Digest: &#123;digest:?&#125;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="static">static</h2>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> BANNER: &amp;<span class="type">str</span> = <span class="string">&quot;Welcome to RustOS 3.14&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;BANNER&#125;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>Mention that <code>const</code> behaves semantically similar to C++’s <code>constexpr</code>.</li>
<li><code>static</code>, on the other hand, is much more similar to a <code>const</code> or mutable global variable in C++.</li>
<li>It isn’t super common that one would need a runtime evaluated constant, but it is helpful and safer than using a static.</li>
</ul>
<h2 id="shadow">shadow</h2>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">a</span> = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">b</span> = &amp;a;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">a</span> = a + <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;a&#125; &#123;b&#125;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2 1</span></span><br></pre></td></tr></table></figure>
<h2 id="types">types</h2>
<table>
<thead>
<tr class="header">
<th></th>
<th>Types</th>
<th>Literals</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Signed integers</td>
<td><code>i8</code>, <code>i16</code>, <code>i32</code>, <code>i64</code>, <code>i128</code>, <code>isize</code></td>
<td><code>-10</code>, <code>0</code>, <code>1_000</code>, <code>123i64</code></td>
</tr>
<tr class="even">
<td>Unsigned integers</td>
<td><code>u8</code>, <code>u16</code>, <code>u32</code>, <code>u64</code>, <code>u128</code>, <code>usize</code></td>
<td><code>0</code>, <code>123</code>, <code>10u16</code></td>
</tr>
<tr class="odd">
<td>Floating point numbers</td>
<td><code>f32</code>, <code>f64</code></td>
<td><code>3.14</code>, <code>-10.0e20</code>, <code>2f32</code></td>
</tr>
<tr class="even">
<td>Strings</td>
<td><code>&amp;str</code></td>
<td><code>"foo"</code>, <code>r#"\\"#</code></td>
</tr>
<tr class="odd">
<td>Unicode scalar values</td>
<td><code>char</code> 32 bit wide</td>
<td><code>'a'</code>, <code>'α'</code>, <code>'∞'</code></td>
</tr>
<tr class="even">
<td>Byte strings</td>
<td><code>&amp;[u8]</code></td>
<td><code>b"abc"</code>, <code>br#" " "#</code></td>
</tr>
<tr class="odd">
<td>Booleans</td>
<td><code>bool</code> 8 bit wide</td>
<td><code>true</code>, <code>false</code></td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr class="header">
<th></th>
<th>Types</th>
<th>Literals</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Arrays</td>
<td><code>[T; N]</code></td>
<td><code>[20, 30, 40]</code>, <code>[0; 3]</code></td>
</tr>
<tr class="even">
<td>Tuples</td>
<td><code>()</code>, <code>(T,)</code>, <code>(T1, T2)</code>, …</td>
<td><code>()</code>, <code>('x',)</code>, <code>('x', 1.2)</code>, …</td>
</tr>
</tbody>
</table>
<h3 id="array">array</h3>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">a</span>: [<span class="type">i8</span>; <span class="number">10</span>] = [<span class="number">42</span>; <span class="number">10</span>];</span><br><span class="line">    a[<span class="number">5</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;a: &#123;:?&#125;&quot;</span>, a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//a: [42, 42, 42, 42, 42, 0, 42, 42, 42, 42]</span></span><br></pre></td></tr></table></figure>
<ul>
<li>Arrays have elements of the same type, <code>T</code>, and length, <code>N</code>, which is a compile-time constant. Note that the length of the array is <em>part of its type</em></li>
<li><code>&#123;:?&#125;</code> gives the debug output.</li>
<li>Adding <code>#</code>, eg <code>&#123;a:#?&#125;</code>, invokes a “pretty printing” format, which can be easier to read.(竖着打印?)</li>
</ul>
<h3 id="tuple">tuple</h3>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">t</span>: (<span class="type">i8</span>, <span class="type">bool</span>) = (<span class="number">7</span>, <span class="literal">true</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;1st index: &#123;&#125;&quot;</span>, t.<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;2nd index: &#123;&#125;&quot;</span>, t.<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>Like arrays, tuples have a fixed length.</li>
<li>Tuples group together values of <strong>different types</strong> into a compound type.</li>
</ul>
<h3 id="slices">slices</h3>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">a</span>: [<span class="type">i32</span>; <span class="number">6</span>] = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>, <span class="number">60</span>];</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;a: &#123;a:?&#125;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s</span>: &amp;[<span class="type">i32</span>] = &amp;a[<span class="number">2</span>..<span class="number">4</span>];</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;s: &#123;s:?&#125;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>slices always borrow</li>
</ul>
<h3 id="string-and-str">string and str</h3>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s1</span>: &amp;<span class="type">str</span> = <span class="string">&quot;World&quot;</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;s1: &#123;s1&#125;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">s2</span>: <span class="type">String</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Hello &quot;</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;s2: &#123;s2&#125;&quot;</span>);</span><br><span class="line">    s2.<span class="title function_ invoke__">push_str</span>(s1);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;s2: &#123;s2&#125;&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s3</span>: &amp;<span class="type">str</span> = &amp;s2[<span class="number">6</span>..];</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;s3: &#123;s3&#125;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">s1: World</span></span><br><span class="line"><span class="comment">s2: Hello </span></span><br><span class="line"><span class="comment">s2: Hello World</span></span><br><span class="line"><span class="comment">s3: World</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>&amp;str</code> an immutable reference to a <strong>string slice.</strong></li>
<li><code>String</code> a mutable string buffer.</li>
<li>As with many other types <code>String::from()</code> creates a string from a string literal; <code>String::new()</code> creates a new empty string, to which string data can be added using the <code>push()</code> and <code>push_str()</code> methods.</li>
<li>The <code>format!()</code> macro is a convenient way to generate an owned string from dynamic values. It accepts the same format specification as <code>println!()</code>.</li>
</ul>
<h3 id="enums">enums</h3>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">generate_random_number</span>() <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123;</span><br><span class="line">    <span class="number">4</span>  <span class="comment">// Chosen by fair dice roll. Guaranteed to be random.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[derive(Debug)]</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">CoinFlip</span> &#123;</span><br><span class="line">    Heads,</span><br><span class="line">    Tails,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">flip_coin</span>() <span class="punctuation">-&gt;</span> CoinFlip &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">random_number</span> = <span class="title function_ invoke__">generate_random_number</span>();</span><br><span class="line">    <span class="keyword">if</span> random_number % <span class="number">2</span> == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> CoinFlip::Heads;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> CoinFlip::Tails;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;You got: &#123;:?&#125;&quot;</span>, <span class="title function_ invoke__">flip_coin</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">WebEvent</span> &#123;</span><br><span class="line">    PageLoad,                 <span class="comment">// Variant without payload</span></span><br><span class="line">    <span class="title function_ invoke__">KeyPress</span>(<span class="type">char</span>),           <span class="comment">// Tuple struct variant</span></span><br><span class="line">    Click &#123; x: <span class="type">i64</span>, y: <span class="type">i64</span> &#125;, <span class="comment">// Full struct variant</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[rustfmt::skip]</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">inspect</span>(event: WebEvent) &#123;</span><br><span class="line">    <span class="keyword">match</span> event &#123;</span><br><span class="line">        WebEvent::PageLoad       =&gt; <span class="built_in">println!</span>(<span class="string">&quot;page loaded&quot;</span>),</span><br><span class="line">        WebEvent::<span class="title function_ invoke__">KeyPress</span>(c)    =&gt; <span class="built_in">println!</span>(<span class="string">&quot;pressed &#x27;&#123;c&#125;&#x27;&quot;</span>),</span><br><span class="line">        WebEvent::Click &#123; x, y &#125; =&gt; <span class="built_in">println!</span>(<span class="string">&quot;clicked at x=&#123;x&#125;, y=&#123;y&#125;&quot;</span>),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">load</span> = WebEvent::PageLoad;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">press</span> = WebEvent::<span class="title function_ invoke__">KeyPress</span>(<span class="string">&#x27;x&#x27;</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">click</span> = WebEvent::Click &#123; x: <span class="number">20</span>, y: <span class="number">80</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">inspect</span>(load);</span><br><span class="line">    <span class="title function_ invoke__">inspect</span>(press);</span><br><span class="line">    <span class="title function_ invoke__">inspect</span>(click);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>The match expression has a value. The value is the last expression in the match arm which was executed.</li>
</ul>
<h2 id="reference">reference</h2>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">x</span>: <span class="type">i32</span> = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">ref_x</span>: &amp;<span class="keyword">mut</span> <span class="type">i32</span> = &amp;<span class="keyword">mut</span> x; <span class="comment">//&amp;mut x 的&amp;mut 是必须要有的</span></span><br><span class="line">    *ref_x = <span class="number">20</span>;           </span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;x: &#123;x&#125;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>Be sure to note the difference between <code>let mut ref_x: &amp;i32</code> and <code>let ref_x: &amp;mut i32</code>. The first one represents a mutable reference which can be bound to different values, while the second represents a reference to a mutable value.</li>
</ul>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">ref_x</span>: &amp;<span class="type">i32</span>;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">x</span>: <span class="type">i32</span> = <span class="number">10</span>;</span><br><span class="line">        ref_x = &amp;x; <span class="comment">//error</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;ref_x: &#123;ref_x&#125;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>A reference is said to “borrow” the value it refers to.</li>
<li>Rust is tracking the lifetimes of all references to ensure they live long enough.</li>
</ul>
<h2 id="function">function</h2>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="title function_ invoke__">fizzbuzz_to</span>(<span class="number">20</span>);   <span class="comment">// Defined below, no forward declaration needed</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">is_divisible_by</span>(lhs: <span class="type">u32</span>, rhs: <span class="type">u32</span>) <span class="punctuation">-&gt;</span> <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> rhs == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;  <span class="comment">// Corner case, early return</span></span><br><span class="line">    &#125;</span><br><span class="line">    lhs % rhs == <span class="number">0</span>     <span class="comment">// The last expression in a block is the return value</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">fizzbuzz</span>(n: <span class="type">u32</span>) <span class="punctuation">-&gt;</span> () &#123;  <span class="comment">// No return value means returning the unit type `()`</span></span><br><span class="line">    <span class="title function_ invoke__">match</span> (<span class="title function_ invoke__">is_divisible_by</span>(n, <span class="number">3</span>), <span class="title function_ invoke__">is_divisible_by</span>(n, <span class="number">5</span>)) &#123;</span><br><span class="line">        (<span class="literal">true</span>,  <span class="literal">true</span>)  =&gt; <span class="built_in">println!</span>(<span class="string">&quot;fizzbuzz&quot;</span>),</span><br><span class="line">        (<span class="literal">true</span>,  <span class="literal">false</span>) =&gt; <span class="built_in">println!</span>(<span class="string">&quot;fizz&quot;</span>),</span><br><span class="line">        (<span class="literal">false</span>, <span class="literal">true</span>)  =&gt; <span class="built_in">println!</span>(<span class="string">&quot;buzz&quot;</span>),</span><br><span class="line">        (<span class="literal">false</span>, <span class="literal">false</span>) =&gt; <span class="built_in">println!</span>(<span class="string">&quot;&#123;n&#125;&quot;</span>),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">fizzbuzz_to</span>(n: <span class="type">u32</span>) &#123;  <span class="comment">// `-&gt; ()` is normally omitted</span></span><br><span class="line">    <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">1</span>..=n &#123;</span><br><span class="line">        <span class="title function_ invoke__">fizzbuzz</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>The last expression in a function body (or any block) becomes the return value. Simply omit the <code>;</code> at the end of the expression.</li>
<li>Some functions have no return value, and return the ‘unit type’, <code>()</code>. The compiler will infer this if the <code>-&gt; ()</code> return type is omitted.</li>
<li>The range expression in the <code>for</code> loop in <code>fizzbuzz_to()</code> contains <code>=n</code>, which causes it to include the upper bound. 去掉<code>=</code>就不包含 upper bound</li>
</ul>
<h3 id="overloading">overloading</h3>
<p>不允许重载, 不允许默认参数(可以用 macro?)</p>
<p>可以用泛型</p>
<h2 id="methods">methods</h2>
<p>they are simply functions that are associated with a particular type.</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Rectangle</span> &#123;</span><br><span class="line">    width: <span class="type">u32</span>,</span><br><span class="line">    height: <span class="type">u32</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Rectangle</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">area</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">u32</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.width * <span class="keyword">self</span>.height</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">inc_width</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, delta: <span class="type">u32</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.width += delta;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">rect</span> = Rectangle &#123; width: <span class="number">10</span>, height: <span class="number">5</span> &#125;;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;old area: &#123;&#125;&quot;</span>, rect.<span class="title function_ invoke__">area</span>());</span><br><span class="line">    rect.<span class="title function_ invoke__">inc_width</span>(<span class="number">5</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;new area: &#123;&#125;&quot;</span>, rect.<span class="title function_ invoke__">area</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="match">match</h2>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="comment">// destructure</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Result</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">Ok</span>(<span class="type">i32</span>),</span><br><span class="line">    <span class="title function_ invoke__">Err</span>(<span class="type">String</span>),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">divide_in_two</span>(n: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">Result</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="type">Result</span>::<span class="title function_ invoke__">Ok</span>(n / <span class="number">2</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">Result</span>::<span class="title function_ invoke__">Err</span>(<span class="built_in">format!</span>(<span class="string">&quot;cannot divide &#123;n&#125; into two equal parts&quot;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">n</span> = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">match</span> <span class="title function_ invoke__">divide_in_two</span>(n) &#123;</span><br><span class="line">        <span class="type">Result</span>::<span class="title function_ invoke__">Ok</span>(half) =&gt; <span class="built_in">println!</span>(<span class="string">&quot;&#123;n&#125; divided in two is &#123;half&#125;&quot;</span>),</span><br><span class="line">        <span class="type">Result</span>::<span class="title function_ invoke__">Err</span>(msg) =&gt; <span class="built_in">println!</span>(<span class="string">&quot;sorry, an error happened: &#123;msg&#125;&quot;</span>),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// array</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="title function_ invoke__">inspect</span>(&amp;[<span class="number">0</span>, -<span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line">    <span class="title function_ invoke__">inspect</span>(&amp;[<span class="number">0</span>, -<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[rustfmt::skip]</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">inspect</span>(slice: &amp;[<span class="type">i32</span>]) &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Tell me about &#123;slice:?&#125;&quot;</span>);</span><br><span class="line">    <span class="keyword">match</span> slice &#123;</span><br><span class="line">        &amp;[<span class="number">0</span>, y, z] =&gt; <span class="built_in">println!</span>(<span class="string">&quot;First is 0, y = &#123;y&#125;, and z = &#123;z&#125;&quot;</span>),</span><br><span class="line">        &amp;[<span class="number">1</span>, ..]   =&gt; <span class="built_in">println!</span>(<span class="string">&quot;First is 1 and the rest were ignored&quot;</span>),</span><br><span class="line">        _          =&gt; <span class="built_in">println!</span>(<span class="string">&quot;All elements were ignored&quot;</span>),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[rustfmt::skip]</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">pair</span> = (<span class="number">2</span>, -<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Tell me about &#123;pair:?&#125;&quot;</span>);</span><br><span class="line">    <span class="keyword">match</span> pair &#123;</span><br><span class="line">        (x, y) <span class="keyword">if</span> x == y     =&gt; <span class="built_in">println!</span>(<span class="string">&quot;These are twins&quot;</span>),</span><br><span class="line">        (x, y) <span class="keyword">if</span> x + y == <span class="number">0</span> =&gt; <span class="built_in">println!</span>(<span class="string">&quot;Antimatter, kaboom!&quot;</span>),</span><br><span class="line">        (x, _) <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">1</span> =&gt; <span class="built_in">println!</span>(<span class="string">&quot;The first one is odd&quot;</span>),</span><br><span class="line">        _                    =&gt; <span class="built_in">println!</span>(<span class="string">&quot;No correlation...&quot;</span>),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The <code>_</code> pattern is a wildcard pattern which matches any value.</p>
<h2 id="block">block</h2>
<p>A block in Rust has a value and a type: the value is the last expression of the block.</p>
<p>However if the last expression ends with <code>;</code>, then the resulting value and type is <code>()</code>.</p>
<h2 id="while">while</h2>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">v</span> = <span class="built_in">vec!</span>[<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>];</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">iter</span> = v.<span class="title function_ invoke__">into_iter</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">let</span> <span class="variable">Some</span>(x) = iter.<span class="title function_ invoke__">next</span>() &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;x: &#123;x&#125;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="标签">标签</h2>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">v</span> = <span class="built_in">vec!</span>[<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>];</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">iter</span> = v.<span class="title function_ invoke__">into_iter</span>();</span><br><span class="line">    <span class="symbol">&#x27;outer</span>: <span class="keyword">while</span> <span class="keyword">let</span> <span class="variable">Some</span>(x) = iter.<span class="title function_ invoke__">next</span>() &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;x: &#123;x&#125;&quot;</span>);</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">i</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> i &lt; x &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">&quot;x: &#123;x&#125;, i: &#123;i&#125;&quot;</span>);</span><br><span class="line">            i += <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> i == <span class="number">3</span> &#123;</span><br><span class="line">                <span class="keyword">break</span> <span class="symbol">&#x27;outer</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="memory">memory</h1>
<p>Full control <em>and</em> safety via compile time enforcement of correct memory management.</p>
<h2 id="stack">stack</h2>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s1</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> s1   stack                 heap                           </span><br><span class="line"> ┌────────┬──────┐        ┌─────┐</span><br><span class="line"> │ptr     │   ───┼───────▶│hello│</span><br><span class="line"> │len     │   <span class="number">5</span>  │        └─────┘</span><br><span class="line"> │capacity│   <span class="number">5</span>  │               </span><br><span class="line"> └───────────────┘     </span><br></pre></td></tr></table></figure>
<h2 id="ownership">ownership</h2>
<p>All variable bindings have a <strong>scope</strong> where they are valid and it is an error to use a variable outside its scope:</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Point</span>(<span class="type">i32</span>, <span class="type">i32</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">p</span> = <span class="title function_ invoke__">Point</span>(<span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;x: &#123;&#125;&quot;</span>, p.<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;y: &#123;&#125;&quot;</span>, p.<span class="number">1</span>);<span class="comment">// error</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="move">move</h2>
<p>An assignment will transfer ownership between variables: the data is <strong>moved</strong> when assignment</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s1</span>: <span class="type">String</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Hello!&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s2</span>: <span class="type">String</span> = s1;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;s2: &#123;s2&#125;&quot;</span>);</span><br><span class="line">    <span class="comment">// println!(&quot;s1: &#123;s1&#125;&quot;); error</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>There is always <em>exactly</em> one variable binding which owns a value.</li>
<li>In Rust, clones are explicit (by using <code>clone</code>).</li>
<li>When you pass a value to a function, the value is assigned to the function parameter. This transfers ownership.</li>
</ul>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">say_hello</span>(name: <span class="type">String</span>) &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Hello &#123;name&#125;&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">name</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Alice&quot;</span>);</span><br><span class="line">    <span class="title function_ invoke__">say_hello</span>(name);</span><br><span class="line">    <span class="comment">// say_hello(name); error, 已经转移到函数里</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>move 是默认的, 但是有些类型 copy 是默认的, 比如 int 等</li>
<li>Copying and cloning are not the same thing:
<ul>
<li>Copying refers to <strong>bitwise copies</strong> of memory regions and does not work on arbitrary objects.</li>
<li>Copying does not allow for custom logic (unlike copy constructors in C++).</li>
<li>Cloning is a more general operation and also allows for custom behavior by implementing the <code>Clone</code> trait.</li>
<li>Copying does not work on types that implement the <code>Drop</code> trait.</li>
</ul></li>
</ul>
<h2 id="borrow">borrow</h2>
<p>Instead of transferring ownership when calling a function, you can let a function <em>borrow</em> the value:</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="meta">#[derive(Debug)]</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Point</span>(<span class="type">i32</span>, <span class="type">i32</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">add</span>(p1: &amp;Point, p2: &amp;Point) <span class="punctuation">-&gt;</span> Point &#123;</span><br><span class="line">    <span class="title function_ invoke__">Point</span>(p1.<span class="number">0</span> + p2.<span class="number">0</span>, p1.<span class="number">1</span> + p2.<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">p1</span> = <span class="title function_ invoke__">Point</span>(<span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">p2</span> = <span class="title function_ invoke__">Point</span>(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">p3</span> = <span class="title function_ invoke__">add</span>(&amp;p1, &amp;p2);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;p1:?&#125; + &#123;p2:?&#125; = &#123;p3:?&#125;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>The <code>add</code> function <strong>borrows</strong> two points and returns a new point.</li>
<li>The caller <strong>retains ownership</strong> of the inputs.</li>
</ul>
<p>Rust puts constraints on the ways you can borrow values:</p>
<ul>
<li>You can have one or more <code>&amp;T</code> values at any given time, <em>or</em></li>
<li>You can have exactly one <code>&amp;mut T</code> value.</li>
</ul>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">a</span>: <span class="type">i32</span> = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">b</span>: &amp;<span class="type">i32</span> = &amp;a;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">c</span>: &amp;<span class="keyword">mut</span> <span class="type">i32</span> = &amp;<span class="keyword">mut</span> a; <span class="comment">//error</span></span><br><span class="line">        *c = <span class="number">20</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;a: &#123;a&#125;&quot;</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;b: &#123;b&#125;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>The above code does not compile because <code>a</code> is borrowed as mutable (through <code>c</code>) and as immutable (through <code>b</code>) at the same time.</li>
<li>Move the <code>println!</code> statement for <code>b</code> before the scope that introduces <code>c</code> to make the code compile.</li>
<li>After that change, <strong>the compiler realizes that <code>b</code> is only ever used before the new mutable borrow of <code>a</code> through <code>c</code>. This is a feature of the borrow checker called “non-lexical lifetimes”.</strong></li>
</ul>
<h2 id="lifetime">lifetime</h2>
<ul>
<li>Read <code>&amp;'a Point</code> as “a borrowed <code>Point</code> which is valid for at least the lifetime <code>a</code>”.</li>
<li>Lifetimes are always inferred by the compiler: you cannot assign a lifetime yourself.
<ul>
<li>Lifetime annotations create constraints; the compiler verifies that there is a valid solution.</li>
</ul></li>
</ul>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="meta">#[derive(Debug)]</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Point</span>(<span class="type">i32</span>, <span class="type">i32</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">left_most</span>&lt;<span class="symbol">&#x27;a</span>&gt;(p1: &amp;<span class="symbol">&#x27;a</span> Point, p2: &amp;<span class="symbol">&#x27;a</span> Point) <span class="punctuation">-&gt;</span> &amp;<span class="symbol">&#x27;a</span> Point &#123;</span><br><span class="line">    <span class="keyword">if</span> p1.<span class="number">0</span> &lt; p2.<span class="number">0</span> &#123; p1 &#125; <span class="keyword">else</span> &#123; p2 &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">p1</span>: Point = <span class="title function_ invoke__">Point</span>(<span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">p2</span>: Point = <span class="title function_ invoke__">Point</span>(<span class="number">20</span>, <span class="number">20</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">p3</span>: &amp;Point = <span class="title function_ invoke__">left_most</span>(&amp;p1, &amp;p2);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;left-most point: &#123;:?&#125;&quot;</span>, p3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>'a</code> is a generic parameter, it is inferred by the compiler.</li>
<li>Lifetimes start with <code>'</code> and <code>'a</code> is a typical default name.</li>
<li>Another way to explain it:
<ul>
<li>Two references to two values are borrowed by a function and the function returns another reference.</li>
<li>It must have come from one of those two inputs (or from a global variable).</li>
<li>Which one is it? The compiler needs to to know, <strong>so at the call site the returned reference is not used for longer than a variable from where the reference came from.</strong></li>
</ul></li>
</ul>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="meta">#[derive(Debug)]</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Highlight</span>&lt;<span class="symbol">&#x27;doc</span>&gt;(&amp;<span class="symbol">&#x27;doc</span> <span class="type">str</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">erase</span>(text: <span class="type">String</span>) &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Bye &#123;text&#125;!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">text</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;The quick brown fox jumps over the lazy dog.&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">fox</span> = <span class="title function_ invoke__">Highlight</span>(&amp;text[<span class="number">4</span>..<span class="number">19</span>]);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">dog</span> = <span class="title function_ invoke__">Highlight</span>(&amp;text[<span class="number">35</span>..<span class="number">43</span>]);</span><br><span class="line">    <span class="comment">// erase(text); </span></span><br><span class="line">    <span class="comment">// cannot move out of `text` because it is borrowed</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;fox:?&#125;&quot;</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;dog:?&#125;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="struct">struct</h1>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    name: <span class="type">String</span>,</span><br><span class="line">    age: <span class="type">u8</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">peter</span> = Person &#123;</span><br><span class="line">        name: <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Peter&quot;</span>),</span><br><span class="line">        age: <span class="number">27</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125; is &#123;&#125; years old&quot;</span>, peter.name, peter.age);</span><br><span class="line">    </span><br><span class="line">    peter.age = <span class="number">28</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125; is &#123;&#125; years old&quot;</span>, peter.name, peter.age);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> <span class="variable">jackie</span> = Person &#123;</span><br><span class="line">        name: <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Jackie&quot;</span>),</span><br><span class="line">        ..peter</span><br><span class="line">      <span class="comment">// the syntax ..peter allows us to copy the majority of the fields from the old struct without having to explicitly type it all out. It must always be the last element.</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125; is &#123;&#125; years old&quot;</span>, jackie.name, jackie.age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Point</span>(<span class="type">i32</span>, <span class="type">i32</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">p</span> = <span class="title function_ invoke__">Point</span>(<span class="number">17</span>, <span class="number">23</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;(&#123;&#125;, &#123;&#125;)&quot;</span>, p.<span class="number">0</span>, p.<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>Unlike in C++, there is no inheritance between structs.</li>
</ul>
<p>tuple</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Point</span>(<span class="type">i32</span>, <span class="type">i32</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">p</span> = <span class="title function_ invoke__">Point</span>(<span class="number">17</span>, <span class="number">23</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;(&#123;&#125;, &#123;&#125;)&quot;</span>, p.<span class="number">0</span>, p.<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="meta">#[derive(Debug)]</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    name: <span class="type">String</span>,</span><br><span class="line">    age: <span class="type">u8</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">new</span>(name: <span class="type">String</span>, age: <span class="type">u8</span>) <span class="punctuation">-&gt;</span> Person &#123;</span><br><span class="line">        Person &#123; name, age &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//or</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">new</span>(name: <span class="type">String</span>, age: <span class="type">u8</span>) <span class="punctuation">-&gt;</span> <span class="keyword">Self</span> &#123;</span><br><span class="line">        <span class="keyword">Self</span> &#123; name, age &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">peter</span> = Person::<span class="title function_ invoke__">new</span>(<span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Peter&quot;</span>), <span class="number">27</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;peter:?&#125;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>default</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="meta">#[derive(Debug)]</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    name: <span class="type">String</span>,</span><br><span class="line">    age: <span class="type">u8</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Default</span> <span class="keyword">for</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">default</span>() <span class="punctuation">-&gt;</span> Person &#123;</span><br><span class="line">        Person &#123;</span><br><span class="line">            name: <span class="string">&quot;Bot&quot;</span>.<span class="title function_ invoke__">to_string</span>(),</span><br><span class="line">            age: <span class="number">0</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">create_default</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">tmp</span> = Person &#123;</span><br><span class="line">        ..<span class="built_in">Default</span>::<span class="title function_ invoke__">default</span>()</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">tmp</span> = Person &#123;</span><br><span class="line">        name: <span class="string">&quot;Sam&quot;</span>.<span class="title function_ invoke__">to_string</span>(),</span><br><span class="line">        ..<span class="built_in">Default</span>::<span class="title function_ invoke__">default</span>()</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>Methods are defined in the <code>impl</code> block.</li>
<li>Use <code>&#123;:#?&#125;</code> when printing structs to request the <code>Debug</code> representation.</li>
</ul>
<h2 id="methods-1">methods</h2>
<p>You do this with an <code>impl</code> block:</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="meta">#[derive(Debug)]</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    name: <span class="type">String</span>,</span><br><span class="line">    age: <span class="type">u8</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">say_hello</span>(&amp;<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;Hello, my name is &#123;&#125;&quot;</span>, <span class="keyword">self</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">say_goodbye</span>(&amp;<span class="keyword">self</span>)&#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;gb, my name is &#123;&#125;&quot;</span>, <span class="keyword">self</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">peter</span> = Person &#123;</span><br><span class="line">        name: <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Peter&quot;</span>),</span><br><span class="line">        age: <span class="number">27</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    peter.<span class="title function_ invoke__">say_hello</span>();</span><br><span class="line">    peter.<span class="title function_ invoke__">say_goodbye</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>Point out the use of the keyword <code>self</code>, a method receiver.</p>
<ul>
<li>Show that it is an abbreviated term for <code>self:&amp;Self</code> and perhaps show how the struct name could also be used.</li>
<li>Explain that <code>Self</code> is a type alias for the type the <code>impl</code> block is in and can be used elsewhere in the block.</li>
<li>Note how <code>self</code> is used like other structs and dot notation can be used to refer to individual fields.</li>
<li>This might be a good time to demonstrate how the <code>&amp;self</code> differs from <code>self</code> by modifying the code and trying to run say_hello twice.</li>
</ul></li>
<li><p>The <code>&amp;self</code> above indicates that the method borrows the object immutably. There are other possible receivers for a method:</p>
<ul>
<li><code>&amp;self</code>: <strong>borrows the object from the caller using a shared and immutable reference.</strong> The object can be used again afterwards.</li>
<li><code>&amp;mut self</code>: borrows the object from the caller using a unique and <strong>mutable</strong> reference. The object can be used again afterwards.</li>
<li><code>self</code>: <strong>takes ownership of the object</strong> and moves it away from the caller. The method becomes the owner of the object. The object will be dropped (deallocated) when the method returns, unless its ownership is explicitly transmitted.</li>
<li><code>mut self</code>: same as above, but while the method owns the object, it can <strong>mutate</strong> it too. Complete ownership does not automatically mean mutability.</li>
<li>No receiver: this becomes a <strong>static method</strong> on the struct. Typically used to create constructors which are called <code>new</code> by convention.</li>
</ul>
<p>Beyond variants on <code>self</code>, there are also <a href="https://doc.rust-lang.org/reference/special-types-and-traits.html">special wrapper types</a> allowed to be receiver types, such as <code>Box&lt;Self&gt;</code>.</p></li>
<li><p>Note that although the method receivers are different, the non-static functions are called the same way in the main body. <strong>Rust enables automatic referencing and dereferencing when calling methods. Rust automatically adds in the <code>&amp;</code>, <code>*</code>, <code>muts</code></strong> so that that object matches the method signature.</p></li>
</ul>
<h1 id="standard-library">standard library</h1>
<h2 id="option-and-result">option and result</h2>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">numbers</span> = <span class="built_in">vec!</span>[<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>];</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">first</span>: <span class="type">Option</span>&lt;&amp;<span class="type">i8</span>&gt; = numbers.<span class="title function_ invoke__">first</span>();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;first: &#123;first:?&#125;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">idx</span>: <span class="type">Result</span>&lt;<span class="type">usize</span>, <span class="type">usize</span>&gt; = numbers.<span class="title function_ invoke__">binary_search</span>(&amp;<span class="number">10</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;idx: &#123;idx:?&#125;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>Option&lt;&amp;T&gt;</code> has zero space overhead compared to <code>&amp;T</code>.</li>
<li><code>Result</code> is the standard type to implement error handling as we will see on Day 3.</li>
<li><code>binary_search</code> returns <code>Result&lt;usize, usize&gt;</code>
<ul>
<li>If found, <code>Result::Ok</code> holds the index where the element is found.</li>
<li>Otherwise, <code>Result::Err</code> contains the index where such an element should be inserted.</li>
</ul></li>
</ul>
<h2 id="string">string</h2>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">s1</span> = <span class="type">String</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line">    s1.<span class="title function_ invoke__">push_str</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;s1: len = &#123;&#125;, capacity = &#123;&#125;&quot;</span>, s1.<span class="title function_ invoke__">len</span>(), s1.<span class="title function_ invoke__">capacity</span>());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">s2</span> = <span class="type">String</span>::<span class="title function_ invoke__">with_capacity</span>(s1.<span class="title function_ invoke__">len</span>() + <span class="number">1</span>);</span><br><span class="line">    s2.<span class="title function_ invoke__">push_str</span>(&amp;s1);</span><br><span class="line">    s2.<span class="title function_ invoke__">push</span>(<span class="string">&#x27;!&#x27;</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;s2: len = &#123;&#125;, capacity = &#123;&#125;&quot;</span>, s2.<span class="title function_ invoke__">len</span>(), s2.<span class="title function_ invoke__">capacity</span>());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s3</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;🇨🇭&quot;</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;s3: len = &#123;&#125;, number of chars = &#123;&#125;&quot;</span>, s3.<span class="title function_ invoke__">len</span>(),</span><br><span class="line">             s3.<span class="title function_ invoke__">chars</span>().<span class="title function_ invoke__">count</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>String</code> implements <code>Deref&lt;Target = str&gt;</code> which means that you can call all <code>str</code> methods on a <code>String</code>.</li>
<li>When people refer to strings they could either be talking about <code>&amp;str</code> or <code>String</code>.</li>
</ul>
<h2 id="vec">Vec</h2>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">v1</span> = <span class="type">Vec</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line">    v1.<span class="title function_ invoke__">push</span>(<span class="number">42</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;v1: len = &#123;&#125;, capacity = &#123;&#125;&quot;</span>, v1.<span class="title function_ invoke__">len</span>(), v1.<span class="title function_ invoke__">capacity</span>());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">v2</span> = <span class="type">Vec</span>::<span class="title function_ invoke__">with_capacity</span>(v1.<span class="title function_ invoke__">len</span>() + <span class="number">1</span>);</span><br><span class="line">    v2.<span class="title function_ invoke__">extend</span>(v1.<span class="title function_ invoke__">iter</span>());</span><br><span class="line">    v2.<span class="title function_ invoke__">push</span>(<span class="number">9999</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;v2: len = &#123;&#125;, capacity = &#123;&#125;&quot;</span>, v2.<span class="title function_ invoke__">len</span>(), v2.<span class="title function_ invoke__">capacity</span>());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Canonical macro to initialize a vector with elements.</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">v3</span> = <span class="built_in">vec!</span>[<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Retain only the even elements.</span></span><br><span class="line">    v3.<span class="title function_ invoke__">retain</span>(|x| x % <span class="number">2</span> == <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;v3:?&#125;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Remove consecutive duplicates.</span></span><br><span class="line">    v3.<span class="title function_ invoke__">dedup</span>();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;v3:?&#125;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>The data it contains is stored on the heap. This means the amount of data doesn’t need to be known at compile time. It can grow or shrink at runtime.</li>
</ul>
<h2 id="hashmap">hashmap</h2>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::collections::HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">page_counts</span> = HashMap::<span class="title function_ invoke__">new</span>();</span><br><span class="line">    page_counts.<span class="title function_ invoke__">insert</span>(<span class="string">&quot;Adventures of Huckleberry Finn&quot;</span>.<span class="title function_ invoke__">to_string</span>(), <span class="number">207</span>);</span><br><span class="line">    page_counts.<span class="title function_ invoke__">insert</span>(<span class="string">&quot;Grimms&#x27; Fairy Tales&quot;</span>.<span class="title function_ invoke__">to_string</span>(), <span class="number">751</span>);</span><br><span class="line">    page_counts.<span class="title function_ invoke__">insert</span>(<span class="string">&quot;Pride and Prejudice&quot;</span>.<span class="title function_ invoke__">to_string</span>(), <span class="number">303</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> !page_counts.<span class="title function_ invoke__">contains_key</span>(<span class="string">&quot;Les Misérables&quot;</span>) &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;We know about &#123;&#125; books, but not Les Misérables.&quot;</span>,</span><br><span class="line">                 page_counts.<span class="title function_ invoke__">len</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> <span class="variable">book</span> <span class="keyword">in</span> [<span class="string">&quot;Pride and Prejudice&quot;</span>, <span class="string">&quot;Alice&#x27;s Adventure in Wonderland&quot;</span>] &#123;</span><br><span class="line">        <span class="keyword">match</span> page_counts.<span class="title function_ invoke__">get</span>(book) &#123;</span><br><span class="line">            <span class="title function_ invoke__">Some</span>(count) =&gt; <span class="built_in">println!</span>(<span class="string">&quot;&#123;book&#125;: &#123;count&#125; pages&quot;</span>),</span><br><span class="line">            <span class="literal">None</span> =&gt; <span class="built_in">println!</span>(<span class="string">&quot;&#123;book&#125; is unknown.&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Use the .entry() method to insert a value if nothing is found.</span></span><br><span class="line">    <span class="keyword">for</span> <span class="variable">book</span> <span class="keyword">in</span> [<span class="string">&quot;Pride and Prejudice&quot;</span>, <span class="string">&quot;Alice&#x27;s Adventure in Wonderland&quot;</span>] &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">page_count</span>: &amp;<span class="keyword">mut</span> <span class="type">i32</span> = page_counts.<span class="title function_ invoke__">entry</span>(book.<span class="title function_ invoke__">to_string</span>()).<span class="title function_ invoke__">or_insert</span>(<span class="number">0</span>);</span><br><span class="line">        *page_count += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;page_counts:#?&#125;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="box">box</h2>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">five</span> = <span class="type">Box</span>::<span class="title function_ invoke__">new</span>(<span class="number">5</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;five: &#123;&#125;&quot;</span>, *five);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>a box is never null</p>
<h2 id="rc">Rc</h2>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::rc::Rc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">a</span> = Rc::<span class="title function_ invoke__">new</span>(<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">b</span> = a.<span class="title function_ invoke__">clone</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;a: &#123;a&#125;&quot;</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;b: &#123;b&#125;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="mod">mod</h2>
<p>精读到此</p>
<h1 id="section">?</h1>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Tuples can be used as function arguments and as return values</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">reverse</span>(pair: (<span class="type">i32</span>, <span class="type">bool</span>)) <span class="punctuation">-&gt;</span> (<span class="type">bool</span>, <span class="type">i32</span>) &#123;</span><br><span class="line">    <span class="comment">// `let` can be used to bind the members of a tuple to variables</span></span><br><span class="line">    <span class="keyword">let</span> (int_param, bool_param) = pair;</span><br><span class="line"></span><br><span class="line">    (bool_param, int_param)</span><br><span class="line">  <span class="comment">//return ?</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The following struct is for the activity.</span></span><br><span class="line"><span class="meta">#[derive(Debug)]</span><span class="comment">//?</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Matrix</span>(<span class="type">f32</span>, <span class="type">f32</span>, <span class="type">f32</span>, <span class="type">f32</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="comment">// A tuple with a bunch of different types</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">long_tuple</span> = (<span class="number">1u8</span>, <span class="number">2u16</span>, <span class="number">3u32</span>, <span class="number">4u64</span>,</span><br><span class="line">                      -<span class="number">1i8</span>, -<span class="number">2i16</span>, -<span class="number">3i32</span>, -<span class="number">4i64</span>,</span><br><span class="line">                      <span class="number">0.1f32</span>, <span class="number">0.2f64</span>,</span><br><span class="line">                      <span class="string">&#x27;a&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Values can be extracted from the tuple using tuple indexing</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;long tuple first value: &#123;&#125;&quot;</span>, long_tuple.<span class="number">0</span>);<span class="comment">// .</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;long tuple second value: &#123;&#125;&quot;</span>, long_tuple.<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Tuples can be tuple members</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">tuple_of_tuples</span> = ((<span class="number">1u8</span>, <span class="number">2u16</span>, <span class="number">2u32</span>), (<span class="number">4u64</span>, -<span class="number">1i8</span>), -<span class="number">2i16</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Tuples are printable</span></span><br><span class="line">  <span class="comment">//&#123;:?&#125;?</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;tuple of tuples: &#123;:?&#125;&quot;</span>, tuple_of_tuples);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// But long Tuples (more than 12 elements) cannot be printed</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">pair</span> = (<span class="number">1</span>, <span class="literal">true</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;pair is &#123;:?&#125;&quot;</span>, pair);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;the reversed pair is &#123;:?&#125;&quot;</span>, <span class="title function_ invoke__">reverse</span>(pair));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// To create one element tuples, the comma is required to tell them apart</span></span><br><span class="line">    <span class="comment">// from a literal surrounded by parentheses</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;one element tuple: &#123;:?&#125;&quot;</span>, (<span class="number">5u32</span>,));</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;just an integer: &#123;:?&#125;&quot;</span>, (<span class="number">5u32</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//tuples can be destructured to create bindings</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">tuple</span> = (<span class="number">1</span>, <span class="string">&quot;hello&quot;</span>, <span class="number">4.5</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> (a, b, c, d) = tuple;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;:?&#125;, &#123;:?&#125;, &#123;:?&#125;, &#123;:?&#125;&quot;</span>, a, b, c, d);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">matrix</span> = <span class="title function_ invoke__">Matrix</span>(<span class="number">1.1</span>, <span class="number">1.2</span>, <span class="number">2.1</span>, <span class="number">2.2</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;:?&#125;&quot;</span>, matrix);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">xs</span>: [<span class="type">i32</span>; <span class="number">5</span>] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// All elements can be initialized to the same value</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">ys</span>: [<span class="type">i32</span>; <span class="number">500</span>] = [<span class="number">0</span>; <span class="number">500</span>];</span><br></pre></td></tr></table></figure>
<p>Slices are similar to arrays, but their length is not known at compile time. Instead, a slice is a two-word object, <strong>the first word is a pointer to the data, and the second word is the length of the slice.</strong></p>
]]></content>
      <categories>
        <category>undefined</category>
      </categories>
      <tags>
        <tag>string</tag>
        <tag>println</tag>
        <tag>let</tag>
        <tag>tuple</tag>
        <tag>self</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql必知必会读书笔记</title>
    <url>/2022/10/c6d69f846995.html</url>
    <content><![CDATA[<blockquote>

</blockquote>
<span id="more"></span>
<h1 id="基本语法">基本语法</h1>
<h2 id="primary-key">primary key:</h2>
<ul>
<li>不允许修改或更新</li>
<li>不能重用(如果删除, 他的主键不能赋给以后的新行)</li>
<li>不允许 null 值</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> A, B</span><br><span class="line"><span class="keyword">from</span> t</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> A, B;</span><br></pre></td></tr></table></figure>
<p>仅在多个行有相同的 A 值时, 才按照 B 排序</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> A, B</span><br><span class="line"><span class="keyword">from</span> t</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> A <span class="keyword">DESC</span></span><br><span class="line"># 默认升序, <span class="keyword">desc</span> 降序, 每个 <span class="keyword">desc</span> 只作用于一个列</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> A, B</span><br><span class="line"><span class="keyword">from</span> t</span><br><span class="line"><span class="keyword">where</span> A <span class="operator">=</span> <span class="number">10</span> <span class="keyword">and</span> B <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"># <span class="keyword">where</span> A <span class="operator">&lt;</span> <span class="number">10</span>;</span><br><span class="line"># <span class="keyword">where</span> A bwtween <span class="number">1</span> <span class="keyword">and</span> <span class="number">2</span>;</span><br><span class="line"># <span class="keyword">where</span> A <span class="keyword">is</span> <span class="keyword">null</span></span><br><span class="line"># <span class="keyword">where</span> A <span class="operator">=</span> <span class="number">10</span> <span class="keyword">or</span> B <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"># <span class="keyword">and</span> 优先级高于 <span class="keyword">or</span></span><br><span class="line"># <span class="keyword">where</span> A <span class="keyword">in</span> (<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"># <span class="keyword">where</span> <span class="keyword">not</span> A <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"># <span class="keyword">where</span> A <span class="keyword">like</span> <span class="string">&#x27;_[^Bb][Aa]A%&#x27;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> concat(A, <span class="string">&#x27;,&#x27;</span>, B) <span class="keyword">as</span> C, </span><br><span class="line">			 A<span class="operator">*</span>B <span class="keyword">as</span> D</span><br><span class="line"><span class="keyword">from</span> t;</span><br></pre></td></tr></table></figure>
<h2 id="聚集函数">聚集函数</h2>
<ul>
<li>avg</li>
<li>count</li>
<li>max</li>
<li>min</li>
<li>sum</li>
</ul>
<p>​ 只包含不同的值: distinct</p>
<h2 id="分组">分组</h2>
<p>除聚集计算语句之外, select 语句中的每个列都必须在 group by 语句中出现</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> A, <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> amount</span><br><span class="line"><span class="keyword">from</span> t</span><br><span class="line"><span class="keyword">where</span> B <span class="operator">&gt;</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> A</span><br><span class="line"><span class="keyword">having</span> <span class="built_in">count</span>(<span class="operator">*</span>)<span class="operator">&gt;</span><span class="number">2</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> A;</span><br></pre></td></tr></table></figure>
<h2 id="子查询">子查询</h2>
<p>作为子查询的 select 只能查询单个列</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> A</span><br><span class="line"><span class="keyword">from</span> t</span><br><span class="line"><span class="keyword">where</span> B <span class="keyword">in</span></span><br><span class="line">(<span class="keyword">select</span> C <span class="keyword">from</span> t0);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> cust_name, cust_state, </span><br><span class="line">(<span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) </span><br><span class="line"> <span class="keyword">FROM</span> Orders </span><br><span class="line"> <span class="keyword">WHERE</span> Orders.cust_id <span class="operator">=</span> Customers.cust_id) <span class="keyword">As</span> orders </span><br><span class="line"><span class="keyword">FROM</span> Customers </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> cust_name;</span><br><span class="line"># 该子查询会执行 查询到的客户数量 次</span><br></pre></td></tr></table></figure>
<h2 id="join">join</h2>
<h3 id="内部联结">内部联结</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> vend_name, prod name, prod price</span><br><span class="line"><span class="keyword">FROM</span> Vendors, Products </span><br><span class="line"><span class="keyword">WHERE</span> Vendors.vend_id <span class="operator">=</span> Products.vend_id;</span><br><span class="line"></span><br><span class="line"># <span class="keyword">or</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> vend_name, prod_name, prod_price</span><br><span class="line"><span class="keyword">FROM</span> Vendors <span class="keyword">INNER</span> <span class="keyword">JOIN</span> Products </span><br><span class="line"><span class="keyword">ON</span> Vendors.vend_id <span class="operator">=</span> Products.vend_id;</span><br></pre></td></tr></table></figure>
<p>没有联结条件返回的会是笛卡尔积</p>
<h3 id="别名">别名</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_name, cust_contact </span><br><span class="line"><span class="keyword">FROM</span> Customers <span class="keyword">As</span> C, Orders <span class="keyword">As</span> O, OrderItems <span class="keyword">AS</span> OI </span><br><span class="line"><span class="keyword">WHERE</span> C.cust_id <span class="operator">=</span> O.cust_id </span><br><span class="line"><span class="keyword">AND</span> OI.order_num <span class="operator">=</span> O.order_num </span><br><span class="line"><span class="keyword">AND</span> prod_id <span class="operator">=</span> <span class="string">&#x27;RGAN01&#x27;</span>；</span><br></pre></td></tr></table></figure>
<h3 id="自连接">自连接</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> c1.cust_id, c1.cust_name, c1.cust_contact </span><br><span class="line"><span class="keyword">FROM</span> Customers <span class="keyword">As</span> c1, Customers <span class="keyword">As</span> c2 </span><br><span class="line"><span class="keyword">WHERE</span> c1.cust_name <span class="operator">=</span> c2.cust_name </span><br><span class="line"><span class="keyword">AND</span> c2.cust_contact <span class="operator">=</span> <span class="string">&#x27;Jim Jones&#x27;</span>；</span><br></pre></td></tr></table></figure>
<h3 id="自然联结">自然联结</h3>
<p>重复的列需要手动处理</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> C.<span class="operator">*</span>, O.order_num, O.order_date, OI.prod_id, OI.quantity, OI.item_price </span><br><span class="line"><span class="keyword">FROM</span> Customers <span class="keyword">As</span> C, Orders <span class="keyword">As</span> O, OrderItems <span class="keyword">As</span> OI </span><br><span class="line"><span class="keyword">WHERE</span> C.cust_id <span class="operator">=</span> O.cust_id </span><br><span class="line"><span class="keyword">AND</span> OI.order_num <span class="operator">=</span> O.order_num </span><br><span class="line"><span class="keyword">AND</span> prod_id <span class="operator">=</span> <span class="string">&#x27;RGAN01&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h3 id="外部联结">外部联结</h3>
<p>联结包含了在相关表中没有关联行的行</p>
<p>RIGHT指出的是OUTER JOIN右边的表， 而LEFT指出的是OUTER JOIN左边的表, 使用LEFT OUTER JOIN从FROM子句的左边表(Customers表）中选择所有行</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Customers.cust_id, Orders.order_num </span><br><span class="line"><span class="keyword">FROM</span> Customers <span class="keyword">INNER</span> <span class="keyword">JOIN</span> Orders </span><br><span class="line"><span class="keyword">ON</span> Customers.cust_id <span class="operator">=</span> Orders.cust_id;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> Customers.cust_id, Orders.order_num </span><br><span class="line"><span class="keyword">FROM</span> Customers <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> Orders </span><br><span class="line"><span class="keyword">ON</span> Customers.cust_id <span class="operator">=</span> Orders.cust_id;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> Customers.cust_id, Orders.order_num </span><br><span class="line"><span class="keyword">FROM</span> Customers, Orders </span><br><span class="line"><span class="keyword">WHERE</span> Customers.cust_id <span class="operator">*</span><span class="operator">=</span> Orders.cust_id;</span><br></pre></td></tr></table></figure>
<h3 id="带聚集函数的联结">带聚集函数的联结</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Customers.cust_id, </span><br><span class="line"> <span class="built_in">COUNT</span> (Orders.order_num) <span class="keyword">As</span> num_ord </span><br><span class="line"><span class="keyword">FROM</span> Customers <span class="keyword">INNER</span> <span class="keyword">JOIN</span> Orders </span><br><span class="line"><span class="keyword">ON</span> Customers.cust_id <span class="operator">=</span> Orders.cust_id </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Customers.cust_id;</span><br></pre></td></tr></table></figure>
<h2 id="组合查询-union">组合查询 union</h2>
<ul>
<li>union 中每个查询必须包含相同的列, 表达式, 或聚集函数</li>
<li>默认去除重复行, union all 不去除</li>
<li>只能有一个 order by</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_name, cust_contact, cust_email </span><br><span class="line"><span class="keyword">FROM</span> Customers </span><br><span class="line"><span class="keyword">WHERE</span> cust_state <span class="keyword">IN</span> (<span class="string">&#x27;IL&#x27;</span>,<span class="string">&#x27;IN&#x27;</span>，<span class="string">&#x27;MI&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> cust_name, cust_contact, cust_email </span><br><span class="line"><span class="keyword">FROM</span> Customers </span><br><span class="line"><span class="keyword">WHERE</span> custname <span class="operator">=</span> <span class="string">&#x27;Fun4All&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> cust_name, cust_contact, cust_email </span><br><span class="line"><span class="keyword">FROM</span> Customers </span><br><span class="line"><span class="keyword">WHERE</span> cust_state <span class="keyword">IN</span>(<span class="string">&#x27;IL&#x27;</span>, <span class="string">&#x27;IN&#x27;</span>,<span class="string">&#x27;MI&#x27;</span>） </span><br><span class="line"><span class="keyword">UNION</span> </span><br><span class="line"><span class="keyword">SELECT</span> cust_name, cust_contact, cust_email <span class="keyword">FROM</span> Customers </span><br><span class="line"><span class="keyword">WHERE</span> cust_name <span class="operator">=</span> &quot; Fun4A11’;</span><br></pre></td></tr></table></figure>
<h2 id="插入">插入</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Customers </span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">&#x27;1000000006&#x27;</span>, <span class="string">&#x27;Toy Land&#x27;</span>, <span class="string">&#x27;123 Any Street&#x27;</span>, <span class="string">&#x27;New York&#x27;</span>, <span class="string">&#x27;NY&#x27;</span>, <span class="string">&#x27;11111&#x27;</span>, <span class="string">&#x27;USA&#x27;</span>, <span class="keyword">NULL</span>, <span class="keyword">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Customers</span><br><span class="line">(cust_id, cust_name, cust_address, cust_City, cust_state, cust_zip, cust_country, cust_contact, cust_email) <span class="keyword">VALUES</span>(<span class="string">&#x27;1000000006&#x27;</span>, <span class="string">&#x27;Toy Land&#x27;</span>, <span class="string">&#x27;123 Any Street&#x27;</span>, <span class="string">&#x27;New York&#x27;</span>, <span class="string">&#x27;NY&#x27;</span>, <span class="string">&#x27;11111&#x27;</span>, <span class="string">&#x27;USA&#x27;</span>, <span class="keyword">NULL</span>, <span class="keyword">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Customers </span><br><span class="line">(cust_id, cust_name, cust_address, cust_city, cust_state, cust_zip, cust_country) </span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">&#x27;1000000006&#x27;</span>, <span class="string">&#x27;Toy Land&#x27;</span>, <span class="string">&#x27;123 Any Street&#x27;</span>, <span class="string">&#x27;New York&#x27;</span>, <span class="string">&#x27;NY&#x27;</span>, <span class="string">&#x27;11111&#x27;</span>, <span class="string">&#x27;USA&#x27;</span>);</span><br><span class="line"># 忽略的列必须允许为 <span class="keyword">null</span>, 或者在表定义中给出默认值</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Customers</span><br><span class="line">(cust_id, cust_contact, cust_email, cust_name, cust_address, cust_city, cust_state, cust_zip, cust country) </span><br><span class="line"><span class="keyword">SELECT</span> cust_id, cust_contact, cust_email, cust_name, cust_address, cust_city, cust_state, cust_zip， cust_country </span><br><span class="line"><span class="keyword">FROM</span> CustNew;</span><br><span class="line"></span><br><span class="line"># 复制创建一个表</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> CustCopy <span class="keyword">As</span> </span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span> Customers;</span><br></pre></td></tr></table></figure>
<h2 id="更新">更新</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> Customers </span><br><span class="line"><span class="keyword">SET</span> cust_contact <span class="operator">=</span> <span class="string">&#x27;Sam Roberts&#x27;</span> </span><br><span class="line">cust_email <span class="operator">=</span><span class="string">&#x27;sam@toyland.com&#x27;</span> </span><br><span class="line"><span class="keyword">WHERE</span> cust_id <span class="operator">=</span> <span class="string">&#x27;1000000006&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> Customers </span><br><span class="line"><span class="keyword">WHERE</span> cust_id <span class="operator">=</span> <span class="string">&#x27;1000000006&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h2 id="创建操作表">创建操作表</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Products</span><br><span class="line">(</span><br><span class="line">  prod_id <span class="type">CHAR</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>, </span><br><span class="line">  vend_id <span class="type">CHAR</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>, </span><br><span class="line">  prod_name <span class="type">CHAR</span> (<span class="number">254</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>; </span><br><span class="line">  prod_price <span class="type">DECIMAL</span>(<span class="number">8</span>, <span class="number">2</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>, </span><br><span class="line">  prod_desc <span class="type">VARCHAR</span> (<span class="number">1000</span>) <span class="keyword">NULL</span> </span><br><span class="line">);</span><br><span class="line"># 是否允许 <span class="keyword">null</span>, 默认允许 <span class="keyword">null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> Custcopy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Vendors </span><br><span class="line"><span class="keyword">ADD</span> vend_phone <span class="type">CHAR</span>(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Vendors </span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">COLUMN</span> vend_phone;</span><br></pre></td></tr></table></figure>
<h2 id="视图-view">视图 view</h2>
<ul>
<li><p>重用SQL语句。</p></li>
<li><p>简化复杂的SQL操作。在编写查询后，可以方便地重用它而不必知道它的基本查询细节。</p></li>
<li><p>使用表的组成部分而不是整个表。</p></li>
<li><p>保护数据。可以给用户授予表的特定部分的访问权限而不是整个表的访问权限。</p></li>
<li><p>更改数据格式和表示。视图可返回与底层表的表示和格式不同的数据。</p></li>
<li><p>与表一样，视图必须唯一命名（不能给视图取与别的视图或表相 同的名字)。</p></li>
<li><p>为了创建视图，必须具有足够的访问权限。这些限制通常由数据 库管理人员授予。</p></li>
<li><p>视图可以嵌套，即：可以利用从其他视图中检索数据的查询来构 造一个视图。所允许的嵌套层数在不同的DBMS中有所不同（嵌 套视图可能会严重降低查询的性能，因此在产品环境中使用之前， 应该对其进行详细的测试）。</p></li>
<li><p>许多DBMS禁止在视图查询中使用ORDER BY子句。</p></li>
<li><p>有的DBMS要求命名返回的所有列，如果列是计算字段，则需 使用别名（关于列别名的更多信息，请参阅第7章)。</p></li>
<li><p>视图不能索引，也不能有关联的触发器或默认值。</p></li>
<li><p>有的DBMS把视图作为只读的查询，这表示可以从视图检索数据， 但不能将数据写回底层表。详情请参阅具体的DBMS文档。</p></li>
<li><p>有的DBMS允许创建这样的视图，它不允许进行导致行不再属于视图的插入或更新。例如，有这样一个视图，它只检索带有电子 邮件地址的客户。如果更新某个客户，删除他的电子邮件地址， 这将使该客户不再属于视图。这是默认行为，而且是允许的，但在具体的DBMS上可能能够防止这种情况发生。</p></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> Productcustomers <span class="keyword">As</span> </span><br><span class="line"><span class="keyword">SELECT</span> cust_name, cust_contact, prod_id </span><br><span class="line"><span class="keyword">FROM</span> Customens, Orders, OrderItems </span><br><span class="line"><span class="keyword">WHERE</span> Customers.cust_id <span class="operator">=</span> Orders.cust_id </span><br><span class="line"><span class="keyword">AND</span> OrderItems.order_num <span class="operator">=</span> Orders.order_num;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> Viewname:</span><br></pre></td></tr></table></figure>
<h2 id="存储过程">存储过程</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> MailingListcount </span><br><span class="line">(Listcount <span class="keyword">OUT</span> NUMBER) </span><br><span class="line"><span class="keyword">IS</span> </span><br><span class="line"><span class="keyword">BEGIN</span> </span><br><span class="line">	<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Customers </span><br><span class="line">	<span class="keyword">WHERE</span> <span class="keyword">NOT</span> cust email <span class="keyword">IS</span> <span class="keyword">NULL</span>; </span><br><span class="line">	Listcount:<span class="operator">=</span> <span class="keyword">SQL</span><span class="operator">%</span>ROWCOUNT;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">EXECUTE</span> AddNewProduct(<span class="string">&#x27;JTS01&#x27;</span>, <span class="string">&#x27;Stuffed Eiffel Tower&#x27;</span>， <span class="number">6.49</span>， <span class="string">&#x27;Plush stuffed toy with the btext La Tour Eiffel in red white and blue&#x27;</span>）</span><br></pre></td></tr></table></figure>
<h2 id="事务管理">事务管理</h2>
<p>保证成批的 sql 操作要么完全执行, 要么完全不执行</p>
<h2 id="游标">游标</h2>
<h2 id="外键">外键</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Orders</span><br><span class="line">(</span><br><span class="line">	order_num <span class="type">INTEGER</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">  orden_date DATETIME <span class="keyword">NOT</span> <span class="keyword">NULL</span>, </span><br><span class="line">  cust_id <span class="type">CHAR</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">REFERENCES</span> Customers(cust_id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h2 id="检查约束">检查约束</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> OrderItems( </span><br><span class="line">  order_num <span class="type">INTEGER</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  order_item <span class="type">INTEGER</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>, </span><br><span class="line">  prod_id <span class="type">CHAR</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  quantity <span class="type">INTEGER</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">CHECK</span> (quantity <span class="operator">&gt;</span> <span class="number">0</span>),</span><br><span class="line">  item_price MONEY <span class="keyword">NOT</span> <span class="keyword">NULL</span> </span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h2 id="索引">索引</h2>
<p>解决方法是使用索引。可以在一个或多个列上定义索引，使DBMS 保存其内容的一个排过序的列表。</p>
<h2 id="触发器">触发器</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> customer_state </span><br><span class="line"><span class="keyword">ON</span> Customers </span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">INSERT</span>, <span class="keyword">UPDATE</span></span><br><span class="line"><span class="keyword">AS</span> </span><br><span class="line"><span class="keyword">UPDATE</span> Customers </span><br><span class="line"><span class="keyword">SET</span> cust_state <span class="operator">=</span> <span class="built_in">Upper</span>(cust_state) </span><br><span class="line"><span class="keyword">WHERE</span> Customers.cust_id <span class="operator">=</span> inserted.cust_id;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>select</tag>
        <tag>num</tag>
        <tag>order</tag>
        <tag>email</tag>
        <tag>name</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统历史</title>
    <url>/2022/05/e9c1735229a9.html</url>
    <content><![CDATA[<blockquote>

</blockquote>
<span id="more"></span>
<h1 id="open-shop">open shop</h1>
<h2 id="ibm-701-open-shop">1954 IBM 701 open shop</h2>
<p>手工操作</p>
<h1 id="batch-processing">batch processing</h1>
<h2 id="bks-system">BKS system</h2>
<p>纸带, 磁带</p>
<h1 id="multiprogramming">multiprogramming</h1>
<h2 id="altas-supervisor">1960 Altas Supervisor</h2>
<p>spooling 假脱机 (Spooling is a process in which data is temporarily held to be used and executed by a device, program or the system. Data is sent to and stored in memory or other volatile storage until the program or computer requests it for execution. "Spool" is technically an acronym for simultaneous peripheral operations online. For example, in printer spooling, the documents/files that are sent to the printer are <strong>first stored in the memory or printer spooler.</strong> Once the printer is ready, it fetches the data from that spool and prints it.)</p>
<p>demand paging(512words) (It suggests keeping all pages of the frames in the secondary memory until they are required. In other words, it says that do not load any page in the main memory until it is required.)</p>
<p>supervisor calls</p>
<p>programmed in machine language</p>
<h2 id="b5000-master-control-program">1964 B5000 master control program</h2>
<p>high-level language</p>
<p>stack instructions</p>
<p>virtual memory</p>
<p>multiprogramming multiprocessing</p>
<p>随意访存(unprotected)</p>
<h2 id="exec-ii-system">1966 Exec II system</h2>
<p>shortest job first</p>
<h2 id="egdon-system">1966 Egdon system</h2>
<h1 id="timesharing">timesharing</h1>
<h2 id="ctss">1963 CTSS</h2>
<h2 id="multics-file-system">1964 Multics file system</h2>
<p>hierarchical file system</p>
<h2 id="titan-file-system">1967 Titan file system</h2>
<p>passwords</p>
<p>file authorization(execute read delete update)</p>
<h2 id="unix">1974 Unix</h2>
<h1 id="concurrent-programming">concurrent programming</h1>
<h2 id="the-multiprogramming-system">1968 THE multiprogramming system</h2>
<h2 id="rc-4000-multiprogramming-system">1969 RC 4000 multiprogramming system</h2>
<p>concept of kernal: The system has no built-in assumptions about program scheduling and resource allocation; it allows any program to initiate other programs in a hierarchal manner.5 Thus, the system provides a general frame[work] for different scheduling strategies, such as batch processing, multiple console conversation, real-time scheduling, etc.</p>
<p>message communication</p>
<h2 id="venus-system">1972 Venus system</h2>
<p>semaphores and layers of abstraction.</p>
<h2 id="boss-2-system">1975 Boss 2 system</h2>
<h2 id="solo-system">1975 Solo system</h2>
<p>concurrent pascal</p>
<h2 id="solo-program-text">1976 Solo program text</h2>
<p>implemented in abstract data types(classes monitors processes)</p>
<p>易于修改</p>
<h1 id="personal-computer">personal computer</h1>
<h2 id="os6">1972 OS6</h2>
<p>BCPL 语言</p>
<h2 id="alto-system">1976 Alto system</h2>
]]></content>
      <tags>
        <tag>printer</tag>
        <tag>system</tag>
        <tag>scheduling</tag>
        <tag>program</tag>
        <tag>memory</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode</title>
    <url>/2022/01/87d43a06543c.html</url>
    <content><![CDATA[<blockquote>

</blockquote>
<span id="more"></span>
<h1 id="剑指-offer">剑指 offer</h1>
<h2 id="赋值运算符">赋值运算符</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CMyString</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">CMyString</span>(<span class="type">char</span>* pData = <span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">CMyString</span>(<span class="type">const</span> CMyString&amp; str);</span><br><span class="line">    CMyString&amp; <span class="keyword">operator</span>=(<span class="type">const</span> CMyString &amp;str);</span><br><span class="line">    ~<span class="built_in">CMyString</span>(<span class="type">void</span>);</span><br><span class="line">    -</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">char</span>* m_pData;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CMyString&amp; CMyString::<span class="keyword">operator</span>=(<span class="type">const</span> CMyString &amp;str)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span> != &amp;str)&#123;</span><br><span class="line">        CMyString <span class="built_in">strtmp</span>(str);</span><br><span class="line">        <span class="type">char</span>* ptmp = strtmp.m_pData;</span><br><span class="line">        strtmp.m_pData = m_pData;</span><br><span class="line">        m_pData = ptmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="面试题3数组中重复的数字">面试题3：数组中重复的数字</h2>
<p>题目一：找出数组中重复的数字。 在一个长度为n的数组里的所有数字都在 0～n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。例如，如果输入长度为7的数组(2,3,1,0,2,5,3}，那么对应的输出是重复的数字2或者3。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//hash table</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">findRepeatNumber</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">map</span><span class="params">(nums.size(), <span class="literal">false</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i: nums)&#123;</span><br><span class="line">        <span class="keyword">if</span>(map[i])</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            map[i] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//节省空间, 对原数组进行操作</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">findRepeatNumber</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;nums.<span class="built_in">size</span>())&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[i] == i)</span><br><span class="line">            i++;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[nums[i]] == nums[i])</span><br><span class="line">                <span class="keyword">return</span> nums[i];</span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">                <span class="built_in">swap</span>(nums[nums[i]], nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在一个长度为n+1的数组里的所有数字都在1～n的范围内，所以数组中至少有一个数字是重复的。请找出数组中任意一个重复的数字，但不能修改输入的数组。例如，如果输入长度为8的数组{2,3,5,4,3,2,6,7}，那么对应的输出是重复的数字2或者3。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//不修改原数组</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">countRange</span><span class="params">(vector&lt;<span class="type">int</span>&gt; nums, <span class="type">int</span> start, <span class="type">int</span> end)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;nums.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[i]&gt;=start &amp;&amp; nums[i]&lt;=end)</span><br><span class="line">            count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">findRepeatNumber</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> start = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> end = nums.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(end&gt;=start)&#123;</span><br><span class="line">        <span class="type">int</span> mid = ((end-start)&gt;&gt;<span class="number">1</span>)+start;</span><br><span class="line">        <span class="type">int</span> count = <span class="built_in">countRange</span>(nums, start, middle);</span><br><span class="line">        <span class="keyword">if</span>(end == start)&#123;</span><br><span class="line">            <span class="keyword">if</span>(count&gt;<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">return</span> start;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(count&gt;(mid-start+<span class="number">1</span>))</span><br><span class="line">            end = mid;</span><br><span class="line">        <span class="keyword">else</span>   </span><br><span class="line">            start = mid+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="面试题4二维数组中的查找">面试题4：二维数组中的查找</h2>
<p>题目：在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">findNumberIn2DArray</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; matrix, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(matrix.<span class="built_in">empty</span>())</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="type">int</span> width = matrix[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">  <span class="type">int</span> height = matrix.<span class="built_in">size</span>();</span><br><span class="line">  <span class="type">int</span> i=height<span class="number">-1</span>, j=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(i&gt;=<span class="number">0</span> &amp;&amp; j&lt;width)&#123;</span><br><span class="line">    <span class="keyword">if</span>(matrix[i][j]==target)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(target&lt;matrix[i][j])</span><br><span class="line">      i--;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(target&gt;matrix[i][j])</span><br><span class="line">      j++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>字符串存储问题</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">tmain</span><span class="params">(<span class="type">int</span> argc, _TCHAR* argv[])</span> </span>&#123; </span><br><span class="line">  <span class="type">char</span> str1[] = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">  <span class="type">char</span> str2[] = <span class="string">&quot;hello world&quot;</span>:</span><br><span class="line"></span><br><span class="line">  <span class="type">char</span>* str3 = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">  <span class="type">char</span>* str4 = <span class="string">&quot;hello world&quot;</span>:</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(strl == str2)</span><br><span class="line">  	<span class="built_in">printf</span>(<span class="string">&quot;str1 and str2 are same\n&quot;</span>);</span><br><span class="line">	<span class="keyword">else</span> </span><br><span class="line">  	<span class="built_in">printf</span>(<span class="string">&quot;str1 and str2 are not same\n&quot;</span>);</span><br><span class="line"><span class="comment">//not same</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span>(str3 == str4)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;str3 and str4 are same.\n&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span> </span><br><span class="line">  	<span class="built_in">printf</span>(<span class="string">&quot;str3 and str4 are not same. \n&quot;</span>);</span><br><span class="line"><span class="comment">//same</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="面试题5替换空格">面试题5：替换空格</h2>
<p>题目：请实现一个函数，把字符串中的每个空格替换成"%20"。例如， 输入“We are happy.”，则输出“We%20are%20happy.”</p>
<ol type="1">
<li>新分配字符串</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">string <span class="title">replaceSpace</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">  string ans;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">char</span> i:s)&#123;</span><br><span class="line">    <span class="keyword">if</span>(i == <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">      ans.<span class="built_in">append</span>(<span class="string">&quot;%20&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      ans.<span class="built_in">push_back</span>(i);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2" type="1">
<li>在原有字符串上修改(先估计大小, 后从后往前更新)</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">string <span class="title">replaceSpace</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> space_count = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">char</span> i:s)&#123;</span><br><span class="line">    <span class="keyword">if</span>(i == <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">      space_count+=<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">int</span> i=s.<span class="built_in">length</span>()<span class="number">-1</span>;</span><br><span class="line">  <span class="type">int</span> length = s.<span class="built_in">length</span>() + space_count*<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">  s.<span class="built_in">resize</span>(length);</span><br><span class="line">  length -= <span class="number">1</span>;<span class="comment">//下标-1</span></span><br><span class="line">  <span class="keyword">for</span>(; i&gt;=<span class="number">0</span> &amp;&amp; length&gt;=i; i--)&#123;</span><br><span class="line">    <span class="keyword">if</span>(s[i] == <span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">      s[length--] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">      s[length--] = <span class="string">&#x27;2&#x27;</span>;</span><br><span class="line">      s[length--] = <span class="string">&#x27;%&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      s[length--] = s[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="面试题6从尾到头打印链表">面试题6：从尾到头打印链表</h2>
<p>题目：输入一个链表的头节点，从尾到头反过来打印出每个节点的值。 链表节点定义如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ListNode</span>&#123;</span><br><span class="line">	<span class="type">int</span> m_nkey; </span><br><span class="line">  ListNode* m_pNext;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>不改变原链表结构</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">reversePrint</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">  stack&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">  ListNode* p = head;</span><br><span class="line">  <span class="keyword">while</span>(p)&#123;</span><br><span class="line">    s.<span class="built_in">push</span>(p-&gt;val);</span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line">  vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">  <span class="keyword">while</span>(!s.<span class="built_in">empty</span>())&#123;</span><br><span class="line">    ans.<span class="built_in">push_back</span>(s.<span class="built_in">top</span>());</span><br><span class="line">    s.<span class="built_in">pop</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>链表反转</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">reversePrint</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">  vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">  ListNode* cur = head, * pre = <span class="literal">NULL</span>, *next;</span><br><span class="line">  <span class="keyword">while</span>(cur)&#123;</span><br><span class="line">    next = cur-&gt;next;</span><br><span class="line">    cur-&gt;next = pre;</span><br><span class="line">    pre = cur;</span><br><span class="line">    cur = next;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span>(pre)&#123;</span><br><span class="line">    ans.<span class="built_in">push_back</span>(pre-&gt;val);</span><br><span class="line">    pre = pre-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="树">树</h2>
<p>树的遍历: 递归迭代, 宽度遍历</p>
<p>树的特例: 二叉搜索树, 堆, 红黑树</p>
<h2 id="面试题7重建二叉树">面试题7：重建二叉树</h2>
<p>题目：输入某二叉树的前序遍历和中序遍历的结果，请重建该二叉树。 假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如，输入 前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则 重建如图所示的二叉树并输出它的头节点。二叉树节点的定义如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">BinaryTreeNode</span></span><br><span class="line">&#123;  </span><br><span class="line">  <span class="type">int</span> m_nValue;</span><br><span class="line">  BinaryTreeNode* m_pLeft;</span><br><span class="line">  BinaryTreeNode* m_pRight;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; preorder;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; inorder;</span><br><span class="line">    <span class="function">TreeNode* <span class="title">buildTree</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; preorder, vector&lt;<span class="type">int</span>&gt;&amp; inorder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(preorder.<span class="built_in">empty</span>() || inorder.<span class="built_in">empty</span>())</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;inorder = inorder;</span><br><span class="line">        <span class="keyword">this</span>-&gt;preorder = preorder;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">ConstructCore</span>(<span class="number">0</span>, <span class="keyword">this</span>-&gt;inorder.<span class="built_in">size</span>()<span class="number">-1</span>, <span class="number">0</span>, <span class="keyword">this</span>-&gt;preorder.<span class="built_in">size</span>()<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">TreeNode* <span class="title">ConstructCore</span><span class="params">(<span class="type">int</span> startin, <span class="type">int</span> endin, <span class="type">int</span> startpre, <span class="type">int</span> endpre)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> rootvalue = preorder[startpre];</span><br><span class="line">        TreeNode* root = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(rootvalue);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(startpre == endpre)</span><br><span class="line">            <span class="keyword">if</span>(startin == endin &amp;&amp; preorder[startpre] == inorder[startin])</span><br><span class="line">                <span class="keyword">return</span> root;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;invalid&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> rootin = startin;</span><br><span class="line">        <span class="keyword">while</span>(rootin&lt;=endin &amp;&amp; inorder[rootin]!=rootvalue)</span><br><span class="line">            ++rootin;</span><br><span class="line">        <span class="keyword">if</span>(rootin == endin &amp;&amp; inorder[rootin]!=rootvalue)</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;invalid&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> leftlength = rootin - startin;</span><br><span class="line">        <span class="type">int</span> leftpreend = startpre + leftlength;</span><br><span class="line">        <span class="keyword">if</span>(leftlength&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            root-&gt;left = <span class="built_in">ConstructCore</span>(startin, rootin<span class="number">-1</span>,startpre+<span class="number">1</span>, leftpreend);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(leftlength&lt;endpre-startpre)<span class="comment">//?</span></span><br><span class="line">        &#123;</span><br><span class="line">            root-&gt;right = <span class="built_in">ConstructCore</span>(rootin+<span class="number">1</span>, endin, leftpreend+<span class="number">1</span>, endpre);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="面试题8二叉树的下一个节点">面试题8：二叉树的下一个节点</h2>
<p>题目：给定一棵二叉树和其中的一个节点，如何找出中序遍历序列的 下一个节点？树中的节点除了有两个分别指向左、右子节点的指针，还有 1个指向父节点的指针。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">TreeNode* <span class="title">solution</span><span class="params">(TreeNode* pnode)</span></span>&#123;</span><br><span class="line">    TreeNode* ans = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">if</span>(pnode-&gt;right != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">        TreeNode* pright = pnode-&gt;right;</span><br><span class="line">        <span class="keyword">while</span>(pright-&gt;left!=<span class="literal">nullptr</span>)</span><br><span class="line">            pright = pright-&gt;left;</span><br><span class="line">        ans = pright;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(pnode-&gt;parent!=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">        TreeNode* pcur = pnode;</span><br><span class="line">        TreeNode* pparent = pnode-&gt;parent;</span><br><span class="line">        <span class="keyword">while</span>(pparent!=<span class="literal">nullptr</span> &amp;&amp; pcur == pparent-&gt;right)&#123;</span><br><span class="line">            pcur = pparent;</span><br><span class="line">            pparent = pparent-&gt;parent;</span><br><span class="line">        &#125;</span><br><span class="line">        ans = pparent;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="面试题9用两个栈实现队列">面试题9：用两个栈实现队列</h2>
<p>题目：用两个栈实现一个队列。队列的声明如下，请实现它的两个函 数 appendTail 和 deleteHead，分别完成在队列尾部插入节点和在队列头部删 除节点的功能。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CQueue</span> &#123;</span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line">    <span class="built_in">CQueue</span>() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">appendTail</span><span class="params">(<span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">        s1.<span class="built_in">push</span>(value);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">deleteHead</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s2.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="keyword">while</span>(!s1.<span class="built_in">empty</span>())&#123;</span><br><span class="line">                <span class="type">int</span> tmp = s1.<span class="built_in">top</span>();</span><br><span class="line">                s1.<span class="built_in">pop</span>();</span><br><span class="line">                s2.<span class="built_in">push</span>(tmp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(s2.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;invalid&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> ret = s2.<span class="built_in">top</span>();</span><br><span class="line">        s2.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; s1;</span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; s2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="面试题10斐波那契数列">面试题10：斐波那契数列</h2>
<p>题目一：求斐波那契数列的第n项。 写一个函数，输入n，求斐波那契（Fibonacci）数列的第n项。</p>
<p><strong>注意取模!</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">fib</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; hash &#123;<span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line">        <span class="keyword">if</span>(n&lt;<span class="number">2</span>)</span><br><span class="line">            <span class="keyword">return</span> hash[n];</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> n1=<span class="number">0</span>;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> n2=<span class="number">1</span>;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>; i&lt;=n; i++)&#123;</span><br><span class="line">            ans = (n1+n2)%<span class="built_in">int</span>(<span class="number">1e9</span>+<span class="number">7</span>);</span><br><span class="line">            n1 = n2%<span class="built_in">int</span>(<span class="number">1e9</span>+<span class="number">7</span>);</span><br><span class="line">            n2 = ans%<span class="built_in">int</span>(<span class="number">1e9</span>+<span class="number">7</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans%<span class="built_in">int</span>(<span class="number">1e9</span>+<span class="number">7</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="快速排序">快速排序</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Partition</span><span class="params">(<span class="type">int</span> data[], <span class="type">int</span> length, <span class="type">int</span> start, <span class="type">int</span> end)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(data==<span class="literal">nullptr</span>||length&lt;=<span class="number">0</span>||start&lt;=<span class="number">0</span>||end&gt;=length)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> index = start;<span class="comment">//可以随机数</span></span><br><span class="line">    <span class="built_in">swap</span>(&amp;data[index], &amp;data[end]);<span class="comment">//把基准放在最后</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> small = start<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(index=start; index&lt;end; index++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(data[index]&lt;data[end])&#123;</span><br><span class="line">            ++small;</span><br><span class="line">            <span class="keyword">if</span>(small!=index)</span><br><span class="line">                <span class="built_in">swap</span>(&amp;data[index], &amp;data[small]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ++small;</span><br><span class="line">    <span class="built_in">swap</span>(&amp;data[small], &amp;data[end]);</span><br><span class="line">    <span class="keyword">return</span> small;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">QuickSort</span><span class="params">(<span class="type">int</span> data[], <span class="type">int</span> length, <span class="type">int</span> start, <span class="type">int</span> end)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(start == end)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> index = <span class="built_in">Partition</span>(data, length, start, end);</span><br><span class="line">    <span class="keyword">if</span>(index&gt;start)</span><br><span class="line">        <span class="built_in">QuickSort</span>(data, length, start, index<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">if</span>(index&lt;end)</span><br><span class="line">        <span class="built_in">QuickSort</span>(data, length, index+<span class="number">1</span>, end);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="面试题11旋转数组的最小数字">面试题11：旋转数组的最小数字</h2>
<p>题目：把一个数组最开始的若干个元素搬到数组的末尾，我们称之为 数组的旋转。输入一个递增排序的数组的一个旋转，输出旋转数组的最小 元素。例如，数组(3, 4, 5, 1, 2}为{1, 2, 3, 4, 5}的一个旋转，该数组的最小值为1。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">minArray</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; numbers)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(numbers.<span class="built_in">empty</span>())</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> start = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> end = numbers.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> mid = start + ((end-start)&gt;&gt;<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span>(start&lt;end)&#123;</span><br><span class="line">        mid = start + ((end-start)&gt;&gt;<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(numbers[mid]&gt;numbers[end])</span><br><span class="line">            start = mid+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(numbers[mid] &lt; numbers[end])</span><br><span class="line">            end = mid;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            end-=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> numbers[start];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="面试题12矩阵中的路径">面试题12：矩阵中的路径</h2>
<p>题目：请设计一个函数，用来判断在一个矩阵中是否存在一条包含某 字符串所有字符的路径。路径可以从矩阵中的任意一格开始，每一步可以 在矩阵中向左、右、上、下移动一格。如果一条路径经过了矩阵的某一格， 那么该路径不能再次进入该格子。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span> row, col;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(vector&lt;vector&lt;<span class="type">char</span>&gt;&gt;&amp; board, <span class="type">int</span> i, <span class="type">int</span> j, string word, <span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;<span class="number">0</span> || i&gt;=row || j&lt;<span class="number">0</span> || j&gt;=col || board[i][j]!=word[k])</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(k == word.<span class="built_in">size</span>()<span class="number">-1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        board[i][j] == <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        <span class="type">bool</span> res = </span><br><span class="line">        <span class="built_in">check</span>(board, i+<span class="number">1</span>, j, word, k+<span class="number">1</span>)||</span><br><span class="line">        <span class="built_in">check</span>(board, i<span class="number">-1</span>, j, word, k+<span class="number">1</span>)||</span><br><span class="line">        <span class="built_in">check</span>(board, i, j+<span class="number">1</span>, word, k+<span class="number">1</span>)||</span><br><span class="line">        <span class="built_in">check</span>(board, i, j<span class="number">-1</span>, word, k+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        board[i][j] = word[k];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">exist</span><span class="params">(vector&lt;vector&lt;<span class="type">char</span>&gt;&gt;&amp; board, string word)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(board.<span class="built_in">empty</span>())</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        row = board.<span class="built_in">size</span>();</span><br><span class="line">        col = board[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;row; i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;col; j++)</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">check</span>(board, i, j, word, <span class="number">0</span>))</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="面试题14剪绳子">面试题14：剪绳子</h2>
<p>题目：给你一根长度为n的绳子，请把绳子剪成m段（m、n都是整数， n&gt;1并且m＞1)，可能的最大乘积是多少？例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的段，此时得到的最大乘积是18。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">cuttingRope</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n&lt;=<span class="number">3</span>)</span><br><span class="line">            <span class="keyword">return</span> n<span class="number">-1</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">hash</span><span class="params">(n+<span class="number">1</span>)</span></span>;</span><br><span class="line">        hash[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        hash[<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">        hash[<span class="number">3</span>] = <span class="number">3</span>;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">4</span>; i&lt;=n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>; j&lt;=i/<span class="number">2</span>; j++)&#123;</span><br><span class="line">                ans = <span class="built_in">max</span>(ans, hash[j]*hash[i-j]);</span><br><span class="line">                hash[i] = ans;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> hash[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="面试题15二进制中1的个数">面试题15：二进制中1的个数</h2>
<p>题目：请实现一个函数，输入一个整数，输出该数二进制表示中1 的 个数。例如，把9表示成二进制是1001，有2位是1。因此，如果输入9, 则该函数输出2。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">hammingWeight</span><span class="params">(<span class="type">uint32_t</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            ans += n&amp;<span class="number">1</span>;</span><br><span class="line">            n=n&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">hammingWeight</span><span class="params">(<span class="type">uint32_t</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            n = n&amp;(n<span class="number">-1</span>);</span><br><span class="line">            ++ans;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>把一个整数减去1之后再和原来的整数做位与运算，得到的结果相当 于把整数的二进制表示中最右边的1变成0。很多二进制的问题都可以用这 种思路解决。</p>
<h2 id="面试题-16数值的整数次方">面试题 16：数值的整数次方</h2>
<p>题目：实现函数 double Power(double base, int exponent)，求 base 的 exponent 次方。不得使用库函数，同时不需要考虑大数问题</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">qpow</span><span class="params">(<span class="type">double</span> a, <span class="type">unsigned</span> <span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="type">double</span> ans = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(n)&#123;</span><br><span class="line">            <span class="keyword">if</span>(n&amp;<span class="number">1</span>)</span><br><span class="line">            ans*=a;</span><br><span class="line">            a*=a;</span><br><span class="line">            n&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">myPow</span><span class="params">(<span class="type">double</span> x, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x==<span class="number">0.0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">double</span> ans = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(n&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="type">unsigned</span> <span class="type">int</span> nnew = (<span class="type">unsigned</span> <span class="type">int</span>)n;</span><br><span class="line">            ans = <span class="number">1.0</span>/<span class="built_in">qpow</span>(x, -nnew);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            ans = <span class="built_in">qpow</span>(x, n);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>注意 unsigned int 用法</p>
<h3 id="快速幂">快速幂</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">qpow</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(n==<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(n&amp;<span class="number">1</span> == <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">qpow</span>(a, n<span class="number">-1</span>) * a;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="type">int</span> tmp = <span class="built_in">qpow</span>(a, n&gt;&gt;<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> tmp*tmp;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qpow</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">  <span class="type">int</span> ans = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span>(n)&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&amp;<span class="number">1</span>)</span><br><span class="line">      ans*=a;</span><br><span class="line">    a*=a;</span><br><span class="line">    n&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="面试题17打印从1到最大的n位数">面试题17：打印从1到最大的n位数</h2>
<p>题目：输入数字 n，按顺序打印出从1到最大的n位十进制数。比如输 入3，则打印出1、2、3一直到最大的3位数999。</p>
<p>?大数问题, 字符串表示数</p>
<h2 id="面试题18删除链表的节点">面试题18：删除链表的节点</h2>
<p>题目一：在0(1)时间内删除链表节点。 给定单向链表的头指针和一个节点指针，定义一个函数在0(1)时间内 删除该节点。链表节点与函数的定义如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    ListNode *next;</span><br><span class="line">    <span class="built_in">ListNode</span>(<span class="type">int</span> x) : <span class="built_in">val</span>(x), <span class="built_in">next</span>(<span class="literal">NULL</span>) &#123;&#125;</span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">deleteNode</span><span class="params">(ListNode** head, ListNode* tobedelete)</span> </span>&#123;</span><br><span class="line">        ListNode* next = tobedelete-&gt;next;</span><br><span class="line">        <span class="keyword">if</span>(*head == tobedelete)&#123;</span><br><span class="line">            <span class="keyword">delete</span> tobedelete;</span><br><span class="line">            tobedelete = <span class="literal">nullptr</span>;</span><br><span class="line">            *head = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(next!=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">            tobedelete-&gt;val = next-&gt;val;</span><br><span class="line">            tobedelete-&gt;next = next-&gt;next;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">delete</span> next;</span><br><span class="line">            next = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            ListNode* cur = *head;</span><br><span class="line">            <span class="keyword">while</span>(cur-&gt;next!=tobedelete)</span><br><span class="line">                cur = cur-&gt;next;</span><br><span class="line">            cur-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">            <span class="keyword">delete</span> tobedelete;</span><br><span class="line">            tobedelete = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>题目二：删除链表中重复的节点。 在一个排序的链表中，如何删除重复的节点？</p>
<h2 id="面试题19正则表达式匹配">面试题19：正则表达式匹配</h2>
<figure>
<img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5pxclxi0uj20wi06s767.jpg" alt="截屏2022-08-31 14.19.11" /><figcaption aria-hidden="true">截屏2022-08-31 14.19.11</figcaption>
</figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    string m_s;</span><br><span class="line">    string m_p;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> star = <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">    <span class="type">char</span> dot = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isMatch</span><span class="params">(string s, string p)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        m_p = p;</span><br><span class="line">        m_s = s;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">isMatchIndex</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isMatchIndex</span><span class="params">(<span class="type">int</span> i_s, <span class="type">int</span> i_p)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i_s == m_s.<span class="built_in">size</span>() &amp;&amp; i_p == m_p.<span class="built_in">size</span>())</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(i_s!=m_s.<span class="built_in">size</span>() &amp;&amp; i_p == m_p.<span class="built_in">size</span>())</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(i_p+<span class="number">1</span>&lt;m_p.<span class="built_in">size</span>() &amp;&amp; m_p[i_p+<span class="number">1</span>] == star)&#123;</span><br><span class="line">            <span class="keyword">if</span>((m_p[i_p]==dot &amp;&amp; i_s!=m_s.<span class="built_in">size</span>()) || m_p[i_p]==m_s[i_s])</span><br><span class="line">                <span class="keyword">return</span>  <span class="built_in">isMatchIndex</span>(i_s+<span class="number">1</span>, i_p+<span class="number">2</span>) || <span class="built_in">isMatchIndex</span>(i_s+<span class="number">1</span>, i_p) || <span class="built_in">isMatchIndex</span>(i_s, i_p+<span class="number">2</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">isMatchIndex</span>(i_s, i_p+<span class="number">2</span>);</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>((m_p[i_p] == dot &amp;&amp; i_s!=m_s.<span class="built_in">size</span>()) || m_p[i_p] == m_s[i_s])&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">isMatchIndex</span>(i_s+<span class="number">1</span>, i_p+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="面试题-20表示数值的字符串">面试题 20：表示数值的字符串</h2>
<p>题目：请实现一个函数用来判断字符串是否表示数值（包括整数和小 数）。例如，字符串"+100"、"5e2”、"-123"、"3.1416"及"-1E-16"都表示数 值，但"12e"、"1a3.14"、"1.2.3"、"+-5"及"12e+5.4"都不是。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    string m_s;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">fit</span><span class="params">(string&amp; s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(s.<span class="built_in">front</span>()==<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">            s.<span class="built_in">erase</span>(s.<span class="built_in">begin</span>());</span><br><span class="line">        <span class="keyword">while</span>(s.<span class="built_in">back</span>()==<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">            s.<span class="built_in">pop_back</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">isInt</span><span class="params">(<span class="type">int</span> &amp;i)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(m_s[i]&gt;=<span class="number">48</span> &amp;&amp; m_s[i]&lt;=<span class="number">57</span>)</span><br><span class="line">            ++i;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">isE</span><span class="params">(<span class="type">int</span> &amp;i)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(m_s[i]==<span class="string">&#x27;e&#x27;</span> || m_s[i]==<span class="string">&#x27;E&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> ++i;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">isPN</span><span class="params">(<span class="type">int</span> &amp;i)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(m_s[i]==<span class="string">&#x27;-&#x27;</span> || m_s[i]==<span class="string">&#x27;+&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> ++i;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">isdot</span><span class="params">(<span class="type">int</span> &amp;i)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(m_s[i]==<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> ++i;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isNumber</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        m_s = s;</span><br><span class="line">        <span class="built_in">fit</span>(m_s);</span><br><span class="line">        <span class="type">int</span> cur = <span class="number">0</span>;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; check;<span class="comment">//数值开始, 小数点, 数值结束, e 开始, 而结束</span></span><br><span class="line">        check.<span class="built_in">push_back</span>(<span class="built_in">isPN</span>(cur));</span><br><span class="line">        check.<span class="built_in">push_back</span>(<span class="built_in">isInt</span>(cur));</span><br><span class="line">        check.<span class="built_in">push_back</span>(<span class="built_in">isdot</span>(cur));</span><br><span class="line">        check.<span class="built_in">push_back</span>(<span class="built_in">isInt</span>(cur));</span><br><span class="line">        <span class="keyword">if</span>(check[<span class="number">0</span>]==check[<span class="number">3</span>])<span class="comment">//no number</span></span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;no number&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="keyword">if</span>(check[<span class="number">1</span>]!=check[<span class="number">2</span>] &amp;&amp; (check[<span class="number">0</span>]+<span class="number">1</span>==check[<span class="number">3</span>]))<span class="comment">//.+null</span></span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;no dot&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; </span><br><span class="line">        </span><br><span class="line">        check.<span class="built_in">push_back</span>(<span class="built_in">isE</span>(cur));</span><br><span class="line">        check.<span class="built_in">push_back</span>(<span class="built_in">isPN</span>(cur));</span><br><span class="line">        check.<span class="built_in">push_back</span>(<span class="built_in">isInt</span>(cur));</span><br><span class="line">        <span class="keyword">if</span>(check[<span class="number">3</span>]!=check[<span class="number">4</span>] &amp;&amp; check[<span class="number">5</span>]==check[<span class="number">6</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;no e&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">if</span>(check[<span class="number">3</span>]==check[<span class="number">4</span>] &amp;&amp; check[<span class="number">4</span>]!=check[<span class="number">5</span>])</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(cur==m_s.<span class="built_in">size</span>())</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="面试题-21调整数组顺序使奇数位于偶数前面">面试题 21：调整数组顺序使奇数位于偶数前面</h2>
<p>题目：输入一个整数数组，实现一个函数来调整该数组中数字的顺序， 使得所有奇数位于数组的前半部分，所有偶数位于数组的后半部分。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isOdd</span><span class="params">(<span class="type">int</span> i)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i&amp;<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">exchange</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> even = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> odd = nums.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(even&lt;odd)&#123;</span><br><span class="line">            <span class="type">bool</span> isodd = <span class="built_in">isOdd</span>(nums[odd]);</span><br><span class="line">            <span class="type">bool</span> iseven = !<span class="built_in">isOdd</span>(nums[even]);</span><br><span class="line">            <span class="keyword">if</span>(!isodd)</span><br><span class="line">                odd--;</span><br><span class="line">            <span class="keyword">if</span>(!iseven)</span><br><span class="line">                even++;</span><br><span class="line">            <span class="keyword">if</span>(isodd &amp;&amp; iseven)&#123;</span><br><span class="line">                <span class="built_in">swap</span>(nums[odd], nums[even]);</span><br><span class="line">                odd--;</span><br><span class="line">                even++;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>注意解耦合</p>
<h2 id="面试题-22链表中倒数第k个节点">面试题 22：链表中倒数第k个节点</h2>
<p>题目：输入一个链表，输出该链表中倒数第k个节点。为了符合大多 数人的习惯，本题从1开始计数，即链表的尾节点是倒数第1个节点。例 如，一个链表有6个节点，从头节点开始，它们的值依次是1、2、3、4、5、 6。这个链表的倒数第3 个节点是值为4的节点。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">getKthFromEnd</span><span class="params">(ListNode* head, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> forward = <span class="number">0</span>;</span><br><span class="line">        ListNode* p = head;</span><br><span class="line">        <span class="keyword">while</span>(p!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">            forward++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(k&gt;forward)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        <span class="type">int</span> reverse = forward - k;</span><br><span class="line">        p = head;</span><br><span class="line">        <span class="keyword">while</span>(reverse!=<span class="number">0</span>)&#123;</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">            reverse--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//只遍历一边</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">getKthFromEnd</span><span class="params">(ListNode* head, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        ListNode* p1 = head;</span><br><span class="line">        <span class="keyword">while</span>(p1!=<span class="literal">NULL</span> &amp;&amp; k&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            p1 = p1-&gt;next;</span><br><span class="line">            k--;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode* p2 = head;</span><br><span class="line">        <span class="keyword">while</span>(p1!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">            p1 = p1-&gt;next;</span><br><span class="line">            p2 = p2-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="面试题-23链表中环的入口节点">面试题 23：链表中环的入口节点</h2>
<p>题目：如果一个链表中包含环，如何找出环的入口节点？例如，在如 图3.8所示的链表中，环的入口节点是节点3。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">detectCycle</span><span class="params">(ListNode *head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">nullptr</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        </span><br><span class="line">        ListNode* pslow = head-&gt;next;</span><br><span class="line">        <span class="keyword">if</span>(pslow==<span class="literal">nullptr</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        ListNode* pfast = pslow-&gt;next;</span><br><span class="line">        <span class="keyword">while</span>(pfast!=<span class="literal">nullptr</span> &amp;&amp; pfast!=pslow)&#123;</span><br><span class="line">            pslow = pslow-&gt;next;</span><br><span class="line">            pfast = pfast-&gt;next;</span><br><span class="line">            <span class="keyword">if</span>(pfast)</span><br><span class="line">                pfast = pfast-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(pfast==<span class="literal">nullptr</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        ListNode* pcircle = pfast-&gt;next;</span><br><span class="line">        <span class="type">int</span> circle_len = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(pcircle!=pfast)&#123;</span><br><span class="line">            pcircle = pcircle-&gt;next;</span><br><span class="line">            circle_len++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ListNode* pcirclestart = head;</span><br><span class="line">        pcircle = head;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;circle_len; i++)</span><br><span class="line">            pcircle = pcircle-&gt;next;</span><br><span class="line">        <span class="keyword">while</span>(pcircle!=pcirclestart)&#123;</span><br><span class="line">            pcircle = pcircle-&gt;next;</span><br><span class="line">            pcirclestart = pcirclestart-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> pcirclestart;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>先快慢指针, 后转圈统计环长, 后先后指针找环开始端</p>
<h2 id="反转链表">24 反转链表</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        ListNode* cur = head;</span><br><span class="line">        ListNode* next = <span class="literal">nullptr</span>;</span><br><span class="line">        ListNode* pre = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(cur)&#123;</span><br><span class="line">            next = cur-&gt;next;</span><br><span class="line">            cur-&gt;next = pre;</span><br><span class="line">            pre = cur;</span><br><span class="line">            cur = next;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pre;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(head == null || head-&gt;next == null)</span><br><span class="line">      <span class="keyword">return</span> head;</span><br><span class="line">    ListNode* newhead = <span class="built_in">reverseList</span>(head-&gt;next);</span><br><span class="line">    head-&gt;next-&gt;next = head;</span><br><span class="line">    head-&gt;next = null;</span><br><span class="line">    <span class="keyword">return</span> newhead;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="面试题-25合并两个排序的链表">面试题 25：合并两个排序的链表</h2>
<p>题目：输入两个递增排序的链表，合并这两个链表并使新链表中的节 点仍然是递增排序的。例如，输入图3.11中的链表1和链表2，则合并之 后的升序链表如链表 3 所示。链表节点定义如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">mergeTwoLists</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">        ListNode* cur = l1;</span><br><span class="line">        ListNode head;</span><br><span class="line">        cur = &amp;head;</span><br><span class="line">        <span class="keyword">while</span>(l1!=<span class="literal">nullptr</span> &amp;&amp; l2!=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (l1-&gt;val&lt;l2-&gt;val)&#123;</span><br><span class="line">                cur-&gt;next = l1;</span><br><span class="line">                l1 = l1-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                cur-&gt;next = l2;</span><br><span class="line">                l2 = l2-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(l1 == <span class="literal">nullptr</span>)</span><br><span class="line">            cur-&gt;next = l2;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cur-&gt;next = l1;</span><br><span class="line">        <span class="keyword">return</span> head.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>首节点</p>
<h2 id="面试题26树的子结构">面试题26：树的子结构</h2>
<p>题目：输入两棵二叉树A和B，判断B是不是A的子结构。二叉树节 点的定义如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isSubStructure</span><span class="params">(TreeNode* A, TreeNode* B)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (A!=<span class="literal">nullptr</span> &amp;&amp; B!=<span class="literal">nullptr</span>) &amp;&amp; (<span class="built_in">recur</span>(A, B) || <span class="built_in">isSubStructure</span>(A-&gt;left, B) || <span class="built_in">isSubStructure</span>(A-&gt;right, B));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">recur</span><span class="params">(TreeNode* A, TreeNode* B)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(B==<span class="literal">nullptr</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(A==<span class="literal">nullptr</span> || A-&gt;val!=B-&gt;val)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">recur</span>(A-&gt;left, B-&gt;left) &amp;&amp; <span class="built_in">recur</span>(A-&gt;right, B-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="面试题">面试题</h1>
<h2 id="实现一个trie树">实现一个trie树</h2>
<p>要提供insert（插入一个word），search（查询，返回命中的word列表）（最好C++实现）</p>
<h2 id="线段相交">线段相交</h2>
<p>https://blog.csdn.net/wlxsq/article/details/47356905</p>
<p>问题描述：最近阿里的某同学（阳阳）从阿里毕业了（实现了财富自由），但是他从小就有一个梦想，他想回到他的老家经营一个农场，因此就需要在农场设计一些沟渠用来排水。为了设计这个沟渠，他不惜花费重金请来了物理系毕业的大学同学（天天）来帮他设计整个农场的沟渠系统。假设每条构建都是一条折线（即有多条首尾相连的线段组成），由于阳阳特别相信风水（风水先生告诉他，他的农场的沟渠路线的相交点不能超过5个），由于天天设计的沟渠系统十分复杂，作为程序员的你，能否设计一个程序帮助阳阳判断，这个沟渠系统能否满足要求。</p>
<p>​ 程序输入：</p>
<p>​ 第一行：整数 N （表示多条沟渠）</p>
<p>​ 第2-(N+1)行：第一个数M(沟渠折线的顶点，沟渠的线段数 = M -1), 后面接着 2 * M个float，每两个float表示一个点。</p>
<p>​ 输出：bool：true(符合要求)， false（不符合要求）。</p>
<p>​</p>
<p>​ 程序输入示例：</p>
<p>​ 2</p>
<p>​ 4 1.7 1.8 2.4 2.9 3.8 4.5 5.9 7.0</p>
<p>​ 3 1.0 1.0 2.0 1.0 2.0 8.0</p>
<h2 id="质串">质串</h2>
<p>​ 假设一个字符串由n个字符构成，字符只能是a或者b，如果一个字符串能由他的某个子串重复多次拼接而成，那么这种串就被命名为 "复数串"， 否则就被命名为 "质串"。</p>
<p>​ 例如：abab 为复数串（因为它可以有ab重复2次拼接二次） abba为质串。</p>
<p>​ 请你设计一个程序，判断一个长度为n的串，有多少个是『质串』,最后的结果 mod 2022 。</p>
<p>例如：n = 1, 那么长度为1的所有串中，有2个质串，分别是 a 和 b。</p>
<p>​ n = 2, 那么长度为2的所有串中，有2个质串，分别是 ab 和 ba。</p>
<p>​ n = 3, 那么长度为3的所有串中，有6个质串，分别是（aab, aba, baa, abb, bab, bba）.</p>
<p>判断一个数是否为质数</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isPrime</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(n&lt;=<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span>=<span class="number">2</span>; i*i&lt;=n; i++)</span><br><span class="line">    <span class="keyword">if</span>(n%i==<span class="number">0</span>) </span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>素数筛(埃氏)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> prime[n+<span class="number">1</span>], isprime[n+<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sieve</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">  <span class="type">int</span> p=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;=n; i++)</span><br><span class="line">    isprime[i] = <span class="number">1</span>;</span><br><span class="line">  isprime[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">  isprime[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>; i&lt;=n; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(isprime[i])&#123;</span><br><span class="line">      prime[p++] = i;</span><br><span class="line">      <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">2</span>*i; j&lt;=n; j+=i)</span><br><span class="line">        isprime[j] = <span class="number">0</span>;</span><br><span class="line">    &#125; </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>欧拉筛</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> prime[maxn] &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> vis[maxn] &#123;<span class="number">0</span>&#125;;<span class="comment">//0表示质数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">eulasieve</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>; i&lt;maxn; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!vis[i])</span><br><span class="line">      prime[++prime[<span class="number">0</span>]] = i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>; j&lt;=prime[<span class="number">0</span>]&amp;&amp;i*prime[j]&lt;=maxn; j++)&#123;</span><br><span class="line">      vis[i*prime[j]] = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">if</span>(i%prime[j] == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="其他-leetcode">其他 leetcode</h1>
<h2 id="点灯">点灯</h2>
<p>每个点是一个按钮，每个按钮里面有一个小灯。如上图，红色代表灯亮，白色代表灯灭。每当按下按钮，此按钮的灯以及其上下左右四个方向按钮的灯状态会改变（如果原来灯亮则灯灭，如果原来灯灭则灯亮）。如果小张通过按按钮将灯全部熄灭则能可以打开箱子。</p>
<p>现在小张给你一些密码锁的状态，请你告诉他最少按几次按钮能够把灯全部熄灭。</p>
<p>Input</p>
<p>第一行两个整数n, m</p>
<p>接下来n行，每行一个长度为m的01字符串，0表示灯初始状态灭，1表示灯初始状态亮。</p>
<p>Output</p>
<p>一行一个整数，表示最少按几次按钮可以把灯全部熄灭。 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX 1024</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j, vector&lt;vector&lt;<span class="type">bool</span>&gt;&gt; &amp;map)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">changefirstline</span><span class="params">(vector&lt;vector&lt;<span class="type">bool</span>&gt;&gt; map, <span class="type">int</span> j, <span class="type">int</span> count)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(vector&lt;vector&lt;<span class="type">bool</span>&gt;&gt; &amp;map, <span class="type">int</span> count)</span></span>;</span><br><span class="line"><span class="type">int</span> ans = MAX;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">changefirstline</span><span class="params">(vector&lt;vector&lt;<span class="type">bool</span>&gt;&gt; map, <span class="type">int</span> j, <span class="type">int</span> count)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(j&lt;map[<span class="number">0</span>].<span class="built_in">size</span>())&#123;</span><br><span class="line">        <span class="built_in">changefirstline</span>(map, j+<span class="number">1</span>, count);</span><br><span class="line">        <span class="built_in">change</span>(<span class="number">0</span>, j, map);</span><br><span class="line">        <span class="built_in">changefirstline</span>(map, j+<span class="number">1</span>, count+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        ans = <span class="built_in">min</span>(<span class="built_in">dfs</span>(map, count), ans);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(vector&lt;vector&lt;<span class="type">bool</span>&gt;&gt; &amp;map, <span class="type">int</span> count)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n = map.<span class="built_in">size</span>();</span><br><span class="line">    <span class="type">int</span> m = map[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;n<span class="number">-1</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;m; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(map[i][j])&#123;</span><br><span class="line">                <span class="built_in">change</span>(i+<span class="number">1</span>, j, map);</span><br><span class="line">                ++count;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;m; j++)</span><br><span class="line">        <span class="keyword">if</span>(map[n<span class="number">-1</span>][j])</span><br><span class="line">            <span class="keyword">return</span> MAX;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j, vector&lt;vector&lt;<span class="type">bool</span>&gt;&gt; &amp;map)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n = map.<span class="built_in">size</span>();</span><br><span class="line">    <span class="type">int</span> m = map[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">    </span><br><span class="line">    map[i][j] = !map[i][j];</span><br><span class="line">    vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; direction&#123;&#123;<span class="number">1</span>,<span class="number">0</span>&#125;, &#123;<span class="number">-1</span>,<span class="number">0</span>&#125;, &#123;<span class="number">0</span>,<span class="number">1</span>&#125;, &#123;<span class="number">0</span>,<span class="number">-1</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> p : direction)&#123;</span><br><span class="line">        <span class="type">int</span> newi = i+p.first;</span><br><span class="line">        <span class="type">int</span> newj = j+p.second;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(newi&gt;=n || newi&lt;<span class="number">0</span> || newj&gt;=m || newj&lt;<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        map[newi][newj] = !map[newi][newj];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d\n&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    vector&lt;vector&lt;<span class="type">bool</span>&gt;&gt; <span class="built_in">map</span>(n, <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(m, <span class="literal">false</span>));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;m; j++)&#123;</span><br><span class="line">            <span class="type">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">            <span class="keyword">if</span>(c==<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">                map[i][j] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">changefirstline</span>(map, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<h2 id="二进制加法">二进制加法</h2>
<p>和十进制不同的是：二进制运算“逢二进一”。下面举一个二进制加法的运算实例:</p>
<p>11101</p>
<p>- 110</p>
<hr />
<p>100011 下面请你模拟这个过程。</p>
<p>Input 第一行输入一个正整数 T 表示接下来有 T 组数据； 接下来 T 行，每行输入两个二进制串 a 和 b 中间用空格隔开，并且没有前导 0。 Output 对于每组数据，请按模拟二进制加法，按题目描述的格式输出正确的运算结果，注意换行，没有多余的空格和换行。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">tri</span>&#123;</span><br><span class="line">    string var1;</span><br><span class="line">    string var2;</span><br><span class="line">    string res;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">calculate</span><span class="params">(tri &amp;t)</span></span>;</span><br><span class="line"><span class="function">string <span class="title">fillblank</span><span class="params">(<span class="type">const</span> string&amp; s, <span class="type">int</span> len)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> tri &amp;t)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rev</span><span class="params">(string &amp;str)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rev</span><span class="params">(string &amp;str)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> len = str.<span class="built_in">length</span>();</span><br><span class="line">    <span class="type">int</span> n = len<span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=n)&#123;</span><br><span class="line">        <span class="comment">//Using the swap method to switch values at each index</span></span><br><span class="line">        <span class="built_in">swap</span>(str[i],str[n]);</span><br><span class="line">        n = n<span class="number">-1</span>;</span><br><span class="line">        i = i+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">calculate</span><span class="params">(tri &amp;t)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!(t.res.<span class="built_in">empty</span>()))</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    string::reverse_iterator i1 = t.var1.<span class="built_in">rbegin</span>();</span><br><span class="line">    string::reverse_iterator i2 = t.var2.<span class="built_in">rbegin</span>();</span><br><span class="line">    <span class="type">int</span> bit1=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> bit2=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> bitres = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> carry = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i1!=t.var1.<span class="built_in">rend</span>() || i2!=t.var2.<span class="built_in">rend</span>() || carry!=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i1==t.var1.<span class="built_in">rend</span>())</span><br><span class="line">            bit1 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            bit1 = *i1<span class="number">-48</span>;</span><br><span class="line">            i1++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(i2==t.var2.<span class="built_in">rend</span>())</span><br><span class="line">            bit2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            bit2 = *i2<span class="number">-48</span>;</span><br><span class="line">            i2++;</span><br><span class="line">        &#125;</span><br><span class="line">        bitres = (bit1+bit2+carry)%<span class="number">2</span>;</span><br><span class="line">        carry = (bit1+bit2+carry)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        t.res.<span class="built_in">push_back</span>(bitres+<span class="number">48</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">rev</span>(t.res);</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> tri &amp;t)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> len = t.res.<span class="built_in">size</span>();</span><br><span class="line">    <span class="function">string <span class="title">div</span><span class="params">(len+<span class="number">2</span>, <span class="string">&#x27;-&#x27;</span>)</span></span>;</span><br><span class="line">    <span class="function">string <span class="title">blank</span><span class="params">(<span class="string">&quot;  &quot;</span>)</span></span>;</span><br><span class="line">    cout&lt;&lt;blank&lt;&lt;<span class="built_in">fillblank</span>(t.var1, len)&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;+ &quot;</span>&lt;&lt;<span class="built_in">fillblank</span>(t.var2, len)&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;div&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;blank&lt;&lt;t.res&lt;&lt;endl;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">fillblank</span><span class="params">(<span class="type">const</span> string&amp; s, <span class="type">int</span> len)</span></span>&#123;</span><br><span class="line">    string res = s;</span><br><span class="line">    <span class="keyword">while</span>(res.<span class="built_in">size</span>()&lt;len)</span><br><span class="line">        res.<span class="built_in">insert</span>(<span class="number">0</span>, <span class="string">&quot; &quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="function">vector&lt;tri&gt; <span class="title">v</span><span class="params">(t)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;t; i++)&#123;</span><br><span class="line">        cin&gt;&gt;v[i].var1 &gt;&gt;v[i].var2;</span><br><span class="line">        <span class="built_in">calculate</span>(v[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i:v)</span><br><span class="line">        <span class="built_in">print</span>(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="大实数加减法">大实数加减法</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">tri</span>&#123;</span><br><span class="line">    string var1;</span><br><span class="line">    string var2;</span><br><span class="line">    string res;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">calculate</span><span class="params">(tri &amp;tr)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(tri t)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rev</span><span class="params">(string &amp;str)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rev</span><span class="params">(string &amp;str)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> len = str.<span class="built_in">length</span>();</span><br><span class="line">    <span class="type">int</span> n = len<span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=n)&#123;</span><br><span class="line">        <span class="comment">//Using the swap method to switch values at each index</span></span><br><span class="line">        <span class="built_in">swap</span>(str[i],str[n]);</span><br><span class="line">        n = n<span class="number">-1</span>;</span><br><span class="line">        i = i+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fit</span><span class="params">(string&amp; str, <span class="type">int</span> len_i, <span class="type">int</span> len_f)</span></span>&#123;</span><br><span class="line"><span class="comment">//    while(str.front()==&#x27;0&#x27;)</span></span><br><span class="line"><span class="comment">//        str.erase(0, 1);</span></span><br><span class="line">    <span class="comment">//cout&lt;&lt;&quot;?&quot;&lt;&lt;str&lt;&lt;&quot;?&quot;&lt;&lt;len_i&lt;&lt;len_f&lt;&lt;endl;</span></span><br><span class="line">    <span class="keyword">if</span>(str.<span class="built_in">front</span>()==<span class="string">&#x27;.&#x27;</span>||str.<span class="built_in">empty</span>())</span><br><span class="line">        str.<span class="built_in">insert</span>(<span class="number">0</span>, <span class="string">&quot;0&quot;</span>);</span><br><span class="line">    <span class="type">int</span> dot = str.<span class="built_in">find</span>(<span class="string">&#x27;.&#x27;</span>)==<span class="number">-1</span> ? str.<span class="built_in">size</span>() : str.<span class="built_in">find</span>(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">    <span class="type">int</span> i = len_i - dot;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;i; j++)&#123;</span><br><span class="line">        str.<span class="built_in">insert</span>(<span class="number">0</span>, <span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> back0 = len_i+len_f - str.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">if</span>(len_f!=<span class="number">0</span>)</span><br><span class="line">        back0+=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;back0; j++)&#123;</span><br><span class="line">        str.<span class="built_in">append</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//cout&lt;&lt;&quot;!&quot;&lt;&lt;str&lt;&lt;endl;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">calculate</span><span class="params">(tri &amp;tr)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!(tr.res.<span class="built_in">empty</span>()))</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    tri t = tr;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> dot1 = t.var1.<span class="built_in">find</span>(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(dot1==<span class="number">-1</span>)&#123;</span><br><span class="line">        dot1 = t.var1.<span class="built_in">size</span>();</span><br><span class="line">        t.var1.<span class="built_in">push_back</span>(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> dot2 = t.var2.<span class="built_in">find</span>(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(dot2==<span class="number">-1</span>)&#123;</span><br><span class="line">        dot2 = t.var2.<span class="built_in">size</span>();</span><br><span class="line">        t.var2.<span class="built_in">push_back</span>(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    string &amp;s = dot1&lt;dot2 ? t.var1 : t.var2;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="built_in">abs</span>(dot1-dot2); i++)&#123;</span><br><span class="line">        s.<span class="built_in">insert</span>(<span class="number">0</span>, <span class="string">&quot;0&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    string &amp;s2 = t.var1.<span class="built_in">size</span>()&lt;t.var2.<span class="built_in">size</span>() ? t.var1 : t.var2;</span><br><span class="line">    <span class="keyword">while</span>(t.var1.<span class="built_in">size</span>()!=t.var2.<span class="built_in">size</span>())&#123;</span><br><span class="line">        s2.<span class="built_in">push_back</span>(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    string::reverse_iterator i1 = t.var1.<span class="built_in">rbegin</span>();</span><br><span class="line">    string::reverse_iterator i2 = t.var2.<span class="built_in">rbegin</span>();</span><br><span class="line">    <span class="type">int</span> bit1=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> bit2=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> bitres = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> carry = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i1!=t.var1.<span class="built_in">rend</span>() &amp;&amp; i2!=t.var2.<span class="built_in">rend</span>())&#123;</span><br><span class="line">        <span class="keyword">if</span>(*i1==<span class="string">&#x27;.&#x27;</span>)&#123;</span><br><span class="line">            t.res.<span class="built_in">push_back</span>(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">            i1++;</span><br><span class="line">            i2++;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        bit1 = *i1<span class="number">-48</span>;</span><br><span class="line">        i1++;</span><br><span class="line">        </span><br><span class="line">        bit2 = *i2<span class="number">-48</span>;</span><br><span class="line">        i2++;</span><br><span class="line">        </span><br><span class="line">        bitres = (bit1+bit2+carry)%<span class="number">10</span>;</span><br><span class="line">        carry = (bit1+bit2+carry)/<span class="number">10</span>;</span><br><span class="line">        t.res.<span class="built_in">push_back</span>(bitres+<span class="number">48</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    t.res.<span class="built_in">push_back</span>(carry+<span class="number">48</span>);</span><br><span class="line">    <span class="built_in">rev</span>(t.res);</span><br><span class="line">    <span class="keyword">while</span>(t.res.<span class="built_in">front</span>()==<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">        t.res.<span class="built_in">erase</span>(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(t.res.<span class="built_in">front</span>()==<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        t.res.<span class="built_in">insert</span>(<span class="number">0</span>, <span class="string">&quot;0&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(t.res.<span class="built_in">back</span>()==<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        t.res.<span class="built_in">pop_back</span>();</span><br><span class="line">    tr.res = t.res;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(tri t)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> len_i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> len_f = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(t.var1.<span class="built_in">find</span>(<span class="string">&#x27;.&#x27;</span>) == <span class="number">-1</span>)</span><br><span class="line">        len_i = t.var1.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">if</span>(t.var2.<span class="built_in">find</span>(<span class="string">&#x27;.&#x27;</span>) == <span class="number">-1</span>)</span><br><span class="line">        len_i = <span class="built_in">max</span>(len_i, (<span class="type">int</span>)t.var2.<span class="built_in">size</span>());</span><br><span class="line">    <span class="keyword">if</span>(t.res.<span class="built_in">find</span>(<span class="string">&#x27;.&#x27;</span>) == <span class="number">-1</span>)</span><br><span class="line">        len_i = <span class="built_in">max</span>(len_i, (<span class="type">int</span>)t.res.<span class="built_in">size</span>());</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        len_f = t.res.<span class="built_in">size</span>() - t.res.<span class="built_in">find</span>(<span class="string">&#x27;.&#x27;</span>)<span class="number">-1</span>;</span><br><span class="line">    len_i = <span class="built_in">max</span>(len_i , (<span class="type">int</span>)t.var1.<span class="built_in">find</span>(<span class="string">&#x27;.&#x27;</span>));</span><br><span class="line">    len_i = <span class="built_in">max</span>(len_i, (<span class="type">int</span>)t.var2.<span class="built_in">find</span>(<span class="string">&#x27;.&#x27;</span>));</span><br><span class="line">    len_i = <span class="built_in">max</span>(len_i, (<span class="type">int</span>)t.res.<span class="built_in">find</span>(<span class="string">&#x27;.&#x27;</span>));</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="built_in">fit</span>(t.var1, len_i, len_f);</span><br><span class="line">    <span class="built_in">fit</span>(t.var2, len_i, len_f);</span><br><span class="line">    <span class="built_in">fit</span>(t.res, len_i, len_f);</span><br><span class="line">    <span class="function">string <span class="title">div</span><span class="params">(t.res.size()+<span class="number">3</span>, <span class="string">&#x27;-&#x27;</span>)</span></span>;</span><br><span class="line">    <span class="function">string <span class="title">blank</span><span class="params">(<span class="string">&quot;   &quot;</span>)</span></span>;</span><br><span class="line">    cout&lt;&lt;blank&lt;&lt;t.var1&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;+  &quot;</span>&lt;&lt;t.var2&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;div&lt;&lt;endl;</span><br><span class="line">    string s = t.res;</span><br><span class="line">    cout&lt;&lt;blank&lt;&lt;s&lt;&lt;endl;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    tri t;</span><br><span class="line">    cin&gt;&gt;t.var1 &gt;&gt;t.var2;</span><br><span class="line">    <span class="built_in">calculate</span>(t);</span><br><span class="line">    <span class="built_in">print</span>(t);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> string target = <span class="string">&quot;fattyhappy&quot;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> length = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; <span class="title">check</span><span class="params">(<span class="type">int</span> index, string str)</span></span>&#123;</span><br><span class="line">    <span class="function">pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; <span class="title">ans</span><span class="params">(<span class="number">-1</span>, <span class="number">-1</span>)</span></span>;</span><br><span class="line">    string sub = str.<span class="built_in">substr</span>(index, length);</span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;length; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(sub[i] != target[i])&#123;</span><br><span class="line">            count++;</span><br><span class="line">            v.<span class="built_in">push_back</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(count==<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt;(<span class="number">2</span>+index, <span class="number">3</span>+index);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (count==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;str.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;=index &amp;&amp; i&lt;index+length)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(str[i] == target[v.<span class="built_in">front</span>()])&#123;</span><br><span class="line">                ans.first = <span class="built_in">min</span>(i, index+v.<span class="built_in">front</span>());</span><br><span class="line">                ans.second = <span class="built_in">max</span>(i, index+v.<span class="built_in">front</span>());</span><br><span class="line">                <span class="keyword">return</span> ans;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(count==<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="built_in">swap</span>(sub[v[<span class="number">0</span>]], sub[v[<span class="number">1</span>]]);</span><br><span class="line">        <span class="keyword">if</span>(sub == target)&#123;</span><br><span class="line">            ans.first = v[<span class="number">0</span>]+index;</span><br><span class="line">            ans.second = v[<span class="number">1</span>]+index;</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; <span class="title">findexchange</span><span class="params">(string str)</span></span>&#123;</span><br><span class="line">    pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; ans;</span><br><span class="line">    ans.first = <span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> len = str.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i+length&lt;=len; i++)&#123;</span><br><span class="line">        ans = <span class="built_in">check</span>(i, str);</span><br><span class="line">        <span class="keyword">if</span>(ans.first!=<span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">v</span><span class="params">(t)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;t; i++)</span><br><span class="line">        cin&gt;&gt;v[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;t; i++)&#123;</span><br><span class="line">        pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; ans = <span class="built_in">findexchange</span>(v[i]);</span><br><span class="line">        <span class="keyword">if</span>(ans.first == <span class="number">-1</span>)</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;-1&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cout&lt;&lt;ans.first+<span class="number">1</span>&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;ans.second+<span class="number">1</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//    pair&lt;int, int&gt; ans = findexchange(&quot;fattyhappyasdasdas&quot;);</span></span><br><span class="line">    <span class="comment">//    cout&lt;&lt;ans.first+1&lt;&lt;&quot; &quot;&lt;&lt;ans.second+1&lt;&lt;endl;</span></span><br><span class="line">    <span class="comment">//    return 0;</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">direction</span>&#123;LEFT=<span class="number">-1</span>, RIGHT=<span class="number">1</span>, EMPTY=<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">brid</span>&#123;</span><br><span class="line">    <span class="type">bool</span> valid=<span class="literal">false</span>;</span><br><span class="line">    direction d;</span><br><span class="line">    <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">    string str;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rev</span><span class="params">(string &amp;str)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> len = str.<span class="built_in">length</span>();</span><br><span class="line">    <span class="type">int</span> n = len<span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=n)&#123;</span><br><span class="line">        <span class="comment">//Using the swap method to switch values at each index</span></span><br><span class="line">        <span class="built_in">swap</span>(str[i],str[n]);</span><br><span class="line">        n = n<span class="number">-1</span>;</span><br><span class="line">        i = i+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">check</span><span class="params">(brid&amp; b)</span></span>&#123;</span><br><span class="line">    string&amp; str = b.str;</span><br><span class="line">    stack&lt;<span class="type">char</span>&gt; s;</span><br><span class="line">  <span class="type">int</span> length = str.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;length; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s.<span class="built_in">empty</span>())</span><br><span class="line">            s.<span class="built_in">push</span>(str[i]);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(s.<span class="built_in">top</span>()==<span class="string">&#x27;(&#x27;</span> &amp;&amp; str[i]==<span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">                s.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                s.<span class="built_in">push</span>(str[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    str.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">while</span>(!s.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        str.<span class="built_in">push_back</span>(s.<span class="built_in">top</span>());</span><br><span class="line">        s.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">rev</span>(str);</span><br><span class="line">    </span><br><span class="line">    b.valid = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(b.str.<span class="built_in">find</span>(<span class="string">&#x27;(&#x27;</span>)!=<span class="number">-1</span>)&#123;</span><br><span class="line">        b.d = LEFT;</span><br><span class="line">        <span class="keyword">if</span>(b.str.<span class="built_in">find</span>(<span class="string">&#x27;)&#x27;</span>)!=<span class="number">-1</span>)&#123;</span><br><span class="line">            b.valid = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        b.d = RIGHT;</span><br><span class="line">    <span class="keyword">if</span>(b.str.<span class="built_in">empty</span>())</span><br><span class="line">        b.d = EMPTY;</span><br><span class="line">    b.count = b.str.<span class="built_in">size</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">v</span><span class="params">(t)</span></span>;</span><br><span class="line">    vector&lt;brid&gt; vnew;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;t; i++)&#123;</span><br><span class="line">        cin&gt;&gt;v[i];</span><br><span class="line">        brid b;</span><br><span class="line">        b.str = v[i];</span><br><span class="line">        <span class="built_in">check</span>(b);</span><br><span class="line">        <span class="keyword">if</span>(b.valid)</span><br><span class="line">            vnew.<span class="built_in">push_back</span>(b);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    t = vnew.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;t; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>; j&lt;t; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(vnew[i].valid &amp;&amp; vnew[j].valid&amp;&amp;(vnew[i].d + vnew[j].d) == <span class="number">0</span> &amp;&amp; vnew[i].count == vnew[j].count )</span><br><span class="line">            &#123;</span><br><span class="line">                vnew[i].valid = <span class="literal">false</span>;</span><br><span class="line">                vnew[j].valid = <span class="literal">false</span>;</span><br><span class="line">                ans++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="任务安排">任务安排</h2>
<figure>
<img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5lpnu7a7mj21300koaco.jpg" alt="截屏2022-08-27 22.50.56" /><figcaption aria-hidden="true">截屏2022-08-27 22.50.56</figcaption>
</figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 500000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">timelimit</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> s;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> e;</span><br><span class="line">&#125;timelimit;</span><br><span class="line">timelimit T[N];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">compare</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* a,<span class="type">const</span> <span class="type">void</span>* b)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> (*(timelimit*)a).e-(*(timelimit*)b).e;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> n, ans = <span class="number">0</span>, i;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;(T[i].s));</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;(T[i].e));</span><br><span class="line">    &#125;</span><br><span class="line">    qsort (T, n, <span class="keyword">sizeof</span>(timelimit), &amp;compare);</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> end = <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=n<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(T[i].s&gt;=end)</span><br><span class="line">        &#123;</span><br><span class="line">            end = T[i].e;</span><br><span class="line">            ans=ans+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="刷房子">刷房子</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">building_</span>&#123;</span><br><span class="line">    <span class="type">int</span> h;</span><br><span class="line">    <span class="type">int</span> c;</span><br><span class="line">&#125;building;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">ans</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="type">int</span> amount;</span><br><span class="line">        cin&gt;&gt;amount;</span><br><span class="line">        <span class="function">vector&lt;building&gt; <span class="title">buildings</span><span class="params">(amount)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;amount; j++)</span><br><span class="line">            cin&gt;&gt;buildings[j].c;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;amount; j++)</span><br><span class="line">            cin&gt;&gt;buildings[j].h;</span><br><span class="line">        </span><br><span class="line">        stack&lt;building&gt; s;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">colors</span>(amount);</span><br><span class="line">        ans[i].<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">        colors[<span class="number">0</span>].<span class="built_in">push_back</span>(buildings[<span class="number">0</span>].c);</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;amount; j++)&#123;</span><br><span class="line">            <span class="type">int</span> tallest = j;</span><br><span class="line">            vector&lt;<span class="type">int</span>&gt; newcolor;</span><br><span class="line">            <span class="type">int</span> k;</span><br><span class="line">            <span class="keyword">for</span>(k=j<span class="number">-1</span>; k&gt;=<span class="number">0</span>; k--)&#123;</span><br><span class="line">                <span class="keyword">if</span>(buildings[k].h&lt;=buildings[tallest].h)&#123;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    colors[j] = colors[k];</span><br><span class="line">                    <span class="keyword">if</span>(<span class="built_in">find</span>(colors[j].<span class="built_in">begin</span>(), colors[j].<span class="built_in">end</span>(), buildings[j].c)==colors[j].<span class="built_in">end</span>())&#123;</span><br><span class="line">                        colors[j].<span class="built_in">push_back</span>(buildings[k].c);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(k==<span class="number">-1</span>)</span><br><span class="line">                colors[j].<span class="built_in">push_back</span>(buildings[j].c);</span><br><span class="line">            </span><br><span class="line">            ans[i].<span class="built_in">push_back</span>(colors[j].<span class="built_in">size</span>());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;ans.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;ans[i].<span class="built_in">size</span>()<span class="number">-1</span>; j++)&#123;</span><br><span class="line">            cout&lt;&lt;ans[i][j]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;ans[i].<span class="built_in">back</span>()&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//        for(int j=0; j&lt;amount; j++)</span></span><br><span class="line"><span class="comment">//            cout&lt;&lt;buildings[j].c&lt;&lt;&quot;?&quot;&lt;&lt;buildings[j].h&lt;&lt;endl;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="简单难度题目合集">简单难度题目合集</h1>
<p>这里的题目难度比较小， 大多是模拟题，或者是很容易看出解法的题目，另外简单题目一般使用暴力法都是可以解决的。 这个时候只有看一下数据范围，思考下你的算法复杂度就行了。</p>
<p>当然也不排除很多 hard 题目也可以暴力模拟，大家平时多注意数据范围即可。</p>
<p>以下是我列举的经典题目（带 91 字样的表示出自 <strong>91 天学算法</strong>活动）：</p>
<h2 id="面试题-17.12.-binode"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/binode-lcci.md">面试题 17.12. BiNode</a> 👍</h2>
<h2 id="两数之和"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1.two-sum.md">0001. 两数之和</a></h2>
<p>unordered_map</p>
<h2 id="有效的括号"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/20.valid-parentheses.md">0020. 有效的括号</a></h2>
<h2 id="合并两个有序链表"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/21.merge-two-sorted-lists.md">0021. 合并两个有序链表</a></h2>
<p>递归?</p>
<h2 id="删除排序数组中的重复项"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/26.remove-duplicates-from-sorted-array.md">0026. 删除排序数组中的重复项</a></h2>
<p>使用快慢指针来记录遍历的坐标。</p>
<ul>
<li>开始时这两个指针都指向第一个数字</li>
<li>如果两个指针指的数字相同，则快指针向前走一步</li>
<li>如果不同，则两个指针都向前走一步</li>
<li>当快指针走完整个数组后，慢指针当前的坐标加 1 就是数组中不同数字的个数</li>
</ul>
<h2 id="最大子序和"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/53.maximum-sum-subarray-cn.md">0053. 最大子序和</a></h2>
<p>前缀和, 动态规划</p>
<h2 id="加一-91"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/66.plus-one.md">0066. 加一</a> 91</h2>
<h2 id="合并两个有序数组"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/88.merge-sorted-array.md">0088. 合并两个有序数组</a></h2>
<h2 id="对称二叉树"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/101.symmetric-tree.md">0101. 对称二叉树</a></h2>
<p>how to recursive</p>
<h2 id="二叉树的最大深度"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/104.maximum-depth-of-binary-tree.md">0104. 二叉树的最大深度</a></h2>
<p>try iteration</p>
<h2 id="将有序数组转换为二叉搜索树"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/108.convert-sorted-array-to-binary-search-tree.md">0108. 将有序数组转换为二叉搜索树</a></h2>
<p>二叉搜索树是一种节点值之间具有一定数量级次序的二叉树，对于树中每个节点：</p>
<ul>
<li>若其左子树存在，则其左子树中每个节点的值都不大于该节点值；</li>
<li>若其右子树存在，则其右子树中每个节点的值都不小于该节点值。</li>
</ul>
<h2 id="买卖股票的最佳时机"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/121.best-time-to-buy-and-sell-stock.md">0121. 买卖股票的最佳时机</a></h2>
<h2 id="买卖股票的最佳时机-ii"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/122.best-time-to-buy-and-sell-stock-ii.md">0122. 买卖股票的最佳时机 II</a></h2>
<h2 id="验证回文串"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/125.valid-palindrome.md">0125. 验证回文串</a></h2>
<h2 id="只出现一次的数字"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/136.single-number.md">0136. 只出现一次的数字</a></h2>
<p>异或</p>
<h2 id="最小栈"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/155.min-stack.md">0155. 最小栈</a> 👍</h2>
<p>???</p>
<h2 id="相交链表-91"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/160.Intersection-of-Two-Linked-Lists.md">0160. 相交链表</a> 91</h2>
<p>unordered_map count, insert</p>
<ul>
<li>例如使用 a, b 两个指针分别指向 A, B 这两条链表, 两个指针相同的速度向后移动,</li>
<li>当 a 到达链表的尾部时,重定位到链表 B 的头结点</li>
<li>当 b 到达链表的尾部时,重定位到链表 A 的头结点。</li>
<li>a, b 指针相遇的点为相交的起始节点，否则没有相交点</li>
</ul>
<h2 id="两数之和-ii-输入有序数组"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/167.two-sum-ii-input-array-is-sorted.md">0167. 两数之和 II 输入有序数组</a></h2>
<h2 id="多数元素"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/169.majority-element.md">0169. 多数元素</a></h2>
<p>多数元素是指在数组中出现次数 <strong>大于</strong> <code>⌊ n/2 ⌋</code> 的元素。</p>
<p>投票算法</p>
<h2 id="阶乘后的零"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/172.factorial-trailing-zeroes.md">0172. 阶乘后的零</a></h2>
<p>trick count 5</p>
<h2 id="颠倒二进制位"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/190.reverse-bits.md">0190. 颠倒二进制位</a></h2>
<p>位运算</p>
<h2 id="位-1-的个数"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/191.number-of-1-bits.md">0191. 位 1 的个数</a></h2>
<p>就是<code>n &amp; (n - 1)</code> 可以<code>消除</code> n 最后的一个 1 的原理。</p>
<h2 id="打家劫舍"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/198.house-robber.md">0198. 打家劫舍</a></h2>
<h2 id="移除链表元素"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/203.remove-linked-list-elements.md">0203. 移除链表元素</a></h2>
<p>重要※</p>
<h2 id="反转链表-1"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/206.reverse-linked-list.md">0206. 反转链表</a></h2>
<p>⭐️</p>
<h2 id="存在重复元素-ii"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/219.contains-duplicate-ii.md">0219. 存在重复元素 II</a></h2>
<p>hash</p>
<h2 id="翻转二叉树"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/226.invert-binary-tree.md">0226. 翻转二叉树</a></h2>
<p>迭代</p>
<h2 id="用栈实现队列-91"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/232.implement-queue-using-stacks.md">0232. 用栈实现队列</a> 👍 91</h2>
<h2 id="丑数"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/263.ugly-number.md">0263. 丑数</a></h2>
<p>use for and function call</p>
<h2 id="移动零"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/283.move-zeroes.md">0283. 移动零</a></h2>
<h2 id="的幂"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/342.power-of-four.md">0342. 4 的幂</a> 👍</h2>
<h2 id="两个数组的交集"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/349.intersection-of-two-arrays.md">0349. 两个数组的交集</a></h2>
<h2 id="两整数之和"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/371.sum-of-two-integers.md">0371. 两整数之和</a></h2>
<h2 id="二进制手表"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/401.binary-watch.md">401. 二进制手表</a></h2>
<h2 id="路径总和-iii"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/437.path-sum-iii.md">0437. 路径总和 III</a></h2>
<p>!</p>
<h2 id="分发饼干"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/455.AssignCookies.md">0455. 分发饼干</a></h2>
<h2 id="七进制数"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/504.base-7.md">0504. 七进制数</a></h2>
<h2 id="分糖果"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/575.distribute-candies.md">0575. 分糖果</a></h2>
<h2 id="非递减数列"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/665.non-decreasing-array.md">0665. 非递减数列</a></h2>
<h2 id="字符的最短距离-91"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/821.shortest-distance-to-a-character.md">821. 字符的最短距离</a> 91</h2>
<h2 id="模拟行走机器人"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/874.walking-robot-simulation.md">0874. 模拟行走机器人</a></h2>
<h2 id="等价多米诺骨牌对的数量"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1128.number-of-equivalent-domino-pairs.md">1128. 等价多米诺骨牌对的数量</a></h2>
<h2 id="二维网格迁移"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1260.shift-2d-grid.md">1260. 二维网格迁移</a></h2>
<h2 id="删除回文子序列"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1332.remove-palindromic-subsequences.md">1332. 删除回文子序列</a></h2>
<h1 id="中等难度题目合集">中等难度题目合集</h1>
<p>中等题目是力扣比例最大的部分，因此这部分我的题解也是最多的。 大家不要太过追求难题，先把中等难度题目做熟了再说。</p>
<p>这部分的题目要不需要我们挖掘题目的内含信息， 将其抽象成简单题目。 要么是一些写起来比较麻烦的题目， 一些人编码能力不行就挂了。因此大家一定要自己做， 即使看了题解”会了“，也要自己码一遍。自己不亲自写一遍，里面的细节永远不知道。</p>
<p>以下是我列举的经典题目（带 91 字样的表示出自 <strong>91 天学算法</strong>活动）：</p>
<h2 id="面试题-17.09.-第-k-个数"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/get-kth-magic-number-lcci.md">面试题 17.09. 第 k 个数</a></h2>
<h2 id="面试题-17.23.-最大黑方阵"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/max-black-square-lcci.md">面试题 17.23. 最大黑方阵</a></h2>
<h2 id="面试题-16.16.-部分排序"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/sub-sort-lcci.md">面试题 16.16. 部分排序</a></h2>
<h2 id="increasing-digits"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/Increasing-Digits.md">Increasing Digits</a> 👍</h2>
<h2 id="longest-contiguously-strictly-increasing-sublist-after-deletion"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/Longest-Contiguously-Strictly-Increasing-Sublist-After-Deletion.md">Longest Contiguously Strictly Increasing Sublist After Deletion</a> 👍</h2>
<h2 id="consecutive-wins"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/consecutive-wins.md">Consecutive Wins</a></h2>
<h2 id="sort-string-by-flipping"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/Sort-String-by-Flipping.md">Sort-String-by-Flipping</a></h2>
<h2 id="number-of-substrings-with-single-character-difference"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/Number-of-Substrings-with-Single-Character-Difference.md">Number of Substrings with Single Character Difference</a></h2>
<h2 id="bus-fare"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/Bus-Fare.md">Bus Fare</a> 👍</h2>
<h2 id="minimum-dropping-path-sum"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/Minimum-Dropping-Path-Sum.md">Minimum Dropping Path Sum</a></h2>
<h2 id="longest-matrix-path-length"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/Longest-Matrix-Path-Length.md">Longest-Matrix-Path-Length</a></h2>
<h2 id="every-sublist-min-sum"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/Every-Sublist-Min-Sum.md">Every Sublist Min Sum</a></h2>
<h2 id="maximize-the-number-of-equivalent-pairs-after-swaps"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/Maximize-the-Number-of-Equivalent-Pairs-After-Swaps.md">Maximize the Number of Equivalent Pairs After Swaps</a></h2>
<h2 id="两数相加"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/2.add-two-numbers.md">0002. 两数相加</a></h2>
<h2 id="无重复字符的最长子串"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/3.longest-substring-without-repeating-characters.md">0003. 无重复字符的最长子串</a></h2>
<h2 id="最长回文子串"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/5.longest-palindromic-substring.md">0005. 最长回文子串</a></h2>
<h2 id="盛最多水的容器"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/11.container-with-most-water.md">0011. 盛最多水的容器</a></h2>
<h2 id="三数之和"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/15.3sum.md">0015. 三数之和</a></h2>
<h2 id="电话号码的字母组合"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/17.Letter-Combinations-of-a-Phone-Number.md">0017. 电话号码的字母组合</a></h2>
<h2 id="删除链表的倒数第-n-个节点"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/19.removeNthNodeFromEndofList.md">0019. 删除链表的倒数第 N 个节点</a></h2>
<h2 id="括号生成"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/22.generate-parentheses.md">0022. 括号生成</a></h2>
<h2 id="两两交换链表中的节点"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/24.swapNodesInPairs.md">0024. 两两交换链表中的节点</a></h2>
<h2 id="两数相除"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/29.divide-two-integers.md">0029. 两数相除</a></h2>
<h2 id="下一个排列"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/31.next-permutation.md">0031. 下一个排列</a></h2>
<h2 id="搜索旋转排序数组"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/33.search-in-rotated-sorted-array.md">0033. 搜索旋转排序数组</a></h2>
<h2 id="组合总和"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/39.combination-sum.md">0039. 组合总和</a></h2>
<h2 id="组合总和-ii"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/40.combination-sum-ii.md">0040. 组合总和 II</a></h2>
<h2 id="全排列"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/46.permutations.md">0046. 全排列</a></h2>
<h2 id="全排列-ii"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/47.permutations-ii.md">0047. 全排列 II</a></h2>
<h2 id="旋转图像"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/48.rotate-image.md">0048. 旋转图像</a></h2>
<h2 id="字母异位词分组"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/49.group-anagrams.md">0049. 字母异位词分组</a></h2>
<h2 id="powx-n"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/50.pow-x-n.md">0050. Pow(x, n)</a> 👍</h2>
<h2 id="跳跃游戏"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/55.jump-game.md">0055. 跳跃游戏</a></h2>
<h2 id="合并区间"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/56.merge-intervals.md">0056. 合并区间</a></h2>
<h2 id="第-k-个排列"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/60.permutation-sequence.md">0060. 第 k 个排列</a> 👍</h2>
<h2 id="旋转链表-91"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/61.Rotate-List.md">0061. 旋转链表</a> 91</h2>
<h2 id="不同路径"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/62.unique-paths.md">0062. 不同路径</a></h2>
<h2 id="矩阵置零"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/73.set-matrix-zeroes.md">0073. 矩阵置零</a></h2>
<h2 id="颜色分类"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/75.sort-colors.md">0075. 颜色分类</a> 👍</h2>
<h2 id="子集"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/78.subsets.md">0078. 子集</a></h2>
<h2 id="单词搜索"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/79.word-search.md">0079. 单词搜索</a></h2>
<h2 id="删除排序数组中的重复项-ii"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/80.remove-duplicates-from-sorted-array-ii.md">0080. 删除排序数组中的重复项 II</a></h2>
<h2 id="分隔链表"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/86.partition-list.md">0086. 分隔链表</a></h2>
<h2 id="子集-ii"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/90.subsets-ii.md">0090. 子集 II</a></h2>
<h2 id="解码方法"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/91.decode-ways.md">0091. 解码方法</a></h2>
<h2 id="反转链表-ii"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/92.reverse-linked-list-ii.md">0092. 反转链表 II</a></h2>
<h2 id="二叉树的中序遍历"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/94.binary-tree-inorder-traversal.md">0094. 二叉树的中序遍历</a> 👍</h2>
<h2 id="不同的二叉搜索树-ii"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/95.unique-binary-search-trees-ii.md">0095. 不同的二叉搜索树 II</a></h2>
<h2 id="不同的二叉搜索树"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/96.unique-binary-search-trees.md">0096. 不同的二叉搜索树</a></h2>
<h2 id="验证二叉搜索树"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/98.validate-binary-search-tree.md">0098. 验证二叉搜索树</a></h2>
<h2 id="二叉树的层序遍历"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/102.binary-tree-level-order-traversal.md">0102. 二叉树的层序遍历</a></h2>
<h2 id="二叉树的锯齿形层次遍历"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/103.binary-tree-zigzag-level-order-traversal.md">0103. 二叉树的锯齿形层次遍历</a></h2>
<h2 id="路径总和-ii"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/113.path-sum-ii.md">0113. 路径总和 II</a></h2>
<h2 id="求根到叶子节点数字之和"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/129.sum-root-to-leaf-numbers.md">0129. 求根到叶子节点数字之和</a> 👍</h2>
<h2 id="被围绕的区域"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/130.surrounded-regions.md">0130. 被围绕的区域</a></h2>
<h2 id="分割回文串"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/131.palindrome-partitioning.md">0131. 分割回文串</a></h2>
<h2 id="单词拆分"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/139.word-break.md">0139. 单词拆分</a></h2>
<h2 id="二叉树的前序遍历"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/144.binary-tree-preorder-traversal.md">0144. 二叉树的前序遍历</a></h2>
<h2 id="对链表进行插入排序"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/147.insertion-sort-list.md">0147. 对链表进行插入排序</a></h2>
<h2 id="逆波兰表达式求值"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/150.evaluate-reverse-polish-notation.md">0150. 逆波兰表达式求值</a></h2>
<h2 id="乘积最大子数组"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/152.maximum-product-subarray.md">0152. 乘积最大子数组</a></h2>
<h2 id="寻找旋转排序数组中的最小值"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/153.find-minimum-in-rotated-sorted-array.md">0153. 寻找旋转排序数组中的最小值</a></h2>
<h2 id="二叉树的右视图"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/199.binary-tree-right-side-view.md">0199. 二叉树的右视图</a> 👍</h2>
<h2 id="岛屿数量"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/200.number-of-islands.md">0200. 岛屿数量</a> 👍</h2>
<h2 id="数字范围按位与"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/201.bitwise-and-of-numbers-range.md">0201. 数字范围按位与</a></h2>
<h2 id="实现-trie-前缀树"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/208.implement-trie-prefix-tree.md">0208. 实现 Trie (前缀树)</a></h2>
<h2 id="长度最小的子数组"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/209.minimum-size-subarray-sum.md">0209. 长度最小的子数组</a></h2>
<h2 id="添加与搜索单词-数据结构设计"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/211.add-and-search-word-data-structure-design.md">0211. 添加与搜索单词 ## 数据结构设计</a></h2>
<h2 id="数组中的第-k-个最大元素"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/215.kth-largest-element-in-an-array.md">0215. 数组中的第 K 个最大元素</a></h2>
<h2 id="存在重复元素-iii"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/220.contains-duplicate-iii.md">0220. 存在重复元素 III</a></h2>
<h2 id="最大正方形"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/221.maximal-square.md">0221. 最大正方形</a></h2>
<h2 id="基本计算器-ii"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/227.basic-calculator-ii.md">0227. 基本计算器 II</a></h2>
<h2 id="求众数-ii"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/229.majority-element-ii.md">0229. 求众数 II</a></h2>
<h2 id="二叉搜索树中第-k-小的元素"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/230.kth-smallest-element-in-a-bst.md">0230. 二叉搜索树中第 K 小的元素</a></h2>
<h2 id="二叉树的最近公共祖先"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/236.lowest-common-ancestor-of-a-binary-tree.md">0236. 二叉树的最近公共祖先</a></h2>
<h2 id="除自身以外数组的乘积"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/238.product-of-array-except-self.md">0238. 除自身以外数组的乘积</a></h2>
<h2 id="搜索二维矩阵-ii"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/240.search-a-2-d-matrix-ii.md">0240. 搜索二维矩阵 II</a></h2>
<h2 id="完全平方数"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/279.perfect-squares.md">0279. 完全平方数</a></h2>
<h2 id="最佳买卖股票时机含冷冻期"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/309.best-time-to-buy-and-sell-stock-with-cooldown.md">0309. 最佳买卖股票时机含冷冻期</a></h2>
<h2 id="零钱兑换"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/322.coin-change.md">0322. 零钱兑换</a> 👍</h2>
<h2 id="奇偶链表"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/328.odd-even-linked-list.md">0328. 奇偶链表</a></h2>
<h2 id="验证二叉树的前序序列化"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/328.odd-even-linked-list.md">0331. 验证二叉树的前序序列化</a></h2>
<h2 id="递增的三元子序列"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/334.increasing-triplet-subsequence.md">0334. 递增的三元子序列</a></h2>
<h2 id="打家劫舍-iii"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/337.house-robber-iii.md">0337. 打家劫舍 III</a></h2>
<h2 id="整数拆分"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/343.integer-break.md">0343. 整数拆分</a></h2>
<h2 id="水壶问题"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/365.water-and-jug-problem.md">0365. 水壶问题</a></h2>
<h2 id="有序矩阵中第-k-小的元素"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/378.kth-smallest-element-in-a-sorted-matrix.md">0378. 有序矩阵中第 K 小的元素</a></h2>
<h2 id="常数时间插入删除和获取随机元素"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/380.insert-delete-getrandom-o1.md">0380. 常数时间插入、删除和获取随机元素</a></h2>
<h2 id="迷你语法分析器"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/385.mini-parser.md">0385. 迷你语法分析器</a></h2>
<h2 id="字符串解码-91"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/394.decode-string.md">0394. 字符串解码</a> 91</h2>
<h2 id="分割等和子集"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/416.partition-equal-subset-sum.md">0416. 分割等和子集</a></h2>
<h2 id="替换后的最长重复字符"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/424.longest-repeating-character-replacement.md">0424. 替换后的最长重复字符</a></h2>
<h2 id="找到字符串中所有字母异位词"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/438.find-all-anagrams-in-a-string.md">0438. 找到字符串中所有字母异位词</a></h2>
<h2 id="两数相加-ii"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/445.add-two-numbers-ii.md">0445. 两数相加 II</a></h2>
<h2 id="四数相加-ii"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/454.4-sum-ii.md">0454. 四数相加 II</a></h2>
<h2 id="模式"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/456.132-pattern.md">0456. 132 模式</a></h2>
<h2 id="环形数组是否存在循环"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/457.circular-array-loop.md">0457.457. 环形数组是否存在循环</a></h2>
<h2 id="我能赢么"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/464.can-i-win.md">0464. 我能赢么</a></h2>
<h2 id="用-rand7-实现-rand10"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/470.implement-rand10-using-rand7.md">0470. 用 Rand7() 实现 Rand10</a></h2>
<h2 id="火柴拼正方形"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/473.matchsticks-to-square.md">0473. 火柴拼正方形</a> 👍</h2>
<h2 id="目标和"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/494.target-sum.md">0494. 目标和</a></h2>
<h2 id="最长回文子序列"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/516.longest-palindromic-subsequence.md">0516. 最长回文子序列</a></h2>
<h2 id="找树左下角的值-91"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/513.find-bottom-left-tree-value.md">0513. 找树左下角的值</a> 91</h2>
<h2 id="零钱兑换-ii"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/518.coin-change-2.md">0518. 零钱兑换 II</a></h2>
<h2 id="连续数组"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/525.contiguous-array.md">0525. 连续数组</a></h2>
<h2 id="朋友圈"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/547.friend-circles.md">0547. 朋友圈</a></h2>
<h2 id="和为-k-的子数组"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/560.subarray-sum-equals-k.md">0560. 和为 K 的子数组</a></h2>
<h2 id="在系统中查找重复文件"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/609.find-duplicate-file-in-system.md">0609. 在系统中查找重复文件</a></h2>
<h2 id="有效三角形的个数"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/611.valid-triangle-number.md">0611. 有效三角形的个数</a> 👍</h2>
<h2 id="最长递增子序列的个数"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/673.number-of-longest-increasing-subsequence.md">0673. 最长递增子序列的个数</a></h2>
<h2 id="重复叠加字符串匹配"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/686.repeated-string-match.md">0686. 重复叠加字符串匹配</a></h2>
<h2 id="最长重复子数组"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/718.maximum-length-of-repeated-subarray.md">0718. 最长重复子数组</a></h2>
<h2 id="买卖股票的最佳时机含手续费"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/714.best-time-to-buy-and-sell-stock-with-transaction-fee.md">0714. 买卖股票的最佳时机含手续费</a></h2>
<h2 id="行星碰撞"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/735.asteroid-collision.md">0735. 行星碰撞</a> 👍</h2>
<h2 id="到达终点数字"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/754.reach-a-number.md">0754. 到达终点数字</a></h2>
<h2 id="判断二分图"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/785.is-graph-bipartite.md">0785. 判断二分图</a></h2>
<h2 id="多米诺和托米诺平铺"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/790.domino-and-tromino-tiling.md">0790. 多米诺和托米诺平铺</a></h2>
<h2 id="香槟塔"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/799.champagne-tower.md">0799. 香槟塔</a></h2>
<h2 id="使序列递增的最小交换次数"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/801.minimum-swaps-to-make-sequences-increasing.md">0801. 使序列递增的最小交换次数</a></h2>
<h2 id="模糊坐标"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/816.ambiguous-coordinates.md">0816. 模糊坐标</a></h2>
<h2 id="单词的压缩编码"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/820.short-encoding-of-words.md">0820. 单词的压缩编码</a></h2>
<h2 id="推多米诺"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/838.push-dominoes.md">0838. 推多米诺</a></h2>
<h2 id="最长的斐波那契子序列的长度"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/873.length-of-longest-fibonacci-subsequence.md">0873. 最长的斐波那契子序列的长度</a></h2>
<h2 id="爱吃香蕉的珂珂"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/875.koko-eating-bananas.md">0875. 爱吃香蕉的珂珂</a></h2>
<h2 id="石子游戏"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/877.stone-game.md">0877. 石子游戏</a></h2>
<h2 id="可能的二分法"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/886.possible-bipartition.md">0886. 可能的二分法</a></h2>
<h2 id="子数组按位或操作"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/898.bitwise-ors-of-subarrays.md">0898. 子数组按位或操作</a></h2>
<h2 id="rle-迭代器"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/900.rle-iterator.md">0900. RLE 迭代器</a></h2>
<h2 id="在线选举"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/911.online-election.md">0911. 在线选举</a></h2>
<h2 id="排序数组"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/912.sort-an-array.md">0912. 排序数组</a></h2>
<h2 id="漂亮数组"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/932.beautiful-array.md">0932. 漂亮数组</a></h2>
<h2 id="骑士拨号器"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/935.knight-dialer.md">0935. 骑士拨号器</a></h2>
<h2 id="移除最多的同行或同列石头"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/947.most-stones-removed-with-same-row-or-column.md">0947. 移除最多的同行或同列石头</a></h2>
<h2 id="由斜杠划分区域"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/959.regions-cut-by-slashes.md">0959. 由斜杠划分区域</a></h2>
<h2 id="最长湍流子数组"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/978.longest-turbulent-subarray.md">0978. 最长湍流子数组</a></h2>
<h2 id="二叉树的垂序遍历-91"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/987.vertical-order-traversal-of-a-binary-tree.md">0987. 二叉树的垂序遍历</a> 91</h2>
<h2 id="最大连续-1-的个数-iii"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1004.max-consecutive-ones-iii.md">1004. 最大连续 1 的个数 III</a></h2>
<h2 id="在-d-天内送达包裹的能力"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1011.capacity-to-ship-packages-within-d-days.md">1011. 在 D 天内送达包裹的能力</a></h2>
<h2 id="最佳观光组合"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1014.best-sightseeing-pair.md">1014. 最佳观光组合</a></h2>
<h2 id="可被-k-整除的最小整数"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1015.smallest-integer-divisible-by-k.md">1015. 可被 K 整除的最小整数</a></h2>
<h2 id="链表中的下一个更大节点"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1019.next-greater-node-in-linked-list.md">1019. 链表中的下一个更大节点</a></h2>
<h2 id="飞地的数量"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1020.number-of-enclaves.md">1020. 飞地的数量</a></h2>
<h2 id="驼峰式匹配"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1023.camelcase-matching.md">1023. 驼峰式匹配</a></h2>
<h2 id="两个非重叠子数组的最大和"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1031.maximum-sum-of-two-non-overlapping-subarrays.md">1031. 两个非重叠子数组的最大和</a></h2>
<h2 id="分隔数组以得到最大和"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1043.partition-array-for-maximum-sum.md">1043. 分隔数组以得到最大和</a></h2>
<h2 id="二叉树寻路"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1104.path-in-zigzag-labelled-binary-tree.md">1104. 二叉树寻路</a></h2>
<h2 id="颜色交替的最短路径"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1129.shortest-path-with-alternating-colors.md">1129. 颜色交替的最短路径</a></h2>
<h2 id="绝对值表达式的最大值"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1131.maximum-of-absolute-value-expression.md">1131.绝对值表达式的最大值</a></h2>
<h2 id="字母板上的路径"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1138.alphabet-board-path.md">1138. 字母板上的路径</a></h2>
<h2 id="删除一次得到子数组最大和"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1186.maximum-subarray-sum-with-one-deletion.md">1186. 删除一次得到子数组最大和</a></h2>
<h2 id="最长定差子序列"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1218.longest-arithmetic-subsequence-of-given-difference.md">1218. 最长定差子序列</a></h2>
<h2 id="飞机座位分配概率"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1227.airplane-seat-assignment-probability.md">1227. 飞机座位分配概率</a> 👍</h2>
<h2 id="在受污染的二叉树中查找元素"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1261.find-elements-in-a-contaminated-binary-tree.md">1261. 在受污染的二叉树中查找元素</a></h2>
<h2 id="可被三整除的最大和"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1262.greatest-sum-divisible-by-three.md">1262. 可被三整除的最大和</a></h2>
<h2 id="子串的最大出现次数"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1297.maximum-number-of-occurrences-of-a-substring.md">1297. 子串的最大出现次数</a></h2>
<h2 id="子数组异或查询"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1310.xor-queries-of-a-subarray.md">1310. 子数组异或查询</a></h2>
<h2 id="阈值距离内邻居最少的城市"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1334.find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance.md">1334. 阈值距离内邻居最少的城市</a></h2>
<h2 id="每个元音包含偶数次的最长子字符串"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1371.find-the-longest-substring-containing-vowels-in-even-counts.md">1371.每个元音包含偶数次的最长子字符串</a></h2>
<h2 id="设计一个支持增量操作的栈-91"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1381.design-a-stack-with-increment-operation.md">1381. 设计一个支持增量操作的栈</a> 91</h2>
<h2 id="可获得的最大点数"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1423.maximum-points-you-can-obtain-from-cards.md">1423. 可获得的最大点数</a></h2>
<h2 id="绝对差不超过限制的最长连续子数组"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1438.longest-continuous-subarray-with-absolute-diff-less-than-or-equal-to-limit.md">1438. 绝对差不超过限制的最长连续子数组</a></h2>
<h2 id="得到目标数组的最少函数调用次数"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1558.minimum-numbers-of-function-calls-to-make-target-array.md">1558. 得到目标数组的最少函数调用次数</a></h2>
<h2 id="删除最短的子数组使剩余数组有序"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1574.shortest-subarray-to-be-removed-to-make-array-sorted.md">1574. 删除最短的子数组使剩余数组有序</a></h2>
<h2 id="所有排列中的最大和"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1589.maximum-sum-obtained-of-any-permutation.md">1589. 所有排列中的最大和</a></h2>
<h2 id="最小体力消耗路径"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1631.path-with-minimum-effort.md">1631. 最小体力消耗路径</a></h2>
<h2 id="将-x-减到-0-的最小操作数"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1658.minimum-operations-to-reduce-x-to-zero.md">1658. 将 x 减到 0 的最小操作数</a></h2>
<h2 id="检查边长度限制的路径是否存在"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1697.checking-existence-of-edge-length-limited-paths.md">1697. 检查边长度限制的路径是否存在</a></h2>
<h2 id="满足三条件之一需改变的最少字符数"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1737.change-minimum-characters-to-satisfy-one-of-three-conditions.md">1737. 满足三条件之一需改变的最少字符数</a></h2>
<h2 id="单线程-cpu"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1834.single-threaded-cpu.md">1834. 单线程 CPU</a></h2>
<h2 id="合并若干三元组以形成目标三元组"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1899.merge-triplets-to-form-target-triplet.md">1899. 合并若干三元组以形成目标三元组</a> 👍</h2>
<h2 id="你完成的完整对局数"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1904.the-number-of-full-rounds-you-have-played.md">1904. 你完成的完整对局数</a></h2>
<h2 id="查询差绝对值的最小值"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1906.minimum-absolute-difference-queries.md">1906. 查询差绝对值的最小值</a></h2>
<h2 id="从双倍数组中还原原数组"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/2007.find-original-array-from-doubled-array.md">2007. 从双倍数组中还原原数组</a></h2>
<h2 id="出租车的最大盈利"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/2008.maximum-earnings-from-taxi.md">2008. 出租车的最大盈利</a></h2>
<h2 id="适合打劫银行的日子"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/5935.find-good-days-to-rob-the-bank.md">5935. 适合打劫银行的日子</a></h2>
<h2 id="引爆最多的炸弹"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/5936.detonate-the-maximum-bombs.md">5936. 引爆最多的炸弹</a></h2>
<h2 id="相同元素的间隔之和"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/5965.intervals-between-identical-elements.md">5965. 相同元素的间隔之和</a></h2>
<h1 id="困难难度题目合集">困难难度题目合集</h1>
<p>困难难度题目从类型上说多是：</p>
<h2 id="图">图</h2>
<h2 id="设计题">设计题</h2>
<h2 id="游戏场景题目">游戏场景题目</h2>
<h2 id="中等题目的-follow-up">中等题目的 follow up</h2>
<p>从解法上来说，多是：</p>
<h2 id="图算法">图算法</h2>
<h2 id="动态规划">动态规划</h2>
<h2 id="二分法">二分法</h2>
<h2 id="dfs-bfs">DFS &amp; BFS</h2>
<h2 id="状态压缩">状态压缩</h2>
<h2 id="剪枝">剪枝</h2>
<p>从逻辑上说， 要么就是非常难想到，要么就是非常难写代码。 这里我总结了几个技巧：</p>
<ol type="1">
<li>看题目的数据范围， 看能否暴力模拟</li>
<li>暴力枚举所有可能的算法往上套，比如图的题目。</li>
<li>总结和记忆解题模板，减少解题压力</li>
</ol>
<p>以下是我列举的经典题目（带 91 字样的表示出自 <strong>91 天学算法</strong>活动）：</p>
<h2 id="lcp-20.-快速公交"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/lcp20.meChtZ.md">LCP 20. 快速公交</a></h2>
<h2 id="lcp-21.-追逐游戏"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/lcp21.Za25hA.md">LCP 21. 追逐游戏</a> 👍</h2>
<h2 id="number-stream-to-intervals"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/Number-Stream-to-Intervals.md">Number Stream to Intervals</a></h2>
<h2 id="triple-inversion-91"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/Triple-Inversion.md">Triple Inversion</a> 91</h2>
<h2 id="kth-pair-distance-91"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/Kth-Pair-Distance.md">Kth Pair Distance</a> 91</h2>
<h2 id="minimum-light-radius-91"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/Minimum-Light-Radius.md">Minimum Light Radius</a> 91</h2>
<h2 id="largest-equivalent-set-of-pairs"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/Largest-Equivalent-Set-of-Pairs.md">Largest Equivalent Set of Pairs</a> 👍</h2>
<h2 id="ticket-order.md"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/Ticket-Order.md">Ticket-Order.md</a></h2>
<h2 id="connected-road-to-destination"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/Connected-Road-to-Destination.md">Connected-Road-to-Destination</a></h2>
<h2 id="寻找两个正序数组的中位数"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/4.median-of-two-sorted-arrays.md">0004. 寻找两个正序数组的中位数</a> 👍</h2>
<h2 id="合并-k-个升序链表"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/23.merge-k-sorted-lists.md">0023. 合并 K 个升序链表</a></h2>
<h2 id="k-个一组翻转链表"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/25.reverse-nodes-in-k-groups.md">0025. K 个一组翻转链表</a> 👍</h2>
<h2 id="串联所有单词的子串"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/30.substring-with-concatenation-of-all-words.md">0030. 串联所有单词的子串</a></h2>
<h2 id="最长有效括号"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/32.longest-valid-parentheses.md">0032. 最长有效括号</a></h2>
<h2 id="接雨水"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/42.trapping-rain-water.md">0042. 接雨水</a></h2>
<h2 id="n-皇后-ii"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/52.N-Queens-II.md">0052. N 皇后 II</a></h2>
<h2 id="插入区间"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/57.insert-interval.md">0057. 插入区间</a></h2>
<h2 id="有效数字"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/65.valid-number.md">0065. 有效数字</a></h2>
<h2 id="柱状图中最大的矩形"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/84.largest-rectangle-in-histogram.md">0084. 柱状图中最大的矩形</a></h2>
<h2 id="最大矩形"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/85.maximal-rectangle.md">0085. 最大矩形</a></h2>
<h2 id="扰乱字符串"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/87.scramble-string.md">0087. 扰乱字符串</a></h2>
<h2 id="二叉树中的最大路径和"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/124.binary-tree-maximum-path-sum.md">0124. 二叉树中的最大路径和</a></h2>
<h2 id="最长连续序列"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/128.longest-consecutive-sequence.md">0128. 最长连续序列</a></h2>
<h2 id="分割回文串-ii"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/132.palindrome-partitioning-ii.md">0132. 分割回文串 II</a> 👍</h2>
<h2 id="单词拆分-ii"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/140.word-break-ii.md">0140. 单词拆分 II</a></h2>
<h2 id="二叉树的后序遍历"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/145.binary-tree-postorder-traversal.md">0145. 二叉树的后序遍历</a></h2>
<h2 id="lru-缓存机制"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/146.lru-cache.md">0146. LRU 缓存机制</a></h2>
<h2 id="寻找旋转排序数组中的最小值-ii"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/154.find-minimum-in-rotated-sorted-array-ii.md">0154. 寻找旋转排序数组中的最小值 II</a></h2>
<h2 id="单词搜索-ii"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/212.word-search-ii.md">0212. 单词搜索 II</a></h2>
<h2 id="滑动窗口最大值"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/239.sliding-window-maximum.md">0239. 滑动窗口最大值</a> 👍</h2>
<h2 id="数据流的中位数"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/295.find-median-from-data-stream.md">0295. 数据流的中位数</a></h2>
<h2 id="二叉树的序列化与反序列化-91"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/297.serialize-and-deserialize-binary-tree.md">0297. 二叉树的序列化与反序列化</a> 91</h2>
<h2 id="删除无效的括号"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/301.remove-invalid-parentheses.md">0301. 删除无效的括号</a></h2>
<h2 id="戳气球"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/312.burst-balloons.md">0312. 戳气球</a></h2>
<h2 id="按要求补齐数组"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/330.patching-array.md">330. 按要求补齐数组</a></h2>
<h2 id="路径交叉"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/335.self-crossing.md">0335. 路径交叉</a></h2>
<h2 id="lfu-缓存"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/460.lfu-cache.md">0460. LFU 缓存</a></h2>
<h2 id="连接词"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/472.concatenated-words.md">0472. 连接词</a></h2>
<h2 id="滑动窗口中位数"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/480.sliding-window-median.md">0480. 滑动窗口中位数</a></h2>
<h2 id="最小好进制"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/483.smallest-good-base.md">0483. 最小好进制</a></h2>
<h2 id="祖玛游戏"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/488.zuma-game.md">0488. 祖玛游戏</a></h2>
<h2 id="翻转对"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/493.reverse-pairs.md">0493. 翻转对</a></h2>
<h2 id="奇怪的打印机"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/664.strange-printer.md">0664. 奇怪的打印机</a></h2>
<h2 id="点游戏"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/679.24-game.md">0679. 24 点游戏</a></h2>
<h2 id="range-模块"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/715.range-module.md">0715. Range 模块</a> 👍</h2>
<h2 id="原子的数量"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/726.number-of-atoms.md">0726. 原子的数量</a></h2>
<h2 id="最多能完成排序的块-ii-91"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/768.max-chunks-to-make-sorted-ii.md">0768. 最多能完成排序的块 II</a> 91</h2>
<h2 id="数组的均值分割"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/805.split-array-with-same-average.md">0805. 数组的均值分割</a></h2>
<h2 id="相似字符串组"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/839.similar-string-groups.md">0839. 相似字符串组</a></h2>
<h2 id="鸡蛋掉落"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/887.super-egg-drop.md">0887. 鸡蛋掉落</a></h2>
<h2 id="最大频率栈"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/895.maximum-frequency-stack.md">0895. 最大频率栈</a></h2>
<h2 id="蛇梯棋"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/909.snakes-and-ladders.md">0909. 蛇梯棋</a></h2>
<h2 id="奇偶跳"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/975.odd-even-jump.md">0975. 奇偶跳</a></h2>
<h2 id="k-连续位的最小翻转次数"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/995.minimum-number-of-k-consecutive-bit-flips.md">0995. K 连续位的最小翻转次数</a></h2>
<h2 id="字符流"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1032.stream-of-characters.md">1032. 字符流</a></h2>
<h2 id="水资源分配优化"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1168.optimize-water-distribution-in-a-village.md">1168. 水资源分配优化</a></h2>
<h2 id="猜字谜"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1178.number-of-valid-words-for-each-puzzle.md">1178. 猜字谜</a></h2>
<h2 id="项目管理"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1203.sort-items-by-groups-respecting-dependencies.md">1203. 项目管理</a></h2>
<h2 id="得分最高的单词集合"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1255.maximum-score-words-formed-by-letters.md">1255. 得分最高的单词集合</a></h2>
<h2 id="跳跃游戏-iv"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1435.jump-game-iv.md">1345. 跳跃游戏 IV</a></h2>
<h2 id="数位成本和为目标值的最大数字"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1449.form-largest-integer-with-digits-that-add-up-to-target.md">1449. 数位成本和为目标值的最大数字</a></h2>
<h2 id="并行课程-ii"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1494.parallel-courses-ii.md">1494. 并行课程 II</a></h2>
<h2 id="找到最接近目标值的函数值"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1521.find-a-value-of-a-mysterious-function-closest-to-target.md">1521. 找到最接近目标值的函数值</a></h2>
<h2 id="形成目标数组的子数组最少增加次数"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1526.minimum-number-of-increments-on-subarrays-to-form-a-target-array.md">1526. 形成目标数组的子数组最少增加次数</a></h2>
<h2 id="通过指令创建有序数组"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1649.create-sorted-array-through-instructions.md">1649. 通过指令创建有序数组</a></h2>
<h2 id="得到山形数组的最少删除次数"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1671.minimum-number-of-removals-to-make-mountain-array.md">1671. 得到山形数组的最少删除次数</a></h2>
<h2 id="与数组中元素的最大异或值"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/5640.maximum-xor-with-an-element-from-array.md">1707. 与数组中元素的最大异或值</a></h2>
<h2 id="得到子序列的最少操作次数"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1713.minimum-operations-to-make-a-subsequence.md">1713. 得到子序列的最少操作次数</a></h2>
<h2 id="完成所有工作的最短时间"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1723.find-minimum-time-to-finish-all-jobs.md">1723. 完成所有工作的最短时间</a></h2>
<h2 id="使所有区间的异或结果为零"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1787.make-the-xor-of-all-segments-equal-to-zero.md">1787. 使所有区间的异或结果为零</a></h2>
<h2 id="所有数对按位与结果的异或和"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1835.find-xor-sum-of-all-pairs-bitwise-and.md">1835. 所有数对按位与结果的异或和</a></h2>
<h2 id="跳跃游戏-vii"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1871.jump-game-vii.md">1871. 跳跃游戏 VII</a> 👍</h2>
<h2 id="石子游戏-viii"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1872.stone-game-viii.md">1872. 石子游戏 VIII</a></h2>
<h2 id="准时抵达会议现场的最小跳过休息次数"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/5775.minimum-skips-to-arrive-at-meeting-on-time.md">1883. 准时抵达会议现场的最小跳过休息次数</a></h2>
<h2 id="你能穿过矩阵的最后一天"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1970.last-day-where-you-can-still-cross.md">1970. 你能穿过矩阵的最后一天</a></h2>
<h2 id="使数组连续的最少操作数"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/2009.minimum-number-of-operations-to-make-array-continuous.md">2009. 使数组连续的最少操作数</a></h2>
<h2 id="分割数组的最多方案数"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/2025.maximum-number-of-ways-to-partition-an-array.md">2025. 分割数组的最多方案数</a></h2>
<h2 id="含特定字母的最小子序列"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/2030.smallest-k-length-subsequence-with-occurrences-of-a-letter.md">2030. 含特定字母的最小子序列</a></h2>
<h2 id="序列顺序查询"><a href="https://github.com/azl397985856/leetcode/blob/master/problems/2102.sequentially-ordinal-rank-tracker.md">2102. 序列顺序查询</a></h2>
<h2 id="section"></h2>
]]></content>
      <tags>
        <tag>leetcode</tag>
        <tag>blob</tag>
        <tag>problems</tag>
        <tag>github</tag>
        <tag>master</tag>
      </tags>
  </entry>
  <entry>
    <title>go</title>
    <url>/2023/03/02c3819a68a7.html</url>
    <content><![CDATA[<blockquote>
<p>https://studygolang.gitbook.io/learn-go-with-tests</p>
</blockquote>
<span id="more"></span>
<h1 id="环境">环境</h1>
<p>Go 把文件放到三个目录中：所有源代码位于 src，包对象位于 pkg，编译好的程序位于 bin。你可以参照以下方式创建目录。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p $GOPATH/src/github.com/SinosGray/hello</span><br><span class="line">~/go/src » tree .                                              akunda@Sinosbook</span><br><span class="line">.</span><br><span class="line">└── github.com</span><br><span class="line">    └── SinosGray</span><br><span class="line">        └── hello</span><br><span class="line">            ├── go.mod</span><br><span class="line">            ├── hello.go</span><br><span class="line">            └── hello_test.go</span><br><span class="line">cd hello</span><br><span class="line"></span><br><span class="line">go mod init hello</span><br><span class="line">go test</span><br><span class="line">go run hello.go</span><br></pre></td></tr></table></figure>
<h1 id="语法">语法</h1>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> englishHelloPrefix = <span class="string">&quot;Hello, &quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Hello</span><span class="params">(name <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> englishHelloPrefix + name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(Hello(<span class="string">&quot;?&quot;</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>hello</tag>
      </tags>
  </entry>
  <entry>
    <title>汇编</title>
    <url>/2020/04/79edaf6a872c.html</url>
    <content><![CDATA[<blockquote>
<p>关于汇编语言的总结, 原则是只记录要点</p>
</blockquote>
<span id="more"></span>
<h2 id="实例">实例</h2>
<h3 id="整数加减">整数加减</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.386</span><br><span class="line">.model flat, stdcall</span><br><span class="line">;flat: 内存模式, stdcall: 子程序调用规范</span><br><span class="line">.stack 4096</span><br><span class="line">;栈大小</span><br><span class="line">ExitProcess PROTO, dwExitCode:DWORD</span><br><span class="line">;标准 windows 服务</span><br><span class="line">.code</span><br><span class="line">main PROC</span><br><span class="line"> mov eax, 5</span><br><span class="line"> add eax, 6</span><br><span class="line"> </span><br><span class="line"> INVOKE ExitProcess, 0</span><br><span class="line">main ENDP</span><br><span class="line">END main</span><br></pre></td></tr></table></figure>
<h3 id="子程序">子程序</h3>
<p>注意问题</p>
<ol type="1">
<li>清除堆栈参数</li>
<li>保存寄存器现场, 可以用<code>uses eax...</code></li>
<li>局部变量</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;c 调用规范</span><br><span class="line">main proc</span><br><span class="line">	push 5</span><br><span class="line">	push 6</span><br><span class="line">	call addtwo</span><br><span class="line">	add esp, 8;移除堆栈参数</span><br><span class="line">	mov eax, ebx</span><br><span class="line"></span><br><span class="line">y_param equ [ebp+12]</span><br><span class="line">x_param equ [ebp+8]</span><br><span class="line">addtwo proc</span><br><span class="line">	push ebp</span><br><span class="line">	mov ebp, esp; </span><br><span class="line">	mov eax, y_param</span><br><span class="line">	add eax, x_param</span><br><span class="line">	pop ebp</span><br><span class="line">	ret</span><br><span class="line">mysub endp</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;stdcall 规范</span><br><span class="line">main proc</span><br><span class="line">	push 5</span><br><span class="line">	push 6</span><br><span class="line">	call addtwo</span><br><span class="line">	mov eax, ebx</span><br><span class="line"></span><br><span class="line">y_param equ [ebp+12]</span><br><span class="line">x_param equ [ebp+8]</span><br><span class="line">addtwo proc</span><br><span class="line">	push ebp</span><br><span class="line">	mov ebp, esp</span><br><span class="line">	mov eax, y_param</span><br><span class="line">	add eax, x_param</span><br><span class="line">	pop ebp</span><br><span class="line">	ret 8;清除堆栈</span><br><span class="line">mysub endp</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;局部变量</span><br><span class="line">x_local equ dword ptr [ebp-4]</span><br><span class="line">y_local equ dword ptr [ebp-8]</span><br><span class="line">addtwo proc</span><br><span class="line">	push ebp</span><br><span class="line">	mov ebp, esp</span><br><span class="line">	;创建局部变量</span><br><span class="line">	sub esp, 8</span><br><span class="line">	mov x_local, 10</span><br><span class="line">	mov y_local, 20</span><br><span class="line">	</span><br><span class="line">	;删除局部变量</span><br><span class="line">	mov esp, ebp</span><br><span class="line">	</span><br><span class="line">	pop ebp</span><br><span class="line">	ret 8;清除堆栈</span><br><span class="line">mysub endp</span><br></pre></td></tr></table></figure>
<figure>
<img src="https://tva1.sinaimg.cn/large/008i3skNgy1gra2yw99r9j30mo0lyn3b.jpg" alt="截屏2021-06-07 下午10.39.50" /><figcaption aria-hidden="true">截屏2021-06-07 下午10.39.50</figcaption>
</figure>
<h2 id="汇编要点总结">汇编要点总结</h2>
<h3 id="操作模式">操作模式</h3>
<h4 id="保护模式">保护模式</h4>
<p>所有指令特性可用, 分配给程序的独立内存区域叫<strong>段</strong></p>
<p>32 位保护模式下, 可寻址 4GB 地址空间</p>
<h5 id="虚拟-8086-模式">虚拟 8086 模式</h5>
<p>保护模式的一个子模式</p>
<h4 id="实地址模式">实地址模式</h4>
<p>程序直接访问系统内存和硬件设备</p>
<p>寻址 1MB 地址空间</p>
<h4 id="系统管理模式">系统管理模式</h4>
<p>电源管理, 系统安全, 通常由计算机制造商实现</p>
<h3 id="寄存器">寄存器</h3>
<ul>
<li>数据寄存器组(可以用作 16, 8 位, 但是此时不能用作指示器, 变址寄存器?)
<ul>
<li>EAX 累加器, 乘除指令默认使用, 乘法乘数和积, 除法被除数和商</li>
<li>EBX 基址寄存器</li>
<li>ECX 计数寄存器, 默认循环计数</li>
<li>EDX 数据寄存器, 乘法高位, 除法余数</li>
</ul></li>
<li>指示器变址寄存器组(存放偏移地址, 用作指示器或者变址寄存器, 可用作 16, 不能用作 8)
<ul>
<li>ESI 源操作数指示器</li>
<li>EDI 目的操作数指示器</li>
<li>EBP 基址寄存器</li>
<li>ESP 专用堆栈指示器, 一般不做数据寄存器</li>
</ul></li>
<li>段寄存器
<ul>
<li>CS 代码段寄存器</li>
<li>SS</li>
<li>DS</li>
<li>ES, FS, GS</li>
</ul></li>
<li>指令指针
<ul>
<li>EIP 保护下一条将要执行的指令的地址</li>
</ul></li>
<li>标志寄存器 EFLAGS
<ul>
<li>zf: 零标志位, 相关指令执行后结果为 <strong>0</strong> 则 zf=1, 否则 0 mov ax,1 sub ax,1</li>
<li>pf: 奇偶标志位, <strong>结果中 1 为偶数</strong> pf=1, 否则 0</li>
<li>sf: 符号标志位, 结果为<strong>负</strong>, sf=1, 否则为 0</li>
<li>cf: 进位标志位, 在进行<strong>无符号</strong>数运算的时候，CF记录了运算结果的最高有效位向更高有效位向更高位的进位值/借位值,产生进位或向更高位借位都会使CF=1</li>
<li>of: 溢出标志位, <strong>有符号</strong>运算结果太大或太小 of=1, 否则 0</li>
</ul></li>
</ul>
<h3 id="数据类型">数据类型</h3>
<p>byte 8, word 16, dword 32, qword 64</p>
<h3 id="栈">栈</h3>
<figure>
<img src="https://img-blog.csdn.net/20180214135628549?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYWJjXzEyMzY2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述" /><figcaption aria-hidden="true">这里写图片描述</figcaption>
</figure>
<p>32 位入栈操作栈顶指针-4</p>
<h3 id="指令">指令</h3>
<h4 id="mov">mov</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;mov 不能从内存到内存</span><br><span class="line">var word ?</span><br><span class="line">mov ax, var;将 var 内存的值赋给 ax 寄存器, 而不是地址, 所以 mov 指令叫数据传送指令</span><br><span class="line">;movzx 0 扩展</span><br><span class="line">;movsx 符号扩展</span><br><span class="line">;xchg 交换两个操作数的内容</span><br><span class="line">array byte 10h, 20h, 30h, 40h</span><br><span class="line">mov al, array;将 array 的第一个字节传送到 al</span><br><span class="line">mov al, [array+1];将 array 的第二个字节传送到 al</span><br><span class="line">mov al, [esi];解析 esi 中的偏移量, 将数据传到 al 中, 单独使用[esi]需要 ptr 限制大小</span><br></pre></td></tr></table></figure>
<h4 id="算数指令">算数指令</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;自增自减 inc dec</span><br><span class="line">inc ax</span><br><span class="line"></span><br><span class="line">;加法 add</span><br><span class="line">add eax, var; eax+var-&gt;eax</span><br><span class="line"></span><br><span class="line">;减法 sub</span><br><span class="line">sub eax, var;eax-var-&gt;eax</span><br><span class="line"></span><br><span class="line">;取负 neg </span><br><span class="line">neg eax</span><br><span class="line"></span><br><span class="line">;乘法 mul 无符号数乘法</span><br><span class="line">mov al, 5h</span><br><span class="line">mov bl, 10h</span><br><span class="line"></span><br><span class="line">mul bl;bl*al-&gt;ax</span><br><span class="line">;乘法 imul 有符号数乘法</span><br><span class="line">;单操作数</span><br><span class="line">imul bx;ax*bx-&gt;dx:ax</span><br><span class="line">;双操作数</span><br><span class="line">imul ax, var;ax*var-&gt;ax 有截断</span><br><span class="line">;三操作数 imul reg, reg/mem, imm</span><br><span class="line">imul ax, bx, 8;bx*8-&gt;ax</span><br><span class="line"></span><br><span class="line">;除法 div 无符号数除法</span><br><span class="line">mov ax, 0083h</span><br><span class="line">mov bl, 2</span><br><span class="line">div bl;al = ax/bl, ah = ax%bl</span><br><span class="line">;除法 idiv 有符号数除法</span><br><span class="line">DIV (unsigned divide) 无符号数除法</span><br><span class="line"></span><br><span class="line">格式：DIV SRC</span><br><span class="line"></span><br><span class="line">执行的操作:</span><br><span class="line"></span><br><span class="line">　　字节操作：16位被除数在AX，8位除数为源操作数，结果的8位商在AL中，8位余数在AH中。表示为</span><br><span class="line"></span><br><span class="line">　　（AL）&lt;-(AX)/(SRC) 的商</span><br><span class="line">(AH) &lt;-(AX)/(SRC) 的余数</span><br><span class="line"></span><br><span class="line">　　字操作：32位被除数放在DX,AX中。其中DX为高位字，16位除数为源操作数，结果的16位端在AX中，16位余数在DX中。表示为</span><br><span class="line">(AX)&lt;-(DX,AX)/(SRC) 的商</span><br><span class="line">(DX)&lt;-(DX,AX)/(SRC) 的余数</span><br><span class="line"></span><br><span class="line">　　双字操作:64位被除数在EDX,EAX中，其中EDX为高位双字，32位除数为源操作数，结果的32位商在EAX中，32位余数在EDX中，表示为</span><br><span class="line">(EAX)&lt;-(EDX,EAX)/(SRC) 的商</span><br><span class="line">(EDX)&lt;-(EDX,EAX)/(SRC) 的余数。</span><br><span class="line">商和余数均为无符号数。</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">;单操作数</span><br><span class="line">.data</span><br><span class="line">byteval sbyte -48</span><br><span class="line">.code</span><br><span class="line">mov al, byteval</span><br><span class="line">cbw;扩展符号</span><br><span class="line">mov bl, +5</span><br><span class="line">idiv bl; al = -9, ah = -3</span><br><span class="line"></span><br><span class="line">;布尔运算: and, or, xor, not, test=and 但是不改变目标操作数</span><br><span class="line"></span><br><span class="line">;移位</span><br><span class="line">;shl 左移 sal 算数左移 rol 循环左移</span><br><span class="line">;shr 右移补 0 sar 算数右移补符号位 ror 循环右移</span><br></pre></td></tr></table></figure>
<h4 id="循环">循环</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;loop ecx 每次循环-1</span><br><span class="line">mov ax, 0</span><br><span class="line">mov ecx, 5; 初始化为 0 不停止</span><br><span class="line">L1:</span><br><span class="line">inc ax</span><br><span class="line">loop L1</span><br><span class="line">;loopz = loope, 等于 ecx=ecx-1, if ecx&gt;0 and zf=1 then jump to destination</span><br></pre></td></tr></table></figure>
<h4 id="跳转">跳转</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;cmp jcond</span><br><span class="line">cmp eax, 5</span><br><span class="line">je L1</span><br><span class="line">;jcond</span><br><span class="line">;ABOVE, BELOW 无符号, GREATER LESS 有符号</span><br><span class="line">JA; JUMP WHEN ABOVE</span><br><span class="line">JNA; JUMP WHEN NOT ABOVE</span><br><span class="line">JAE; JUMP WHEN ABOVE OR EQUAL</span><br><span class="line">JNAE; JUMP WHEN NOT ABOVE OR EQUAL 不大于, 且不等于</span><br><span class="line"></span><br><span class="line">JB; JUMP WHEN BELOW</span><br><span class="line">JNB; JUMP WHEN NOT BELOW</span><br><span class="line">JBE; JUMP WHEN BELOW OR EQUAL</span><br><span class="line">JNBE; JUMP WHEN NOT BELOW OR EQUAL</span><br><span class="line"></span><br><span class="line">JG; JUMP WHEN GREATER</span><br><span class="line">JNG; JUMP WHEN NOT GREATER</span><br><span class="line">JGE; JUMP WHEN GREATER OR EQUAL</span><br><span class="line">JNGE; JUMP WHEN NOT GREATER OR EQUAL </span><br><span class="line"></span><br><span class="line">JL; JUMP WHEN LESS</span><br><span class="line">JNL; JUMP WHEN NOT LESS</span><br><span class="line">JLE; JUMP WHEN LESS OR EQUAL</span><br><span class="line">JNLE; JUMP WHEN NOT LESS OR EQUAL</span><br><span class="line"></span><br><span class="line">JE; JUMP WHEN EQUAL</span><br><span class="line">JZ; JUMP WHEN HAS ZERO FLAG JZ=JE</span><br><span class="line">JNE; JUMP WHEN NOT EQUAL</span><br><span class="line">JNZ; JUMP WHEN NOT HAS ZERO FLAG</span><br><span class="line">JO; JUMP WHEN HAS OVERFLOW FLAG</span><br><span class="line">JC; JUMP WHEN HAS CARRY FLAG</span><br><span class="line">;pf: 奇偶标志位, 结果中 1 为偶数 pf=1, 否则 0</span><br><span class="line">JP; JUMP WHEN HAS PARITY(奇偶) FLAG 偶校验</span><br><span class="line">JNP; JUMP WHEN NOT HAS PARITY FLAG 奇校验</span><br><span class="line">JS; JUMP WHEN HAS SIGN FLAG</span><br><span class="line">JNS; JUMP WHEN NOT HAS SIGN FLAG</span><br></pre></td></tr></table></figure>
<h4 id="子程序与堆栈">子程序与堆栈</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;push 先减少 esp, 再将操作数复制到堆栈</span><br><span class="line">;pop 先将操作数复制, 再增加 esp</span><br><span class="line">;pushfd 保存 flags, popfd 恢复 flags</span><br><span class="line">;pushad popad 32 位, pusha popa 16 位</span><br><span class="line"></span><br><span class="line">;call 1.调用之后的地址压入堆栈 2.子程序地址加载到 eip</span><br><span class="line">;ret 1.esp 指向的数值弹出到 eip</span><br><span class="line"></span><br><span class="line">;uses 保护寄存器, 首尾加 push pop, 但是子程序中不能使用 esp+偏移量</span><br><span class="line">arraysum proc uses esi ecx</span><br><span class="line">	mov eax, 0</span><br><span class="line">L1:</span><br><span class="line">	add eax, [esi]</span><br><span class="line">	add esi, type dword</span><br><span class="line">	loop L1</span><br><span class="line">	ret</span><br><span class="line">arraysum endp</span><br><span class="line"></span><br><span class="line">;enter numbytes, nestinglevel/0</span><br><span class="line">;1.push ebp 2.mov ebp, esp 3.sub esp, numbytes</span><br><span class="line">mysub proc</span><br><span class="line">	enter 8, 0</span><br><span class="line">	</span><br><span class="line">;leave </span><br><span class="line">;1.mov esp, ebp 2.pop ebp</span><br><span class="line"></span><br><span class="line">;invoke</span><br><span class="line">push type array</span><br><span class="line">push lengthof array</span><br><span class="line">push offset array</span><br><span class="line">call dumparray</span><br><span class="line">;等效于, 其中 offset array 可以换为 addr array</span><br><span class="line">invoke dumparray, offset array, lengthof array, type array</span><br><span class="line"></span><br><span class="line">;proto 指定程序的外部过程</span><br><span class="line">exitprocess proto</span><br><span class="line">.code</span><br><span class="line">mov ecx, 0</span><br><span class="line">call exitprocess</span><br><span class="line">;函数定义</span><br><span class="line">arraysum proc uses esi ecx</span><br><span class="line">	ptrarray:ptr dword,</span><br><span class="line">	szarray:dword</span><br><span class="line">arraysum endp</span><br><span class="line">;函数声明</span><br><span class="line">arraysum proto, ptrarray:ptr dword, szarrya:dword</span><br></pre></td></tr></table></figure>
<h4 id="字符串">字符串</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;重复指令</span><br><span class="line">;repe 如果相等继续, 以 ecx 为计数器</span><br><span class="line"></span><br><span class="line">;movsb, movsw, movsd 将 esi 内存数据复制到 edi 内存位置</span><br><span class="line">cld;清除方向标志位, cld 正向, std 反向</span><br><span class="line">mov esi, offset string1</span><br><span class="line">mov edi, offset string2</span><br><span class="line">mov ecx, 10</span><br><span class="line">rep movsb;将 esi 中的十个字节传送到 edi 寻址的内存位置(string2)</span><br><span class="line"></span><br><span class="line">;cmpsb, cmpsw, cmpsd 比较 esi 和 edi 寻址的内存数据</span><br><span class="line">.data</span><br><span class="line">source dword 1234h</span><br><span class="line">target dword 5678h</span><br><span class="line">.code</span><br><span class="line">mov esi, offset source</span><br><span class="line">mov edi, offset target</span><br><span class="line">cld</span><br><span class="line">mov ecx, lengthof source</span><br><span class="line">repe cmpsd;比较双字, 如果相等就重复, 直到 ecx=0 或者发现不相等</span><br><span class="line"></span><br><span class="line">;scasb, scasw, scasd 比较累加器 al, ax, wax 与 edi 寻址的内存数据</span><br><span class="line">.data</span><br><span class="line">alpha byte &quot;abcdefgh&quot;, 0</span><br><span class="line">.code</span><br><span class="line">mov edi, offset alpha</span><br><span class="line">mov al, &#x27;f&#x27;</span><br><span class="line">mov ecx, lengthof alpha</span><br><span class="line">cld</span><br><span class="line">repne scasb;如果不相等就继续比较</span><br><span class="line">jnz quit;如果未发现字符就退出</span><br><span class="line"></span><br><span class="line">;stosb, stosw, stosd 将累加器内容保存到 edi寻址的内存位置</span><br><span class="line">.data</span><br><span class="line">count = 100</span><br><span class="line">string1 byte count dup(?)</span><br><span class="line">.code</span><br><span class="line">mov al, 0ffh</span><br><span class="line">mov edi, offset string1</span><br><span class="line">mov ecx, count</span><br><span class="line">cld</span><br><span class="line">rep stosb;用 al 将 string1 填充</span><br><span class="line"></span><br><span class="line">;lodsb, lodsw, lodsd 将 esi 寻址的内存数据加载到累加器</span><br><span class="line">;将数组中的每一个元素乘一个常数</span><br><span class="line">.data</span><br><span class="line">array dword 1,2,3,4,5,6,7,8,9,10</span><br><span class="line">multiplier dword 10</span><br><span class="line">.code</span><br><span class="line">main proc</span><br><span class="line">	cld</span><br><span class="line">	mov esi, offset array</span><br><span class="line">	mov edi, esi</span><br><span class="line">	mov ecx, lengthof array</span><br><span class="line">L1:lodsd</span><br><span class="line">	mul multiplier</span><br><span class="line">	stosd</span><br><span class="line">	loop L1</span><br><span class="line">	exit</span><br><span class="line">main endp</span><br><span class="line">end main</span><br></pre></td></tr></table></figure>
<h4 id="其他">其他</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;等号伪指令, 将符号和一个整数表达式连接起来</span><br><span class="line">count = 100</span><br><span class="line">;EQU 伪指令, 将符号和一个整数表达式或者任意文本连接起来</span><br><span class="line">count EQU 100</span><br><span class="line">count equ &lt;100&gt;;文本替换</span><br><span class="line"></span><br><span class="line">;$当前地址计数器</span><br><span class="line"></span><br><span class="line">;lea 返回间接操作数的地址</span><br><span class="line">makearray proc</span><br><span class="line">	push ebp</span><br><span class="line">	mov ebp, esp</span><br><span class="line">	sub esp, 32</span><br><span class="line">	lea esi, [ebp-30]</span><br><span class="line">	;mov esi, offset [ebp-30]不可, 因为 offset 只能用于编译时已知的地址</span><br><span class="line">	mov ecx, 30</span><br><span class="line">L1:</span><br><span class="line">	mov byte ptr [esi], &#x27;*&#x27;</span><br><span class="line">	inc esi</span><br><span class="line">	loop L1</span><br><span class="line">	add esp, 32</span><br><span class="line">	pop ebp</span><br><span class="line">	ret</span><br><span class="line">makearray endp</span><br><span class="line"></span><br><span class="line">;offset 返回一个变量与其所在段起始地址之间的距离</span><br><span class="line">mov esi, offset var; esi 中为 var 变量的偏移地址</span><br><span class="line">mov esi, offset array + 4;先得到 array 的偏移量再加 4</span><br><span class="line"></span><br><span class="line">;ptr 重写操作数默认的大小类型</span><br><span class="line">.data</span><br><span class="line">myDouble dword 12345678h</span><br><span class="line">.code</span><br><span class="line">mov ax, word ptr myDouble;ax = 5678h 小端</span><br><span class="line">;直接 mov ax, myDouble 是不允许的</span><br><span class="line"></span><br><span class="line">;type 返回操作数或数组中每个元素的大小(字节)</span><br><span class="line">;lengthof 返回数组中元素的个数</span><br><span class="line">;sizeof 返回数组初始化时使用的字节数</span><br><span class="line">;typedef 创建用户定义类型</span><br><span class="line">pbyte typedef ptr byte</span><br></pre></td></tr></table></figure>
<h3 id="dosbox">dosbox</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mount c ~/Desktop/netclass/asm/asm/dosbox</span><br><span class="line">c:</span><br><span class="line">dir</span><br></pre></td></tr></table></figure>
<h3 id="基础">基础:</h3>
<p><a href="https://tool.oschina.net/hexconvert">数制转换</a></p>
<ul>
<li><p>使用汇编语言编写的源代码，然后通过相应的汇编程序将它们转换成可执行的机器代码。这一过程被称为<strong>汇编过程</strong>。</p></li>
<li><p>普遍地说，每一种特定的汇编语言和其特定的机器语言指令集是一一对应的。</p></li>
<li><p>DB, DW, DD, DQ, DT 依次为 1, 2, 4, 8, 10</p></li>
<li><p><a href="https://zh.wikipedia.org/wiki/X86">x86</a>/<a href="https://zh.wikipedia.org/wiki/Amd64">amd64</a>汇编指令的两大风格分别是<a href="https://zh.wikipedia.org/wiki/Intel">Intel</a>汇编与<a href="https://zh.wikipedia.org/wiki/AT%26T">AT&amp;T</a>汇编，分别被<a href="https://zh.wikipedia.org/wiki/Microsoft_Windows">Microsoft Windows</a>/<a href="https://zh.wikipedia.org/wiki/Visual_C%2B%2B">Visual C++</a>与<a href="https://zh.wikipedia.org/wiki/GNU">GNU</a>/<a href="https://zh.wikipedia.org/wiki/GNU汇编器">Gas</a>采用（Gas也可使用Intel汇编风格）</p></li>
<li><table>
<colgroup>
<col style="width: 38%" />
<col style="width: 39%" />
<col style="width: 21%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">项目</th>
<th style="text-align: left;">Intel风格(dosbox使用的是这种)</th>
<th style="text-align: left;">AT&amp;T风格</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">操作数顺序</td>
<td style="text-align: left;">目标操作数在前</td>
<td style="text-align: left;">源操作数在前</td>
</tr>
<tr class="even">
<td style="text-align: left;">寄存器</td>
<td style="text-align: left;"><strong>原样</strong></td>
<td style="text-align: left;">加%前缀</td>
</tr>
<tr class="odd">
<td style="text-align: left;">立即数</td>
<td style="text-align: left;"><strong>原样</strong></td>
<td style="text-align: left;">加$前缀</td>
</tr>
<tr class="even">
<td style="text-align: left;">16进制立即数</td>
<td style="text-align: left;">用后缀B与H分别表示二进制与十六进制 对于16进制字母开头的要加前缀0</td>
<td style="text-align: left;">加前缀0x</td>
</tr>
<tr class="odd">
<td style="text-align: left;">访问内存长度的表示</td>
<td style="text-align: left;">前缀BYTE PTR, WORD PTR, DWORD PTR和QWORD PTR表示字节,字,双字和四字</td>
<td style="text-align: left;">后缀b,w,l,q表示字节,字,双字和四字</td>
</tr>
<tr class="even">
<td style="text-align: left;">引用全局或静态变量var的值</td>
<td style="text-align: left;">[<strong>var</strong>]</td>
<td style="text-align: left;">var</td>
</tr>
<tr class="odd">
<td style="text-align: left;">引用全局或静态变量var的地址</td>
<td style="text-align: left;"><strong>var</strong></td>
<td style="text-align: left;">$var</td>
</tr>
<tr class="even">
<td style="text-align: left;">引用局部变量</td>
<td style="text-align: left;">需要基于栈指针（rsp）</td>
<td style="text-align: left;"></td>
</tr>
<tr class="odd">
<td style="text-align: left;">绝对寻址</td>
<td style="text-align: left;">[imm]</td>
<td style="text-align: left;">imm</td>
</tr>
<tr class="even">
<td style="text-align: left;">间接寻址</td>
<td style="text-align: left;">[reg]</td>
<td style="text-align: left;">(%reg)</td>
</tr>
<tr class="odd">
<td style="text-align: left;">基址相对寻址</td>
<td style="text-align: left;">[reg +imm]</td>
<td style="text-align: left;">imm(%reg)</td>
</tr>
<tr class="even">
<td style="text-align: left;">变址寻址</td>
<td style="text-align: left;">[base+index]</td>
<td style="text-align: left;">(base,index)</td>
</tr>
<tr class="odd">
<td style="text-align: left;">变址寻址</td>
<td style="text-align: left;">imm[base+index]</td>
<td style="text-align: left;">imm(base,index)</td>
</tr>
<tr class="even">
<td style="text-align: left;">比例变址寻址</td>
<td style="text-align: left;">imm[base + index * scale ]</td>
<td style="text-align: left;">imm(base, index, scale)</td>
</tr>
<tr class="odd">
<td style="text-align: left;">scale只能是1,2,4,8其中的一个数字(1省略不写就是普通变址寻址)</td>
<td style="text-align: left;"></td>
<td style="text-align: left;"></td>
</tr>
<tr class="even">
<td style="text-align: left;">代码注释</td>
<td style="text-align: left;">单行注释用;+注释内容。例如:mov rax, rdx ;这里是注释</td>
<td style="text-align: left;"></td>
</tr>
<tr class="odd">
<td style="text-align: left;">注意</td>
<td style="text-align: left;">这里imm为立即数,base和index为寄存器,scale为伸缩量</td>
<td style="text-align: left;"></td>
</tr>
</tbody>
</table></li>
</ul>
<h3 id="区分-地址-和-数">区分 地址 和 数</h3>
<ul>
<li><p>举例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DS: [1000h]; 这是一个地址, 位置是 1000h</span><br><span class="line">3000h; 这是一个数, 大小是 3000h</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>助记符---&gt;机器指令</li>
<li>变量---&gt;操作数存放地址</li>
<li>指令前的标号---&gt;该指令的存放地址</li>
</ul></li>
</ul>
<h3 id="为什么要分段内存-虚拟内存-分段部件-分页部件">为什么要分段(内存, 虚拟内存, 分段部件, 分页部件)</h3>
<ul>
<li><p>历史</p>
<ul>
<li>1978年 推出 16 位 cpu8086, 内外数据线为 16 位, 地址总线为 20 位, 主存寻址 1MB</li>
<li>1982年 推出 cpu80286, 内外数据线为 16 位, 地址总线为 24 位, 主存寻址 16MB</li>
<li>1985年 推出32位 cpu80386, 内外数据线为 32 位, 地址总线为 32 位, 主存寻址 4GB(1MB*2^12)</li>
</ul></li>
<li><p>物理原因</p>
<ul>
<li>总线 20 位 ---&gt; 寻址 1MB</li>
<li>总线 32 位 ---&gt; 寻址 4G</li>
<li>段寄存器为 16 位 ---&gt; 段的大小为 64K</li>
<li><strong>最低端 80X86 16 位虚拟机中, 内部结构是 16 位, 主线是 20 位, 为了解决这一问题:</strong>
<ul>
<li>将 1MB(20 位)的主存按 64KB(16 位)分段</li>
<li>设置四个段寄存器 CS, DS, SS, ES 保存段首址(20 位的高 16 位), 将这个 16 位(左移四位再变成 20 位)加上数据的偏移地址就得到了物理地址</li>
<li>其中 CS---&gt;IP, SS---&gt;SP, 一般情况下不需要定义附加数据段, 如果必须定义, 最简单的方法是让附加数据段与数据段重合.</li>
</ul></li>
<li>32 位暂时没看😬</li>
</ul></li>
<li><ul>
<li></li>
</ul></li>
</ul>
<h3 id="内存中的数据存放">内存中的数据存放</h3>
<ul>
<li>高八位在在高地址, 低八位在低地址</li>
</ul>
<h3 id="寄存器寻址">寄存器寻址</h3>
<ul>
<li>寄存器寻址 MOV AX, BX</li>
<li>寄存器间接寻址 MOV AX, [SI] ; AX=地址为 SI 的值 的值</li>
<li>变址寻址 MOV AL, [R*F] + V; 其中 F 应该是为了应对字节, 字, 双字的</li>
<li>基址加变址寻址 MOV AX, [BR+IR*F+V]; 默认段寄存器由 BR 决定, 为了表示矩阵</li>
<li>立即寻址 MOV AX, 036H</li>
<li>直接寻址 MOV DS:[20H], CL</li>
</ul>
<h3 id="子程序-1">子程序</h3>
<ul>
<li>NEAR FAR
<ul>
<li>NEAR 可省略</li>
<li>FAR</li>
<li>区别主要在于 NEAR 只是把 ip 入栈, 把 ea 赋值给 ip, FAR 在 NEAR 的基础上还要把 CS 入栈(最先入 cs, 再入 ip)</li>
</ul></li>
<li>RET 根据 NEAR 还是 FAR 出栈</li>
<li>传递参数
<ul>
<li>寄存器法</li>
<li>约定单元法</li>
<li>堆栈法</li>
</ul></li>
</ul>
<h3 id="模块化处理">模块化处理</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">F2T10.ASM</span><br><span class="line">NAME F2T10</span><br><span class="line">PUBLIC F2T10; 这里的 public 指明了 F2T10 是可以被其他模块调用的, 该语句可以放在任何地方</span><br><span class="line">DATA  SEGMENT  USE16 PARA    PUBLIC &#x27;DATA&#x27;</span><br><span class="line">;段名 segment 使用类型 定位方式 组合方式 &#x27;类别&#x27;</span><br><span class="line">;定位方式中para为默认, 定义段在什么样的起始边界开始</span><br><span class="line">;类别的作用是生成 exe 的时候进行分组(分配空间)</span><br><span class="line">;组合方式连在一起, public 同类别段会放在一起</span><br><span class="line">...</span><br><span class="line">DATA ENDS</span><br><span class="line"></span><br><span class="line">CODE SEGMENT USE16 PARA PUBLIC &#x27;CODE&#x27;</span><br><span class="line">ASSUME CS:CODE, DS:DATA</span><br><span class="line">F2T10 PROC</span><br><span class="line">...</span><br><span class="line">F2T10 ENDP</span><br><span class="line">CODE ENDS</span><br><span class="line">END</span><br><span class="line">-----------------------------------------</span><br><span class="line">MAIN.ASM</span><br><span class="line">;以上是一个子模块, 下面的是主模块</span><br><span class="line">NAME MAIN</span><br><span class="line">EXTRN F2T10:NEAR; 这里指明 F2T10 是外部模块的, 例如子程序, 如果两个代码块的类别名相同, 相当于在一个段里, 用 EXTRN F2R10:NEAR, 否则用 far</span><br><span class="line">IF1 </span><br><span class="line">;IF XXX ... ELSE ... ENDIF 如果条件成立就执行块中的语句, 其中if 有几个固定搭配</span><br><span class="line">	INCLUDE MACRO.LIB</span><br><span class="line">ENDIF</span><br><span class="line">.386</span><br><span class="line">DATA SEGMENT USE16 PARA PUBLIC &#x27;DATA&#x27;</span><br><span class="line">...</span><br><span class="line">DATA ENDS</span><br><span class="line"></span><br><span class="line">CODE SEGMENT USE16 PARA PUBLIC &#x27;CODE&#x27;</span><br><span class="line">ASSUME CS:CODE, DS:DATA</span><br><span class="line">START:...</span><br><span class="line">CODE ENDS</span><br><span class="line">START END</span><br><span class="line"></span><br><span class="line">masm main.asm</span><br><span class="line">masm F2T10.asm</span><br><span class="line">然后执行:LINK MAIN+F2T10;生成 main.exe</span><br></pre></td></tr></table></figure>
<h3 id="字符串操作">字符串操作</h3>
<ul>
<li>默认:
<ul>
<li>源串指示器 SI</li>
<li>目的串指示器 DI</li>
<li>重复次数 CX</li>
<li>SCAS 搜索值 AX</li>
<li>LODS 目的地址 AX</li>
<li>STOS 源地址</li>
</ul></li>
<li>MOVS</li>
<li>CMPS
<ul>
<li>REPE CMPS 未比较完且相等时继续</li>
<li>REPNE CMPS 未比较完且不相等时继续</li>
</ul></li>
<li>SCAS 在 DI 中搜索 AL</li>
<li>LODS</li>
<li>STOS</li>
</ul>
<h3 id="输入输出">输入输出</h3>
<p>I/O 空间</p>
<ul>
<li>IN
<ul>
<li>IN AL/AX/EAX, 立即数</li>
<li>IN AL/AX/EAX, DX</li>
</ul></li>
<li>OUT 同上</li>
</ul>
<h3 id="中断">中断</h3>
<h3 id="win32">win32</h3>
<ul>
<li>32 位</li>
<li>输入输出退出等需要调用 api
<ul>
<li>动态链接</li>
</ul></li>
<li>库
<ul>
<li>user32.lib</li>
<li>kernel32.lib</li>
</ul></li>
</ul>
<h3 id="指令合集">指令合集</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MOV OPD, OPS; MOVE DEST SRC</span><br><span class="line"></span><br><span class="line">XLAT; TRANSLATE ([BX+AL])-&gt;AL </span><br><span class="line"></span><br><span class="line">LEA OPD, OPS; LOAD EFFECTIVE ADDRESS 立即寻址 等价于 MOV OPD, OFFSET OPS, 其中 OPD 必须是 16/32 位寄存器</span><br><span class="line"></span><br><span class="line">;标志位?</span><br><span class="line"></span><br><span class="line">NEG OPD; NEGTIVE 将 OPD 的每一位取反最后加一, 包括符号位, 得到结论: 负数&quot;取补码&quot;得到绝对值</span><br><span class="line"></span><br><span class="line">IMUL OPD, OPS;INTEGER MULTIPLICATION (OPD)*(OPS)-&gt;OPD</span><br><span class="line">IMUL OPD, OPS, N; (OPS)*N-&gt;OPD</span><br><span class="line">IMUL OPS; </span><br><span class="line">(AL)*(OPS)-&gt;AX</span><br><span class="line">(AX)*(OPS)-&gt;DX, AX</span><br><span class="line">(EAX)*(OPS)-&gt;EDX, EAX</span><br><span class="line">MUL</span><br><span class="line"></span><br><span class="line">DIV OPS;</span><br><span class="line">(AX)/(OPS)-&gt;AL 商, AH 余数</span><br><span class="line">(DX, AX)/(OPS)-&gt;AX 商, AH 余数</span><br><span class="line">(EDX, EAX)/(OPS)-&gt;EAX商, EDX余数</span><br><span class="line">IDIV</span><br><span class="line"></span><br><span class="line">NOT OPD; 取反</span><br><span class="line">AND OPD, OPS; 逻辑与</span><br><span class="line">TEST OPD, OPS</span><br><span class="line">常见用法: TEST ECX, ECX 判断 ecx 是否为空, 如果为空则 zf=1</span><br><span class="line">总结: test 是逻辑与运算, cmp 是 sub 运算, cmp a1, a2 执行操作 a1-a2</span><br><span class="line">XOR OPD, OPS; 异或</span><br><span class="line"></span><br><span class="line">SAL OPD, N 或者 SHL OPD, N; ARITHMATIC SHIFT LEFT, SHIFT LEFT 左移, 逻辑算数都一样</span><br><span class="line">SHR OPD, N; 逻辑右移, 加 0</span><br><span class="line">SAR OPD, N; 算数右移, 加符号位</span><br><span class="line"></span><br><span class="line">ROL OPD, N; 循环左移</span><br><span class="line">ROR OPD, N</span><br><span class="line">RCL OPD, N; ROTATE LEFT WITH CARRY 带进位循环左移</span><br><span class="line">RCR OPD, N</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">INT; INTERRUPT</span><br><span class="line"></span><br><span class="line">DW; DEFINE WORD</span><br><span class="line"></span><br><span class="line">PROC; PROCEDURE</span><br><span class="line"></span><br><span class="line">ENDS; END SEGMENT</span><br><span class="line"></span><br><span class="line">PTR; POINTER</span><br><span class="line"></span><br><span class="line">MOVSX; EXTENDED MOVE WITH SIGN DATA</span><br><span class="line">MOVZX; EXTENDED MOVE WITH ZERO DATA</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">***********************</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PUSH OPS; SP=SP-1</span><br><span class="line"></span><br><span class="line">POP OPD; SP=SP+1</span><br><span class="line"></span><br><span class="line">DIV;https://blog.csdn.net/loovejava/article/details/7044242</span><br><span class="line"></span><br><span class="line">IMUL OPD, OPS; 有符号数乘法</span><br><span class="line">IMUL OPD, OPS, N; OPS*N-&gt;OPD</span><br><span class="line">IMUL OPS; AL*OPS-&gt;AX 字节</span><br><span class="line">					AX*OPS-&gt;DX,AX 字</span><br><span class="line">					EAX*OPS-&gt;EDX,EAX 双字</span><br><span class="line">MUL;无符号乘法,用法同上</span><br><span class="line"></span><br><span class="line">ADD AX,10;把 ax 加上 10 再存到 ax 里</span><br><span class="line"></span><br><span class="line">SUB</span><br><span class="line"></span><br><span class="line">LOOP 标号</span><br><span class="line"></span><br><span class="line">逻辑移位, 总是用 0 补充</span><br><span class="line">SHL EDX, 7;EDX 左移 7 位</span><br><span class="line">shr ;右移</span><br><span class="line"></span><br><span class="line">算数移位, 用符号位补充</span><br><span class="line">sar;右移</span><br><span class="line"></span><br><span class="line">CBW ;将 AL 中的符号扩展到 AH 里</span><br><span class="line"></span><br><span class="line">;意义    无符号比较     有符号比较</span><br><span class="line">&gt;        JA, JNBE     JG, JNLE</span><br><span class="line">&gt;=			 JAE, JNB			JNC, JGE, JNL</span><br><span class="line">&lt;				 JB, JNAE			JC, JL, JN, JNGE</span><br><span class="line">&lt;				 JBE, JNA			JLE, JNG</span><br><span class="line"></span><br><span class="line">CMP BYTE PTR[SI],&quot;#&quot; ;ptr前面的类型有byte（字节）、word（字）、dword（双字）、qword（四字）、tbyte（十字节）、far（远类型）和near（近类型）</span><br><span class="line"></span><br><span class="line">LEA </span><br><span class="line">lea指令</span><br><span class="line">load effective address, 加载有效地址，可以将有效地址传送到指定的的寄存器。指令形式是从存储器读数据到寄存器, 效果是将存储器的有效地址写入到目的操作数, 简单说, 就是C语言中的”&amp;”.</span><br><span class="line">mov指令</span><br><span class="line">在CPU内或CPU和存储器之间传送字或字节，它传送的信息可以从寄存器到寄存器，立即数到寄存器，立即数到存储单元，从存储单元到寄存器，从寄存器到存储单元，从寄存器或存储单元到除CS外的段寄存器(注意立即数不能直接送段寄存器)，从段寄存器到寄存器或存储单元。</span><br><span class="line">但是注意</span><br><span class="line">（1） MOV指令中的源操作数绝对不能是立即数和代码段CS寄存器；</span><br><span class="line">（2） MOV指令中绝对不允许在两个存储单元之间直接传送数据；</span><br><span class="line">（3） MOV指令中绝对不允许在两个段寄存器之间直接传送数据；</span><br><span class="line">（4） MOV指令不会影响标志位</span><br><span class="line">使用[]区别</span><br><span class="line">第二操作数加不加中括号[]的区别就是:</span><br><span class="line">lea对变量没有影响是取地址,对寄存器来说加[]时取值,第二操作数不加[]非法</span><br><span class="line">mov对变量来说没有影响是取值,对寄存器来说是加[]时取地址,第二操作数不加[]是取值</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">判断正负</span><br><span class="line">mov ax, your_number   ; 将要判断的数存入寄存器ax中</span><br><span class="line">test ax, 8000h        ; 测试ax的最高位是否为1</span><br><span class="line">jnz negative          ; 如果最高位为1，跳转到negative标签</span><br><span class="line"></span><br><span class="line">; 如果最高位不是1，则继续执行下面的代码</span><br><span class="line">positive:</span><br><span class="line">    ; 这里是正数的处理代码</span><br><span class="line">    jmp end</span><br><span class="line"></span><br><span class="line">negative:</span><br><span class="line">    ; 这里是负数的处理代码</span><br><span class="line">    jmp end</span><br><span class="line"></span><br><span class="line">end:</span><br><span class="line">    ; 程序结束</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>language</category>
      </categories>
      <tags>
        <tag>mov</tag>
        <tag>eax</tag>
        <tag>ebp</tag>
        <tag>jump</tag>
        <tag>dword</tag>
      </tags>
  </entry>
  <entry>
    <title>深入理解并行编程读书笔记</title>
    <url>/2023/03/195fa7ee015e.html</url>
    <content><![CDATA[<blockquote>

</blockquote>
<span id="more"></span>
<h1 id="how-to-use-this-book">1 How To Use This Book</h1>
<h2 id="roadmap">1.1 Roadmap</h2>
<h2 id="quick-quizzes">1.2 Quick Quizzes</h2>
<h2 id="alternatives-to-this-book">1.3 Alternatives to This Book</h2>
<h2 id="sample-source-code">1.4 Sample Source Code</h2>
<h2 id="whose-book-is-this">1.5 Whose Book Is This?</h2>
<h1 id="introduction">2 Introduction</h1>
<h2 id="historic-parallel-programming-difficulties">2.1 Historic Parallel Programming Difficulties</h2>
<h2 id="parallel-programming-goals">2.2 Parallel Programming Goals</h2>
<h3 id="performance">2.2.1 Performance</h3>
<h3 id="productivity">2.2.2 Productivity</h3>
<h3 id="generality">2.2.3 Generality</h3>
<h2 id="alternatives-to-parallel-programming">2.3 Alternatives to Parallel Programming</h2>
<h3 id="multiple-instances-of-a-sequential-application">2.3.1 Multiple Instances of a Sequential Application</h3>
<h3 id="use-existing-parallel-software">2.3.2 Use Existing Parallel Software</h3>
<h3 id="performance-optimization">2.3.3 Performance Optimization</h3>
<h2 id="what-makes-parallel-programming-hard">2.4 What Makes Parallel Programming Hard?</h2>
<h3 id="work-partitioning">2.4.1 Work Partitioning</h3>
<h3 id="parallel-access-control">2.4.2 Parallel Access Control</h3>
<h3 id="resource-partitioning-and-replication">2.4.3 Resource Partitioning and Replication</h3>
<h3 id="interacting-with-hardware">2.4.4 Interacting With Hardware</h3>
<h3 id="composite-capabilities">2.4.5 Composite Capabilities</h3>
<h3 id="how-do-languages-and-environments-assist-with-these-tasks">2.4.6 How Do Languages and Environments Assist With These Tasks?</h3>
<h2 id="discussion">2.5 Discussion</h2>
<h1 id="hardware-and-its-habits">3 Hardware and its Habits</h1>
<h2 id="overview">3.1 Overview</h2>
<h3 id="pipelined-cpus">3.1.1 Pipelined CPUs</h3>
<h3 id="memory-references">3.1.2 Memory References</h3>
<h3 id="atomic-operations">3.1.3 Atomic Operations</h3>
<h3 id="memory-barriers">3.1.4 Memory Barriers</h3>
<h3 id="cache-misses">3.1.5 Cache Misses</h3>
<h3 id="io-operations">3.1.6 I/O Operations</h3>
<h2 id="overheads">3.2 Overheads</h2>
<h3 id="hardware-system-architecture">3.2.1 Hardware System Architecture</h3>
<h3 id="costs-of-operations">3.2.2 Costs of Operations</h3>
<h3 id="hardware-optimizations">3.2.3 Hardware Optimizations</h3>
<h2 id="hardware-free-lunch">3.3 Hardware Free Lunch?</h2>
<h3 id="d-integration">3.3.1 3D Integration</h3>
<h3 id="novel-materials-and-processes">3.3.2 Novel Materials and Processes</h3>
<h3 id="light-not-electrons">3.3.3 Light, Not Electrons</h3>
<h3 id="special-purpose-accelerators">3.3.4 Special-Purpose Accelerators</h3>
<h3 id="existing-parallel-software">3.3.5 Existing Parallel Software</h3>
<h2 id="software-design-implications">3.4 Software Design Implications</h2>
<h1 id="tools-of-the-trade">4 Tools of the Trade</h1>
<h2 id="scripting-languages">4.1 Scripting Languages</h2>
<h2 id="posix-multiprocessing">4.2 POSIX Multiprocessing</h2>
<h3 id="posix-process-creation-and-destruction">4.2.1 POSIX Process Creation and Destruction</h3>
<h3 id="posix-thread-creation-and-destruction">4.2.2 POSIX Thread Creation and Destruction</h3>
<h3 id="posix-locking">4.2.3 POSIX Locking</h3>
<h3 id="posix-reader-writer-locking">4.2.4 POSIX Reader-Writer Locking</h3>
<h3 id="atomic-operations-gcc-classic">4.2.5 Atomic Operations (GCC Classic)</h3>
<h3 id="atomic-operations-c11">4.2.6 Atomic Operations (C11)</h3>
<h3 id="atomic-operations-modern-gcc">4.2.7 Atomic Operations (Modern GCC)</h3>
<h3 id="per-thread-variables">4.2.8 Per-Thread Variables</h3>
<h2 id="alternatives-to-posix-operations">4.3 Alternatives to POSIX Operations</h2>
<h3 id="organization-and-initialization">4.3.1 Organization and Initialization</h3>
<h3 id="thread-creation-destruction-and-control">4.3.2 Thread Creation, Destruction, and Control</h3>
<h3 id="locking">4.3.3 Locking</h3>
<h3 id="accessing-shared-variables">4.3.4 Accessing Shared Variables</h3>
<h3 id="atomic-operations-1">4.3.5 Atomic Operations</h3>
<h3 id="per-cpu-variables">4.3.6 Per-CPU Variables</h3>
<h2 id="the-right-tool-for-the-job-how-to-choose">4.4 The Right Tool for the Job: How to Choose?</h2>
<h1 id="counting">5 Counting</h1>
<h2 id="why-isnt-concurrent-counting-trivial">5.1 Why Isn't Concurrent Counting Trivial?</h2>
<h2 id="statistical-counters">5.2 Statistical Counters</h2>
<h3 id="design">5.2.1 Design</h3>
<h3 id="array-based-implementation">5.2.2 Array-Based Implementation</h3>
<h3 id="per-thread-variable-based-implementation">5.2.3 Per-Thread-Variable-Based Implementation</h3>
<h3 id="eventually-consistent-implementation">5.2.4 Eventually Consistent Implementation</h3>
<h3 id="discussion-1">5.2.5 Discussion</h3>
<h2 id="approximate-limit-counters">5.3 Approximate Limit Counters</h2>
<h3 id="design-1">5.3.1 Design</h3>
<h3 id="simple-limit-counter-implementation">5.3.2 Simple Limit Counter Implementation</h3>
<h3 id="simple-limit-counter-discussion">5.3.3 Simple Limit Counter Discussion</h3>
<h3 id="approximate-limit-counter-implementation">5.3.4 Approximate Limit Counter Implementation</h3>
<h3 id="approximate-limit-counter-discussion">5.3.5 Approximate Limit Counter Discussion</h3>
<h2 id="exact-limit-counters">5.4 Exact Limit Counters</h2>
<h3 id="atomic-limit-counter-implementation">5.4.1 Atomic Limit Counter Implementation</h3>
<h3 id="atomic-limit-counter-discussion">5.4.2 Atomic Limit Counter Discussion</h3>
<h3 id="signal-theft-limit-counter-design">5.4.3 Signal-Theft Limit Counter Design</h3>
<h3 id="signal-theft-limit-counter-implementation">5.4.4 Signal-Theft Limit Counter Implementation</h3>
<h3 id="signal-theft-limit-counter-discussion">5.4.5 Signal-Theft Limit Counter Discussion</h3>
<h3 id="applying-exact-limit-counters">5.4.6 Applying Exact Limit Counters</h3>
<h2 id="parallel-counting-discussion">5.5 Parallel Counting Discussion</h2>
<h3 id="parallel-counting-validation">5.5.1 Parallel Counting Validation</h3>
<h3 id="parallel-counting-performance">5.5.2 Parallel Counting Performance</h3>
<h3 id="parallel-counting-specializations">5.5.3 Parallel Counting Specializations</h3>
<h3 id="parallel-counting-lessons">5.5.4 Parallel Counting Lessons</h3>
<h1 id="partitioning-and-synchronization-design">6 Partitioning and Synchronization Design</h1>
<h2 id="partitioning-exercises">6.1 Partitioning Exercises</h2>
<h3 id="dining-philosophers-problem">6.1.1 Dining Philosophers Problem</h3>
<h3 id="double-ended-queue">6.1.2 Double-Ended Queue</h3>
<h3 id="partitioning-example-discussion">6.1.3 Partitioning Example Discussion</h3>
<h2 id="design-criteria">6.2 Design Criteria</h2>
<h2 id="synchronization-granularity">6.3 Synchronization Granularity</h2>
<h3 id="sequential-program">6.3.1 Sequential Program</h3>
<h3 id="code-locking">6.3.2 Code Locking</h3>
<h3 id="data-locking">6.3.3 Data Locking</h3>
<h3 id="data-ownership">6.3.4 Data Ownership</h3>
<h3 id="locking-granularity-and-performance">6.3.5 Locking Granularity and Performance</h3>
<h2 id="parallel-fastpath">6.4 Parallel Fastpath</h2>
<h3 id="readerwriter-locking">6.4.1 Reader/Writer Locking</h3>
<h3 id="hierarchical-locking">6.4.2 Hierarchical Locking</h3>
<h3 id="resource-allocator-caches">6.4.3 Resource Allocator Caches</h3>
<h2 id="beyond-partitioning">6.5 Beyond Partitioning</h2>
<h3 id="work-queue-parallel-maze-solver">6.5.1 Work-Queue Parallel Maze Solver</h3>
<h3 id="alternative-parallel-maze-solver">6.5.2 Alternative Parallel Maze Solver</h3>
<h3 id="maze-validation">6.5.3 Maze Validation</h3>
<h3 id="performance-comparison-i">6.5.4 Performance Comparison I</h3>
<h3 id="alternative-sequential-maze-solver">6.5.5 Alternative Sequential Maze Solver</h3>
<h3 id="performance-comparison-ii">6.5.6 Performance Comparison II</h3>
<h3 id="future-directions-and-conclusions">6.5.7 Future Directions and Conclusions</h3>
<h2 id="partitioning-parallelism-and-optimization">6.6 Partitioning, Parallelism, and Optimization</h2>
<h1 id="locking-1">7 Locking</h1>
<h2 id="staying-alive">7.1 Staying Alive</h2>
<h3 id="deadlock">7.1.1 Deadlock</h3>
<h3 id="livelock-and-starvation">7.1.2 Livelock and Starvation</h3>
<h3 id="unfairness">7.1.3 Unfairness</h3>
<h3 id="inefficiency">7.1.4 Inefficiency</h3>
<h2 id="types-of-locks">7.2 Types of Locks</h2>
<h3 id="exclusive-locks">7.2.1 Exclusive Locks</h3>
<h3 id="reader-writer-locks">7.2.2 Reader-Writer Locks</h3>
<h3 id="beyond-reader-writer-locks">7.2.3 Beyond Reader-Writer Locks</h3>
<h3 id="scoped-locking">7.2.4 Scoped Locking</h3>
<h2 id="locking-implementation-issues">7.3 Locking Implementation Issues</h2>
<h3 id="sample-exclusive-locking-implementation-based-on-atomic-exchange">7.3.1 Sample Exclusive-Locking Implementation Based on Atomic Exchange</h3>
<h3 id="other-exclusive-locking-implementations">7.3.2 Other Exclusive-Locking Implementations</h3>
<h2 id="lock-based-existence-guarantees">7.4 Lock-Based Existence Guarantees</h2>
<h2 id="locking-hero-or-villain">7.5 Locking: Hero or Villain?</h2>
<h3 id="locking-for-applications-hero">7.5.1 Locking For Applications: Hero!</h3>
<h3 id="locking-for-parallel-libraries-just-another-tool">7.5.2 Locking For Parallel Libraries: Just Another Tool</h3>
<h3 id="locking-for-parallelizing-sequential-libraries-villain">7.5.3 Locking For Parallelizing Sequential Libraries: Villain!</h3>
<h2 id="summary">7.6 Summary</h2>
<h1 id="data-ownership-1">8 Data Ownership</h1>
<h2 id="multiple-processes">8.1 Multiple Processes</h2>
<h2 id="partial-data-ownership-and-pthreads">8.2 Partial Data Ownership and pthreads</h2>
<h2 id="function-shipping">8.3 Function Shipping</h2>
<h2 id="designated-thread">8.4 Designated Thread</h2>
<h2 id="privatization">8.5 Privatization</h2>
<h2 id="other-uses-of-data-ownership">8.6 Other Uses of Data Ownership</h2>
<h1 id="deferred-processing">9 Deferred Processing</h1>
<h2 id="running-example">9.1 Running Example</h2>
<h2 id="reference-counting">9.2 Reference Counting</h2>
<h2 id="hazard-pointers">9.3 Hazard Pointers</h2>
<h2 id="sequence-locks">9.4 Sequence Locks</h2>
<h2 id="read-copy-update-rcu">9.5 Read-Copy Update (RCU)</h2>
<h3 id="introduction-to-rcu">9.5.1 Introduction to RCU</h3>
<h3 id="rcu-fundamentals">9.5.2 RCU Fundamentals</h3>
<h3 id="rcu-linux-kernel-api">9.5.3 RCU Linux-Kernel API</h3>
<h3 id="rcu-usage">9.5.4 RCU Usage</h3>
<h3 id="rcu-related-work">9.5.5 RCU Related Work</h3>
<h2 id="which-to-choose">9.6 Which to Choose?</h2>
<h3 id="which-to-choose-overview">9.6.1 Which to Choose? (Overview)</h3>
<h3 id="which-to-choose-details">9.6.2 Which to Choose? (Details)</h3>
<h3 id="which-to-choose-production-use">9.6.3 Which to Choose? (Production Use)</h3>
<h2 id="what-about-updates">9.7 What About Updates?</h2>
<h1 id="data-structures">10 Data Structures</h1>
<h2 id="motivating-application">10.1 Motivating Application</h2>
<h2 id="partitionable-data-structures">10.2 Partitionable Data Structures</h2>
<h3 id="hash-table-design">10.2.1 Hash-Table Design</h3>
<h3 id="hash-table-implementation">10.2.2 Hash-Table Implementation</h3>
<h3 id="hash-table-performance">10.2.3 Hash-Table Performance</h3>
<h2 id="read-mostly-data-structures">10.3 Read-Mostly Data Structures</h2>
<h3 id="rcu-protected-hash-table-implementation">10.3.1 RCU-Protected Hash Table Implementation</h3>
<h3 id="rcu-protected-hash-table-validation">10.3.2 RCU-Protected Hash Table Validation</h3>
<h3 id="rcu-protected-hash-table-performance">10.3.3 RCU-Protected Hash Table Performance</h3>
<h3 id="rcu-protected-hash-table-discussion">10.3.4 RCU-Protected Hash Table Discussion</h3>
<h2 id="non-partitionable-data-structures">10.4 Non-Partitionable Data Structures</h2>
<h3 id="resizable-hash-table-design">10.4.1 Resizable Hash Table Design</h3>
<h3 id="resizable-hash-table-implementation">10.4.2 Resizable Hash Table Implementation</h3>
<h3 id="resizable-hash-table-discussion">10.4.3 Resizable Hash Table Discussion</h3>
<h3 id="other-resizable-hash-tables">10.4.4 Other Resizable Hash Tables</h3>
<h2 id="other-data-structures">10.5 Other Data Structures</h2>
<h2 id="micro-optimization">10.6 Micro-Optimization</h2>
<h3 id="specialization">10.6.1 Specialization</h3>
<h3 id="bits-and-bytes">10.6.2 Bits and Bytes</h3>
<h3 id="hardware-considerations">10.6.3 Hardware Considerations</h3>
<h2 id="summary-1">10.7 Summary</h2>
<h1 id="validation">11 Validation</h1>
<h2 id="introduction-1">11.1 Introduction</h2>
<h3 id="where-do-bugs-come-from">11.1.1 Where Do Bugs Come From?</h3>
<h3 id="required-mindset">11.1.2 Required Mindset</h3>
<h3 id="when-should-validation-start">11.1.3 When Should Validation Start?</h3>
<h3 id="the-open-source-way">11.1.4 The Open Source Way</h3>
<h2 id="tracing">11.2 Tracing</h2>
<h2 id="assertions">11.3 Assertions</h2>
<h2 id="static-analysis">11.4 Static Analysis</h2>
<h2 id="code-review">11.5 Code Review</h2>
<h3 id="inspection">11.5.1 Inspection</h3>
<h3 id="walkthroughs">11.5.2 Walkthroughs</h3>
<h3 id="self-inspection">11.5.3 Self-Inspection</h3>
<h2 id="probability-and-heisenbugs">11.6 Probability and Heisenbugs</h2>
<h3 id="statistics-for-discrete-testing">11.6.1 Statistics for Discrete Testing</h3>
<h3 id="statistics-abuse-for-discrete-testing">11.6.2 Statistics Abuse for Discrete Testing</h3>
<h3 id="statistics-for-continuous-testing">11.6.3 Statistics for Continuous Testing</h3>
<h3 id="hunting-heisenbugs">11.6.4 Hunting Heisenbugs</h3>
<h2 id="performance-estimation">11.7 Performance Estimation</h2>
<h3 id="benchmarking">11.7.1 Benchmarking</h3>
<h3 id="profiling">11.7.2 Profiling</h3>
<h3 id="differential-profiling">11.7.3 Differential Profiling</h3>
<h3 id="microbenchmarking">11.7.4 Microbenchmarking</h3>
<h3 id="isolation">11.7.5 Isolation</h3>
<h3 id="detecting-interference">11.7.6 Detecting Interference</h3>
<h2 id="summary-2">11.8 Summary</h2>
<h1 id="formal-verification">12 Formal Verification</h1>
<h2 id="state-space-search">12.1 State-Space Search</h2>
<h3 id="promela-and-spin">12.1.1 Promela and Spin</h3>
<h3 id="how-to-use-promela">12.1.2 How to Use Promela</h3>
<h3 id="promela-example-locking">12.1.3 Promela Example: Locking</h3>
<h3 id="promela-example-qrcu">12.1.4 Promela Example: QRCU</h3>
<h3 id="promela-parable-dynticks-and-preemptible-rcu">12.1.5 Promela Parable: dynticks and Preemptible RCU</h3>
<h3 id="validating-preemptible-rcu-and-dynticks">12.1.6 Validating Preemptible RCU and dynticks</h3>
<h2 id="special-purpose-state-space-search">12.2 Special-Purpose State-Space Search</h2>
<h3 id="anatomy-of-a-litmus-test">12.2.1 Anatomy of a Litmus Test</h3>
<h3 id="what-does-this-litmus-test-mean">12.2.2 What Does This Litmus Test Mean?</h3>
<h3 id="running-a-litmus-test">12.2.3 Running a Litmus Test</h3>
<h3 id="ppcmem-discussion">12.2.4 PPCMEM Discussion</h3>
<h2 id="axiomatic-approaches">12.3 Axiomatic Approaches</h2>
<h3 id="axiomatic-approaches-and-locking">12.3.1 Axiomatic Approaches and Locking</h3>
<h3 id="axiomatic-approaches-and-rcu">12.3.2 Axiomatic Approaches and RCU</h3>
<h2 id="sat-solvers">12.4 SAT Solvers</h2>
<h2 id="stateless-model-checkers">12.5 Stateless Model Checkers</h2>
<h2 id="summary-3">12.6 Summary</h2>
<h2 id="choosing-a-validation-plan">12.7 Choosing a Validation Plan</h2>
<h1 id="putting-it-all-together">13 Putting It All Together</h1>
<h2 id="counter-conundrums">13.1 Counter Conundrums</h2>
<h3 id="counting-updates">13.1.1 Counting Updates</h3>
<h3 id="counting-lookups">13.1.2 Counting Lookups</h3>
<h2 id="refurbish-reference-counting">13.2 Refurbish Reference Counting</h2>
<h3 id="implementation-of-reference-counting-categories">13.2.1 Implementation of Reference-Counting Categories</h3>
<h3 id="counter-optimizations">13.2.2 Counter Optimizations</h3>
<h2 id="hazard-pointer-helpers">13.3 Hazard-Pointer Helpers</h2>
<h3 id="scalable-reference-count">13.3.1 Scalable Reference Count</h3>
<h3 id="long-duration-accesses">13.3.2 Long-Duration Accesses</h3>
<h2 id="sequence-locking-specials">13.4 Sequence-Locking Specials</h2>
<h3 id="dueling-sequence-locks">13.4.1 Dueling Sequence Locks</h3>
<h3 id="correlated-data-elements">13.4.2 Correlated Data Elements</h3>
<h3 id="atomic-move">13.4.3 Atomic Move</h3>
<h3 id="upgrade-to-writer">13.4.4 Upgrade to Writer</h3>
<h2 id="rcu-rescues">13.5 RCU Rescues</h2>
<h3 id="rcu-and-per-thread-variable-based-statistical-counters">13.5.1 RCU and Per-Thread-Variable-Based Statistical Counters</h3>
<h3 id="rcu-and-counters-for-removable-io-devices">13.5.2 RCU and Counters for Removable I/O Devices</h3>
<h3 id="array-and-length">13.5.3 Array and Length</h3>
<h3 id="correlated-fields">13.5.4 Correlated Fields</h3>
<h3 id="update-friendly-traversal">13.5.5 Update-Friendly Traversal</h3>
<h3 id="scalable-reference-count-two">13.5.6 Scalable Reference Count Two</h3>
<h3 id="retriggered-grace-periods">13.5.7 Retriggered Grace Periods</h3>
<h3 id="long-duration-accesses-two">13.5.8 Long-Duration Accesses Two</h3>
<h1 id="advanced-synchronization">14 Advanced Synchronization</h1>
<h2 id="avoiding-locks">14.1 Avoiding Locks</h2>
<h2 id="non-blocking-synchronization">14.2 Non-Blocking Synchronization</h2>
<h3 id="simple-nbs">14.2.1 Simple NBS</h3>
<h3 id="applicability-of-nbs-benefits">14.2.2 Applicability of NBS Benefits</h3>
<h3 id="nbs-discussion">14.2.3 NBS Discussion</h3>
<h2 id="parallel-real-time-computing">14.3 Parallel Real-Time Computing</h2>
<h3 id="what-is-real-time-computing">14.3.1 What is Real-Time Computing?</h3>
<h3 id="who-needs-real-time">14.3.2 Who Needs Real-Time?</h3>
<h3 id="who-needs-parallel-real-time">14.3.3 Who Needs Parallel Real-Time?</h3>
<h3 id="implementing-parallel-real-time-systems">14.3.4 Implementing Parallel Real-Time Systems</h3>
<h3 id="implementing-parallel-real-time-operating-systems">14.3.5 Implementing Parallel Real-Time Operating Systems</h3>
<h3 id="implementing-parallel-real-time-applications">14.3.6 Implementing Parallel Real-Time Applications</h3>
<h4 id="real-time-vs.-real-fast-how-to-choose">14.3.7 Real Time vs. Real Fast: How to Choose?</h4>
<h1 id="advanced-synchronization-memory-ordering">15 Advanced Synchronization: Memory Ordering</h1>
<h2 id="ordering-why-and-how">15.1 Ordering: Why and How?</h2>
<h3 id="why-hardware-misordering">15.1.1 Why Hardware Misordering?</h3>
<h3 id="how-to-force-ordering">15.1.2 How to Force Ordering?</h3>
<h3 id="basic-rules-of-thumb">15.1.3 Basic Rules of Thumb</h3>
<h2 id="tricks-and-traps">15.2 Tricks and Traps</h2>
<h3 id="variables-with-multiple-values">15.2.1 Variables With Multiple Values</h3>
<h3 id="memory-reference-reordering">15.2.2 Memory-Reference Reordering</h3>
<h3 id="address-dependencies">15.2.3 Address Dependencies</h3>
<h3 id="data-dependencies">15.2.4 Data Dependencies</h3>
<h3 id="control-dependencies">15.2.5 Control Dependencies</h3>
<h3 id="cache-coherence">15.2.6 Cache Coherence</h3>
<h3 id="multicopy-atomicity">15.2.7 Multicopy Atomicity</h3>
<h2 id="compile-time-consternation">15.3 Compile-Time Consternation</h2>
<h3 id="memory-reference-restrictions">15.3.1 Memory-Reference Restrictions</h3>
<h3 id="address--and-data-dependency-difficulties">15.3.2 Address- and Data-Dependency Difficulties</h3>
<h3 id="control-dependency-calamities">15.3.3 Control-Dependency Calamities</h3>
<h2 id="higher-level-primitives">15.4 Higher-Level Primitives</h2>
<h3 id="memory-allocation">15.4.1 Memory Allocation</h3>
<h3 id="locking-2">15.4.2 Locking</h3>
<h3 id="rcu">15.4.3 RCU</h3>
<h2 id="hardware-specifics">15.5 Hardware Specifics</h2>
<h3 id="alpha">15.5.1 Alpha</h3>
<h3 id="armv7-ar">15.5.2 Armv7-A/R</h3>
<h3 id="armv8">15.5.3 Armv8</h3>
<h3 id="itanium">15.5.4 Itanium</h3>
<h3 id="mips">15.5.5 MIPS</h3>
<h3 id="power-powerpc">15.5.6 POWER / PowerPC</h3>
<h3 id="sparc-tso">15.5.7 SPARC TSO</h3>
<h3 id="x86">15.5.8 x86</h3>
<h3 id="z-systems">15.5.9 z Systems</h3>
<h2 id="where-is-memory-ordering-needed">15.6 Where is Memory Ordering Needed?</h2>
<h1 id="ease-of-use">16 Ease of Use</h1>
<h2 id="what-is-easy">16.1 What is Easy?</h2>
<h2 id="rusty-scale-for-api-design">16.2 Rusty Scale for API Design</h2>
<h2 id="shaving-the-mandelbrot-set">16.3 Shaving the Mandelbrot Set</h2>
<h1 id="conflicting-visions-of-the-future">17 Conflicting Visions of the Future</h1>
<h2 id="the-future-of-cpu-technology-aint-what-it-used-to-be">17.1 The Future of CPU Technology Ain't What it Used to Be</h2>
<h3 id="uniprocessor-über-alles">17.1.1 Uniprocessor Über Alles</h3>
<h3 id="multithreaded-mania">17.1.2 Multithreaded Mania</h3>
<h3 id="more-of-the-same">17.1.3 More of the Same</h3>
<h3 id="crash-dummies-slamming-into-the-memory-wall">17.1.4 Crash Dummies Slamming into the Memory Wall</h3>
<h3 id="astounding-accelerators">17.1.5 Astounding Accelerators</h3>
<h2 id="transactional-memory">17.2 Transactional Memory</h2>
<h3 id="outside-world">17.2.1 Outside World</h3>
<h3 id="process-modification">17.2.2 Process Modification</h3>
<h3 id="synchronization">17.2.3 Synchronization</h3>
<h3 id="discussion-2">17.2.4 Discussion</h3>
<h2 id="hardware-transactional-memory">17.3 Hardware Transactional Memory</h2>
<h3 id="htm-benefits-wrt-locking">17.3.1 HTM Benefits WRT Locking</h3>
<h3 id="htm-weaknesses-wrt-locking">17.3.2 HTM Weaknesses WRT Locking</h3>
<h3 id="htm-weaknesses-wrt-locking-when-augmented">17.3.3 HTM Weaknesses WRT Locking When Augmented</h3>
<h3 id="where-does-htm-best-fit-in">17.3.4 Where Does HTM Best Fit In?</h3>
<h3 id="potential-game-changers">17.3.5 Potential Game Changers</h3>
<h3 id="conclusions">17.3.6 Conclusions</h3>
<h2 id="formal-regression-testing">17.4 Formal Regression Testing?</h2>
<h3 id="automatic-translation">17.4.1 Automatic Translation</h3>
<h3 id="environment">17.4.2 Environment</h3>
<h3 id="overhead">17.4.3 Overhead</h3>
<h3 id="locate-bugs">17.4.4 Locate Bugs</h3>
<h3 id="minimal-scaffolding">17.4.5 Minimal Scaffolding</h3>
<h3 id="relevant-bugs">17.4.6 Relevant Bugs</h3>
<h3 id="formal-regression-scorecard">17.4.7 Formal Regression Scorecard</h3>
<h2 id="functional-programming-for-parallelism">17.5 Functional Programming for Parallelism</h2>
<h2 id="summary-4">17.6 Summary</h2>
<h1 id="looking-forward-and-back">18 Looking Forward and Back</h1>
<h1 id="a-important-questions">A Important Questions</h1>
<h2 id="a.1-why-arent-parallel-programs-always-faster">A.1 Why Aren't Parallel Programs Always Faster?</h2>
<h2 id="a.2-why-not-remove-locking">A.2 Why Not Remove Locking?</h2>
<h2 id="a.3-what-time-is-it">A.3 What Time Is It?</h2>
<h2 id="a.4-what-does-after-mean">A.4 What Does ``After'' Mean?</h2>
<h2 id="a.5-how-much-ordering-is-needed">A.5 How Much Ordering Is Needed?</h2>
<h3 id="a.5.1-where-is-the-defining-data">A.5.1 Where is the Defining Data?</h3>
<h3 id="a.5.2-consistent-data-used-consistently">A.5.2 Consistent Data Used Consistently?</h3>
<h3 id="a.5.3-is-the-problem-partitionable">A.5.3 Is the Problem Partitionable?</h3>
<h3 id="a.5.4-none-of-the-above">A.5.4 None of the Above?</h3>
<h2 id="a.6-what-is-the-difference-between-concurrent-and-parallel">A.6 What is the Difference Between ''Concurrent'' and ''Parallel''?</h2>
<h2 id="a.7-why-is-software-buggy">A.7 Why Is Software Buggy?</h2>
]]></content>
      <tags>
        <tag>locking</tag>
        <tag>parallel</tag>
        <tag>discussion</tag>
        <tag>limit</tag>
        <tag>counter</tag>
      </tags>
  </entry>
  <entry>
    <title>python xjb学</title>
    <url>/2019/11/d6ad260c52e8.html</url>
    <content><![CDATA[<h1 id="python-环境">python 环境</h1>
<h2 id="virtual-env">virtual env</h2>
<p>A virtual environment is a Python tool for <strong>dependency management</strong> and <strong>project</strong> <strong>isolation</strong>. They allow Python <strong>site packages</strong> (third party libraries) to be installed locally in an isolated directory for a particular project, as opposed to being installed globally (i.e. as part of a system-wide Python).</p>
<p>Well, a virtual environment is just <strong>a directory</strong> with three important components:</p>
<ul>
<li>A <code>site-packages/</code> folder where third party libraries are installed.</li>
<li><a href="https://en.wikipedia.org/wiki/Symbolic_link">Symlinks</a> to Python executables installed on your system.</li>
<li><a href="https://en.wikipedia.org/wiki/Shell_script">Scripts</a> that ensure executed Python code uses the Python interpreter and site packages installed inside the given virtual environment.</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd test-project/</span><br><span class="line">python3 -m venv venv/       # Creates an environment called venv/</span><br><span class="line">source venv/bin/activate</span><br><span class="line"></span><br><span class="line">pip install numpy==1.15.3 </span><br><span class="line">pip list</span><br><span class="line"></span><br><span class="line">pip freeze &gt; requirements.txt</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">which</span> lists installed third party packages along with their version numbers</span></span><br><span class="line"></span><br><span class="line">deactivate #quit env</span><br></pre></td></tr></table></figure>
<h3 id="to-set-a-project">to set a project</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 -m venv venv/</span><br><span class="line">source venv/bin/activate</span><br><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure>
<h3 id="how-does-it-work">how does it work?</h3>
<p>when acitvate venv, it changes $PATH <code>/Users/akunda/project/pythonenv/venv/bin:...</code></p>
<h2 id="pycharm">pycharm</h2>
<p>conda venv existed</p>
<h1 id="python-手册">python 手册</h1>
<p>https://docs.python.org/zh-cn/3/reference/import.html</p>
<h2 id="词法分析">词法分析</h2>
<ul>
<li><p>编码声明</p>
<p><code># -*- coding: &lt;encoding-name&gt; -*-</code></p></li>
<li><p>显式拼接行<code>\</code></p></li>
<li><p>字符串前缀: <code>b</code> bytes 实例; <code>r</code>原始字符串, 把反斜杠当做原义字符, 不执行转义操作; <code>rb</code>; 三引号包含未转义的换行和引号;!--code￼2--&gt;</p></li>
<li><p>字符串合并 <code>"hello"'world' == "helloworld"</code></p></li>
</ul>
<h2 id="数据模型">数据模型</h2>
<p>每个对象都有各自的标识号、类型和值。一个对象被创建后，它的 <em>标识号</em> 就绝不会改变；你可以将其理解为该对象在内存中的地址。 '<a href="https://docs.python.org/zh-cn/3/reference/expressions.html#is"><code>is</code></a>' 运算符可以比较两个对象的标识号是否相同；<a href="https://docs.python.org/zh-cn/3/library/functions.html#id"><code>id()</code></a> 函数能返回一个代表其标识号的整数。</p>
<p>对象的类型决定该对象所支持的操作 (例如 "对象是否有长度属性？") 并且定义了该类型的对象可能的取值。<a href="https://docs.python.org/zh-cn/3/library/functions.html#type"><code>type()</code></a> 函数能返回一个对象的类型 (类型本身也是对象)。与编号一样，一个对象的 <em>类型</em> 也是不可改变的</p>
<p>对象绝不会被显式地销毁；然而，当无法访问时它们可能会被作为垃圾回收。</p>
<p>有些对象包含对其他对象的引用；它们被称为 <em>容器</em>。容器的例子有元组、列表和字典等。这些引用是容器对象值的组成部分。在多数情况下，当谈论一个容器的值时，我们是指所包含对象的值而不是其编号；但是，当我们谈论一个容器的可变性时，则仅指其直接包含的对象的编号。因此，如果一个不可变容器 (例如元组) 包含对一个可变对象的引用，则当该可变对象被改变时容器的值也会改变。</p>
<p>None,</p>
<p>整型 (<a href="https://docs.python.org/zh-cn/3/library/functions.html#int"><code>int</code></a>)</p>
<p>此类对象表示任意大小的数字，仅受限于可用的内存 (包括虚拟内存)。在变换和掩码运算中会以二进制表示，负数会以 2 的补码表示，看起来像是符号位向左延伸补满空位。</p>
<p>布尔型 (<a href="https://docs.python.org/zh-cn/3/library/functions.html#bool"><code>bool</code></a>)</p>
<p>此类对象表示逻辑值 False 和 True。代表 <code>False</code> 和 <code>True</code> 值的两个对象是唯二的布尔对象。布尔类型是整型的子类型，两个布尔值在各种场合的行为分别类似于数值 0 和 1，例外情况只有在转换为字符串时分别返回字符串 <code>"False"</code> 或 <code>"True"</code>。</p>
<p>字典</p>
<p>此类对象表示由几乎任意值作为索引的有限个对象的集合。不可作为键的值类型只有包含列表或字典或其他可变类型，通过值而非对象编号进行比较的值，其原因在于高效的字典实现需要使用键的哈希值以保持一致性。用作键的数字类型遵循正常的数字比较规则: 如果两个数字相等 (例如 <code>1</code> 和 <code>1.0</code>) 则它们均可来用来索引同一个字典条目。字典会保留插入顺序，这意味着键将以它们被添加的顺序在字典中依次产生。 替换某个现有的键不会改变其顺序，但是移除某个键再重新插入则会将其添加到末尾而不会保留其原有位置。字典是可变的；它们可通过 <code>&#123;...&#125;</code> 标注来创建 (参见 <a href="https://docs.python.org/zh-cn/3/reference/expressions.html#dict">字典显示</a> 小节)。扩</p>
<h3 id="函数可调用对象">函数(可调用对象)</h3>
<p>特殊属性</p>
<table>
<colgroup>
<col style="width: 48%" />
<col style="width: 48%" />
<col style="width: 3%" />
</colgroup>
<thead>
<tr class="header">
<th><code>__doc__</code></th>
<th>该函数的文档字符串，没有则为 <code>None</code>；不会被子类继承。</th>
<th>可写</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#definition.__name__"><code>__name__</code></a></td>
<td>该函数的名称。</td>
<td>可写</td>
</tr>
<tr class="even">
<td><a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#definition.__qualname__"><code>__qualname__</code></a></td>
<td>该函数的 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-qualified-name">qualified name</a>。<em>3.3 新版功能.</em></td>
<td>可写</td>
</tr>
<tr class="odd">
<td><code>__module__</code></td>
<td>该函数所属模块的名称，没有则为 <code>None</code>。</td>
<td>可写</td>
</tr>
<tr class="even">
<td><code>__defaults__</code></td>
<td>由具有默认值的参数的默认参数值组成的元组，如无任何参数具有默认值则为 <code>None</code>。</td>
<td>可写</td>
</tr>
<tr class="odd">
<td><code>__code__</code></td>
<td>表示编译后的函数体的代码对象。</td>
<td>可写</td>
</tr>
<tr class="even">
<td><code>__globals__</code></td>
<td>对存放该函数中全局变量的字典的引用 --- 函数所属模块的全局命名空间。</td>
<td>只读</td>
</tr>
<tr class="odd">
<td><a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#object.__dict__"><code>__dict__</code></a></td>
<td>命名空间支持的函数属性。</td>
<td>可写</td>
</tr>
<tr class="even">
<td><code>__closure__</code></td>
<td><code>None</code> 或包含该函数可用变量的绑定的单元的元组。有关 <code>cell_contents</code> 属性的详情见下。</td>
<td>只读</td>
</tr>
<tr class="odd">
<td><code>__annotations__</code></td>
<td>包含形参标注的字典。 字典的键是形参名，而如果提供了 <code>'return'</code> 则是用于返回值标注。 有关如何使用此属性的更多信息，请参阅 <a href="https://docs.python.org/zh-cn/3/howto/annotations.html#annotations-howto">对象注解属性的最佳实践</a>。</td>
<td>可写</td>
</tr>
<tr class="even">
<td><code>__kwdefaults__</code></td>
<td>仅包含关键字参数默认值的字典。</td>
<td>可写</td>
</tr>
</tbody>
</table>
<h3 id="模块">模块</h3>
<p><a href="https://docs.python.org/zh-cn/3/reference/import.html#name__"><code>__name__</code></a></p>
<p>模块的名称。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">__doc__</span><br></pre></td></tr></table></figure>
<p>模块的文档字符串，如果不可用则为 <code>None</code>。</p>
<p><a href="https://docs.python.org/zh-cn/3/reference/import.html#file__"><code>__file__</code></a></p>
<p>被加载模块所对应文件的路径名称，如果它是从文件加载的话。 对于某些类型的模块来说 <a href="https://docs.python.org/zh-cn/3/reference/import.html#file__"><code>__file__</code></a> 属性可能是缺失的，例如被静态链接到解释器中的 C 模块。 对于从共享库动态加载的扩展模块来说，它将是共享库文件的路径名称。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">__annotations__</span><br></pre></td></tr></table></figure>
<p>包含在模块体执行期间收集的 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-variable-annotation">变量标注</a> 的字典。 有关使用 <code>__annotations__</code> 的最佳实践，请参阅 <a href="https://docs.python.org/zh-cn/3/howto/annotations.html#annotations-howto">对象注解属性的最佳实践</a>。</p>
<p>特殊的只读属性: <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#object.__dict__"><code>__dict__</code></a> 为以字典对象表示的模块命名空间。</p>
<h2 id="执行模型">执行模型</h2>
<p><em>作用域</em> 定义了一个代码块中名称的可见性。 如果代码块中定义了一个局部变量，则其作用域包含该代码块。 如果定义发生于函数代码块中，<strong>则其作用域会扩展到该函数所包含的任何代码块</strong>，除非有某个被包含代码块引入了对该名称的不同绑定。</p>
<p>如果 <a href="https://docs.python.org/zh-cn/3/reference/simple_stmts.html#global"><code>global</code></a> 语句出现在一个代码块中，则所有对该语句所指定名称的使用都是在最高层级命名空间内对该名称绑定的引用。 名称在最高层级命名内的解析是通过全局命名空间，也就是包含该代码块的模块的命名空间，以及内置命名空间即 <a href="https://docs.python.org/zh-cn/3/library/builtins.html#module-builtins"><code>builtins</code></a> 模块的命名空间。 全局命名空间会先被搜索。 如果未在其中找到指定名称，再搜索内置命名空间。 <code>global</code> 语句必须位于所有对其所列出名称的使用之前。</p>
<p><a href="https://docs.python.org/zh-cn/3/reference/simple_stmts.html#global"><code>global</code></a> 语句与同一代码块中名称绑定具有相同的作用域。 如果一个自由变量的最近包含作用域中有一条 global 语句，则该自由变量也会被当作是全局变量。</p>
<h2 id="导入系统">导入系统</h2>
<h3 id="常规包">常规包</h3>
<p>通常以一个包含 <code>__init__.py</code> 文件的目录形式实现。 当一个常规包被导入时，这个 <code>__init__.py</code> 文件会隐式地被执行，它所定义的对象会被绑定到该包命名空间中的名称。<code>__init__.py</code> 文件可以包含与任何其他模块中所包含的 Python 代码相似的代码，Python 将在模块被导入时为其添加额外的属性。</p>
<p>例如，以下文件系统布局定义了一个最高层级的 <code>parent</code> 包和三个子包:</p>
<p>导入 <code>parent.one</code> 将隐式地执行 <code>parent/__init__.py</code> 和 <code>parent/one/__init__.py</code>。 后续导入 <code>parent.two</code> 或 <code>parent.three</code> 则将分别执行 <code>parent/two/__init__.py</code> 和 <code>parent/three/__init__.py</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">parent/</span><br><span class="line">    __init__.py</span><br><span class="line">    one/</span><br><span class="line">        __init__.py</span><br><span class="line">    two/</span><br><span class="line">        __init__.py</span><br><span class="line">    three/</span><br><span class="line">        __init__.py</span><br></pre></td></tr></table></figure>
<h3 id="命名空间包">命名空间包</h3>
<p>命名空间包是由多个 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-portion">部分</a> 构成的，每个部分为父包增加一个子包。 各个部分可能处于文件系统的不同位置。 部分也可能处于 zip 文件中、网络上，或者 Python 在导入期间可以搜索的其他地方。 命名空间包并不一定会直接对应到文件系统中的对象；它们有可能是无实体表示的虚拟模块。</p>
<p>命名空间包的 <code>__path__</code> 属性不使用普通的列表。 而是使用定制的可迭代类型，如果其父包的路径 (或者最高层级包的 <a href="https://docs.python.org/zh-cn/3/library/sys.html#sys.path"><code>sys.path</code></a>) 发生改变，这种对象会在该包内的下一次导入尝试时自动执行新的对包部分的搜索。</p>
<p>命名空间包没有 <code>parent/__init__.py</code> 文件。 实际上，在导入搜索期间可能找到多个 <code>parent</code> 目录，每个都由不同的部分所提供。 因此 <code>parent/one</code> 的物理位置不一定与 <code>parent/two</code> 相邻。 在这种情况下，Python 将为顶级的 <code>parent</code> 包创建一个命名空间包，无论是它本身还是它的某个子包被导入。</p>
<p>另请参阅 <a href="https://peps.python.org/pep-0420/"><strong>PEP 420</strong></a> 了解对命名空间包的规格描述。</p>
<h2 id="class">class</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Complex</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, realpart, imagpart</span>):</span><br><span class="line">        self.r = realpart</span><br><span class="line">        self.i = imagpart</span><br><span class="line"></span><br><span class="line">x = Complex(<span class="number">3.0</span>, -<span class="number">4.5</span>)</span><br><span class="line">x.r, x.i</span><br><span class="line">(<span class="number">3.0</span>, -<span class="number">4.5</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>:</span><br><span class="line"></span><br><span class="line">    kind = <span class="string">&#x27;canine&#x27;</span>         <span class="comment"># class variable shared by all instances, 类似 static </span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        self.name = name    <span class="comment"># instance variable unique to each instance, 类似成员变量</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = Dog(<span class="string">&#x27;Fido&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e = Dog(<span class="string">&#x27;Buddy&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.kind                  <span class="comment"># shared by all dogs</span></span><br><span class="line"><span class="string">&#x27;canine&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e.kind                  <span class="comment"># shared by all dogs</span></span><br><span class="line"><span class="string">&#x27;canine&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.name                  <span class="comment"># unique to d</span></span><br><span class="line"><span class="string">&#x27;Fido&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e.name                  <span class="comment"># unique to e</span></span><br><span class="line"><span class="string">&#x27;Buddy&#x27;</span></span><br></pre></td></tr></table></figure>
<p>继承</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DerivedClassName</span>(<span class="title class_ inherited__">BaseClassName</span>):</span><br><span class="line">    &lt;statement-<span class="number">1</span>&gt;</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    &lt;statement-N&gt;</span><br></pre></td></tr></table></figure>
<p>Python有两个内置函数可被用于继承机制：</p>
<ul>
<li>使用 <a href="https://docs.python.org/zh-cn/3/library/functions.html#isinstance"><code>isinstance()</code></a> 来检查一个实例的类型: <code>isinstance(obj, int)</code> 仅会在 <code>obj.__class__</code> 为 <a href="https://docs.python.org/zh-cn/3/library/functions.html#int"><code>int</code></a> 或某个派生自 <a href="https://docs.python.org/zh-cn/3/library/functions.html#int"><code>int</code></a> 的类时为 <code>True</code>。</li>
<li>使用 <a href="https://docs.python.org/zh-cn/3/library/functions.html#issubclass"><code>issubclass()</code></a> 来检查类的继承关系: <code>issubclass(bool, int)</code> 为 <code>True</code>，因为 <a href="https://docs.python.org/zh-cn/3/library/functions.html#bool"><code>bool</code></a> 是 <a href="https://docs.python.org/zh-cn/3/library/functions.html#int"><code>int</code></a> 的子类。 但是，<code>issubclass(float, int)</code> 为 <code>False</code>，因为 <a href="https://docs.python.org/zh-cn/3/library/functions.html#float"><code>float</code></a> 不是 <a href="https://docs.python.org/zh-cn/3/library/functions.html#int"><code>int</code></a> 的子类。</li>
</ul>
<h2 id="逻辑值检测">逻辑值检测</h2>
<p>任何对象都可以进行逻辑值的检测，以便在 <a href="https://docs.python.org/zh-cn/3/reference/compound_stmts.html#if"><code>if</code></a> 或 <a href="https://docs.python.org/zh-cn/3/reference/compound_stmts.html#while"><code>while</code></a> 作为条件或是作为下文所述布尔运算的操作数来使用。</p>
<p>一个对象在默认情况下均被视为真值，除非当该对象被调用时其所属类定义了 <code>__bool__()</code> 方法且返回 <code>False</code> 或是定义了 <code>__len__()</code> 方法且返回零。 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#id12">1</a> 下面基本完整地列出了会被视为假值的内置对象:</p>
<ul>
<li>被定义为假值的常量: <code>None</code> 和 <code>False</code>。</li>
<li>任何数值类型的零: <code>0</code>, <code>0.0</code>, <code>0j</code>, <code>Decimal(0)</code>, <code>Fraction(0, 1)</code></li>
<li>空的序列和多项集: <code>''</code>, <code>()</code>, <code>[]</code>, <code>&#123;&#125;</code>, <code>set()</code>, <code>range(0)</code></li>
</ul>
<p>类的字符串化</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">repr</span>((self.name, self.grade, self.age))</span><br></pre></td></tr></table></figure>
<h1 id="python-编程之美">python 编程之美</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install autopep8</span><br><span class="line">autopep8 --<span class="keyword">in</span>-place xxxx.py</span><br></pre></td></tr></table></figure>
<p>def func(positional, keyword=value, *args, **kwargs): pass</p>
<p>位置参数是强制性的，且没有默认值。 关键字参数是可选的，有默认值。 任意数量参数列表是可选的，没有默认值。 任意数量关键字参数字典是可选的，没有默认值。</p>
<p>私有属性和实现细节的主要约定是为所有“内部”变量名称加“_”前缀(例如，sys._ getframe)。如果使用方代码打破了这个规则并访问了这些变量，那么任何由代码修改引 发的不当行为或问题都由使用方负责。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = &#123;<span class="string">&#x27;hello&#x27;</span>: <span class="string">&#x27;world&#x27;</span>&#125;</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span> d.get(<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;default_value&#x27;</span>) world</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span> d.get(<span class="string">&#x27;howdy&#x27;</span>, <span class="string">&#x27;default_value&#x27;</span>) default_value</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment">#或者</span></span><br><span class="line"><span class="meta">... </span><span class="keyword">if</span> <span class="string">&#x27;hello&#x27;</span> <span class="keyword">in</span> d:</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(d[<span class="string">&#x27;hello&#x27;</span>])</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列表解析</span></span><br><span class="line">a=[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>] b=[i <span class="keyword">for</span> i <span class="keyword">in</span> a <span class="keyword">if</span> i&gt;<span class="number">4</span>]</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">b = <span class="built_in">filter</span>(<span class="keyword">lambda</span> x: x &gt; <span class="number">4</span>, a)</span><br><span class="line"><span class="comment"># 这种情况，也更易读易理解 </span></span><br><span class="line">a=[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>] b=[i+<span class="number">3</span> <span class="keyword">for</span> i <span class="keyword">in</span> a]</span><br><span class="line"><span class="comment"># 或者 </span></span><br><span class="line">a=<span class="built_in">map</span>(lambdai:i+<span class="number">3</span>,a)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="string">&quot;icky&quot;</span>, <span class="string">&quot;icky&quot;</span>, <span class="string">&quot;icky&quot;</span>, <span class="string">&quot;p-tang&quot;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i, item <span class="keyword">in</span> <span class="built_in">enumerate</span>(a):</span><br><span class="line"><span class="meta">... </span><span class="built_in">print</span>(<span class="string">&quot;&#123;i&#125;: &#123;item&#125;&quot;</span>.<span class="built_in">format</span>(i=i, item=item)) ...</span><br><span class="line"><span class="number">0</span>: icky</span><br><span class="line"><span class="number">1</span>: icky</span><br><span class="line"><span class="number">2</span>: icky</span><br><span class="line"><span class="number">3</span>: p-tang</span><br></pre></td></tr></table></figure>
<p>()用来续行 instead of<br />
</p>
<p>解包:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>filename, ext = <span class="string">&quot;my_photo.orig.png&quot;</span>.rsplit(<span class="string">&quot;.&quot;</span>, <span class="number">1</span>) </span><br><span class="line"><span class="comment"># Python String rsplit() method returns a list of strings after breaking the given string from the  *right side*  by the specified separator.</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(filename, <span class="string">&quot;is a&quot;</span>, ext, <span class="string">&quot;file.&quot;</span>) </span><br><span class="line">my_photo.orig <span class="keyword">is</span> a png file.</span><br><span class="line"></span><br><span class="line">a, b = b, a</span><br><span class="line"></span><br><span class="line">a, *rest = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] </span><br><span class="line"><span class="comment"># a = 1, rest = [2, 3]</span></span><br><span class="line">a, *middle, c = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="comment"># a = 1, middle = [2, 3], c = 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果解包时需要赋值而又不需要其中某个值，那么可以使用双下画线(__)。 </span></span><br><span class="line">filename = <span class="string">&#x27;foobar.txt&#x27;</span></span><br><span class="line">basename, __, ext = filename.rpartition(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line"><span class="comment"># Python String rpartition() Method split the given string into three parts. rpartition() starts looking for separator from the  *right side* , till the separator is found and return a tuple which contains part of the string before separator, the separator and the part after the separator.</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>four_nones = [<span class="literal">None</span>] * <span class="number">4</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(four_nones) </span><br><span class="line">[<span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>letters = [<span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;m&#x27;</span>] </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>word = <span class="string">&#x27;&#x27;</span>.join(letters)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(word)</span><br><span class="line">spam</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="built_in">list</span>((<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>, <span class="string">&#x27;baz&#x27;</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y = <span class="built_in">set</span>((<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>, <span class="string">&#x27;baz&#x27;</span>)) &gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(x)</span><br><span class="line">[<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>, <span class="string">&#x27;baz&#x27;</span>] </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(y)</span><br><span class="line">&#123;<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>, <span class="string">&#x27;baz&#x27;</span>&#125;</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;foo&#x27;</span> <span class="keyword">in</span> x </span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;foo&#x27;</span> <span class="keyword">in</span> y </span><br><span class="line"><span class="literal">True</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>with 语句和上下文管理协议使得代 码可读性更高。该协议包含两个方法 :__enter__() 和 __exit__()，如果一个对象实现了这两个方法，就能用在 with 语句中</p>
<p>因为处理文件 I/O 的对象已经定义了 __enter__() 和 __exit__() 方法 ，所以可以直接用在 with 语句中，不需要 closing。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line">some_lock = threading.Lock()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> some_lock: </span><br><span class="line">  <span class="built_in">print</span>(</span><br><span class="line">		<span class="string">&quot;Look at me: I design coastlines.\n&quot;</span></span><br><span class="line">		<span class="string">&quot;I got an award for Norway.&quot;</span> </span><br><span class="line">  )</span><br><span class="line">  </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;outfile.txt&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> output: </span><br><span class="line">  output.write(</span><br><span class="line">		<span class="string">&quot;flat on his back the moment I im home?\n&quot;</span> </span><br><span class="line">  )</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>新列表仅会在函数定义时被创建一次，后续每次函数调用都使用同一个列表。</strong>在函 数被定义时而不是在每次函数调用时(如 Ruby 中那样)，就会计算 Python 的默认 参数。这意味着如果使用一个可变默认参数并修改它，那么也就修改了后续调用该 函数时使用的那个对象。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">time_consuming_function</span>(<span class="params">x, y, cache=&#123;&#125;</span>):</span><br><span class="line">  args = (x, y)</span><br><span class="line">	<span class="keyword">if</span> args <span class="keyword">in</span> cache: </span><br><span class="line">    <span class="keyword">return</span> cache[args]</span><br><span class="line">	<span class="comment"># 否则是首次出现这些参数</span></span><br><span class="line">	<span class="comment"># 做一些耗时的操作，然后缓存结果 </span></span><br><span class="line">  cache[args] = result</span><br><span class="line">	<span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>
<h2 id="python闭包">Python闭包</h2>
<p>1.什么是闭包，闭包必须满足以下3个条件：</p>
<p>必须是一个嵌套的函数。 闭包必须返回嵌套函数。 嵌套函数必须引用一个外部的非全局的局部自由变量。 举个栗子</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 嵌套函数但不是闭包</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">nested</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">nst</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;i am nested func %s&#x27;</span> % nested.__name__)</span><br><span class="line">    nst()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 闭包函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">closure</span>():</span><br><span class="line">  var = <span class="string">&#x27;hello world&#x27;</span> <span class="comment"># 非全局局部变量</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">cloe</span>():</span><br><span class="line">    <span class="built_in">print</span>(var) <span class="comment"># 引用var</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> cloe <span class="comment"># 返回内部函数</span></span><br><span class="line"></span><br><span class="line">cl = closure()</span><br><span class="line">cl()</span><br></pre></td></tr></table></figure>
<p>2.闭包优点</p>
<p>避免使用全局变量 可以提供部分数据的隐藏 可以提供更优雅的面向对象实现 优点1,2 就不说了，很容易理解，关于第三个，例如当在一个类中实现的方法很少时，或者仅有一个方法时，就可以选择使用闭包。</p>
<p>举个栗子</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用类实现一个加法的类是这样</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">_Add</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, a, b</span>):</span><br><span class="line">        self.a = a</span><br><span class="line">        self.b = b</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.a + self.b</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用闭包实现</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_Add</span>(<span class="params">a</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">b</span>):</span><br><span class="line">        <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> add  </span><br><span class="line"></span><br><span class="line">ad = _Add(<span class="number">1</span>) <span class="comment"># 是不是很像类的实例化</span></span><br><span class="line"><span class="built_in">print</span>(ad(<span class="number">1</span>)) <span class="comment"># out:2</span></span><br><span class="line"><span class="built_in">print</span>(ad(<span class="number">2</span>)) <span class="comment"># out:3</span></span><br><span class="line"><span class="built_in">print</span>(ad(<span class="number">3</span>)) <span class="comment"># out:4</span></span><br></pre></td></tr></table></figure>
<p>闭包的概念差不多就是这样了。</p>
<h3 id="python-延迟绑定">Python 延迟绑定</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">multipliers</span>():</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">lambda</span> x : i*x <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> [m(<span class="number">2</span>) <span class="keyword">for</span> m <span class="keyword">in</span> multipliers()] </span><br><span class="line"></span><br><span class="line">output:</span><br><span class="line"><span class="comment"># [6, 6, 6, 6]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">multipliers</span>():</span><br><span class="line">    <span class="comment"># 添加了一个默认参数i=i</span></span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">lambda</span> x, i=i: i*x <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> [m(<span class="number">2</span>) <span class="keyword">for</span> m <span class="keyword">in</span> multipliers()] </span><br><span class="line"></span><br><span class="line">output:</span><br><span class="line"><span class="comment"># [0, 2, 4, 6]</span></span><br></pre></td></tr></table></figure>
<p>下面来解释为什么输出结果是[6,6,6,6]。</p>
<p>运行代码，代码从第13行开始运行，解释器碰到了一个列表解析，循环取multipliers()函数中的值，而multipliers()函数返回的是一个列表对象，这个列表中有4个元素，每个元素都是一个匿名函数（实际上说是4个匿名函数也不完全准确，其实是4个匿名函数计算后的值，因为后面for i 的循环不光循环了4次，同时提还提供了i的变量引用，等待4次循环结束后，i指向一个值i=3,这个时候，匿名函数才开始引用i=3，计算结果。所以就会出现[6,6,6,6]，因为匿名函数中的i并不是立即引用后面循环中的i值的，<strong>而是在运行嵌套函数的时候，才会查找i的值，这个特性也就是延迟绑定</strong>）</p>
<p>为了便于理解，你可以想象下multipliers内部是这样的(这个是伪代码，并不是准确的)：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">multipliers</span>():</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">lambda</span> x: <span class="number">3</span> * x, <span class="keyword">lambda</span> x: <span class="number">3</span> * x, <span class="keyword">lambda</span> x: <span class="number">3</span> * x, <span class="keyword">lambda</span> x: <span class="number">3</span> * x]</span><br></pre></td></tr></table></figure>
<p>因为Python解释器，遇到lambda（类似于def）,只是定义了一个匿名函数对象，并保存在内存中，只有等到调用这个匿名函数的时候，才会运行内部的表达式，而for i in range(4) 是另外一个表达式，需等待这个表达式运行结束后，才会开始运行lambda 函数，此时的i 指向3，x指向2</p>
<p>添加了一个i=i后，就给匿名函数，添加了一个默认参数，而python函数中的默认参数，是在python 解释器遇到def(i=i)或lambda 关键字时，就必须初始化默认参数，此时for i in range(4)，每循环一次，匿名函数的默认参数i，就需要找一次i的引用，i=0时，第一个匿名函数的默认参数值就是0，i=1时，第二个匿名函数的默认参数值就是1，以此类推。</p>
<p>为了便于理解，你可以想象下multipliers内部是这样的(这个是伪代码只是为了理解)：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">multipliers</span>():</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">lambda</span> x,i=<span class="number">0</span>: i*x, <span class="keyword">lambda</span> x,i=<span class="number">1</span>: i*x, <span class="keyword">lambda</span> x,i=<span class="number">2</span>: i*x, <span class="keyword">lambda</span> x,i=<span class="number">3</span>:i*x i=<span class="number">3</span>]</span><br></pre></td></tr></table></figure>
<h2 id="模块-1">模块</h2>
<p>首先，import modu 语句会在调用者所在的当前目录下查找 modu.py 文件， 如果存在则直接调用它。如果没找到，那么 Python 解释器将在 Python <a href="https://%20docs.python.org/2/library/sys.html#sys.path">搜索路径</a>中递归查找该文件，若仍然没找到，则抛出 ImportError 异常。搜索路径与平台相关，包含环境变量 $PYTHONPATH(或 Windows 中的 %PYTHONPATH%)中用户或者系统定义的任意文件目录，可以在 Python 会话中 检查或修改搜索路径。</p>
<p>一旦找到 modu.py 文件，Python 解释器将在隔离作用域执行这个模块。modu.py 中的所 有顶层语句都会被执行，包括可能存在的其他模块导入。函数和类的定义保存在模块字 典中。</p>
<h2 id="包">包</h2>
<p>任何包含 <strong>init</strong>.py 文件的目录都会被视作一个 Python 包。包含 <strong>init</strong>.py 的顶级目 录是根包(root package)9。导入包里的各个模块和导入普通模块的方式类似，不过 __ init__.py 文件用于收集所有包范围(package-wide)的定义。</p>
<p>pack 目录下的 modu.py 文件可以通过 import pack.modu 语句导入。首先，解释器会在 pack 目录下查找 <strong>init</strong>.py 文件并执行其中的所有顶级语句。然后，查找文件 pack/ modu.py 并执行其中的所有顶级语句。这些操作执行后，modu.py 中定义的任何变量、 函数或者类都能在 pack.modu 命名空间中找到。</p>
<p><a href="mailto:1143474942@qq.com">?</a></p>
<h1 id="散">散</h1>
<h2 id="正则表达式re">正则表达式（re）</h2>
<p><a href="https://docs.python.org/zh-cn/3/library/re.html">官方文档</a></p>
<ul>
<li>r"string"的内容不会转义</li>
<li></li>
</ul>
<p>re.match 返回匹配对象Match</p>
<p>​ Match.group()可以找匹配对应的内容（在Pattern里加好括号）</p>
<p>​ 或者直接以数组形式访问</p>
<p>匹配中文字符的正则表达式： [-]</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">idPattern = re.<span class="built_in">compile</span>(</span><br><span class="line">        <span class="string">&quot;员工姓名：([\u4e00-\u9fa5]&#123;2,4&#125;)\s*日期：(\d&#123;1,2&#125;)月(\d&#123;1,2&#125;)日\s*办公地点：([\u4e00-\u9fa5]&#123;2,10&#125;)\s*当日健康状况：([\u4e00-\u9fa5]&#123;2,10&#125;)\s*&quot;</span>)</span><br><span class="line">    idResult = re.<span class="keyword">match</span>(idPattern, <span class="built_in">id</span>)</span><br><span class="line">    dic[<span class="string">&quot;name&quot;</span>] = idResult.group(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h2 id="删除文件">删除文件</h2>
<p>os.remove(filepath)</p>
<h2 id="range">range</h2>
<p>range(3)</p>
<p>0,1,2</p>
<h2 id="numpy">numpy</h2>
<ul>
<li><p>ndarray类</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">numpy.array(object, dtype = None, copy = True, order = None, subok = False, ndmin = 0)</span><br></pre></td></tr></table></figure>
<p>ndarray属性</p>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">属性</th>
<th style="text-align: left;">说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">ndarray.ndim</td>
<td style="text-align: left;">秩，即轴的数量或维度的数量</td>
</tr>
<tr class="even">
<td style="text-align: left;">ndarray.shape</td>
<td style="text-align: left;">数组的维度，对于矩阵，n 行 m 列</td>
</tr>
<tr class="odd">
<td style="text-align: left;">ndarray.size</td>
<td style="text-align: left;">数组元素的总个数，相当于 .shape 中 n*m 的值</td>
</tr>
<tr class="even">
<td style="text-align: left;">ndarray.dtype</td>
<td style="text-align: left;">ndarray 对象的元素类型</td>
</tr>
<tr class="odd">
<td style="text-align: left;">ndarray.itemsize</td>
<td style="text-align: left;">ndarray 对象中每个元素的大小，以字节为单位</td>
</tr>
<tr class="even">
<td style="text-align: left;">ndarray.flags</td>
<td style="text-align: left;">ndarray 对象的内存信息</td>
</tr>
<tr class="odd">
<td style="text-align: left;">nd,array.real</td>
<td style="text-align: left;">ndarray元素的实部</td>
</tr>
<tr class="even">
<td style="text-align: left;">ndarray.imag</td>
<td style="text-align: left;">ndarray 元素的虚部</td>
</tr>
<tr class="odd">
<td style="text-align: left;">ndarray.data</td>
<td style="text-align: left;">包含实际数组元素的缓冲区，由于一般通过数组的索引获取元素，所以通常不需要使用这个属性。</td>
</tr>
</tbody>
</table></li>
<li><p>dtype类</p></li>
<li><p>创建数组：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">numpy.empty(shape, dtype = <span class="built_in">float</span>, order = <span class="string">&#x27;C&#x27;</span>)</span><br><span class="line">numpy.zeros(shape, dtype = <span class="built_in">float</span>, order = <span class="string">&#x27;C&#x27;</span>)</span><br><span class="line">numpy.ones(shape, dtype = <span class="literal">None</span>, order = <span class="string">&#x27;C&#x27;</span>)</span><br><span class="line">numpy.asarray(a, dtype = <span class="literal">None</span>, order = <span class="literal">None</span>) <span class="comment"># a为输入数组，如列表，元组等</span></span><br><span class="line">numpy.arange(start, stop, step, dtype)</span><br></pre></td></tr></table></figure></li>
<li><p>数组运算（broadcast）</p>
<p><strong>广播的规则:</strong></p>
<ul>
<li>让所有输入数组都向其中形状最长的数组看齐，形状中不足的部分都通过在前面加 1 补齐。</li>
<li>输出数组的形状是输入数组形状的各个维度上的最大值。</li>
<li>如果输入数组的某个维度和输出数组的对应维度的长度相同或者其长度为 1 时，这个数组能够用来计算，否则出错。</li>
<li>当输入数组的某个维度的长度为 1 时，沿着此维度运算时都用此维度上的第一组值。</li>
</ul>
<p><strong>简单理解：</strong>对两个数组，分别比较他们的每一个维度（若其中一个数组没有当前维度则忽略），满足：</p>
<ul>
<li>数组拥有相同形状。</li>
<li>当前维度的值相等。</li>
<li>当前维度的值有一个是 1。</li>
</ul>
<p>若条件不满足，抛出 <strong>"ValueError: frames are not aligned"</strong> 异常。</p>
<p>.T数组转置</p>
<p>最大最小</p>
<p>numpy.amin(array, axis) 用于计算数组中的元素沿指定轴的最小值。</p>
<p>numpy.amax() 用于计算数组中的元素沿指定轴的最大值。</p>
<p>极差np.ptp(a, axis = 0</p>
<p>算数平均值numpy.mean()</p>
<p>加权平均值numpy.average()</p>
<p>标准差</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">std = sqrt(mean((x - x.mean())**2))</span><br></pre></td></tr></table></figure>
<p>np.std([1,2,3,4])</p>
<p>方差numpy.var()</p></li>
<li><p>部分函数</p>
<ul>
<li><p>numpy.sum</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.array([[<span class="number">1</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">2</span>],</span><br><span class="line">              [<span class="number">9</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">8</span>],</span><br><span class="line">              [<span class="number">3</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">1</span>]])</span><br><span class="line"><span class="built_in">print</span>(np.<span class="built_in">sum</span>(a, axis=<span class="number">0</span>))</span><br><span class="line"><span class="comment"># 为了描述方便,a就表示这个二维数组,np.sum(a, axis=0)的含义是a[0][j],a[1][j],a[2]j对应项相加的结果.即[1,5,5,2]+[9,6,2,8]+[3,7,9,1]=[13,18,16,11].</span></span><br></pre></td></tr></table></figure></li>
<li><p>numpy.tile</p>
<p>说白了，就是把数组沿各个方向复制</p>
<p>比如 a = np.array([0,1,2]), np.tile(a,(2,1))就是把a先沿x轴（就这样称呼吧）复制1倍，即没有复制，仍然是 [0,1,2]。 再把结果沿y方向复制2倍，即最终得到</p>
<p>array([[0,1,2],</p>
<p>​ [0,1,2]])</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = np.array([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.tile(b, <span class="number">2</span>) <span class="comment">#沿X轴复制2倍</span></span><br><span class="line">array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">       [<span class="number">3</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">4</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.tile(b, (<span class="number">2</span>, <span class="number">1</span>))<span class="comment">#沿X轴复制1倍（相当于没有复制），再沿Y轴复制2倍</span></span><br><span class="line">array([[<span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">       [<span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">       [<span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">       [<span class="number">3</span>, <span class="number">4</span>]])</span><br></pre></td></tr></table></figure></li>
</ul></li>
</ul>
<h2 id="函数自动添加注释">函数自动添加注释</h2>
<p>输入```后再输入回车</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">AddLoglevel</span>(<span class="params">table, pre_number</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    填写db_type</span></span><br><span class="line"><span class="string">    :param table: 单个表格对象</span></span><br><span class="line"><span class="string">    :param pre_number: 上一行的序号</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>##关键词？</p>
<p><strong>编码 # -*- coding: UTF-8 -*-</strong> 或者 <strong># coding=utf-8</strong></p>
<p><strong>括号</strong> ()元组 []列表 {}字典</p>
<p><strong><em>global</em></strong> python如果想使用作用域之外的全局变量，则需要加global前缀。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">5</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>():</span><br><span class="line">    <span class="keyword">global</span> a</span><br><span class="line"> <span class="comment">#此处声明，告诉执行引擎：我要用全局变量a，不要整成局部的了！</span></span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;In test func: a = %d&#x27;</span> % a</span><br><span class="line"> </span><br><span class="line">test()</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;Global a = %d&#x27;</span> % a</span><br><span class="line"></span><br><span class="line">In test func: a = <span class="number">1</span></span><br><span class="line">Global a = <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p><strong>pycache文件</strong> 是产生的二进制文件，如果存在，下次执行代码就可不用编译节省时间</p>
<p><strong>extend &amp; append</strong> extend将参数list里的每一个元素加到列表中，append将整个对象加入列表中</p>
<p><strong>切片</strong> L[0:3] 取列表L的前三个元素</p>
<p><strong>list slice</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">str_object[start_pos:end_pos:step]</span><br></pre></td></tr></table></figure>
<p>切片以start_pos索引（包括）开始（0），以end_pos索引（排除）结束（长度）。step参数用于指定从开始到结束索引要执行的步骤。</p>
<p>Python字符串切片始终遵循以下规则：<strong>s [：i] + s [i：] == s</strong>用于任何索引'i'。</p>
<p><strong>foo&amp;bar&amp;baz</strong> 意思就是张三李四王二麻子</p>
<h2 id="字典">字典</h2>
<ul>
<li><p>访问字典就像访问数组一样 dic[key]</p></li>
<li><p>判断字典里是否有key的方法</p>
<ul>
<li>d.has_key('name')</li>
<li>‘name’ in d.keys()</li>
</ul></li>
</ul>
<p>##类class</p>
<p>类的方法第一个参数必须是self，self代表当前类的实例，self.__class__指向类</p>
<p>##python目录</p>
<p>###模块module</p>
<p>import module</p>
<p>module.func()</p>
<p>from module import *</p>
<p>func()</p>
<p><strong>命名空间</strong> dir()函数显示命名空间里所有的变量名字</p>
<p>###包package</p>
<p>文件夹 包含__init__.py</p>
<h2 id="lambda函数">lambda函数</h2>
<p>Python中，lambda函数也叫匿名函数，及即没有具体名称的函数，它允许快速定义单行函数，类似于C语言的宏，可以用在任何需要函数的地方。这区别于def定义的函数。 lambda与def的区别： 1）def创建的方法是有名称的，而lambda没有。 2）lambda会返回一个函数对象，但这个对象不会赋给一个标识符，而def则会把函数对象赋值给一个变量（函数名）。 3）lambda只是一个表达式，而def则是一个语句。 4）lambda表达式” : “后面，只能有一个表达式，def则可以有多个。 5）像if或for或print等语句不能用于lambda中，def可以。 6）lambda一般用来定义简单的函数，而def可以定义复杂的函数。 6）lambda函数不能共享给别的程序调用，def可以。 lambda语法格式： lambda 变量 : 要执行的语句</p>
<h2 id="函数传参可变不可变参数">函数传参（可变不可变参数）</h2>
<p>在 python 中，strings, tuples, 和 numbers 是不可更改的对象，而 list,dict 等则是可以修改的对象。</p>
<ul>
<li><strong>不可变类型：</strong>变量赋值 <strong>a=5</strong> 后再赋值 <strong>a=10</strong>，这里实际是新生成一个 int 值对象 10，再让 a 指向它，而 5 被丢弃，不是改变a的值，相当于新生成了a。</li>
<li><strong>可变类型：</strong>变量赋值 <strong>la=[1,2,3,4]</strong> 后再赋值 <strong>la[2]=5</strong> 则是将 list la 的第三个元素值更改，本身la没有动，只是其内部的一部分值被修改了。</li>
</ul>
<p>python 函数的参数传递：</p>
<ul>
<li><strong>不可变类型：</strong>类似 c++ 的值传递，如 整数、字符串、元组。如fun（a），传递的只是a的值，没有影响a对象本身。比如在 fun（a）内部修改 a 的值，只是修改另一个复制的对象，不会影响 a 本身。</li>
<li><strong>可变类型：</strong>类似 c++ 的引用传递，如 列表，字典。如 fun（la），则是将 la 真正的传过去，修改后fun外部的la也会受影响</li>
</ul>
<h2 id="数据类型转换">数据类型转换</h2>
<ol type="1">
<li>str float bytes 转 int int()</li>
<li>str int bytes 转 float float()</li>
<li>str float bytes 转 complex complex()</li>
<li>str()可转换任意类型</li>
<li>str 转 bytes bytes()</li>
<li>list() tuple()</li>
</ol>
<h2 id="循环">循环</h2>
<ol type="1">
<li>while，for循环可以用else</li>
<li>for i in sequence</li>
<li>多变量循环 for title, mark in zip(titles, marks): ## GUI</li>
</ol>
<h3 id="tkinter包">tkinter包</h3>
<p>说明：py自带包，跨平台，简单 直接看文档就行 布局：grid pack place master 父组件，frame一般认为master=None StringVar</p>
<h2 id="线程">线程</h2>
<h3 id="threading包">threading包</h3>
<p>先创建，再start，join主线程，分线程结束后主线程才结束 <strong>线程安全</strong></p>
<h2 id="format函数">format函数</h2>
<h2 id="date">date</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式化成2016-03-20 11:45:39形式</span></span><br><span class="line"><span class="built_in">print</span> (time.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, time.localtime()))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式化成Sat Mar 28 22:24:24 2016形式</span></span><br><span class="line"><span class="built_in">print</span> (time.strftime(<span class="string">&quot;%a %b %d %H:%M:%S %Y&quot;</span>, time.localtime()))</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 将格式字符串转换为时间戳</span></span><br><span class="line">a = <span class="string">&quot;Sat Mar 28 22:24:24 2016&quot;</span></span><br><span class="line"><span class="built_in">print</span> (time.mktime(time.strptime(a,<span class="string">&quot;%a %b %d %H:%M:%S %Y&quot;</span>)))</span><br></pre></td></tr></table></figure>
<h2 id="string转time">string转time</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse_ymd</span>(<span class="params">s</span>):</span><br><span class="line">    year_s, mon_s, day_s = s.split(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> datetime(<span class="built_in">int</span>(year_s), <span class="built_in">int</span>(mon_s), <span class="built_in">int</span>(day_s))</span><br></pre></td></tr></table></figure>
<h2 id="下划线">下划线</h2>
<ol type="1">
<li><p>_var 单个下划线是一个Python命名约定，表示这个名称是供内部使用的。 它通常不由Python解释器强制执行，仅仅作为一种对程序员的提示。</p></li>
<li><p>Var_ 有时候，一个变量的最合适的名称已经被一个关键字所占用。 因此，像class或def这样的名称不能用作Python中的变量名称。 在这种情况下，你可以附加一个下划线来解决命名冲突</p></li>
<li><p>__var 双下划线前缀会导致Python解释器重写属性名称，以避免子类中的命名冲突。这也叫做名称修饰（name mangling） - 解释器更改变量的名称，以便在类被扩展的时候不容易产生冲突。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>:</span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">       self.foo = <span class="number">11</span></span><br><span class="line">       self._bar = <span class="number">23</span></span><br><span class="line">       self.__baz = <span class="number">23</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = Test()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">dir</span>(t)<span class="comment">#内置函数</span></span><br><span class="line">[<span class="string">&#x27;_Test__baz&#x27;</span>, <span class="string">&#x27;__class__&#x27;</span>, <span class="string">&#x27;__delattr__&#x27;</span>, <span class="string">&#x27;__dict__&#x27;</span>, <span class="string">&#x27;__dir__&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;__doc__&#x27;</span>, <span class="string">&#x27;__eq__&#x27;</span>, <span class="string">&#x27;__format__&#x27;</span>, <span class="string">&#x27;__ge__&#x27;</span>, <span class="string">&#x27;__getattribute__&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;__gt__&#x27;</span>, <span class="string">&#x27;__hash__&#x27;</span>, <span class="string">&#x27;__init__&#x27;</span>, <span class="string">&#x27;__le__&#x27;</span>, <span class="string">&#x27;__lt__&#x27;</span>, <span class="string">&#x27;__module__&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;__ne__&#x27;</span>, <span class="string">&#x27;__new__&#x27;</span>, <span class="string">&#x27;__reduce__&#x27;</span>, <span class="string">&#x27;__reduce_ex__&#x27;</span>, <span class="string">&#x27;__repr__&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;__setattr__&#x27;</span>, <span class="string">&#x27;__sizeof__&#x27;</span>, <span class="string">&#x27;__str__&#x27;</span>, <span class="string">&#x27;__subclasshook__&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;__weakref__&#x27;</span>, <span class="string">&#x27;_bar&#x27;</span>, <span class="string">&#x27;foo&#x27;</span>]</span><br></pre></td></tr></table></figure></li>
<li><p>__var__ Python保留了有双前导和双末尾下划线的名称，用于特殊用途。 这样的例子有，__init__对象构造函数，或__call__ --- 它使得一个对象可以被调用。而且不会有名称修饰</p></li>
<li><p>_ 单下划线表示一个临时变量。除了用作临时变量之外，“_”是大多数Python REPL中的一个特殊变量，它表示由解释器评估的最近一个表达式的结果。</p></li>
</ol>
<h2 id="装饰器">装饰器</h2>
<p><span class="citation" data-cites="符号的意义">@符号的意义</span></p>
<p>就是将一个函数包装起来，而且能保持代码结构不变</p>
<p><a href="https://foofish.net/python-decorator.html">参考网站：装饰器</a></p>
<h2 id="迭代器">迭代器</h2>
<p>迭代器是一个可以记住遍历的位置的对象。</p>
<p>迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。迭代器只能往前不会后退。</p>
<p>迭代器有两个基本的方法：<strong>iter()</strong>（用于通过列表创建迭代器） 和 <strong>next()</strong>。</p>
<p>字符串，列表或元组对象都可用于创建迭代器：</p>
<h2 id="with">with</h2>
<p>with 语句适用于对资源进行访问的场合，确保不管使用过程中是否发生异常都会执行必要的“清理”操作，释放资源，比如文件使用后自动关闭／线程中锁的自动获取和释放等。</p>
<p>（１）紧跟with后面的语句被求值后，返回对象的“–enter–()”方法被调用，这个方法的返回值将被赋值给as后面的变量； （２）当with后面的代码块全部被执行完之后，将调用前面返回对象的“–exit–()”方法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;１.txt&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    data = file.read()</span><br></pre></td></tr></table></figure>
<h2 id="字符串格式化">字符串格式化</h2>
<ul>
<li><p>%[数据名称][对齐标志][宽度].[精度]类型</p>
<figure>
<img src="https://pic4.zhimg.com/80/v2-2a0bf9157e7c09926093f91636d91177_hd.jpg" alt="img" /><figcaption aria-hidden="true">img</figcaption>
</figure></li>
<li><p>str.format函数</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">[[填充字符]对齐方式][符号标志][#][宽度][,][.精度][类型]</span><br><span class="line">&#x27;&#123;:S^+#016,.2f&#125;&#x27;.format(1234)  # 输出&#x27;SSS+1,234.00SSSS&#x27;</span><br></pre></td></tr></table></figure>
<figure>
<img src="https://pic1.zhimg.com/v2-0340c7e376d8215515f33c1c05c388f0_r.jpg" alt="preview" /><figcaption aria-hidden="true">preview</figcaption>
</figure></li>
<li><p>f-string</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;My name is %s and i&#x27;</span>m %s years old.<span class="string">&#x27; % (name, age)</span></span><br><span class="line"><span class="string">&#x27;</span>My name <span class="keyword">is</span> &#123;&#125; <span class="keyword">and</span> i<span class="string">&#x27;m &#123;&#125; years old.&#x27;</span>.<span class="built_in">format</span>(name, age)</span><br><span class="line"><span class="string">f&#x27;My name is <span class="subst">&#123;name&#125;</span> and i&#x27;</span>m &#123;age&#125; years old.<span class="string">&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="虚拟环境">虚拟环境</h2>
<h2 id="神奇的库">神奇的库</h2>
<p>tqdm 进度条</p>
<h2 id="generatoryield">generator&amp;yield</h2>
<h3 id="generator参考网站">generator<a href="https://www.ibm.com/developerworks/cn/opensource/os-cn-python-yield/index.html">参考网站</a></h3>
<p>如果列表元素可以按照某种算法推算出来，那我们是否可以在循环的过程中不断推算出后续的元素呢？这样就不必创建完整的list，从而节省大量的空间。在Python中，这种一边循环一边计算的机制，称为生成器：generator。</p>
<p>要创建一个generator，有很多种方法。第一种方法很简单，只要把一个列表生成式的<code>[]</code>改成<code>()</code>，就创建了一个generator：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>L = [x * x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>L</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>g = (x * x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>g</span><br><span class="line">&lt;generator <span class="built_in">object</span> &lt;genexpr&gt; at <span class="number">0x1022ef630</span>&gt;</span><br></pre></td></tr></table></figure>
<p>如果要一个一个打印出来，可以通过<code>next()</code>函数获得generator的下一个返回值（每一次generator的值都会更新）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> g:</span><br><span class="line">	<span class="built_in">print</span>(n)</span><br></pre></td></tr></table></figure>
<h3 id="yield">yield</h3>
<p>通常的for...in...循环中，in后面是一个数组，这个数组就是一个可迭代对象，类似的还有链表，字符串，文件。它可以是mylist = [1, 2, 3]，也可以是mylist = [x*x for x in range(3)]。 它的缺陷是所有数据都在内存中，如果有海量数据的话将会非常耗内存。</p>
<p>生成器是可以迭代的，但只可以读取它一次。因为用的时候才生成。比如 mygenerator = (x*x for x in range(3))，注意这里用到了()，它就不是数组，而上面的例子是[]。</p>
<p>我理解的生成器(generator)能够迭代的关键是它有一个next()方法，工作原理就是通过重复调用next()方法，直到捕获一个异常。可以用上面的mygenerator测试。</p>
<p>带有 yield 的函数不再是一个普通函数，而是一个生成器generator，可用于迭代，工作原理同上。</p>
<p>yield 是一个类似 return 的关键字，迭代一次遇到yield时就返回yield后面(右边)的值。重点是：下一次迭代时，从上一次迭代遇到的yield后面的代码(下一行)开始执行。</p>
<p>简要理解：yield就是 return 返回一个值，并且记住这个返回的位置，下次迭代就从这个位置后(下一行)开始。</p>
<p>带有yield的函数不仅仅只用于for循环中，而且可用于某个函数的参数，只要这个函数的参数允许迭代参数。比如array.extend函数，它的原型是array.extend(iterable)。</p>
<p>send(msg)与next()的区别在于send可以传递参数给yield表达式，这时传递的参数会作为yield表达式的值，而yield的参数是返回给调用者的值。——换句话说，就是send可以强行修改上一个yield表达式值。比如函数中有一个yield赋值，a = yield 5，第一次迭代到这里会返回5，a还没有赋值。第二次迭代时，使用.send(10)，那么，就是强行修改yield 5表达式的值为10，本来是5的，那么a=10</p>
<p>send(msg)与next()都有返回值，它们的返回值是当前迭代遇到yield时，yield后面表达式的值，其实就是当前迭代中yield后面的参数。</p>
<p>第一次调用时必须先next()或send(None)，否则会报错，send后之所以为None是因为这时候没有上一个yield(根据第8条)。可以认为，next()等同于send(None)。</p>
<h2 id="anacondamacpycharm">anaconda+mac+pycharm</h2>
<ol type="1">
<li><p>下载安装 anaconda</p></li>
<li><p>下载安装 pycharm</p></li>
<li><p>anaconda 安装环境, 可以在创建的环境里用 terminal+pip安装难装的库</p></li>
<li><p>在pycharm 项目的 interpreter 里选择 anaconda 装好的环境</p>
<p>可以再命令行里用<code>conda env list</code>命令来找到环境目录, 选择 bin 里的 python 就能使用环境啦!</p></li>
<li><p>在安装 tensorflow 的时候用了清华的镜像速度快</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line">conda config --set show_channel_urls yes</span><br><span class="line">conda create -n tensorflow python=3.7</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">使用建好的名为 tensorflow 的环境</span></span><br><span class="line">pip install --upgrade --ignore-installed tensorflow</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>language</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>docs</tag>
        <tag>org</tag>
        <tag>print</tag>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>qt</title>
    <url>/2021/04/0c582346e65f.html</url>
    <content><![CDATA[<blockquote>
<p>qt</p>
</blockquote>
<span id="more"></span>
<h1 id="meta-object-system">meta-object system</h1>
<ol type="1">
<li>The <a href="https://doc.qt.io/qt-6/qobject.html">QObject</a> class provides a base class for objects that can take advantage of the meta-object system.</li>
<li>The <a href="https://doc.qt.io/qt-6/qobject.html#Q_OBJECT">Q_OBJECT</a> macro inside the private section of the class declaration is used to enable meta-object features, such as dynamic properties, signals, and slots.</li>
<li>The <a href="https://doc.qt.io/qt-6/moc.html">Meta-Object Compiler</a> (<code>moc</code>) supplies each <a href="https://doc.qt.io/qt-6/qobject.html">QObject</a> subclass with the necessary code to implement meta-object features. (when meet a Q_OBJECT macro in .cpp, poduce another .cpp)</li>
</ol>
<p>qobject_cast(just like dynamic_cast, without RTTI)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">QObject *obj = <span class="keyword">new</span> MyWidget;</span><br><span class="line">QWidget *widget = <span class="built_in">qobject_cast</span>&lt;QWidget *&gt;(obj);</span><br></pre></td></tr></table></figure>
<h1 id="property-system">property system</h1>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Q_PROPERTY</span>(<span class="type">bool</span> focus READ hasFocus)</span><br><span class="line"><span class="built_in">Q_PROPERTY</span>(<span class="type">bool</span> enabled READ isEnabled WRITE setEnabled)</span><br><span class="line"><span class="built_in">Q_PROPERTY</span>(QCursor cursor READ cursor WRITE setCursor RESET unsetCursor)</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">		<span class="built_in">Q_PROPERTY</span>(QColor color MEMBER m_color NOTIFY colorChanged)</span><br><span class="line">    <span class="built_in">Q_PROPERTY</span>(qreal spacing MEMBER m_spacing NOTIFY spacingChanged)</span><br><span class="line">    <span class="built_in">Q_PROPERTY</span>(QString text MEMBER m_text NOTIFY textChanged)</span><br><span class="line">    ...</span><br><span class="line">signals:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">colorChanged</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">spacingChanged</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">textChanged</span><span class="params">(<span class="type">const</span> QString &amp;newText)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    QColor  m_color;</span><br><span class="line">    qreal   m_spacing;</span><br><span class="line">    QString m_text;</span><br></pre></td></tr></table></figure>
<ul>
<li>A <code>READ</code> accessor function is required if no <code>MEMBER</code> variable was specified. <strong>It is for reading the property value.</strong> Ideally, a const function is used for this purpose, and it must return either the property's type or a const reference to that type. e.g., <a href="https://doc.qt.io/qt-6/qwidget.html#focus-prop">QWidget::focus</a> is a read-only property with <code>READ</code> function, <a href="https://doc.qt.io/qt-6/qwidget.html#focus-prop">QWidget::hasFocus</a>().</li>
<li>A <code>WRITE</code> accessor function is optional. It is for setting the property value. <strong>It must return void and must take exactly one argument</strong>, either of the property's type or a pointer or reference to that type. e.g., <a href="https://doc.qt.io/qt-6/qwidget.html#enabled-prop">QWidget::enabled</a> has the <code>WRITE</code> function <a href="https://doc.qt.io/qt-6/qwidget.html#enabled-prop">QWidget::setEnabled</a>(). Read-only properties do not need <code>WRITE</code> functions. e.g., <a href="https://doc.qt.io/qt-6/qwidget.html#focus-prop">QWidget::focus</a> has no <code>WRITE</code> function.</li>
<li>A <code>MEMBER</code> variable association is required if no <code>READ</code> accessor function is specified. <strong>This makes the given member variable readable and writable</strong> without the need of creating <code>READ</code> and <code>WRITE</code> accessor functions. It's still possible to use <code>READ</code> or <code>WRITE</code> accessor functions in addition to <code>MEMBER</code> variable association (but not both), if you need to control the variable access.</li>
<li>A <code>RESET</code> function is optional. It is for setting the property back to its context specific default value. e.g., <a href="https://doc.qt.io/qt-6/qwidget.html#cursor-prop">QWidget::cursor</a> has the typical <code>READ</code> and <code>WRITE</code> functions, <a href="https://doc.qt.io/qt-6/qwidget.html#cursor-prop">QWidget::cursor</a>() and <a href="https://doc.qt.io/qt-6/qwidget.html#cursor-prop">QWidget::setCursor</a>(), and it also has a <code>RESET</code> function, <a href="https://doc.qt.io/qt-6/qwidget.html#cursor-prop">QWidget::unsetCursor</a>(), since no call to <a href="https://doc.qt.io/qt-6/qwidget.html#cursor-prop">QWidget::setCursor</a>() can mean <em>reset to the context specific cursor</em>. The <code>RESET</code> function must return void and take no parameters.</li>
<li>A <code>NOTIFY</code> signal is optional. If defined, <strong>it should specify one existing signal in that class that is emitted whenever the value of the property changes</strong>. <code>NOTIFY</code> signals for <code>MEMBER</code> variables must take zero or one parameter, which must be of the same type as the property. The parameter will take the new value of the property. The <code>NOTIFY</code> signal should only be emitted when the property has really been changed, to avoid bindings being unnecessarily re-evaluated in QML, for example. Qt emits automatically that signal when needed for MEMBER properties that do not have an explicit setter.</li>
<li>A <code>REVISION</code> number or <code>REVISION()</code> macro is optional. If included, it defines the property and its notifier signal to be used in a particular revision of the API (usually for exposure to QML). If not included, it defaults to 0.</li>
<li>The <code>DESIGNABLE</code> attribute indicates whether the property should be visible in the property editor of GUI design tool (e.g., <a href="https://doc.qt.io/qt-6/qtdesigner-manual.html">Qt Designer</a>). Most properties are <code>DESIGNABLE</code> (default true). Valid values are true and false.</li>
<li>The <code>SCRIPTABLE</code> attribute indicates whether this property should be accessible by a scripting engine (default true). Valid values are true and false.</li>
<li>The <code>STORED</code> attribute indicates whether the property should be thought of as existing on its own or as depending on other values. It also indicates whether the property value must be saved when storing the object's state. Most properties are <code>STORED</code> (default true), but e.g., <a href="https://doc.qt.io/qt-6/qwidget.html#minimumWidth-prop">QWidget::minimumWidth</a>() has <code>STORED</code> false, because its value is just taken from the width component of property <a href="https://doc.qt.io/qt-6/qwidget.html#minimumSize-prop">QWidget::minimumSize</a>(), which is a <a href="https://doc.qt.io/qt-6/qsize.html">QSize</a>.</li>
<li>The <code>USER</code> attribute indicates whether the property is designated as the user-facing or user-editable property for the class. <strong>Normally, there is only one <code>USER</code> property per class</strong> (default false). e.g., <a href="https://doc.qt.io/qt-6/qabstractbutton.html#checked-prop">QAbstractButton::checked</a> is the user editable property for (checkable) buttons. Note that <a href="https://doc.qt.io/qt-6/qitemdelegate.html">QItemDelegate</a> gets and sets a widget's <code>USER</code> property.</li>
<li>The <code>BINDABLE bindableProperty</code> attribute indicates that the property supports <a href="https://doc.qt.io/qt-6/bindableproperties.html">bindings</a>, and that it is possible to set and inspect bindings to this property via the meta object system (<a href="https://doc.qt.io/qt-6/qmetaproperty.html">QMetaProperty</a>). <code>bindableProperty</code> names a class member of type <a href="https://doc.qt.io/qt-6/qbindable.html">QBindable</a><T>, where T is the property type. This attribute was introduced in Qt 6.0.</li>
<li>The presence of the <code>CONSTANT</code> attribute indicates that the property value is constant. For a given object instance, the READ method of a constant property must return the same value every time it is called. This constant value may be different for different instances of the object. A constant property cannot have a WRITE method or a NOTIFY signal.</li>
<li>The presence of the <code>FINAL</code> attribute indicates that the property will not be overridden by a derived class. This can be used for performance optimizations in some cases, but is not enforced by moc. Care must be taken never to override a <code>FINAL</code> property.</li>
<li>The presence of the <code>REQUIRED</code> attribute indicates that the property should be set by a user of the class. This is not enforced by moc, and is mostly useful for classes exposed to QML. In QML, classes with REQUIRED properties cannot be instantiated unless all REQUIRED properties have been set.</li>
</ul>
<p>A property can be read and written using the generic functions <a href="https://doc.qt.io/qt-6/qobject.html#property">QObject::property</a>() and <a href="https://doc.qt.io/qt-6/qobject.html#setProperty">QObject::setProperty</a>(), without knowing anything about the owning class except <strong>the property's name</strong>. In the code snippet below, the call to <a href="https://doc.qt.io/qt-6/qabstractbutton.html#down-prop">QAbstractButton::setDown</a>() and the call to <a href="https://doc.qt.io/qt-6/qobject.html#setProperty">QObject::setProperty</a>() both set property "down".</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">QPushButton *button = <span class="keyword">new</span> QPushButton;</span><br><span class="line">QObject *object = button;</span><br><span class="line"></span><br><span class="line">button-&gt;<span class="built_in">setDown</span>(<span class="literal">true</span>);</span><br><span class="line">object-&gt;<span class="built_in">setProperty</span>(<span class="string">&quot;down&quot;</span>, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure>
<h1 id="qt-object">qt object</h1>
<p>Qt Objects should be treated as identities, not as values. Identities are cloned, not copied or assigned, and cloning an identity is a more complex operation than copying or assigning a value. Therefore, <strong><a href="https://doc.qt.io/qt-6/qobject.html">QObject</a> and all subclasses of <a href="https://doc.qt.io/qt-6/qobject.html">QObject</a> (direct or indirect) have their <a href="https://doc.qt.io/qt-6/qobject.html#no-copy-constructor">copy constructor and assignment operator</a> disabled.</strong></p>
<h1 id="object-tree">object tree</h1>
<p>When you create a <a href="https://doc.qt.io/qt-6/qobject.html">QObject</a> with another object as parent, it's added to the parent's <a href="https://doc.qt.io/qt-6/qobject.html#children">children</a>() list, and is deleted when the parent is.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">QPushButton <span class="title">quit</span><span class="params">(<span class="string">&quot;Quit&quot;</span>)</span></span>;</span><br><span class="line">    QWidget window;</span><br><span class="line"></span><br><span class="line">    quit.<span class="built_in">setParent</span>(&amp;window);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意在 stack 上的情况, 这种情况 child 被析构两次是会异常的.</p>
<h1 id="信号与槽">信号与槽</h1>
<h1 id="tips">Tips</h1>
<ul>
<li>parent object tree, setparent</li>
<li>Qt::QueuedConnection</li>
<li>MOC meta object compiler</li>
<li>Q_DISABLE_COPY, QObject 必须 unique, 以memory 位置确定</li>
<li>QDeleteAll + clear</li>
<li>QScopePointer, QSharedPointer</li>
<li></li>
</ul>
<h1 id="qt-入门">Qt 入门</h1>
<h2 id="what-is-qt">what is Qt</h2>
<p>Qt是一个1991年由Qt Company开发的跨平台C++图形用户界面应用程序开发框架。它既可以开发GUI程序，也可用于开发非GUI程序，比如控制台工具和服务器。Qt是面向对象的框架，使用特殊的代码生成扩展（称为元对象编译器(Meta Object Compiler, moc)）以及一些宏，Qt很容易扩展，并且允许真正地组件编程。基本上，Qt 同X Window上的 Motif，Openwin，GTK 等图形界 面库和 Windows 平台上的MFC，OWL，VCL，ATL 是同类型的东西。</p>
<h2 id="how-to-use-qt">how to use Qt</h2>
<h3 id="安装">安装</h3>
<p><a href="qt.io">Qt 官网</a></p>
<p>在 Qt 官网<a href="https://www.qt.io/download">下载</a> Qt 及其 IDE QtCreator</p>
<figure>
<img src="https://tva1.sinaimg.cn/large/008i3skNly1gpv2g5txzij30uu0b2gnm.jpg" alt="截屏2021-04-24 下午7.38.05" /><figcaption aria-hidden="true">截屏2021-04-24 下午7.38.05</figcaption>
</figure>
<p>用 MaintenanceTool 下载对应版本和额外的组件.</p>
<p>用 QtCreator 进行开发</p>
<h2 id="简单介绍">简单介绍</h2>
<p>进入 QtCreator 后新建项目可以看到以下选项</p>
<figure>
<img src="https://tva1.sinaimg.cn/large/008i3skNly1gpv2lgzoqtj30vk0dg402.jpg" alt="截屏2021-04-24 下午7.43.14" /><figcaption aria-hidden="true">截屏2021-04-24 下午7.43.14</figcaption>
</figure>
<p>Qt Widgets Application 是新建窗口项目</p>
<p>Qt Console Application 是新建命令行项目</p>
<p>下面以窗口项目进行演示</p>
<h3 id="窗口项目">窗口项目</h3>
<h4 id="目录结构">目录结构</h4>
<figure>
<img src="https://tva1.sinaimg.cn/large/008i3skNly1gpv2pcvrpsj30dg0a6q3t.jpg" alt="截屏2021-04-24 下午7.46.59" /><figcaption aria-hidden="true">截屏2021-04-24 下午7.46.59</figcaption>
</figure>
<p>下面依次介绍一个 Qt 项目的目录</p>
<ul>
<li><p>.pro</p>
<p><code>QT       += core gui</code> 等是代表模块的加载, 如果需要新的模块比如编写 socket 网络内容需要添加如<code>QT       += network</code></p>
<p>之后的目录代码如<code>SOURCES +=     main.cpp mainwindow.cpp</code>是项目文件配置, 一般是自动补充的.</p></li>
<li><p>Headers/</p>
<p>保存项目头文件(.h)</p></li>
<li><p>Sources/</p>
<p>保存项目文件(.cpp)</p></li>
<li><p>Forms/</p>
<p>设计界面</p></li>
<li><p>Other/</p>
<p>其他文件</p></li>
</ul>
<p>代码主要保存在 Sources 和 Headers 文件夹中, ui 设计在 Forms 文件夹中</p>
<h4 id="main-文件与类">main 文件与类</h4>
<p>main.cpp</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mainwindow.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QApplication&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">QApplication <span class="title">a</span><span class="params">(argc, argv)</span></span>;<span class="comment">//新应用</span></span><br><span class="line">    MainWindow w;              <span class="comment">//新窗口</span></span><br><span class="line">    w.<span class="built_in">show</span>();                  <span class="comment">//窗口显示</span></span><br><span class="line">    <span class="keyword">return</span> a.<span class="built_in">exec</span>();           <span class="comment">//应用执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>mainwindow.h</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> MAINWINDOW_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAINWINDOW_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QMainWindow&gt;</span></span></span><br><span class="line"></span><br><span class="line">QT_BEGIN_NAMESPACE</span><br><span class="line"><span class="keyword">namespace</span> Ui &#123; <span class="keyword">class</span> <span class="title class_">MainWindow</span>; &#125;</span><br><span class="line">QT_END_NAMESPACE</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MainWindow</span> : <span class="keyword">public</span> QMainWindow</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line">    <span class="comment">//继承 QObject 类的宏, 在 Qt 中, 所有组件都继承 QObject 类</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MainWindow</span>(QWidget *parent = <span class="literal">nullptr</span>);</span><br><span class="line">    <span class="comment">//构造函数</span></span><br><span class="line">    ~<span class="built_in">MainWindow</span>();</span><br><span class="line">  	<span class="comment">//析构函数</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    Ui::MainWindow *ui;</span><br><span class="line">  	<span class="comment">//ui 对象指针</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// MAINWINDOW_H</span></span></span><br></pre></td></tr></table></figure>
<p>mainwindow.cpp</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mainwindow.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_mainwindow.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">MainWindow::<span class="built_in">MainWindow</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QMainWindow</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::MainWindow)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">//建立 ui</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MainWindow::~<span class="built_in">MainWindow</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="按钮实例">按钮实例</h4>
<p>下面演示实现一个按钮功能</p>
<ol type="1">
<li><p>在 mainwindow.ui 中拖入 qpushbutton, 在右侧属性栏可以对组件属性进行编辑(比如文字, 大小等) <img src="https://tva1.sinaimg.cn/large/008i3skNly1gpv38m0izgj30rm0dojsw.jpg" alt="截屏2021-04-24 下午8.05.27" /></p></li>
<li><p>如果要对 button 实现点击功能, 可以右键按钮-&gt;转到槽-&gt;clicked(), 就会添加对应的槽函数(可以理解为点击后执行的函数) 具体实现机理请查阅 "<strong>Qt 信号与槽</strong>"</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">MainWindow::on_pushButton_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>如果要用代码实现对这个按钮进行操作, 比如设置显示文字, 可以参考如下代码</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">MainWindow::on_pushButton_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ui-&gt;pushButton-&gt;<span class="built_in">setText</span>(<span class="string">&quot;text&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这个例子是为了说明, 如果要访问这个按钮需要使用 ui 指针</span></span><br><span class="line"><span class="comment">//注意有的时候 ui-&gt;后可能没有对应组件, 一般是新组件未加载, 可以编译一边来解决</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p>以上就是基本的 Qt 使用方式.</p>
]]></content>
      <categories>
        <category>language</category>
      </categories>
      <tags>
        <tag>html</tag>
        <tag>property</tag>
        <tag>doc</tag>
        <tag>prop</tag>
        <tag>indicates</tag>
      </tags>
  </entry>
  <entry>
    <title>20210114凯卓公司</title>
    <url>/2021/01/43cbbd9d1bf2.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="b09ac529e7201ae0c67b72b850728b0869d6173dcc148118f36e5c2864317102"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>私密</category>
      </categories>
      <tags>
        <tag>treenode</tag>
        <tag>pnode</tag>
        <tag>cstring</tag>
        <tag>info</tag>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>启亦临时工</title>
    <url>/2021/04/d4a32827ff58.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="fe2f794d02c6f367cc646e44ec721ae5b30b24731d84432fa5aaa9c2f52edc1a">3a5a033e128904461ecff31443a75b85773732e839f348154716694284a812f56ca7cc076af937c1233a8f232446b1443a6f763ccaa2501aa1e853040860e46162c044de7562bb84c66a7eba87c1ab4f0814f0edfa5eabfeef045e585cc13a8cde9bb3df2ed2b616136c4a797ffe48cb1e88069da94d224564f8ba6f348e0f55e73730ddb1ae1ae2deecbf46d0490c091cc727b03e42562362ef0928111277b30ecb7e65b87c1e78b176de192b350efcd727ed473570f9eee7d83f1ef3183c9ddd240667f5c40eefde9d45beb9266725154af652040f8ca10a73bae0aeef889a663938bc777800257a0a01d6779e2015f8b9c30b33c5cb0a16f43af955c3105d1573f1b1ff5daf58baf7ddcf121f53c4eba237364048a0d200322da27ba120de4a4b5cbff52b9c962b988f0bec41b3b5833ff4984d82e9b7c270ed6259c9378c81d195fe5985bc3c7946f81c194168a9ff96a8b9a365c8e7b254866bc6a099d86e32f61323289d3dee95972a3b99de5e833bcafce32c29a333a410ad1279f65d6f7bd1f5780aeddd1599444d4209970064c8c36d3a4a1cfbd1880144fca5e3b0532366cdd70576a4a28c6b76c2a7e29c67e6448afd803d79b19ebcb1ff5a8e142af14cdc3bc22356c0148ea626cd0cbbb9e37ab246b1f9b10b038a117b7f9f71a590a474c65e31761068b74fd64ccbecc9a9c20b2d99a1b139e2825ba6c90b2545299eacfd0a49121c42deb0486cb1a1c782e1af31593260b7dc1dfb8f57fe40c57c2b50f8cc468c8bc3b3b52e07dbd94b95655a362e422c872e476974a520d67b2cdfe1259e36782b90d60299410aa5b96fbb6e202357a9b955fb8fad9b470b8ec11bcb273658b1418623f707e558c0df4c02bb60432b475abc789120a1143803685637f0db24c7a54d38bb708584f089165bef4208e5c46628a2aaa49d0dc44c2f23d8f944697e4faf0b276a8c6ac2498be0822b1c986eb2d8739b3d60763051c4f76fa5c511fa49dbf33f516b404015bc541b20b86df2279092a82105201a990c6813e1b5d2a0cf16e8a225b58d75fe5ba9e97698635aa5a27992240900be0a49f13bae94d77c505a10785a377a076a9a2ef20821cae9ff03a188a8e6bfe2dde73188b637108703353435dc7f7b046cb28345692786f34f3b144e7b0f38cfed8a00edfee15f989969cc2787160824449d3cd2a67f56a0818b3f715cf7d31f13afe746b77a67a0fa2a800798ed6e03aeb274195e61af6deb20d551872883fd70ce43d6cb0a0a114faf444a56b0961f03f98e97cdf382c596e262e2837f8466bcf05359af3af7a97433c45e36c6c6f6ee5116c4934e31380fefd1cefd285e1c9b52f8ce003bb8562b7cfabe44eb4e1cb4047c352a90e351fdca24de7a2c3536fff660c6eca100aee6017fabd07428afd1137fb2a984478f9f71627e8b6269bdc71840b5b45cb73eca5df74d665080930ba5c44ab32dd181e52d737438e68f180f6126dad70dbb09975e0e8ade7f15f9bc09b90c2a05e1f9da915518faf0cd8201d7d5377ec17acf02ed9a7bafef97bc4164e0a6cd86d2b9071e8e787bbffe5faa8594389aee509113ccc66bc9bd5d22b1ac7b68c0abf0676293249239162c3f5802ad27276df8d15cc388f5ce16ebbfc04c6ca88e893f546a6656a1b5fb0bd998c7a639e988c4e70fb340661fbd2f90776f65ec811449b389c868d090abe008c7dd7cd621083e97da5887b79c6766cf7139d28f794ae89c31518ab20054586dd427b38080af414ecaa9db0dc16bf79fee9175236272752d104ad9876f04d1d58402b35f3a75f418ddb1a67c9b8ba0821e21be0a34a0dcffe157dc677a133c84eaf58629ba7f8e30e40fec144a5e14415d0c50880057f85aa4a4b62dfc1587771fb5e23c6d69d0b7f5cca86c199a0d3fe073914076930b828523a5125cd61820b9e00ef36e3f22a799944b96aef45af34571902d4de907a95f28e74b0535c563222610443f55850ad5ef8bb67c46f1c087c8ef875bfcd1d53d6646d543373551d1563144fe8b404c97d522733904ac499c5dca8839f52cbffe724e6e11d73e77900e9dab77ee3ee6555ae3676aec87885f115e2751580fd6271768e04b7dfed130400625ec18eec2989b8724aecd9b731a7c658066c38369fc151a9ed3a59fe4731e4b20dc1b2c3b42f719773db9331327f6c0cd7c0570c2ec4cc2cdc9300fd9e6ba360ea35f1f0d11183e90002b4320956077b2522304fdde5617c4f6bea7a294261427886f2d10ebb653d1fa88e5f881a200300d65460b0004533e3d9a435e7d9a7f92d5ca0252400e30aded09a4ce3cd01701634955d35d12a77c24c19497db6dc35dd86d7587e286e079c12f2236fecdd41bdd380442a50e8b063b4975e5fdecd6fa12e720b7c5c1edfdf71c1226ec985a728890b497893c8cb280f4fea37cdf794bfa2c8d0e7aacef307dcfd6c4869a2b239ca430630fee87e5c4992f4d5218d77da8b8b61227c28bdb4529632a542a21d29799012f2037a00a9fd4986618564ec06bc2baf8ceaeb887198df64d65826af07ddcb99b8b6c42d93b51ea80379b7418ce9e8a219494e4168cf95cc109fc8505d853000be3f9d4eb1734cdf85aa9227e4e3f2425b223d5ff90d979033ab25e6192ad7a62b5866ae0444110b5d35046b5bcab8e4a5beba45e616985d0f452580c62d6f4a0d275a016a335cf84059d7c824a14201943c6bc27a6832ad5f3716fce7fb48bf67d204721fca40d4eeb0d775ba831bb633082ecacb458b59153a94bba5f692407039d89dbaf793e38a170890a39657783c07a263925f72799539de6a7286a0cc0b4207269a53c323e3d5d347487c780035bc34479aca53842b71c348bb5e4f19a99d5b90743a4391ca579abdfca68d0e963b271a3c6eefa9c4d798cd5a69b69ecb669dc833c8021af69cb273e90b89aa9e87fd1fdc3cda13d44c36eea7fdfc87fedc46a8a51f3b8b7dedac397c9d1e73675eeb06d77061c827ee53338a479918e673fdf48c4e0d6c4350f4d6ea724260305e80d8e23e033e169e1454fe937054173b37c77d93a64f34195edff98bc754955ce52d850d2b99457e638b789ba3ee9437fbce0d4cf672255246d9ea3e4174f750c3ff81d736bfb</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>私密</category>
      </categories>
  </entry>
  <entry>
    <title>电影</title>
    <url>/2020/04/9ea3537bedb7.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="f1eb445fe9254fe9724b9ac006f15bd13283142f7799d9484f6252c86ef7d3a1"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>私密</category>
      </categories>
  </entry>
  <entry>
    <title>408读书笔记</title>
    <url>/2023/05/bd8d0b0a496f.html</url>
    <content><![CDATA[<blockquote>

</blockquote>
<span id="more"></span>
<h1 id="数据结构">数据结构</h1>
<h2 id="第1章绪论">第1章绪论</h2>
<h3 id="数据结构的基本概念">1.1 数据结构的基本概念</h3>
<h4 id="基本概念和术语">1.1.1 基本概念和术语</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flowchart TD;</span><br><span class="line">    数据元素--基本单位--&gt;数据;</span><br><span class="line">    数据项--组成 最小单位 --&gt;数据元素;</span><br><span class="line">    数据元素--集合--&gt;数据对象;</span><br><span class="line">    数据对象--子集--&gt;数据;</span><br><span class="line">    值的集合--&gt;数据类型</span><br><span class="line">    此集合上的操作--&gt;数据类型</span><br><span class="line">    数据元素--特定关系组成的集合--&gt;数据结构</span><br></pre></td></tr></table></figure>
<h4 id="数据结构三要素">1.1.2 数据结构三要素</h4>
<p>数据结构包括三方面的内容：逻辑结构、存储结构和数据的运算。</p>
<p>逻辑结构: 线性非线性</p>
<p>存储结构: 顺序存储, 链式存储, 索引存储, 散列存储</p>
<h3 id="算法和算法评价">1.2 算法和算法评价</h3>
<h4 id="算法的基本概念">1.2.1 算法的基本概念</h4>
<p>5 个特性: 有穷性, 确定性, 可行性, 输入, 输出</p>
<h4 id="算法效率的度量">1.2.2 算法效率的度量</h4>
<h2 id="第2章-.线性表">第2章 .线性表</h2>
<h3 id="线性表的定义和基本操作">2.1 线性表的定义和基本操作</h3>
<p>查找: 区分按值查找, 按序号查找</p>
<h4 id="线性表的定义">2.1.1 线性表的定义</h4>
<p>定义: 具有相同数据类型的有限序列, 逻辑上有先后次序, 是一种逻辑结构</p>
<h4 id="线性表的基本操作">2.1.2 线性表的基本操作</h4>
<h3 id="线性表的顺序表示">2.2 线性表的顺序表示</h3>
<h4 id="顺序表的定义">2.2.1 顺序表的定义</h4>
<p>定义: 线性表达的顺序存储</p>
<p>特点: 随机访问, 增删需要移动元素</p>
<h4 id="顺序表上基本操作的实现">2.2.2顺序表上基本操作的实现</h4>
<h3 id="线性表的链式表示">2.3 线性表的链式表示</h3>
<h4 id="单链表的定义">2.3.1 单链表的定义</h4>
<p>非随机存取</p>
<p>可以设置头结点, 数据为空, 好处: 统一了第一个位置上的操作, 统一了空与非空的操作</p>
<h4 id="单链表上基本操作的实现">2.3.2 单链表上基本操作的实现</h4>
<h4 id="双链表">2.3.3 双链表</h4>
<h4 id="循环链表">2.3.4 循环链表</h4>
<h4 id="静态链表">2.3.5 静态链表</h4>
<p>用数组描述线性表的链式存储结构, 此时的指针是结点的相对地址(数组下标)</p>
<figure>
<img src="https://p.ipic.vip/ku6a99.png" alt="截屏2023-05-15 15.53.17" /><figcaption aria-hidden="true">截屏2023-05-15 15.53.17</figcaption>
</figure>
<h4 id="顺序表和链表的比较">2.3.6 顺序表和链表的比较</h4>
<h2 id="第3章栈队列和数组">第3章栈、队列和数组</h2>
<h3 id="栈">3.1 栈</h3>
<h4 id="栈的基本概念">3.1.1 栈的基本概念</h4>
<p>卡特兰数: n 个不同元素进栈, 出栈元素不同排列的个数为</p>
<p><span class="math display">\[\frac{1}{n-1}C^{n}_{2n}\]</span></p>
<h4 id="栈的顺序存储结构">3.1.2 栈的顺序存储结构</h4>
<p>共享栈</p>
<figure>
<img src="https://p.ipic.vip/w17dhp.png" alt="截屏2023-05-16 11.27.35" /><figcaption aria-hidden="true">截屏2023-05-16 11.27.35</figcaption>
</figure>
<h4 id="栈的链式存储结构">3.1.3 栈的链式存储结构</h4>
<h3 id="队列">3.2队列</h3>
<h4 id="队列的基本概念">3.2.1 队列的基本概念，</h4>
<p>front队头: 删除端</p>
<p>rear队尾: 插入端</p>
<h4 id="队列的顺序存储结构">3.2.2 队列的顺序存储结构</h4>
<p>循环队列</p>
<p>区分队空还是满: 一般牺牲一个单元来区分, 约定: 队头指针在队尾指针的下一位置作为队满的标志</p>
<h4 id="队列的链式存储结构">3.2.3 队列的链式存储结构</h4>
<h4 id="双端队列">3.2.4 双端队列</h4>
<h3 id="栈和队列的应用">3.3 栈和队列的应用</h3>
<h4 id="栈在括号匹配中的应用">3.3.1 栈在括号匹配中的应用</h4>
<h4 id="栈在表达式求值中的应用">3.3.2 栈在表达式求值中的应用</h4>
<h4 id="栈在递归中的应用">3.3.3 栈在递归中的应用</h4>
<h4 id="队列在层次遍历中的应用">3.3.4 队列在层次遍历中的应用</h4>
<p>用队列遍历二叉树</p>
<h4 id="队列在计算机系统中的应用">3.3.5 队列在计算机系统中的应用</h4>
<h3 id="数组和特殊矩阵">3.4 数组和特殊矩阵</h3>
<h4 id="数组的定义">3.4.1 数组的定义</h4>
<h4 id="数组的存储结构">3.4.2 数组的存储结构</h4>
<p>按行优先: 00 01 02...10 11 12...从左到右, 从上到下</p>
<p>按列优先 00 10 20 ... 01 11 21 ... 从上到下, 从左到右</p>
<h4 id="特殊矩阵的压缩存储">3.4.3 特殊矩阵的压缩存储</h4>
<p>对称矩阵 序号公式?</p>
<p>三角矩阵 +1 常数</p>
<p>对角矩阵(条带状)</p>
<h4 id="稀疏矩阵">3.4.4 稀疏矩阵</h4>
<p>三元组:(行标, 列表, 非零值)</p>
<p>十字链表法?</p>
<h2 id="第4章串">第4章串。</h2>
<h3 id="串的定义和实现">*4.1 串的定义和实现</h3>
<h4 id="串的定义">4.1.1 串的定义．</h4>
<h4 id="串的存储结构">4.1.2 串的存储结构</h4>
<h4 id="串的基本操作">4.1.3 串的基本操作</h4>
<h4 id="串的模式匹配.">4.2 串的模式匹配.</h4>
<h4 id="简单的模式匹配算法">4.2.1 简单的模式匹配算法</h4>
<h4 id="串的模式匹配算法-kmp-算法.">4.2.2 串的模式匹配算法-KMP 算法.</h4>
<p>右移位数 = 已匹配的字符数 - 对应的部分匹配值, 再将匹配值右移, 并以 -1 开始</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">char:  | a | b | a | b | a | b | c | a |</span><br><span class="line">index: | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | </span><br><span class="line">value: | 0 | 0 | 1 | 2 | 3 | 4 | 0 | 1 |</span><br><span class="line">the value means: The length of the longest proper prefix in the (sub)pattern that matches a proper suffix in the same (sub)pattern.</span><br><span class="line">That means we get to skip ahead </span><br><span class="line"></span><br><span class="line">partial_match_length - </span><br><span class="line">table[partial_match_length - 1] </span><br><span class="line"></span><br><span class="line">(or 5 - table[4] or 5 - 3 or 2) characters</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">strStr</span><span class="params">(string src_str, string pattern_str)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> src_length = src_str.<span class="built_in">length</span>();</span><br><span class="line">        <span class="type">int</span> pattern_length = pattern_str.<span class="built_in">length</span>();</span><br><span class="line"></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">next</span><span class="params">(pattern_length, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">1</span>, now = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; pattern_length) &#123;</span><br><span class="line">            <span class="keyword">if</span> (pattern_str[i] == pattern_str[now]) &#123;</span><br><span class="line">                now++;</span><br><span class="line">                next[i] = now;</span><br><span class="line">                i++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (now != <span class="number">0</span>) &#123;</span><br><span class="line">                now = next[now - <span class="number">1</span>]; <span class="comment">//根据之前的结果得到的</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                next[i] = <span class="number">0</span>;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> src_index = <span class="number">0</span>, pattern_index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (src_index &lt; src_length) &#123;</span><br><span class="line">            <span class="keyword">if</span> (src_str[src_index] == pattern_str[pattern_index]) &#123;</span><br><span class="line">                src_index++;</span><br><span class="line">                pattern_index++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pattern_index != <span class="number">0</span>) &#123;</span><br><span class="line">                pattern_index = next[pattern_index - <span class="number">1</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                src_index++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(pattern_index == pattern_length)</span><br><span class="line">                <span class="keyword">return</span> src_index - pattern_index ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="kmp-算法的进一步优化">4.2.3 KMP 算法的进一步优化</h4>
<h2 id="第5章-树与二叉树">第5章 树与二叉树</h2>
<h3 id="树的基本概念">5.1 树的基本概念</h3>
<h4 id="树的定义">5.1.1 树的定义</h4>
<h4 id="基本术语">5.1.2 基本术语</h4>
<p>结点的度: 一个结点孩子的度数</p>
<p>数的度: 树中结点的最大度数</p>
<p>度&gt;0 为分支结点, 度=0 为叶结点</p>
<p>结点的深度: 根结点深度为 1, 从根结点到叶结点累加</p>
<p>结点的高度: 从叶结点到根结点累加</p>
<p>树的高度: 树的最大层数</p>
<p>路径长度: 路径上经过的<strong>边</strong>的个数</p>
<h4 id="树的性质">5.1.3 树的性质</h4>
<p><span class="math display">\[树的结点数 =\sum{结点度数} +1\]</span></p>
<p>度为 m 的树第 i 层上至多有 <span class="math display">\[m^{i-1}\]</span>个结点</p>
<p>高度为 h 的 m 叉树至多有<span class="math display">\[\frac{(m^{h}-1)}{m-1}\]</span>个结点(<span class="math display">\[S=m^{h-1}+m^{h-2}+...+m+1\]</span>)</p>
<p>具有n 个结点的 m 叉树的最小高度为<span class="math display">\[\lceil log_m(n(m-1)+1) \rceil\]</span> (取自前一结论)</p>
<h3 id="二叉树的概念">5.2 二叉树的概念</h3>
<h4 id="二叉树的定义及其主要特性">5.2.1 二叉树的定义及其主要特性</h4>
<p>满二叉树: 满的二叉树</p>
<p>完全二叉树: 满二叉树删去"倒数的几个节点"</p>
<p>二叉排序树: 左子树小于根节点, 右子树大于根节点, 子树同上</p>
<p>平衡二叉树: 树上任意节点的左右子树深度之差&lt;=1</p>
<p>二叉树的性质</p>
<ul>
<li><span class="math display">\[n_0 = n_2 +1\]</span></li>
<li>完全二叉树从上到下, 从左到右, 从 1 到 n, 对于节点 i
<ul>
<li><span class="math display">\[parent = \lfloor\frac i 2\rfloor\]</span></li>
<li><span class="math display">\[leftchild = 2i\]</span> <span class="math display">\[rightchild = 2i+1\]</span></li>
<li><span class="math display">\[depth = \lfloor log_2 i +1 \rfloor\]</span></li>
</ul></li>
</ul>
<h4 id="二叉树的存储结构">5.2.2 二叉树的存储结构</h4>
<h3 id="二叉树的遍历和线索二叉树">5.3 二叉树的遍历和线索二叉树</h3>
<h4 id="二叉树的遍历">5.3.1 二叉树的遍历</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> <span class="type">value_t</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BiTree</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    BiTree* lchild;</span><br><span class="line">    BiTree* rchild;</span><br><span class="line">    <span class="type">value_t</span> value;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">visit</span><span class="params">(BiTree* pt)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// cout value</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PreOrderRecur</span><span class="params">(BiTree* p_bitree)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p_bitree != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        <span class="built_in">visit</span>(p_bitree);</span><br><span class="line">        <span class="built_in">PreOrderRecur</span>(p_bitree-&gt;lchild);</span><br><span class="line">        <span class="built_in">PreOrderRecur</span>(p_bitree-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PreOrderIt</span><span class="params">(BiTree* p_bitree)</span> </span>&#123;</span><br><span class="line">    BiTree* p = p_bitree;</span><br><span class="line">    stack&lt;BiTree*&gt; s;</span><br><span class="line">    <span class="keyword">while</span> (!p || !s.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p) &#123;</span><br><span class="line">            <span class="built_in">visit</span>(p);</span><br><span class="line">            s.<span class="built_in">push</span>(p);</span><br><span class="line">            p = p-&gt;lchild;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            p = s.<span class="built_in">top</span>();</span><br><span class="line">            s.<span class="built_in">pop</span>();</span><br><span class="line">            p = p-&gt;rchild;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InOrderRecur</span><span class="params">(BiTree* p_bitree)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p_bitree != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        <span class="built_in">InOrderRecur</span>(p_bitree-&gt;lchild);</span><br><span class="line">        <span class="built_in">visit</span>(p_bitree);</span><br><span class="line">        <span class="built_in">InOrderRecur</span>(p_bitree-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InOrderIt</span><span class="params">(BiTree* p_bitree)</span> </span>&#123;</span><br><span class="line">    BiTree* p = p_bitree;</span><br><span class="line">    stack&lt;BiTree*&gt; s;</span><br><span class="line">    <span class="keyword">while</span> (!p || !s.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p) &#123;</span><br><span class="line">            s.<span class="built_in">push</span>(p);</span><br><span class="line">            p = p-&gt;lchild;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            p = s.<span class="built_in">top</span>();</span><br><span class="line">            s.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="built_in">visit</span>(p);</span><br><span class="line">            p = p-&gt;rchild;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PostOrderRecur</span><span class="params">(BiTree* p_bitree)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p_bitree != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        <span class="built_in">PostOrderRecur</span>(p_bitree-&gt;lchild);</span><br><span class="line">        <span class="built_in">PostOrderRecur</span>(p_bitree-&gt;rchild);</span><br><span class="line">        <span class="built_in">visit</span>(p_bitree);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PostOrderIt</span><span class="params">(BiTree* p_bitree)</span> </span>&#123;</span><br><span class="line">    BiTree* p = p_bitree;</span><br><span class="line">    BiTree* recent_visited = <span class="literal">nullptr</span>;</span><br><span class="line">    stack&lt;BiTree*&gt; s;</span><br><span class="line">    <span class="keyword">while</span> (!p || !s.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p) &#123;</span><br><span class="line">            s.<span class="built_in">push</span>(p);</span><br><span class="line">            p = p-&gt;lchild;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            p = s.<span class="built_in">top</span>();</span><br><span class="line">            <span class="keyword">if</span> (p-&gt;rchild &amp;&amp; p-&gt;rchild != recent_visited) &#123;</span><br><span class="line">                p = p-&gt;rchild;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                s.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="built_in">visit</span>(p);</span><br><span class="line">                recent_visited = p;</span><br><span class="line">                p = <span class="literal">nullptr</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LevelOrder</span><span class="params">(BiTree* p_bitree)</span> </span>&#123;</span><br><span class="line">    BiTree* p = p_bitree;</span><br><span class="line">    queue&lt;BiTree*&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(p);</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        p = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="built_in">visit</span>(p);</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;lchild)</span><br><span class="line">            q.<span class="built_in">push</span>(p-&gt;lchild);</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;rchild)</span><br><span class="line">            q.<span class="built_in">push</span>(p-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>根据遍历结果构造二叉树</p>
<h4 id="线索二叉树">5.3.2 线索二叉树 ???</h4>
<p>规定: 若无左子树, lchild 指向前驱节点, 若无右子树, rchild 指向后继节点, ltag=1 代表前驱, rtag=1 代表后继</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadBiTree</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    ThreadBiTree* lchild;</span><br><span class="line">    ThreadBiTree* rchild;</span><br><span class="line">    <span class="type">bool</span> ltag;</span><br><span class="line">    <span class="type">bool</span> rtag;</span><br><span class="line">    <span class="type">value_t</span> value;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">visit</span><span class="params">(ThreadBiTree* p)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InThread</span><span class="params">(ThreadBiTree* p, ThreadBiTree* pre)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        <span class="built_in">InThread</span>(p-&gt;lchild, pre);</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;lchild == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            p-&gt;lchild = pre;</span><br><span class="line">            p-&gt;ltag = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (pre != <span class="literal">nullptr</span> &amp;&amp; pre-&gt;rchild == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            pre-&gt;rchild = p;</span><br><span class="line">            pre-&gt;rtag = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        pre = p;</span><br><span class="line">        <span class="built_in">InThread</span>(p-&gt;rchild, pre);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CreateInThread</span><span class="params">(ThreadBiTree* t)</span> </span>&#123;</span><br><span class="line">    ThreadBiTree* pre = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">if</span> (t != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        <span class="built_in">InThread</span>(t, pre);</span><br><span class="line">        pre-&gt;rchild = <span class="literal">nullptr</span>;</span><br><span class="line">        pre-&gt;rtag = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ThreadBiTree* <span class="title">FirstNode</span><span class="params">(ThreadBiTree* p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (p-&gt;ltag == <span class="literal">false</span>)</span><br><span class="line">        p = p-&gt;lchild;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ThreadBiTree* <span class="title">NextNode</span><span class="params">(ThreadBiTree* p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p-&gt;rtag == <span class="literal">false</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">FirstNode</span>(p-&gt;rchild);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> p-&gt;rchild;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InOrderThread</span><span class="params">(ThreadBiTree* t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (ThreadBiTree* p = <span class="built_in">FirstNode</span>(t); p != <span class="literal">nullptr</span>; p = <span class="built_in">NextNode</span>(p))</span><br><span class="line">        <span class="built_in">visit</span>(p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="树森林">5.4 树、森林</h3>
<h4 id="树的存储结构">5.4.1 树的存储结构</h4>
<p>双亲表示法</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</span><br><span class="line">  ElemType data;</span><br><span class="line">  <span class="type">int</span> parent</span><br><span class="line">&#125; OTNode;</span><br><span class="line"><span class="comment">//root&#x27;s parent = -1</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</span><br><span class="line">  PNTNode nodes[MAX_SIZE];</span><br><span class="line">  <span class="type">int</span> n;</span><br><span class="line">&#125;PTree;</span><br></pre></td></tr></table></figure>
<p>孩子表示法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌─┬─┐    ┌─┐     ┌─┐        </span><br><span class="line">│0│R│───▶│1│────▶│2│        </span><br><span class="line">│1│A│    └─┘     └─┘        </span><br><span class="line">│2│B│                       </span><br><span class="line">│3│C│    ┌─┐                </span><br><span class="line">│4│D│───▶│6│                </span><br><span class="line">│5│E│    └─┘                </span><br><span class="line">│6│F│                       </span><br><span class="line">├───┼                                              </span><br></pre></td></tr></table></figure>
<p>孩子兄弟表示法(二叉树表示法)</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">CSNode</span>&#123;</span><br><span class="line">  ElemType data;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">CSNode</span> * firstchild, *nextsibling;</span><br><span class="line">&#125; CSNode, *CSTree;</span><br><span class="line"><span class="comment">//nextsibling 是本节点的兄弟节点的指针</span></span><br></pre></td></tr></table></figure>
<h4 id="树森林与二叉树的转换">5.4.2 树、森林与二叉树的转换</h4>
<p>树-&gt;二叉树(唯一)</p>
<p>每个节点左指针指向第一个孩子, 右指针指向本节点相邻的右兄弟(左孩子右兄弟)</p>
<p>森林-&gt;二叉树(唯一)</p>
<p>现将每棵树转换为二叉树, 将树的根节点彼此视为兄弟连接到右指针上</p>
<h4 id="树和森林的遍历">5.4.3 树和森林的遍历</h4>
<p>树遍历</p>
<ul>
<li>先根遍历, 先访问根节点,再访问每棵子树, 类似对应二叉树的先序遍历</li>
<li>后根遍历, 先遍历子树再访问根节点, 类似对应二叉树的中序遍历</li>
</ul>
<p>森林遍历</p>
<ul>
<li>先序遍历, 先访问根节点,再访问每棵子树, 类似对应二叉树的先序遍历</li>
<li>中序遍历(也叫后序遍历), 先遍历子树再访问根节点, 类似对应二叉树的中序遍历</li>
</ul>
<h3 id="树与二叉树的应用">5.5树与二叉树的应用</h3>
<h4 id="哈夫曼树和哈夫曼编码">5.5.1 哈夫曼树和哈夫曼编码</h4>
<p>带权路径长度</p>
<p><span class="math display">\[WPL = \sum_{i=1}^{n}{w_il_i}\]</span></p>
<p><span class="math inline">\(w_i\)</span>为第 i 叶节点的权值, <span class="math inline">\(l_i\)</span>为该叶节点到根节点的路径长度</p>
<p>WPL 最小的二叉树成为哈夫曼树(最优二叉树)</p>
<p>构造哈夫曼树</p>
<figure>
<img src="https://gitee.com/sinos_wei/picgo/raw/master/%E6%88%AA%E5%B1%8F2023-05-22%2014.23.47.png" alt="截屏2023-05-22 14.23.47" /><figcaption aria-hidden="true">截屏2023-05-22 14.23.47</figcaption>
</figure>
<p>哈夫曼编码是一种可变长度编码, 使用频率越高长度越短</p>
<figure>
<img src="https://gitee.com/sinos_wei/picgo/raw/master/%E6%88%AA%E5%B1%8F2023-05-22%2014.25.26.png" alt="截屏2023-05-22 14.25.26" /><figcaption aria-hidden="true">截屏2023-05-22 14.25.26</figcaption>
</figure>
<p>哈夫曼树不一定唯一(左右子树是 0 或 1 不规定; 有相同权值的节点. 但所有哈夫曼树最后的 WPL 是相同的)</p>
<h4 id="并查集">5.5.2. 并查集???</h4>
<p>并查集是一种简单的集合表示</p>
<h2 id="第6章图">第6章图</h2>
<h3 id="图的基本概念">6.1 图的基本概念</h3>
<h4 id="图的定义">6.1.1 图的定义</h4>
<p>简单图: 如果图满足: 不存在重复边, 不存在顶点到自身的边</p>
<p>完全图: 每两个顶点之间都存在边(有向图则需要两条边)</p>
<p>子图: 顶点和边都是子集</p>
<p>生成子图: 顶点相同, 边是子集</p>
<p>连通图: 无向图中任意顶点都是连通的, 无向图中的极大连通子图称为连通分量</p>
<p>强连通图: 有向图中任意中任意顶点都是连通的, 有向图中的极大强连通子图称为连通分量</p>
<p>生成树: 连通图的生成树是包含全部顶点的一个极小连通子图, 对生成树而言, 去掉一条边就会变成非连通图, 加上一条边就会出现回路</p>
<p>生成森林: 非连通图中连通分量的生成树构成了飞连通图的生成森林</p>
<p>带权图又称网</p>
<p>稀疏图稠密图: 当满足<span class="math inline">\(|E|&lt;|V|log|V|\)</span> 可视为稀疏图</p>
<p>路径长度: 路径上边的个数</p>
<p>简单路径: 顶点不重复出现的路径</p>
<p>距离: 最短路径的长度</p>
<p>有向树: 一个顶点入度=0, 其余顶点入度=1 的有向图称为有向树</p>
<h3 id="图的存储及基本操作">6.2 图的存储及基本操作</h3>
<h4 id="邻接矩阵法">6.2.1 邻接矩阵法</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MaxVertexNum 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> EdgeType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">char</span> VertexType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">    VertexType vex[MaxVertexNum];</span><br><span class="line">    EdgeType edge[MaxVertexNum][MaxVertexNum];</span><br><span class="line">    <span class="type">int</span> vexnum, arcnum;</span><br><span class="line">&#125; MGraph;</span><br></pre></td></tr></table></figure>
<p>适用于稠密图</p>
<p>无向图只需存储三角矩阵的元素</p>
<p><span class="math inline">\(A^n\)</span>的元素<span class="math inline">\(A^n[i][j]\)</span>等于从 i 到 j 顶点长度为 n 的路径的数量</p>
<p>难以数出边的数量</p>
<h4 id="邻接表法">6.2.2 邻接表法</h4>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MaxVertexNum 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> EdgeType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">char</span> VertexType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">ArcNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> adjvex;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">ArcNode</span>* next;</span><br><span class="line">    <span class="comment">// EdgeType weight</span></span><br><span class="line">&#125; ArcNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">VNode</span> &#123;</span><br><span class="line">    VertexType data;</span><br><span class="line">    ArcNode* first;</span><br><span class="line">&#125; VNode, AdjList[MaxVertexNum];</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">    AdjList vertices;</span><br><span class="line">    <span class="type">int</span> vexnum, arcnum;</span><br><span class="line">&#125; ALGraph;</span><br></pre></td></tr></table></figure>
<p>无向图的存储中会有重复</p>
<p>难以判断两顶点之间是否存在边</p>
<p>有向图存储的是出度边, 难以数出入度</p>
<p>邻接表不唯一</p>
<h4 id="十字链表有向图">6.2.3 十字链表(有向图)</h4>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">ArcNode</span>&#123;</span><br><span class="line">  <span class="type">int</span> tailvex;<span class="comment">//弧头顶点编号</span></span><br><span class="line">  <span class="type">int</span> headvex;<span class="comment">//弧尾顶点编号</span></span><br><span class="line">  ArcNode* hlink;<span class="comment">//弧头相同的下一个弧节点</span></span><br><span class="line">  ArcNode* tlink;<span class="comment">//弧尾相同的下一个弧节点</span></span><br><span class="line">  Data info;</span><br><span class="line">&#125; ArcNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">VexNode</span>&#123;</span><br><span class="line">  Data data;</span><br><span class="line">  ArcNode* firstin;<span class="comment">//以本顶点为弧头的第一个弧</span></span><br><span class="line">  ArcNode* firstout;<span class="comment">//以本顶点为弧尾的第一个弧</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="邻接多重表无向图">6.2.4 邻接多重表(无向图)</h4>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">ArcNode</span>&#123;</span><br><span class="line">  <span class="type">int</span> ivex;<span class="comment">//顶点编号</span></span><br><span class="line">  <span class="type">int</span> jvex;<span class="comment">//顶点编号</span></span><br><span class="line">  ArcNode* ilink;<span class="comment">//ivex相同的下一个弧节点</span></span><br><span class="line">  ArcNode* jlink;<span class="comment">//jvex相同的下一个弧节点</span></span><br><span class="line">  Data info;</span><br><span class="line">&#125; ArcNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">VexNode</span>&#123;</span><br><span class="line">  Data data;</span><br><span class="line">  ArcNode* firstedge<span class="comment">//第一条边</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="图的基本操作">6.2.5 图的基本操作</h4>
<h3 id="图的遍历">6.3 图的遍历</h3>
<p>访问每一个顶点</p>
<h4 id="广度优先搜索-bfs">6.3.1 广度优先搜索 BFS</h4>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">visited</span><span class="params">(MAX, <span class="literal">false</span>)</span></span>;</span><br><span class="line">queue&lt;DataType&gt; q;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BFS</span><span class="params">(Graph g, <span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">    <span class="built_in">visit</span>(v);</span><br><span class="line">    visited[v] = <span class="literal">true</span>;</span><br><span class="line">    q.<span class="built_in">push</span>(v);</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        v = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> w = <span class="built_in">FirstNeighbor</span>(g, v); w&gt;=<span class="number">0</span>; w = <span class="built_in">NextNeighbor</span>(g, v, w))</span><br><span class="line">        <span class="keyword">if</span>(!visited[w])&#123;</span><br><span class="line">            <span class="built_in">visit</span>(w);</span><br><span class="line">            visited[w] = <span class="literal">true</span>;</span><br><span class="line">            q.<span class="built_in">push</span>(w);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BFSTraverse</span><span class="params">(Graph g)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;g; i++)</span><br><span class="line">        <span class="keyword">if</span>(!visited[i])</span><br><span class="line">            <span class="built_in">BFS</span>(g, i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>空间复杂度: S(V)</p>
<p>邻接表时间复杂度: O(V+E)</p>
<p>邻接矩阵时间复杂度: O(V<sup>2</sup>)</p>
<p>BFS求单源最短路径</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> Max_Distance 10e9</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BFSminDistance</span><span class="params">(Graph g, <span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">distance</span><span class="params">(max_vex_count, Max_Distance)</span></span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">visited</span><span class="params">(max_vex_count, <span class="literal">false</span>)</span></span>;</span><br><span class="line">    visited[u] = <span class="literal">true</span>;</span><br><span class="line">    distance[u] = <span class="number">0</span>;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(u);</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        u = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> w = <span class="built_in">FirstNeighbor</span>(g, u); w&gt;=<span class="number">0</span>; w = <span class="built_in">NextNeighbor</span>(g, u, w))</span><br><span class="line">        <span class="keyword">if</span>(!visited[w])&#123;</span><br><span class="line">            visited[w] = <span class="literal">true</span>;</span><br><span class="line">            distance[w] = distance[u] + <span class="number">1</span>;</span><br><span class="line">            q.<span class="built_in">push</span>(w);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>广度生成树</p>
<h4 id="深度优先搜索-dfs">6.3.2 深度优先搜索 DFS</h4>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">visited</span><span class="params">(MAX, <span class="literal">false</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DFS</span><span class="params">(Graph g, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">visit</span>(v);</span><br><span class="line">    visited[v] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> w = <span class="built_in">FirstNeighbor</span>(g, v); w &gt;= <span class="number">0</span>; w = <span class="built_in">NextNeighbor</span>(g, v, w))</span><br><span class="line">        <span class="keyword">if</span> (!visited[w]) &#123;</span><br><span class="line">            <span class="built_in">DFS</span>(g, w);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DFSTraverse</span><span class="params">(Graph g)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; g; i++)</span><br><span class="line">        <span class="keyword">if</span> (!visited[i])</span><br><span class="line">            <span class="built_in">DFS</span>(g, i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>空间复杂度: S(V) 运行栈</p>
<p>邻接表时间复杂度: O(V+E)</p>
<p>邻接矩阵时间复杂度: O(V<sup>2</sup>)</p>
<h4 id="图的遍历与图的连通性">6.3.3 图的遍历与图的连通性</h4>
<p>对于无向图, 以上两种遍历方法调用 BFS(DFS)函数的次数 = 图的连通分量数</p>
<h3 id="图的应用">6.4 图的应用</h3>
<h4 id="最小生成树">6.4.1 最小生成树</h4>
<p>边的权值之和最小的生成树称为最小生成树</p>
<p>当各边权值不相等时, 最小生成树唯一, 树的最小生成树是自己本身</p>
<p>最小生成树的边数=顶点数-1</p>
<ul>
<li><p>通用方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">get_min_generate_tree(g)</span><br><span class="line">	tree = null</span><br><span class="line">	while tree isnot generate_tree</span><br><span class="line">		do:</span><br><span class="line">			找到一条权重最小边(u, v),</span><br><span class="line">      并且加入 tree 后无回路</span><br><span class="line">			tree = tree+(u, v)</span><br></pre></td></tr></table></figure></li>
<li><p>Prim 算法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Prim(g, tree)</span><br><span class="line">	tree = null</span><br><span class="line">	V_tree = &#123;w&#125; # any vertex as w</span><br><span class="line">	while V-V_tree != null:</span><br><span class="line">		find (u, v)where:</span><br><span class="line">      u isin V_tree, </span><br><span class="line">      v isin V-V_tree, </span><br><span class="line">      and (u, v) is min</span><br><span class="line">		Tree = Tree + (u, v)</span><br><span class="line">		V_tree = V_tree + v</span><br></pre></td></tr></table></figure>
<p>O(V<sup>2</sup>)</p></li>
<li><p>Kruskal 算法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Kruskal(V, tree)</span><br><span class="line">	tree = V</span><br><span class="line">	# connected component 连通分量</span><br><span class="line">	connect_cp_count = n</span><br><span class="line">	while connect_cp &gt; 1:</span><br><span class="line">		find min(u, v) in E</span><br><span class="line">		if u, v isin different conncted component:</span><br><span class="line">			tree = tree + (u, v)</span><br><span class="line">			connect_cp_count--</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="最短路径">6.4.2 最短路径</h4>
<h5 id="dijkstra-算法-单源">dijkstra 算法 单源</h5>
<p>邻接矩阵时间复杂度: O(V<sup>2</sup>)</p>
<p>邻接表时间复杂度: O(V<sup>2</sup>)</p>
<p>有边权值为负时, 不适用</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span></span></span><br><span class="line"><span class="function">    <span class="title">dijkstra</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; adj_matrix, <span class="type">int</span> vertex_cnt, <span class="type">int</span> src_vertex)</span> </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> inf = INT_MAX / <span class="number">2</span>;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">g</span>(vertex_cnt, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(vertex_cnt, inf));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; t : adj_matrix) &#123;</span><br><span class="line">            <span class="type">int</span> x = t[<span class="number">0</span>] - <span class="number">1</span>, y = t[<span class="number">1</span>] - <span class="number">1</span>;</span><br><span class="line">            g[x][y] = t[<span class="number">2</span>];</span><br><span class="line">        &#125; <span class="comment">// 邻接表转换到邻接矩阵</span></span><br><span class="line"></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dist</span><span class="params">(vertex_cnt, inf)</span></span>;</span><br><span class="line">        dist[src_vertex - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">used</span><span class="params">(vertex_cnt, <span class="literal">false</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; vertex_cnt; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> x = <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> y = <span class="number">0</span>; y &lt; vertex_cnt; ++y) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!used[y] &amp;&amp; (x == <span class="number">-1</span> || dist[y] &lt; dist[x])) &#123;</span><br><span class="line">                    x = y;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            used[x] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> y = <span class="number">0</span>; y &lt; vertex_cnt; ++y) &#123;</span><br><span class="line">                dist[y] = <span class="built_in">min</span>(dist[y], dist[x] + g[x][y]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> ans = *<span class="built_in">max_element</span>(dist.<span class="built_in">begin</span>(), dist.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> ans == inf ? <span class="number">-1</span> : ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="floyd-算法-多源">floyd 算法 多源</h5>
<p><span class="math inline">\(A^k[i][j] = Min\{A^{k-1}[i][j], A^{k-1}[i][k] + A^{k-1}[k][j]\}\)</span></p>
<p>循环 n 次(n 为顶点数)</p>
<h4 id="有向无环图描述表达式">6.4.3 有向无环图描述表达式</h4>
<p>有向无环图 DAG (Directed Acyclic Graph)</p>
<h4 id="拓扑排序">6.4.4 拓扑排序</h4>
<p>AOV 网(Activity on Vertex Network) 有向边&lt;V<sub>i</sub>, V<sub>j</sub>&gt;表示 i 活动优先于 j 活动</p>
<p>拓扑排序: 在有向无环图中, 每个顶点之出现一次, A 在 B 前则不存在从 B 到 A 的路径 步骤:</p>
<ul>
<li>从 AOV 中选择一个没有前驱的顶点并输出</li>
<li>删除该顶点和所有以它为起点的有向边</li>
<li>重复 1, 2 直到 AOV 为空</li>
</ul>
<p>邻接表时间复杂度: O(V+E)</p>
<p>邻接矩阵时间复杂度: O(V<sup>2</sup>)</p>
<h4 id="关键路径">6.4.5 关键路径</h4>
<p>AOE 网(Activity On Edge Network), 顶点表示事件, 边表示活动, 边上的权值表示活动开销</p>
<p>AOE 网只有一个入度=0 的点, 一个出度=0 的点</p>
<p>AOE 网中的最长路径为关键路径, 关键路径上的点叫做关键活动</p>
<ul>
<li>事件 v<sub>k</sub>的最早发生时间 ve(k) ve(源点) = 0 <span class="math inline">\(ve(k) = Max\{ ve(j)+Weight(v_j, v_k) \}\)</span> 其中 k 为 j 的任意后继 计算 ve 从源点开始从前向后</li>
<li>事件 v<sub>k</sub>的最迟发生时间 vl(k) vl(汇点) = ve(汇点) <span class="math inline">\(vl(k) = Min\{ vl(j)-Weight(v_k, v_j) \}\)</span> 其中 k 为 j 的任意前驱 计算 ve 从汇点开始从后向前</li>
<li>活动 a<sub>i</sub>最早开始时间 e(i) = ve(k), 其中&lt;v<sub>k</sub>, v<sub>j</sub>&gt;表示活动 a<sub>i</sub></li>
<li>活动 a<sub>i</sub>最迟开始时间 l(i) = vl(j) - Weight(v<sub>k</sub>, v<sub>j</sub>), 其中&lt;v<sub>k</sub>, v<sub>j</sub>&gt;表示活动 a<sub>i</sub></li>
<li>活动 a<sub>i</sub>最早开始时间与最迟开始时间差额 d(i) = l(i) - e(i), 即时间余量</li>
</ul>
<p>算法:</p>
<ol type="1">
<li>从源点除法算 ve</li>
<li>从汇点出发算 vl</li>
<li>根据 ve 求 e</li>
<li>根据 vl 求 l</li>
<li>根据e, l 求 d, 所有 d=0 的活动构成关键路径</li>
</ol>
<h2 id="第7章-查找">第7章 查找</h2>
<h3 id="查找的基本概念">7.1 查找的基本概念</h3>
<p>平均查找长度 <span class="math inline">\(ASL = \sum^n_{i=1}P_iC_i\)</span></p>
<p>P<sub>i</sub>为查找概率, 一般认为是 1/n, C<sub>i</sub>是需要进行比较的次数</p>
<h3 id="顺序查找和折半查找">7.2 顺序查找和折半查找</h3>
<h4 id="顺序查找">7.2.1 顺序查找</h4>
<p>利用哨兵减少判断语句</p>
<ol type="1">
<li><p>一般线性表: 遍历</p>
<p><span class="math inline">\(ASL_{success} = \sum^n_{i=1}\frac1n(n-i+1) = \frac{n+1}2\)</span></p>
<p><span class="math inline">\(ASL_{failed} = n+1\)</span></p></li>
<li><p>有序表顺序查找</p>
<p>判定树</p>
<figure>
<img src="https://gitee.com/sinos_wei/picgo/raw/master/%E6%88%AA%E5%B1%8F2023-05-26%2009.50.09.png" alt="截屏2023-05-26 09.50.09" /><figcaption aria-hidden="true">截屏2023-05-26 09.50.09</figcaption>
</figure>
<p><span class="math inline">\(ASL_{success} = \sum^n_{i=1}\frac1n(n-i+1) = \frac{n+1}2\)</span></p>
<p><span class="math inline">\(ASL_{failed} = \sum^n_{i=1}q_i(l_i-1) = \frac{1+2+...+n+n}{n+1} = \frac n2 + \frac n{n+1}\)</span></p>
<p>q<sub>i</sub>为失败概率, l<sub>i</sub>为节点层数</p></li>
</ol>
<h4 id="折半查找-二分查找-有限顺序表">7.2.2 折半查找 (二分查找, 有限顺序表)</h4>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> elemtype;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">BinarySearch</span><span class="params">(vector&lt;elemtype&gt; vec, elemtype key)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> low = <span class="number">0</span>, high = vec.<span class="built_in">size</span>(), mid = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">        mid = (low + high) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (vec.<span class="built_in">at</span>(mid) == key)</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (vec.<span class="built_in">at</span>(mid) &gt; key)</span><br><span class="line">            high = mid - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            low = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>判定树(平衡二叉树)</p>
<figure>
<img src="https://gitee.com/sinos_wei/picgo/raw/master/%E6%88%AA%E5%B1%8F2023-05-26%2013.03.34.png" alt="截屏2023-05-26 13.03.34" /><figcaption aria-hidden="true">截屏2023-05-26 13.03.34</figcaption>
</figure>
<p>$ASL_{success} = 1n ^n_{i=1}l_i $</p>
<p>$= 1n(1<em>1+2</em>2+4<em>3+...+h</em>2^{h-1}) $</p>
<p>$= n log_2(n+1) - 1 $</p>
<p><span class="math inline">\(\approx log_2(n+1) -1\)</span></p>
<p>查找成功, 次数为层数; 查找失败, 次数为层数-1</p>
<h4 id="分块查找">7.2.3 分块查找</h4>
<p>将顺序表通过取关键字切分为多个块, 块之间有序, 块内无序</p>
<p><span class="math inline">\(ASL = L_I + L_S = \frac{b+1}2 + \frac{s+1}2 = \frac {s^2+bs+2s}{2s} = \frac{s^2 + n + 2s}{2s}\)</span></p>
<p>当 <span class="math inline">\(s = \sqrt n\)</span> 时有最小值 <span class="math inline">\(\sqrt{n+1}\)</span></p>
<h3 id="树型查找">7.3 树型查找</h3>
<h4 id="二叉排序树-bst">7.3.1 二叉排序树 (BST)</h4>
<p>提高增删改查速度</p>
<p>定义: 左子树上所有结点 &lt; 根节点, 右子树上所有结点 &gt; 根节点, 左右子树也是二叉排序树</p>
<p>对其进行中序遍历可以得到一个递增的有序序列</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">node* <span class="title">BSTSearch</span><span class="params">(node* root, elemtype key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (root != <span class="literal">nullptr</span> &amp;&amp; key != root-&gt;data) &#123;</span><br><span class="line">        <span class="keyword">if</span> (key &lt; root-&gt;data)</span><br><span class="line">            root = root-&gt;lchild;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            root = root-&gt;rchild;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">elemtype <span class="title">BSTInsert</span><span class="params">(node* root, elemtype data)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        root = <span class="keyword">new</span> <span class="built_in">node</span>();</span><br><span class="line">        root-&gt;data = data;</span><br><span class="line">        root-&gt;lchild = <span class="literal">nullptr</span>;</span><br><span class="line">        root-&gt;rchild = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (data == root-&gt;data) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (data &lt; root-&gt;data) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">BSTInsert</span>(root-&gt;lchild, data);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">BSTInsert</span>(root, data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CreateBST</span><span class="params">(node* root, elemtype datas[], <span class="type">int</span> data_length)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; data_length) &#123;</span><br><span class="line">        <span class="built_in">BSTInsert</span>(root, datas[i]);</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>删除: 左子树或者右子树为空: 用另一个子树替代</p>
<p>左右子树均不为空: 令要删除的节点的直接后继(直接前驱)(中序)替代, 删除该后继, 之后重复</p>
<p><span class="math inline">\(ASL = O(log_2n)\)</span></p>
<p>当使用有序序列构造时获得最差情况单枝树, ASL = O(n)</p>
<h4 id="平衡二叉树-avl-树adelson-velsky-and-landis-tree">7.3.2 平衡二叉树 AVL 树(Adelson-Velsky and Landis Tree)</h4>
<p>定义: 任意节点左右子树高度差 &lt;= 1</p>
<p>平衡二叉树插入: 插入节点后调整平衡</p>
<ol type="1">
<li>LL A 的左子树的左子树上插入 <img src="https://gitee.com/sinos_wei/picgo/raw/master/%E6%88%AA%E5%B1%8F2023-05-26%2013.45.18.png" alt="截屏2023-05-26 13.45.18" /></li>
<li>RR 同上</li>
<li>LR A 的左子树的右子树上插入 <img src="https://gitee.com/sinos_wei/picgo/raw/master/%E6%88%AA%E5%B1%8F2023-05-26%2013.46.16.png" alt="截屏2023-05-26 13.46.16" /></li>
<li>RL 同上</li>
</ol>
<p>平衡二叉树删除: 删除后调整, 从叶到根层层调整(可能调整多次)</p>
<h4 id="红黑树">7.3.3 红黑树</h4>
<p>定义:</p>
<ol type="1">
<li>每个节点是红或黑, 根节点和叶节点为黑(空节点被视为叶节点)</li>
<li>不存在相邻红节点</li>
<li>对每个节点, 从该节点到任意叶节点的简单路径上的黑节点数量相同, 其数量叫做黑高 bh, 根节点的黑高为树的黑高</li>
</ol>
<p>红黑树的插入</p>
<ol type="1">
<li>按照二叉排序树方法插入节点z, 并着红色, 如果父节点是黑色则插入完毕</li>
<li>如果z 是根节点, 着黑色, 插入完毕</li>
<li>如果 z 父节点是红色, 类似平衡二叉树
<ol type="1">
<li>z 叔节点 y 是黑色, z 是右孩子 LR</li>
<li>z 叔节点 y 是黑色, z 是左孩子 LL</li>
<li>z 父节点和叔节点都红 将父节点和叔节点变黑, 爷节点变红, 将爷节点视为插入节点, 重复</li>
</ol></li>
</ol>
<p>红黑树的删除 ?</p>
<ol type="1">
<li>按二叉排序树方法删除</li>
<li>删除节点如果只有左或右子树, 直接删除并变色</li>
<li>删除节点为红且没有孩子, 直接删除</li>
<li>删除节点y为黑且没有孩子, 寻找空节点 x 替代, 视 x 为双重黑节点
<ol type="1">
<li>x 的兄弟节点 w 为红, 对 w 做 L(左旋) 操作, 转换到情况 2, 3, 4</li>
<li>x 兄弟节点 w 为黑, w 右孩子为红 RR, 对 w L</li>
<li>x 兄弟节点 w 为黑, w 左孩子为红, 右孩子为黑, 对 w R, 回到情况 2</li>
<li>x 兄弟节点w 为黑, w 左右孩子都为黑, 将 w 变红, x.p 变黑</li>
</ol></li>
</ol>
<h3 id="b树和b树">7.4 B树和B+树</h3>
<h4 id="b树及其基本操作">7.4.1 B树及其基本操作</h4>
<p>m 阶 B 树为所有结点平衡因子都为 0 的 m 路平衡查找树</p>
<p>定义:</p>
<ol type="1">
<li><p>每个节点至多有 m 棵子树,</p></li>
<li><p>若根节点不是叶节点, 则至少有两棵子树(指针数=关键字数+1)</p></li>
<li><p>除根节点外所有非叶节点至少有<span class="math inline">\(\lceil \frac m2 \rceil\)</span>棵子树</p></li>
<li><p>非叶节点结构如下 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌──────────────────────────┐ </span><br><span class="line">│n p0 k1 p1 k2 p2 ... kn pn│ </span><br><span class="line">└──────────────────────────┘ </span><br><span class="line">k 为关键字(已升序排序), p 为子树指针, n 为关键字数量</span><br></pre></td></tr></table></figure></p></li>
<li><p>所有叶节点在同一层且不带信息</p></li>
</ol>
<figure>
<img src="https://gitee.com/sinos_wei/picgo/raw/master/%E6%88%AA%E5%B1%8F2023-05-26%2015.51.26.png" alt="截屏2023-05-26 15.51.26" /><figcaption aria-hidden="true">截屏2023-05-26 15.51.26</figcaption>
</figure>
<p>B 树高度(不包含最后一层空指针(有无都可?))</p>
<ul>
<li><p>高度为 h 的有 n 个关键字的 m 阶 B 树:</p>
<p>​ $n(m-1)(1+m+m<sup>2+m</sup>3 + ... + m^{h-1}) = m^h-1 $</p></li>
<li><p>对于关键字数为 n 的 B 树, 最后一层空节点的个数为 n+1</p>
<p><span class="math inline">\(n+1\geq 2(\lceil \frac m2 \rceil)^{h-1}\)</span></p></li>
</ul>
<p>B 树插入关键字k</p>
<ol type="1">
<li>寻找倒数第一层非空节点(即寻找插入位置)</li>
<li>如果插入后关键字数&lt;m-1 直接插入, 否则对节点进行分裂</li>
<li>从中间位置(<span class="math inline">\(\lceil \frac m 2 \rceil\)</span>)分割, 左边保留在原结点, 右边进入新节点, 中间关键字进入父节点, 若父节点关键字超出, 重复此操作</li>
</ol>
<p>B 树删除关键字 k</p>
<ol type="1">
<li>对于不是最底层非叶结点的关键字, 可以用 k 的前驱(后继)k'替代 k, 直到 k'落入最底层非叶结点</li>
<li>在终端节点中: 若关键字个数&gt;=<span class="math inline">\(\lceil \frac m2 \rceil\)</span>, 可以直接撒谎从南湖</li>
<li>在终端节点中: 若关键字个数&lt;<span class="math inline">\(\lceil \frac m2 \rceil\)</span>, 且兄弟可借, 则调整父节点与兄弟节点</li>
<li>若兄弟不够借, 则删除后与兄弟节点合并, 此时父结点内关键字会减少, 重复此过程直到符合 b 树要求</li>
</ol>
<h4 id="b树的基本概念">7.4.2 B+树的基本概念</h4>
<ol type="1">
<li>每个节点至多有 m 棵子树,</li>
<li>除根节点外所有非叶节点至少有<span class="math inline">\(\lceil \frac m2 \rceil\)</span>棵子树</li>
<li>节点子树个数与关键字数相同</li>
<li>所有叶节点包含全部关键字和指向其记录的指针, 叶节点中关键字排序, 相邻叶节点相互链接</li>
<li>分支节点中仅包含它各个子节点中关键字的最大值及其指针</li>
</ol>
<figure>
<img src="https://gitee.com/sinos_wei/picgo/raw/master/%E6%88%AA%E5%B1%8F2023-05-26%2015.53.25.png" alt="截屏2023-05-26 15.53.25" /><figcaption aria-hidden="true">截屏2023-05-26 15.53.25</figcaption>
</figure>
<h3 id="散列表">7.5 散列表</h3>
<h4 id="散列表的基本概念">7.5.1 散列表的基本概念</h4>
<p>散列函数: <code>hash(key) = addr</code></p>
<p>散列表: 根据关键字直接进行访问的数据结构, 是一种直接映射</p>
<h4 id="散列函数的构造方法">7.5.2 散列函数的构造方法</h4>
<ol type="1">
<li><p>直接定址法</p>
<p><code>h(key) = a*key +b</code></p></li>
<li><p>除留余数法</p>
<p><code>h(key) = key%p</code></p></li>
<li><p>数字分析法</p>
<p>对关键字进行分析, 考察分布均匀程度</p></li>
<li><p>平方取中法</p>
<p>取关键字的中间几位作为散列地址</p></li>
</ol>
<h4 id="处理冲突的方法">7.5.3 处理冲突的方法</h4>
<ol type="1">
<li><p>开放定址法</p>
<p><span class="math inline">\(h_i = [h(key)+d_i]\%m\)</span></p>
<p>m为散列表长, d<sub>i</sub>为增量序列</p>
<p>注: 不能随便删除元素, 需要标记后定期维护</p>
<ol type="1">
<li>线性探测法: d<sub>i</sub> = 0, 1, 2 ... m-1 这样可能会争夺正常映射的散列表位置</li>
<li>平方探测法(二次探测法): <span class="math inline">\(d_i = 0^2, 1^2, (-1)^2, 2^2...k^2, (-k)^2\)</span> k&lt;=m/2, 散列表长度 m 必须是一个可以表示成 4k+3 (?)的素数(如此可以保证, 只要散列表中有一半空元素, 就一定能插入)</li>
<li>双散列法<span class="math inline">\(d_i = h_2(key)\)</span>: <span class="math inline">\(h_i=[h(key)+i*h_2(key)]\%m\)</span> i为冲突次数</li>
<li>伪随机序列法: d<sub>i</sub> = 伪随机序列</li>
</ol></li>
<li><p>拉链法: 存储在线性链表中</p></li>
</ol>
<h4 id="散列查找及性能分析">7.5.4 散列查找及性能分析</h4>
<p>装填因子 <span class="math inline">\(\alpha = \frac{表中记录数 n}{散列表长度 m}\)</span></p>
<h2 id="第8查-排序">第8查 排序</h2>
<h3 id="排序的基本概念">8.1 排序的基本概念</h3>
<h4 id="排序的定义">8.1.1 排序的定义</h4>
<h3 id="插入排序">8.2 插入排序</h3>
<h4 id="直接插入排序">8.2.1 直接插入排序</h4>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">InsertSort</span><span class="params">(ElemType list[], <span class="type">int</span> length)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> unsorted_index, sorted_index;</span><br><span class="line">    <span class="type">int</span> guard = <span class="number">0</span>;<span class="comment">//list[guard] 存放哨兵不存放元素</span></span><br><span class="line">    <span class="keyword">for</span> (unsorted_index = <span class="number">2</span>; unsorted_index &lt;= length; unsorted_index++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (list[unsorted_index] &lt; list[unsorted_index - <span class="number">1</span>]) &#123;</span><br><span class="line">            list[guard] = list[unsorted_index]; <span class="comment">// guard</span></span><br><span class="line">            <span class="keyword">for</span> (sorted_index = unsorted_index - <span class="number">1</span>;</span><br><span class="line">                 list[guard] &lt; list[sorted_index];</span><br><span class="line">                 sorted_index--) &#123;</span><br><span class="line">                list[sorted_index + <span class="number">1</span>] = list[sorted_index];</span><br><span class="line">            &#125;</span><br><span class="line">            list[sorted_index] = list[guard];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>空间复杂度: S(1)</p>
<p>时间复杂度: 最好(有序)O(n), 最坏(逆序)O(n<sup>2</sup>), 平均: 比较次数=移动次数=<span class="math inline">\(\frac{n^2}4\)</span></p>
<p>从后向前比较移动时: 稳定</p>
<h4 id="折半插入排序">8.2.2 折半插入排序</h4>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">HalfInsertSort</span><span class="params">(ElemType list[], <span class="type">int</span> length)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> unsorted_idx, sorted_idx, low, high, mid;</span><br><span class="line">    <span class="type">int</span> guard = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (unsorted_idx = <span class="number">2</span>; unsorted_idx &lt;= length; unsorted_idx++) &#123;</span><br><span class="line">        list[guard] = list[unsorted_idx];</span><br><span class="line">        low = <span class="number">1</span>;</span><br><span class="line">        high = unsorted_idx - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">            mid = (low + high) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (list[mid] &gt; list[guard])</span><br><span class="line">                high = mid - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                low = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (sorted_idx = unsorted_idx - <span class="number">1</span>; sorted_idx &gt;= high + <span class="number">1</span>;</span><br><span class="line">             sorted_idx--)</span><br><span class="line">            list[sorted_idx + <span class="number">1</span>] = list[sorted_idx];</span><br><span class="line">        list[high + <span class="number">1</span>] = list[guard];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>平均时间复杂度: 比较次数 = nlog<sub>2</sub>n, 移动次数 = n<sup>2</sup>/4</p>
<p>稳定</p>
<h4 id="希尔排序缩小增量排序">8.2.3 希尔排序(缩小增量排序)</h4>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">ShellSort</span><span class="params">(ElemType list[], <span class="type">int</span> length)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> unsorted_idex, sorted_idx, stepd;</span><br><span class="line">    <span class="type">int</span> guard = <span class="number">0</span>; <span class="comment">// 暂存用</span></span><br><span class="line">    <span class="keyword">for</span> (stepd = length / <span class="number">2</span>; stepd &gt;= <span class="number">1</span>; stepd = stepd / <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (unsorted_idex = stepd + <span class="number">1</span>; unsorted_idex &lt; length; unsorted_idex++)</span><br><span class="line">            <span class="keyword">if</span> (list[unsorted_idex] &lt; list[unsorted_idex - stepd]) &#123;</span><br><span class="line">                list[guard] = list[unsorted_idex];</span><br><span class="line">                <span class="keyword">for</span> (sorted_idx = unsorted_idex - stepd;</span><br><span class="line">                     sorted_idx &gt; <span class="number">0</span> &amp;&amp; list[<span class="number">0</span>] &lt; list[sorted_idx];</span><br><span class="line">                     sorted_idx -= stepd)</span><br><span class="line">                    list[sorted_idx + stepd] = list[sorted_idx];</span><br><span class="line">                list[sorted_idx + stepd] = list[guard];</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>空间复杂度: 1</p>
<p>时间复杂度: 约为 n<sup>1.3</sup>, 最坏 n<sup>2</sup></p>
<p>不稳定</p>
<h3 id="交换排序">8.3 交换排序</h3>
<h4 id="胃泡排序">8.3.1 胃泡排序</h4>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">BubbleSort</span><span class="params">(ElemType list[], <span class="type">int</span> length)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="type">bool</span> unsorted = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = length - <span class="number">1</span>; j &gt; i; j--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (list[j - <span class="number">1</span>] &gt; list[j]) &#123;</span><br><span class="line">                <span class="built_in">swap</span>(list[j - <span class="number">1</span>], list[j]);</span><br><span class="line">                unsorted = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (unsorted == <span class="literal">false</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>空间复杂度: 1</p>
<p>时间复杂度: 最好(顺序) n-1. 最坏(逆序): 比较次数:<span class="math inline">\(\frac{n(n-1)}2\)</span>, 移动次数: <span class="math inline">\(\frac{3n(n-1)}2\)</span> (3是 swap 函数的时间复杂度)</p>
<p>稳定</p>
<h4 id="快速排序">8.3.2 快速排序</h4>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Partition</span><span class="params">(ElemType list[], <span class="type">int</span> low, <span class="type">int</span> high)</span> </span>&#123;</span><br><span class="line">    ElemType pivot = list[low];</span><br><span class="line">    <span class="keyword">while</span> (low &lt; high) &#123;</span><br><span class="line">        <span class="keyword">while</span> (low &lt; high &amp;&amp; list[high] &gt;= pivot)</span><br><span class="line">            high--;</span><br><span class="line">        list[low] = list[high];</span><br><span class="line">        <span class="keyword">while</span> (low &lt; high &amp;&amp; list[low] &lt;= pivot)</span><br><span class="line">            low++;</span><br><span class="line">        list[high] = list[low];</span><br><span class="line">    &#125;</span><br><span class="line">    list[low] = pivot;</span><br><span class="line">    <span class="keyword">return</span> low;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">QuickSort</span><span class="params">(ElemType list[], <span class="type">int</span> low, <span class="type">int</span> high)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (low &lt; high) &#123;</span><br><span class="line">        <span class="type">int</span> pivot_position = <span class="built_in">Partition</span>(list, low, high);</span><br><span class="line">        <span class="built_in">QuickSort</span>(list, low, pivot_position - <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">QuickSort</span>(list, pivot_position + <span class="number">1</span>, high);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>空间复杂度(栈): 最好=平均=log<sub>2</sub>n, 最坏 = n</p>
<p>时间复杂度: 最坏:每次划分都在端点处 n<sup>2</sup>, 最好:每次划分都在中点 nlog<sub>2</sub>n, 平均nlog<sub>2</sub>n</p>
<p>不稳定</p>
<h3 id="选择排序">8.4 选择排序</h3>
<h4 id="简单选择排序">8.4.1 简单选择排序</h4>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">SelectSort</span><span class="params">(ElemType list[], <span class="type">int</span> length)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="type">int</span> min = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> find_min = i + <span class="number">1</span>; find_min &lt; length; find_min++)</span><br><span class="line">            <span class="keyword">if</span> (list[find_min] &lt; list[min])</span><br><span class="line">                min = find_min;</span><br><span class="line">        <span class="keyword">if</span> (min != i)</span><br><span class="line">            <span class="built_in">swap</span>(list[i], list[min]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>空间复杂度: 1</p>
<p>时间复杂度: 比较: <span class="math inline">\(\frac{n(n-1)}2\)</span>, 移动最好 0 最坏 3(n-1), 总体n<sup>2</sup></p>
<p>不稳定</p>
<h4 id="堆排序">8.4.2 堆排序</h4>
<p>大根堆: <code>L(i)&gt;=L(2i) &amp;&amp; L(i)&gt;=L(2i+1)</code> 任意节点的值&lt;=父结点的值</p>
<p>小根堆: <code>L(i)&lt;=L(2i) &amp;&amp; L(i)&lt;=L(2i+1)</code></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">HeadAdjust</span><span class="params">(ElemType list[], <span class="type">int</span> adjust_idx, <span class="type">int</span> length)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> guard = <span class="number">0</span>;</span><br><span class="line">    list[guard] = list[adjust_idx];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span> * adjust_idx; i &lt;= length; i *= <span class="number">2</span>)</span><br><span class="line">    <span class="comment">// adjust_idx*2 是 adjust_idx 的 lchild</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; length &amp;&amp; list[i] &lt; list[i + <span class="number">1</span>])</span><br><span class="line">            i++;</span><br><span class="line">        <span class="keyword">if</span> (list[guard] &gt;= list[i])</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            list[adjust_idx] = list[i];</span><br><span class="line">            adjust_idx = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    list[adjust_idx] = list[guard];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BuildMaxHeap</span><span class="params">(ElemType list[], <span class="type">int</span> length)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = length / <span class="number">2</span>; i &gt; <span class="number">0</span>; i--)</span><br><span class="line">        <span class="comment">// 2^h-1 ~ 2^(h-1) list[length/2]是底层的有 child 节点</span></span><br><span class="line">        <span class="built_in">HeadAdjust</span>(list, i, length);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">HeapSort</span><span class="params">(ElemType list[], <span class="type">int</span> length)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">BuildMaxHeap</span>(list, length);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = length; i &gt; <span class="number">1</span>; i--) &#123;</span><br><span class="line">        <span class="built_in">swap</span>(list[i], list[<span class="number">1</span>]);</span><br><span class="line">        <span class="built_in">HeadAdjust</span>(list, <span class="number">1</span>, i - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>空间复杂度: 1</p>
<p>时间复杂度: nlogn</p>
<p>不稳定</p>
<h3 id="归并排序和基数排序">8.5 归并排序和基数排序</h3>
<h4 id="归并排序">8.5.1 归并排序</h4>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">ElemType assist_array[<span class="number">100</span>]; <span class="comment">// length of list</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Merge</span><span class="params">(ElemType list[], <span class="type">int</span> low, <span class="type">int</span> mid, <span class="type">int</span> high)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> low2mid_idx, mid2high_idx, list_idx;</span><br><span class="line">    <span class="keyword">for</span> (list_idx = low; list_idx &lt;= high; list_idx++)</span><br><span class="line">        assist_array[list_idx] = list[list_idx];</span><br><span class="line">    <span class="keyword">for</span> (low2mid_idx = low, mid2high_idx = mid + <span class="number">1</span>, list_idx = low;</span><br><span class="line">         low2mid_idx &lt;= mid &amp;&amp; mid2high_idx &lt;= high;</span><br><span class="line">         list_idx++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (assist_array[low2mid_idx] &lt;= assist_array[mid2high_idx]) <span class="comment">//稳定</span></span><br><span class="line">        &#123;</span><br><span class="line">            list[list_idx] = assist_array[low2mid_idx];</span><br><span class="line">            low2mid_idx++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            list[list_idx] = assist_array[mid2high_idx];</span><br><span class="line">            mid2high_idx++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (low2mid_idx &lt;= mid)</span><br><span class="line">        list[list_idx++] = assist_array[low2mid_idx++];</span><br><span class="line">    <span class="keyword">while</span> (mid2high_idx &lt;= high)</span><br><span class="line">        list[list_idx++] = assist_array[mid2high_idx++];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MergeSort</span><span class="params">(ElemType list[], <span class="type">int</span> low, <span class="type">int</span> high)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (low &lt; high) &#123;</span><br><span class="line">        <span class="type">int</span> mid = (low + high) / <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">MergeSort</span>(list, low, mid);</span><br><span class="line">        <span class="built_in">MergeSort</span>(list, mid + <span class="number">1</span>, high);</span><br><span class="line">        <span class="built_in">Merge</span>(list, low, mid, high);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>空间复杂度: n</p>
<p>时间复杂度: nlog<sub>2</sub>n</p>
<p>稳定</p>
<h4 id="基数排序">8.5.2基数排序</h4>
<p>将关键字拆分为组(如个十百千万) , 每个组排序一次</p>
<p>空间复杂度: r, r 为每个组有多少个可能的值(例如 10)</p>
<p>时间复杂度: d*(n+r), d 是关键字的组数</p>
<p>稳定</p>
<h3 id="各种内部排序算法的比较及应用">8.6 各种内部排序算法的比较及应用</h3>
<h4 id="内部排序算法的比较">8.6.1 内部排序算法的比较</h4>
<table>
<thead>
<tr class="header">
<th>算法</th>
<th>最好时间</th>
<th>平均时间</th>
<th>最坏时间</th>
<th>空间</th>
<th>稳定</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>直接插入</td>
<td>n</td>
<td>n<sup>2</sup>/4</td>
<td>n<sup>2</sup></td>
<td>1</td>
<td>yes</td>
</tr>
<tr class="even">
<td>折半插入</td>
<td>n</td>
<td>n<sup>2</sup>/4<br />(nlog<sub>2</sub>n)</td>
<td>n<sup>2</sup></td>
<td>1</td>
<td>yes</td>
</tr>
<tr class="odd">
<td>希尔</td>
<td>?</td>
<td>n<sup>1.3</sup></td>
<td>n<sup>2</sup></td>
<td>1</td>
<td>no</td>
</tr>
<tr class="even">
<td>冒泡</td>
<td>n-1</td>
<td>n<sup>2</sup></td>
<td>n(n-1)/2</td>
<td>1</td>
<td>yes</td>
</tr>
<tr class="odd">
<td>快速</td>
<td>nlog<sub>2</sub>n</td>
<td>nlog<sub>2</sub>n</td>
<td>n<sup>2</sup></td>
<td>log<sub>2</sub>n<br />~n</td>
<td>no</td>
</tr>
<tr class="even">
<td>简单选择</td>
<td>n(n-1)/2</td>
<td>n(n-1)/2</td>
<td>n(n-1)/2</td>
<td>1</td>
<td>no</td>
</tr>
<tr class="odd">
<td>堆</td>
<td>nlog<sub>2</sub>n</td>
<td>nlog<sub>2</sub>n</td>
<td>nlog<sub>2</sub>n</td>
<td>1</td>
<td>no</td>
</tr>
<tr class="even">
<td>归并</td>
<td>nlog<sub>2</sub>n</td>
<td>nlog<sub>2</sub>n</td>
<td>nlog<sub>2</sub>n</td>
<td>n</td>
<td>yes</td>
</tr>
<tr class="odd">
<td>基数</td>
<td>d*(n+r)</td>
<td>d*(n+r)</td>
<td>d*(n+r)</td>
<td>r</td>
<td>yes</td>
</tr>
</tbody>
</table>
<h4 id="内部排序算法的应用">8.6.2 内部排序算法的应用</h4>
<h3 id="外部排序">8.7 外部排序</h3>
<h4 id="外部排序的基本概念">8.7.1 外部排序的基本概念</h4>
<h4 id="外部排序的方法">8.7.2 外部排序的方法</h4>
<h4 id="多路平衡归并与败者树">8.7.3 多路平衡归并与败者树，</h4>
<h4 id="置换-选择排序生成初始归并段">8.7.4 置换-选择排序（生成初始归并段）</h4>
<h4 id="最佳归并树">8.7.5 最佳归并树</h4>
<h1 id="操作系统">操作系统</h1>
<h2 id="第1章-计算机系统概述">第1章 计算机系统概述</h2>
<h3 id="操作系统的基本概念">1.1 操作系统的基本概念</h3>
<h4 id="操作系统的概念">1.1.1 操作系统的概念</h4>
<h4 id="操作系统的特征">1.1.2 操作系统的特征</h4>
<h4 id="操作系统的目标和珧能">1.1.3 操作系统的目标和珧能</h4>
<h3 id="操作系统发展历程">1.2 操作系统发展历程</h3>
<h4 id="手工操作阶段此阶段无操作系统">1.2.1 手工操作阶段（此阶段无操作系统）</h4>
<h4 id="批处理阶段操作系统开始出现">1.2.2 批处理阶段（操作系统开始出现）</h4>
<h4 id="分时操作系统">1.2.3 分时操作系统</h4>
<h4 id="实时操作系统">1.2.4 实时操作系统</h4>
<h4 id="网络操作系统和分布式计算机系统">1.2.5 网络操作系统和分布式计算机系统</h4>
<h4 id="个人计算机操作系统">1.2.6 个人计算机操作系统</h4>
<h3 id="操作系统运行环境">1.3 操作系统运行环境</h3>
<h4 id="处理器运行模式">1.3.1 处理器运行模式</h4>
<h4 id="中断和异常的概念">1.3.2 中断和异常的概念</h4>
<h4 id="系统调用">1.3.3 系统调用</h4>
<h3 id="操作系统结构">1.4 操作系统结构</h3>
<h3 id="操作系统引导">1.5 操作系统引导</h3>
<h3 id="虚拟机">1.6 虚拟机</h3>
<h4 id="虚拟机的基本概念">1.6.1 虚拟机的基本概念</h4>
<h3 id="本章疑难点">1.7 本章疑难点</h3>
<h2 id="第2章-进程与线程">第2章 进程与线程</h2>
<h3 id="进程与线程">2.1 进程与线程</h3>
<h4 id="进程的概念和特征">2.1.1 进程的概念和特征</h4>
<h4 id="进程的状态与转换">2.1.2 进程的状态与转换</h4>
<h4 id="进程的组成">2.1.3 进程的组成</h4>
<h4 id="进程控制">2.1.4 进程控制</h4>
<h4 id="进程的通信">2.1.5 进程的通信</h4>
<h4 id="线程和多线程模型">2.1.6 线程和多线程模型</h4>
<h4 id="本节小结">2.1.7 本节小结</h4>
<h3 id="处理机调度">2.2 处理机调度</h3>
<h4 id="调度的概念">2.2.1 调度的概念</h4>
<h4 id="调度的目标">2.2.2 调度的目标</h4>
<h4 id="调度的实现">2.2.3 调度的实现</h4>
<h4 id="典型的调度算法">2.2.4 典型的调度算法</h4>
<h4 id="进程切换">2.2.5 进程切换</h4>
<h3 id="同步与互斥">2.3 同步与互斥</h3>
<h4 id="同步与互斥的基本概念">2.3.1 同步与互斥的基本概念</h4>
<h4 id="实现临界区互斥的基本方法">2.3.2 实现临界区互斥的基本方法</h4>
<h4 id="互斥锁">2.3.3 互斥锁</h4>
<h4 id="信号量">2.3.4 信号量</h4>
<h4 id="管程">2.3.5 管程</h4>
<h4 id="经典同步问题">2.3.6 经典同步问题</h4>
<h3 id="死锁">2.4死锁</h3>
<h4 id="死锁的概念">2.4.1 死锁的概念</h4>
<h4 id="死锁预防">2.4.2 死锁预防</h4>
<h4 id="死锁避免">2.4.3 死锁避免</h4>
<h4 id="死锁检测和解除">2.4.4 死锁检测和解除</h4>
<h3 id="本章疑难点-1">2.5 本章疑难点</h3>
<h2 id="第3章-内存管理">第3章 内存管理</h2>
<h3 id="内存管理概念">3.1 内存管理概念</h3>
<h4 id="内存管理的基本原理和要求">3.1.1 内存管理的基本原理和要求</h4>
<h4 id="覆盖与交换">*3.1.2 覆盖与交换</h4>
<h4 id="连续分配管理方式">3.1.3 连续分配管理方式</h4>
<h4 id="基本分页存储管理">3.1.4 基本分页存储管理</h4>
<h4 id="基本分段存储管理">3.1.5 基本分段存储管理</h4>
<h4 id="段页式管理">3.1.6 段页式管理</h4>
<h3 id="虚拟内存管理">3.2 虚拟内存管理</h3>
<h4 id="虚拟内存的基本概念">3.2.1 虚拟内存的基本概念</h4>
<h4 id="请求分页管理方式">3.2.2 请求分页管理方式</h4>
<h4 id="页框分配">3.2.3 页框分配</h4>
<h4 id="页面置换算法">3.2.4 页面置换算法</h4>
<h4 id="抖动和工作集">3.2.5 抖动和工作集</h4>
<h4 id="内存映射文件">3.2.6 内存映射文件</h4>
<h4 id="虚拟存储器性能影响因素">3.2.7 虚拟存储器性能影响因素</h4>
<h4 id="地址翻译">3.2.8 地址翻译</h4>
<h3 id="本章疑难点-2">3.3 本章疑难点</h3>
<h2 id="第4章文件管理">第4章文件管理</h2>
<h3 id="文件系统基础">4.1 文件系统基础</h3>
<h4 id="文件的基本概念">4.1.1 文件的基本概念</h4>
<h4 id="文件控制块和索引结点">4.1.2 文件控制块和索引结点</h4>
<h4 id="文件的操作">4.1.3 文件的操作</h4>
<h4 id="文件保护">4.1.4 文件保护</h4>
<h4 id="文件的逻辑结构">4.1.5 文件的逻辑结构</h4>
<h4 id="文件的物理结构">4.1.6 文件的物理结构、</h4>
<h3 id="目录">4.2目录</h3>
<h4 id="目录的基本概念">4.2.1 目录的基本概念</h4>
<h4 id="目录结构">4.2.2 目录结构</h4>
<h4 id="目录的操作">4.2.3 目录的操作</h4>
<h4 id="目录实现">*4.2.4 目录实现</h4>
<h4 id="文件共享">4.2.5 文件共享</h4>
<h3 id="文件系统">4.3 文件系统</h3>
<h4 id="文件系统结构">4.3.1 文件系统结构</h4>
<h4 id="文件系统布局">4.3.2 文件系统布局</h4>
<h4 id="外存空闲空间管理">4.3.3 外存空闲空间管理</h4>
<h4 id="虚拟文件系统">4.3.4 虚拟文件系统</h4>
<h4 id="分区和安装">4.3.5 分区和安装</h4>
<h2 id="第5章输入输出-io管理">第5章输入输出 (I/O）管理</h2>
<h3 id="io管理概述">5.1 I/O管理概述</h3>
<h4 id="io设备">5.1.1 I/O设备</h4>
<h4 id="io控制方式">5.1.2 I/O控制方式</h4>
<h4 id="io-软件层次结构">5.1.3 I/O 软件层次结构</h4>
<h4 id="应用程序io-接口">5.1.4 应用程序I/O 接口</h4>
<h3 id="设备独立性软件">5.2 设备独立性软件</h3>
<h4 id="与设备无关的软件">5.2.1 与设备无关的软件</h4>
<h4 id="高速缓存与缓冲区">5.2.2 高速缓存与缓冲区</h4>
<h4 id="设备分配与回收">5.2.3 设备分配与回收</h4>
<h4 id="spooling-技术假脱机技术">5.2.4 SPOOLing 技术（假脱机技术）</h4>
<h4 id="设备驱动程序接口">5.2.5 设备驱动程序接口</h4>
<h3 id="磁盘和固态硬盘">5.3 磁盘和固态硬盘</h3>
<h4 id="磁盘">5.3.1 磁盘</h4>
<h4 id="磁盘的管理">5.3.2 磁盘的管理</h4>
<h4 id="磁盘调度算法">5.3.3 磁盘调度算法</h4>
<h4 id="固态硬盘">5.3.4 固态硬盘</h4>
<h3 id="本章疑难点-3">5.4 本章疑难点。</h3>
<h1 id="网络">网络</h1>
<h2 id="第1章-计算机网络体系结构">第1章 计算机网络体系结构</h2>
<h3 id="计算机网络概述">1.1 计算机网络概述</h3>
<h4 id="计算机网络的概念">1.1.1 计算机网络的概念</h4>
<h4 id="计算机网络的组成">1.1.2 计算机网络的组成</h4>
<p>组成部分: 硬件, 软件, 协议</p>
<p>工作方式: 边缘部分, 核心部分</p>
<p>功能组成: 通信子网, 资源子网</p>
<h4 id="计算机网络的功能">1.1.3 计算机网络的功能</h4>
<ul>
<li>数据通信</li>
<li>资源共享</li>
<li>分布式处理</li>
<li>提高可靠性</li>
<li>负载均衡</li>
</ul>
<h4 id="计算机网络的分类">1.1.4 计算机网络的分类</h4>
<p>按范围</p>
<ul>
<li>广域网 WAN 10km~1000km</li>
<li>城域网 MAN 5km~50km</li>
<li>局域网 LAN 10m~1km</li>
<li>个人区域网 PAN 1m~10m</li>
</ul>
<p>传输技术</p>
<ul>
<li>广播式网络(局域网, 广域网中的:无线网络和卫星通信网络)</li>
<li>点对点网络(广域网大部分)</li>
</ul>
<p>拓扑结构</p>
<ul>
<li>总线型</li>
<li>星形</li>
<li>环形</li>
<li>网状</li>
</ul>
<p>按使用者</p>
<ul>
<li>公用网</li>
<li>专用网</li>
</ul>
<p>按交换技术</p>
<ul>
<li>电路交换网络</li>
<li>报文交换网络</li>
<li>分组交换网络</li>
</ul>
<p>按介质</p>
<ul>
<li>有线
<ul>
<li>双绞线</li>
<li>同轴电缆</li>
</ul></li>
<li>无线
<ul>
<li>蓝牙</li>
<li>微波</li>
<li>无线电</li>
</ul></li>
</ul>
<h4 id="计算机网络的标准化工作">*1.1.5 计算机网络的标准化工作</h4>
<figure>
<img src="https://gitee.com/sinos_wei/picgo/raw/master/%E6%88%AA%E5%B1%8F2023-05-22%2016.28.22.png" alt="截屏2023-05-22 16.28.22" /><figcaption aria-hidden="true">截屏2023-05-22 16.28.22</figcaption>
</figure>
<h4 id="计算机网络的性能指标">1.1.6 计算机网络的性能指标</h4>
<p>带宽(bandwidth) 比特/秒</p>
<p>时延</p>
<ul>
<li>发送时延(传输时延): 分组长度/信道宽度</li>
<li>传播时延: 信道长度/光速</li>
<li>处理时延: 处理分析所花时间</li>
<li>排队时延</li>
</ul>
<p>时延带宽积: 传播时延 * 信道带宽, 意义是发送端发送的第一个 bit 到达终点时, 发送端已经发送了多少 bit</p>
<p>往返时延 RTT(round trip time): 发送端从发送分组到收到确认的时间</p>
<p>吞吐量(throughput): 数据量/时间</p>
<p>速率(speed): 又叫数据传输速率, 数据率, 比特率, 比特/秒, 最高数据传输速率叫做带宽</p>
<p>信道利用率: 有数据通过的时间/总时间</p>
<h3 id="计算机网络体系结构与参考模型">1.2 计算机网络体系结构与参考模型</h3>
<h4 id="计算机网络分层结构">1.2.1 计算机网络分层结构</h4>
<p>从低到高, 从下到上, 从 1 到 n, 从物理层到应用层</p>
<p>协议数据单元 PDU = 服务数据单元 SDU + 协议控制信息 PCI</p>
<h4 id="计算机网络协议接口服务的概念">1.2.2 计算机网络协议、接口、服务的概念</h4>
<p>协议: 语法, 语义, 同步 语法规定了传输数据的格式； 语义规定了所要完成的 功能，即需要发出何种控制信息、完成何种动作及做出何种应答： 同步规定了执行各种操作的条件、时序关系等，即事件实现顾序的详细说明。</p>
<p>接口: 同一节点内相邻两层间交换信息的连接点</p>
<p>服务: 下层为近邻的上层提供的功能调用</p>
<p>服务原语: 请求, 指示, 响应, 证实</p>
<p>服务分类:</p>
<ul>
<li>面向连接, 无连接</li>
<li>可靠, 不可靠</li>
<li>有应答, 无应答</li>
</ul>
<h4 id="isoosi-参考模型和-tcpip-模型">1.2.3 ISO/OSI 参考模型和 TCP/IP 模型</h4>
<p>ISO/OSI: 物理层, 数据链路层, 网络层, 传输层, 会话层, 表示层, 应用层 低三层为通信子网, 高三层为资源子网</p>
<p>TCP/IP: 网络接口层, 网际层, 传输层, 应用层</p>
<p>综合两者, 得到五层: 物理层, 数据链路层, 网络层, 传输层,应用层</p>
<h3 id="本章小结及疑难点">1.3．本章小结及疑难点</h3>
<h2 id="第2章-物理层">第2章 物理层</h2>
<h3 id="通信基础">2.1通信基础</h3>
<h4 id="基本概念">2.1.1 基本概念</h4>
<h4 id="奈奎斯特定理与香农定理">2.1.2 奈奎斯特定理与香农定理</h4>
<h4 id="编码与调制">2.1.3 编码与调制</h4>
<h4 id="电路交换报文交换与分组交换">2.1.4 电路交换、报文交换与分组交换</h4>
<h4 id="数据报与虚电路">2.1.5. 数据报与虚电路</h4>
<h3 id="传输介质">2.2 传输介质</h3>
<h4 id="双绞线同轴电缆光纤与无线传输介质">2.2.1 双绞线、同轴电缆、光纤与无线传输介质</h4>
<h4 id="物理层接口的特性">2.2.2 物理层接口的特性</h4>
<h3 id="物理层设备">2.3 物理层设备</h3>
<h4 id="中继器">2.3.1中继器</h4>
<h4 id="集线器">2.3.2集线器</h4>
<h3 id="本章小结及疑难点-1">2.4 本章小结及疑难点</h3>
<h2 id="第3章数据链路层">第3章数据链路层</h2>
<h3 id="数据链路层的功能">3.1 数据链路层的功能</h3>
<h4 id="为网络层提供服务">3.1.1 为网络层提供服务</h4>
<h4 id="链路管理">3.1.2 链路管理</h4>
<h4 id="帧定界帧同步与透明传输">3.1.3 帧定界、帧同步与透明传输</h4>
<h4 id="流量控制">3.1.4 流量控制</h4>
<h5 id="差错控制">3.1.5. 差错控制</h5>
<h3 id="组帧">3.2组帧</h3>
<h4 id="字符计数法">3.2.1 字符计数法</h4>
<h4 id="宇符填充的首尾定界符法">3.2.2 宇符填充的首尾定界符法</h4>
<h4 id="零比特填充的首尾标志法">3.2.3 零比特填充的首尾标志法</h4>
<h4 id="违规编码法">3.2.4 违规编码法</h4>
<h3 id="差错控制-1">3.3 差错控制</h3>
<h4 id="检错编码">3.3.1 检错编码</h4>
<h4 id="纠错编码">3.3.2纠错编码</h4>
<h3 id="流量控制与可靠传输机制">3.4 流量控制与可靠传输机制</h3>
<h4 id="流量控制可靠传输与滑动窗口机制">3.4.1 流量控制、可靠传输与滑动窗口机制</h4>
<h4 id="单帧滑动窗口与停止-等待协议">3.4.2 单帧滑动窗口与停止-等待协议</h4>
<h4 id="多帧滑动窗口与后退-n帧协议gbn">3.4.3 多帧滑动窗口与后退 N帧协议(GBN)</h4>
<h4 id="多帧滑动窗口与选择重传协议-sr">3.4.4 多帧滑动窗口与选择重传协议 (SR）</h4>
<h3 id="介质访问控制">3.5 介质访问控制</h3>
<h4 id="信道划分介质访问控制">3.5.1 信道划分介质访问控制</h4>
<h4 id="随机访问介质访问控制">3.5.2 随机访问介质访问控制</h4>
<h4 id="轮询访问令牌传递协议">3.5.3 轮询访问：令牌传递协议</h4>
<h3 id="局域网">3.6 局域网</h3>
<h4 id="局域网的基本概念和体系结构">3.6.1 局域网的基本概念和体系结构</h4>
<h6 id="以太网与-ieee-802.3-.">3.6.2以太网与 IEEE 802.3 .</h6>
<h5 id="ieee-802.11-无线局域网">3.6.3 IEEE 802.11 无线局域网</h5>
<h4 id="vlan-基本概念与基本原理">3.6.4 VLAN 基本概念与基本原理</h4>
<h3 id="广域网">3.7 广域网</h3>
<h4 id="广域网的基本概念">3.7.1 广域网的基本概念</h4>
<h4 id="ppp-协议">3.7.2 PPP 协议</h4>
<h5 id="hdlc协议.">*3.7.3 HDLC协议.</h5>
<h3 id="数据链路层设备">3.8 数据链路层设备</h3>
<h4 id="网桥的基本概念">*3.8.1 网桥的基本概念</h4>
<h4 id="局域网交换机">3.8.2 局域网交换机</h4>
<h3 id="本章小结及疑难点-2">3.9 本章小结及疑难点</h3>
<h2 id="第4章-网络层">第4章 网络层</h2>
<h3 id="网络层的功能">4.1：网络层的功能</h3>
<h4 id="异构网络互连">4.1.1“异构网络互连</h4>
<h4 id="路由与转发">4.1.2 路由与转发</h4>
<h4 id="sdn-的基本概念">4.1.3 SDN 的基本概念</h4>
<h4 id="拥塞控制">4.1.4 拥塞控制</h4>
<h3 id="路由算法">4.2 路由算法</h3>
<h4 id="静态路由与动态路由">4.2.1 静态路由与动态路由</h4>
<h4 id="距离-向量路由算法">4.2.2 距离-向量路由算法</h4>
<h4 id="链路状态路由算法">4.2.3 链路状态路由算法</h4>
<h4 id="层次路由">4.2.4 层次路由</h4>
<h3 id="ipv4">4.3 IPV4</h3>
<h4 id="ipv4-分组">4.3.1 IPV4 分组</h4>
<h4 id="ipv4-地址与-nat">4.3.2 IPv4 地址与 NAT</h4>
<h4 id="子网划分与子网掩码cidr">4.3.3 子网划分与子网掩码、CIDR</h4>
<h4 id="arp-dhcp-与-icmp">4.3.4 ARP、 DHCP 与 ICMP</h4>
<h4 id="ipv6.">4.4 IPV6.</h4>
<h4 id="ipv6-的主要特点">4.4.1 IPV6 的主要特点</h4>
<h4 id="ipv6-地址">4.4.2 IPv6 地址</h4>
<h3 id="路由协议">4.5 路由协议</h3>
<h4 id="自治系统">4.5.1 自治系统</h4>
<h4 id="域内路由与域问路由">4.5.2 域内路由与域问路由</h4>
<h4 id="路由信息协议-rip">4.5.3 路由信息协议 (RIP)</h4>
<h4 id="开放最短路径优先-ospf协议">4.5.4 开放最短路径优先 (OSPF）协议</h4>
<h4 id="边界网关协议-bgp">4.5.5 边界网关协议 (BGP)</h4>
<h3 id="ip-组播">4.6 IP 组播</h3>
<h4 id="组播的概念">4.6.1 组播的概念</h4>
<h4 id="ip组播地址">4.6.2 IP组播地址</h4>
<h4 id="igmp-与组播路由算法">4.6.3 IGMP 与组播路由算法</h4>
<h4 id="移动ip.">4.7 移动IP.</h4>
<h4 id="移动ip-的概念">4.7.1 移动IP 的概念</h4>
<h4 id="移动ip-通信过程">4.7.2 移动IP 通信过程</h4>
<h3 id="网络层设备">4.8网络层设备</h3>
<h4 id="冲突域和广播域">4.8.1 冲突域和广播域</h4>
<h4 id="路由器的组成和功能">4.8.2 路由器的组成和功能</h4>
<h4 id="路由表与路由转发">4.8.3 路由表与路由转发</h4>
<h4 id="本章小结及疑难点.">4.9 本章小结及疑难点.</h4>
<h2 id="第5章传输层">第5章传输层</h2>
<h3 id="传输层提供的服务">5.1 传输层提供的服务</h3>
<h4 id="传输层的功能">5.1.1 传输层的功能</h4>
<h4 id="传输层的寻址与端口">5.1.2 传输层的寻址与端口</h4>
<h4 id="无连接服务与面向连接服务">5.1.3 无连接服务与面向连接服务</h4>
<h3 id="udp-协议">5.2 UDP 协议</h3>
<h4 id="udp-数据报">5.2.1 UDP 数据报</h4>
<h4 id="udp-校验">5.2.2 UDP 校验</h4>
<h3 id="tcp-协议">5.3 TCP 协议</h3>
<h4 id="tcp-协议的特点">5.3.1 TCP 协议的特点</h4>
<h4 id="tcp-报文段">5.3.2 TCP 报文段</h4>
<h4 id="tcp-连接管理">5.3.3 TCP 连接管理</h4>
<h4 id="tcp-可靠传输">5.3.4 TCP 可靠传输</h4>
<h4 id="tcp-流量控制">5.3.5 TCP 流量控制</h4>
<h4 id="tcp-拥塞控制">5.3.6 TCP 拥塞控制</h4>
<h3 id="本章小结及疑难点-3">5.4 本章小结及疑难点</h3>
<h2 id="第6章应用层">第6章应用层</h2>
<h3 id="网络应用模型">6.1 网络应用模型</h3>
<h4 id="客户服务器模型">6.1.1 客户/服务器模型</h4>
<h4 id="p2p-模型">6.1.2 P2P 模型</h4>
<h4 id="域名系统.dns">6.2 域名系统.(DNS)</h4>
<h4 id="层次域名空间-一">6.2.1 层次域名空间 一</h4>
<h4 id="域名服务器">6.2.2 域名服务器</h4>
<h4 id="域名解析过程">6.2.3 域名解析过程</h4>
<h3 id="文件传输协议-ftp">6.3 文件传输协议 (FTP)</h3>
<h4 id="ftp-的工作原理">6.3.1 FTP 的工作原理</h4>
<h4 id="控制连接与数据连接">6.3.2 控制连接与数据连接</h4>
<h3 id="电子邮件">6.4 电子邮件</h3>
<h4 id="电子邮件系统的组成结构">6.4.1 电子邮件系统的组成结构</h4>
<h4 id="电子邮件格式与-mime">6.4.2 电子邮件格式与 MIME</h4>
<h4 id="smtp-和-pop3">6.4.3 SMTP 和 POP3</h4>
<h3 id="万维网-www">6.5 万维网 (www）</h3>
<h4 id="www-的概念与组成结构">6.5.1 www 的概念与组成结构</h4>
<h4 id="超文本传输协议-http">6.5.2 超文本传输协议 (HTTP)</h4>
<h3 id="本章小结及疑难点-4">6.6 本章小结及疑难点</h3>
<h1 id="组成原理">组成原理</h1>
<h2 id="第1章-计箅机系统概述">第1章 计箅机系统概述</h2>
<h3 id="计算机发展历程">*1.1 计算机发展历程</h3>
<h4 id="计算机硬件的发展">*1.1.1 计算机硬件的发展</h4>
<h4 id="计算机软件的发展">*1.1.2 计算机软件的发展</h4>
<h3 id="计算机系统层次结构">1.2 计算机系统层次结构</h3>
<h5 id="计算机系统的组成">1.2.1. 计算机系统的组成</h5>
<h4 id="计算机硬件">1.2.2 计算机硬件</h4>
<h4 id="计算机软件">1.2.3 计算机软件</h4>
<h4 id="计算机系统的层次结构">1.2.4 计算机系统的层次结构</h4>
<h4 id="计算机系统的工作原理">1.2.5 计算机系统的工作原理</h4>
<h3 id="计算机的性能指标">1.3 计算机的性能指标</h3>
<h4 id="计算机的主要性能指标">1.3.1 计算机的主要性能指标</h4>
<h4 id="几个专业术语">1.3.2 几个专业术语</h4>
<h3 id="常见问题和易混淆知识点">1.5 常见问题和易混淆知识点</h3>
<h2 id="第2章-数据的表示和运算">第2章 数据的表示和运算</h2>
<h3 id="数制与编码">2.1数制与编码</h3>
<h4 id="进位计数制及其相互转换">2.1.1 进位计数制及其相互转换</h4>
<h4 id="bcd码">*2.1.2 BCD码</h4>
<h4 id="定点数的编码表示">2.1.3 定点数的编码表示</h4>
<h4 id="整数的表示">2.1.4 整数的表示</h4>
<h3 id="运算方法和运算电路">2.2 运算方法和运算电路</h3>
<h4 id="基本运算部件">2.2.1 基本运算部件</h4>
<h4 id="定点数的移位运算">2.2.2 定点数的移位运算</h4>
<h4 id="定点数的加减运算">2.2.3 定点数的加减运算</h4>
<h4 id="定点数的乘除运算">2.2.4 定点数的乘除运算</h4>
<h4 id="c语言中的整数类型及类型转换">2.2.5C语言中的整数类型及类型转换</h4>
<h4 id="数据的存储和排列">2.2.6 数据的存储和排列</h4>
<h3 id="浮点数的表示与运算">2.3 浮点数的表示与运算</h3>
<h4 id="浮点数的表示">2.3.1 浮点数的表示 。</h4>
<h4 id="浮点数的加减运算">2.3.2 浮点数的加减运算</h4>
<h2 id="第3章-存储系统">第3章 存储系统</h2>
<h3 id="存储器概述">3.1 存储器概述</h3>
<h4 id="存储器的分类">3.1.1 存储器的分类</h4>
<h4 id="存储器的性能指标">3.1.2 存储器的性能指标</h4>
<h4 id="多级层次的存储系统">3.1.3 多级层次的存储系统</h4>
<h3 id="主存储器">3.2主存储器</h3>
<h4 id="sram-芯片和-dram-芯片">3.2.1 SRAM 芯片和 DRAM 芯片</h4>
<h4 id="只读存储器">3.2.2 只读存储器</h4>
<h4 id="主存储器的基本组成">3.2.3 主存储器的基本组成</h4>
<h4 id="多模块存储器">3.2.4 多模块存储器</h4>
<h3 id="主存储器与-cpu-的连接">3.3 主存储器与 CPU 的连接，</h3>
<h4 id="连接原理">3.3.1 连接原理</h4>
<h4 id="主存容量的扩展">3.3.2 主存容量的扩展</h4>
<h4 id="存储芯片的地址分配和片选">3.3.3 存储芯片的地址分配和片选</h4>
<h4 id="存储器与-cpu-的连接">3.3.4 存储器与 CPU 的连接</h4>
<h4 id="外部存储器.">3.4 外部存储器.</h4>
<h4 id="磁盘存储器">3.4.1 磁盘存储器</h4>
<h4 id="固态硬盘-1">3.4.2 固态硬盘</h4>
<h3 id="高速缓冲存储器">3.5 高速缓冲存储器</h3>
<h4 id="程序访问的局部性原理">3.5.1 程序访问的局部性原理</h4>
<h4 id="cache-的基本工作原理">3.5.2 Cache 的基本工作原理</h4>
<h4 id="cache-和主存的映射方式">3.5.3 Cache 和主存的映射方式</h4>
<h4 id="cache-中主存块的替换算法">3.5.4 Cache 中主存块的替换算法</h4>
<h4 id="cache-写策略">3.5.5 Cache 写策略</h4>
<h4 id="本节习题精选">3.5.6 本节习题精选</h4>
<h3 id="虚拟存储器">3.6 虚拟存储器</h3>
<h4 id="虚拟存储器的基本概念">3.6.1 虚拟存储器的基本概念</h4>
<h4 id="页式虚拟存储器">3.6.2 页式虚拟存储器</h4>
<h4 id="段式虚拟存储器">3.6.3 段式虚拟存储器</h4>
<h4 id="段页式虚拟存储器">3.6.4 段页式虚拟存储器</h4>
<h4 id="虚拟存储器与-cache-的比较">3.6.5 虚拟存储器与 Cache 的比较</h4>
<h2 id="第4章指令系统">第4章指令系统</h2>
<h3 id="指令系统">4.1 指令系统</h3>
<h4 id="指令的基本格式">4.1.1 指令的基本格式</h4>
<h4 id="定长操作码指令格式">4.1.2 定长操作码指令格式</h4>
<h4 id="扩展操作码指令格式">4.1.3 扩展操作码指令格式</h4>
<h4 id="指令的操作类型">4.1.4 指令的操作类型。</h4>
<h3 id="指令的寻址方式">4.2 指令的寻址方式</h3>
<h4 id="指令寻址和数据寻址">4.2.1．指令寻址和数据寻址</h4>
<h4 id="常见的数据寻址方式">4.2.2 常见的数据寻址方式</h4>
<h3 id="程序的机器级代码表示">4.3 程序的机器级代码表示</h3>
<h4 id="常用汇编指令介绍">4.3.1 常用汇编指令介绍</h4>
<h4 id="过程调用的机器级表示">4.3.2 过程调用的机器级表示</h4>
<h4 id="选择语句的机器级表示">4.3.3 选择语句的机器级表示</h4>
<h4 id="循环语句的机器级表示">4.3.4 循环语句的机器级表示</h4>
<h3 id="cisc-和risc-的基本概念">4.4 CISC 和RISC 的基本概念</h3>
<h4 id="复杂指令系统计算机-cisc">4.4.1 复杂指令系统计算机 (CISC)</h4>
<h4 id="精简指令系统计算机-risc">4.4.2 精简指令系统计算机 (RISC)</h4>
<h4 id="cisc-和risc-的比较">4.4.3 CiSC 和RISC 的比较</h4>
<h2 id="第5章中央处理器">第5章中央处理器。</h2>
<h3 id="cpu-的功能和基本结构">5.1 CPU 的功能和基本结构</h3>
<h4 id="cpu-的功能">5.1.1 CPU 的功能</h4>
<h4 id="cpu-的基本结构">5.1.2 CPU 的基本结构</h4>
<h3 id="指令执行过程">5.2 指令执行过程</h3>
<h4 id="指令周期">5.2.1 指令周期</h4>
<h4 id="指令周期的数据流">5.2.2 指令周期的数据流</h4>
<h4 id="指令执行方案">5.2.3 指令执行方案</h4>
<h3 id="数据通路的功能和基本结构">5.3 数据通路的功能和基本结构。</h3>
<h4 id="数据通路的功能">5.3.1 数据通路的功能</h4>
<h4 id="数据通路的基本结构">5.3.2 数据通路的基本结构</h4>
<h3 id="控制器的功能和工作原理">5.4 控制器的功能和工作原理</h3>
<h4 id="控制器的结构和功能">5.4.1 控制器的结构和功能</h4>
<h4 id="硬布线控制器">5.4.2 硬布线控制器</h4>
<h4 id="微程序控制器">5.4.3 微程序控制器</h4>
<h3 id="异常和中断机制">5.5 异常和中断机制</h3>
<h4 id="异常和中断的基本概念">5.5.1 异常和中断的基本概念</h4>
<h4 id="异常和中断的分类">5.5.2 异常和中断的分类</h4>
<h4 id="异常和中断响应过程">5.5.3 异常和中断响应过程</h4>
<h3 id="指令流水线">5.6 指令流水线</h3>
<h4 id="指令流水线的基本概念">5.6.1 指令流水线的基本概念</h4>
<h4 id="流水线的基本实现">5.6.2 流水线的基本实现</h4>
<h4 id="流水线的冒险与处理">5.6.3 流水线的冒险与处理</h4>
<h4 id="流水线的性能指标">5.6.4 流水线的性能指标</h4>
<h4 id="高级流水线技术">5.6.5 高级流水线技术</h4>
<h3 id="多处理器的基本概念">5.7 多处理器的基本概念</h3>
<h4 id="sisdsimd-mimd-的基本概念">5.7.1 SISD、SIMD、 MIMD 的基本概念</h4>
<h4 id="硬件多线程的基本概念">5.7.2 硬件多线程的基本概念</h4>
<h4 id="多核处理器的基本概念">5.7.3 多核处理器的基本概念</h4>
<h4 id="共享内存多处理器的基本概念">5.7.4 共享内存多处理器的基本概念</h4>
<p>第6聋 总线：</p>
<h3 id="总线概述">6.1 总线概述．</h3>
<h4 id="总线基本概念">6.1.1 总线基本概念</h4>
<h4 id="总线的分类">6.1.2-总线的分类</h4>
<h4 id="系统总线的结构">6.1.3 系统总线的结构</h4>
<h4 id="常见的总线标准">6.1.4 常见的总线标准</h4>
<h4 id="总线的性能指标">6.1.5 总线的性能指标</h4>
<h3 id="总线事务和定时">6.2 总线事务和定时</h3>
<h4 id="总线事务">6.2.1 总线事务</h4>
<h4 id="同步定时方式">6.2.2 同步定时方式</h4>
<h4 id="异步定时方式">6.2.3 异步定时方式</h4>
<h2 id="第7章输入输出系统">第7章输入/输出系统</h2>
<h3 id="io系统基本概念">7.1 I/O系统基本概念</h3>
<h4 id="输入输出系统">*7.1.1 输入/输出系统</h4>
<h4 id="i0控制方式">*7.1.2 I/0控制方式</h4>
<h4 id="外部设备">*7.1.3 外部设备</h4>
<h3 id="io接口">7.2 I/O接口</h3>
<h4 id="io接口的功能">7.2.1 I/O接口的功能</h4>
<h4 id="io-接口的基本结构">7.2.2 I/O 接口的基本结构</h4>
<h4 id="io接口的类型">7.2.3 I/O接口的类型</h4>
<h4 id="io-端口及其编址">7.2.4 I/O 端口及其编址</h4>
<h3 id="io方式">7.3 I/O方式</h3>
<h4 id="程序查询方式">7.3.1 程序查询方式</h4>
<h4 id="程序中断方式">7.3.2 程序中断方式</h4>
<h4 id="dma-方式">7.3.3 DMA 方式</h4>
]]></content>
      <categories>
        <category>undefined</category>
      </categories>
      <tags>
        <tag>int</tag>
        <tag>visit</tag>
        <tag>root</tag>
        <tag>tree</tag>
        <tag>pattern</tag>
      </tags>
  </entry>
  <entry>
    <title>设备列表编辑</title>
    <url>/2020/10/5829f4f29e2a.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="dbc11a2e609b909c6841e5e539735a5cf02a476b522800938b5b95586c8d4de8"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>私密</category>
      </categories>
      <tags>
        <tag>info</tag>
        <tag>pmitobj</tag>
        <tag>oid</tag>
        <tag>kind</tag>
        <tag>pmodel</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络</title>
    <url>/2020/09/fb93bcd1e11d.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="d241be53b61479d05bfea9477fec5c0a82047d1b12cf982d6e47a0626050a960"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>cs</category>
      </categories>
      <tags>
        <tag>org</tag>
        <tag>wiki</tag>
        <tag>wikipedia</tag>
        <tag>ethernet</tag>
        <tag>network</tag>
      </tags>
  </entry>
  <entry>
    <title>视频剪辑</title>
    <url>/2021/01/088244356315.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="3cc3ca6b70fdbba2e7475430cca6c600bc349cb43589c4cc154e2be156221ff4"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>私密</category>
      </categories>
      <tags>
        <tag>cstring</tag>
        <tag>module</tag>
        <tag>loadstring</tag>
        <tag>ids</tag>
        <tag>str</tag>
      </tags>
  </entry>
  <entry>
    <title>OS3pieces读书笔记</title>
    <url>/2022/06/b17e0aa0b323.html</url>
    <content><![CDATA[<blockquote>

</blockquote>
<span id="more"></span>
<h1 id="virtualize">virtualize</h1>
<h2 id="process">process</h2>
<h3 id="process-a-running-program">process: a running program</h3>
<ul>
<li>APIs
<ul>
<li>create: load-&gt;stack-&gt;heap-&gt;relate IO-&gt;start main</li>
<li>fork: copy parent process returns parent? pid_of_children : 0</li>
<li>wait parent wait for children</li>
<li>exec execution</li>
</ul></li>
<li>status: running ready wait</li>
<li>data structures: process list, struct proc</li>
</ul>
<p>machine state: memory, registers</p>
<h3 id="limited-direct-execution">limited direct execution</h3>
<ul>
<li>user mode, kernel mode, system call, trap(system call contains a trap instruction)</li>
<li>switch
<ul>
<li>wait for system calls</li>
<li>a timer</li>
</ul></li>
</ul>
<h3 id="schedule">schedule</h3>
<p>T<sub>turnaround</sub> = T<sub>completion</sub> - T<sub>arrival</sub></p>
<p>T<sub>response</sub> = T<sub>firstrun</sub> - T<sub>arrival</sub></p>
<ul>
<li>FIFO/FCFS convoy effect bad</li>
<li>SJF 当任务不是同时发生时 bad</li>
<li>STCF/PSJF preempt</li>
<li>RR time-slicing</li>
<li>MLFQ 多级反馈队列
<ul>
<li>Rule 1: If Priority(A) &gt; Priority(B), A runs (B doesn’t).</li>
<li>Rule 2: If Priority(A) = Priority(B), A &amp; B run in RR.</li>
<li>Rule 3: When a job enters the system, it is placed at the highest priority (the topmost queue).</li>
<li>Rule 4: Once a job uses up its time allotment at a given level (regardless of how many times it has given up the CPU), its priority is reduced (i.e., it moves down one queue).</li>
<li>Rule 5: After some time period S, move all the jobs in the system to the topmost queue.</li>
</ul></li>
<li>lottery: counter and ticket</li>
<li>stride: take a stride and increase pass value</li>
</ul>
<h2 id="memory">memory</h2>
<blockquote>
<p>every address generated by a user program is a virtual address</p>
<p>eg. 打印出来的都是虚拟地址<img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h3211p9vj7j20ps07kdgi.jpg" alt="截屏2022-06-09 15.32.54" /></p>
<p>location of code : 0x1095afe50 location of heap : 0x1096008c0 location of stack : 0x7fff691aea64</p>
</blockquote>
<p>address space: code, stack, heap, other(statically-initialized var)</p>
<ul>
<li>memory API
<ul>
<li>malloc: 参数 size_t, 表示分配的字节数 注意 strlen(s)+1</li>
<li>free: 参数必须是 malloc 返回的指针</li>
<li>常见错误</li>
</ul></li>
</ul>
<p>address translation: from va to pa</p>
<ul>
<li>dynamic relocation(by hardware): runtime
<ul>
<li>base and bound in MMU(memory management unit) base: calculate pa bouds: protection, saves size <em>or</em> pa of end</li>
</ul></li>
<li>static relocation(by software, before dynamic relocation): loader
<ul>
<li>rewrite addresses, no protection</li>
</ul></li>
</ul>
<h3 id="segementation-分段">segementation 分段</h3>
<p>different sections can have different base and bound</p>
<ul>
<li>va translation: va-&gt; segment + offset</li>
<li>stack grow backwards: add a <strong>bit</strong> to identify grow positive or not</li>
<li>protection: add permission bits</li>
<li>空间浪费
<ul>
<li>internal fragment: segment 内部</li>
<li>external fragment: segment 之间, 主要原因是段的大小不一样 选用合适的 free-list 算法 free-space need coalescing(合并) allocator add <strong>header block</strong> before a allocated region, which contains the size (explain why free() dont need size arg)
<ul>
<li>fit 算法:
<ul>
<li>best fit</li>
<li>worst fit</li>
<li>first fit</li>
<li>next fit</li>
<li>segregated lists</li>
<li>buddy allocation 2<sup>N</sup> easy to coalescing</li>
</ul></li>
</ul></li>
</ul></li>
</ul>
<h3 id="paging-fixed-sized-segment-分页">paging: fixed-sized segment 分页</h3>
<p>page for virtual, page frame for physical</p>
<ul>
<li><p>page table: per-process data structure, stored in memory va-&gt; virtual page number + offset vpn--virtual page table--&gt; page frame number pa -&gt; pfn + offset</p>
<p>indexed by vpn <img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h35ihvn8stj20qi03mjrj.jpg" alt="page table entry (PTE)" /></p></li>
</ul>
<p>translation lookaside buffer TLB: in mmu, just a cache</p>
<ul>
<li>先更新 tlb, 再查询 tlb</li>
<li>结构: vpn pfn flag_bits asid(pid)</li>
</ul>
<p>too much tables!</p>
<ul>
<li><p>bigger pages: internal fragment, mostly page size is 4KB</p></li>
<li><p>paging and segment: table for segment, 不需要再记录 invalid entry, 从而减少page tables大小</p></li>
<li><p>多级分页表 <img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h35ixabi99j20t40i0gnm.jpg" alt="截屏2022-06-12 16.08.08" /></p>
<p>va tanslation <img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h35iy18xscj20kq04umx9.jpg" alt="截屏2022-06-12 16.08.53" /></p></li>
</ul>
<h3 id="page-fault">page fault</h3>
<p>OS(sfotware!): page fault handler</p>
<p>TLB -&gt; not hit -&gt; page table register -&gt; page table -(swap space)-&gt; PTE -&gt; PFN -&gt; PA</p>
<p>swap darmon: high watermark, low watermark</p>
<h3 id="page-out">page out</h3>
<p>average memory access time(AMAT)</p>
<ul>
<li><p>FIFO: simple</p></li>
<li><p>random: simple</p></li>
<li><p>LRU(least recently used): not good when big loop</p>
<ul>
<li><p>approximating LRU</p>
<p>当一个 page 被使用时, use bit = 1 clock hand: 当page out 时, 查看当前指向的 page, 如果 use bit == 1, set page bit = 0, move on 如果 use bit == 0, page out</p></li>
</ul></li>
</ul>
<p>dirty bit: 应该优先 page out clean page 而不是 dirty page</p>
<p>clustering grouping</p>
<p>page0 is invalid, explain null pointer</p>
<p>COW(copy on write): when copy, read: address, write: copy</p>
<h3 id="lru">LRU</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LRUCache</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">LRUCache</span>(<span class="type">int</span> capacity) : <span class="built_in">cap</span>(capacity) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (map.<span class="built_in">find</span>(key) == map.<span class="built_in">end</span>()) 	</span><br><span class="line">          <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">auto</span> key_value = *map[key];</span><br><span class="line">        cache.<span class="built_in">erase</span>(map[key]);</span><br><span class="line">        cache.<span class="built_in">push_front</span>(key_value);</span><br><span class="line">        map[key] = cache.<span class="built_in">begin</span>();</span><br><span class="line">        <span class="keyword">return</span> key_value.second;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">put</span><span class="params">(<span class="type">int</span> key, <span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (map.<span class="built_in">find</span>(key) == map.<span class="built_in">end</span>()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cache.<span class="built_in">size</span>() == cap) &#123;</span><br><span class="line">              map.<span class="built_in">erase</span>(cache.<span class="built_in">back</span>().first);</span><br><span class="line">              cache.<span class="built_in">pop_back</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            cache.<span class="built_in">erase</span>(map[key]);</span><br><span class="line">        &#125;</span><br><span class="line">        cache.<span class="built_in">push_front</span>(&#123;key, value&#125;);</span><br><span class="line">        map[key] = cache.<span class="built_in">begin</span>();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> cap;</span><br><span class="line">    list&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; cache;</span><br><span class="line">    unordered_map&lt;<span class="type">int</span>, list&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt;::iterator&gt; map;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="lfu">LFU</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">int</span> cnt, time, key, value;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Node</span>(<span class="type">int</span> _cnt, <span class="type">int</span> _time, <span class="type">int</span> _key, <span class="type">int</span> _value): <span class="built_in">cnt</span>(_cnt), <span class="built_in">time</span>(_time), <span class="built_in">key</span>(_key), <span class="built_in">value</span>(_value) &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> Node&amp; rhs) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> cnt == rhs.cnt ? time &lt; rhs.time : cnt &lt; rhs.cnt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LFUCache</span> &#123;</span><br><span class="line">    <span class="comment">// 缓存容量，时间戳</span></span><br><span class="line">    <span class="type">int</span> capacity, time;</span><br><span class="line">    unordered_map&lt;<span class="type">int</span>, Node&gt; key_table;</span><br><span class="line">    set&lt;Node&gt; S;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">LFUCache</span>(<span class="type">int</span> _capacity) &#123;</span><br><span class="line">        capacity = _capacity;</span><br><span class="line">        time = <span class="number">0</span>;</span><br><span class="line">        key_table.<span class="built_in">clear</span>();</span><br><span class="line">        S.<span class="built_in">clear</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> it = key_table.<span class="built_in">find</span>(key);</span><br><span class="line">        <span class="keyword">if</span> (it == key_table.<span class="built_in">end</span>()) </span><br><span class="line">          <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">        Node cache = it -&gt; second;</span><br><span class="line">        S.<span class="built_in">erase</span>(cache);</span><br><span class="line"></span><br><span class="line">        cache.cnt += <span class="number">1</span>;</span><br><span class="line">        cache.time = ++time;</span><br><span class="line"></span><br><span class="line">        S.<span class="built_in">insert</span>(cache);</span><br><span class="line">        it -&gt; second = cache;</span><br><span class="line">        <span class="keyword">return</span> cache.value;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">put</span><span class="params">(<span class="type">int</span> key, <span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (capacity == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">auto</span> it = key_table.<span class="built_in">find</span>(key);</span><br><span class="line">        <span class="keyword">if</span> (it == key_table.<span class="built_in">end</span>()) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (key_table.<span class="built_in">size</span>() == capacity) &#123;</span><br><span class="line">                key_table.<span class="built_in">erase</span>(S.<span class="built_in">begin</span>() -&gt; key);</span><br><span class="line">                S.<span class="built_in">erase</span>(S.<span class="built_in">begin</span>());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Node cache = <span class="built_in">Node</span>(<span class="number">1</span>, ++time, key, value);</span><br><span class="line">            key_table.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(key, cache));</span><br><span class="line">            S.<span class="built_in">insert</span>(cache);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            Node cache = it -&gt; second;</span><br><span class="line">            S.<span class="built_in">erase</span>(cache);</span><br><span class="line">            cache.cnt += <span class="number">1</span>;</span><br><span class="line">            cache.time = ++time;</span><br><span class="line">            cache.value = value;</span><br><span class="line">            S.<span class="built_in">insert</span>(cache);</span><br><span class="line">            it -&gt; second = cache;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="concurrency">concurrency</h1>
<h2 id="thread">thread</h2>
<p>thread: share same address space own PC, registers, stack</p>
<p>API</p>
<ul>
<li>```c int pthread_create( pthread_t * thread, const pthread_attr_t * attr,//null void * (<em>start_routine)(void</em>), void * arg); <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- ```c</span><br><span class="line">  int pthread_join(</span><br><span class="line">  pthread_t thread, </span><br><span class="line">  void **value_ptr);//return value</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="lock">lock</h2>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">pthread_mutex_t</span> lock = PTHREAD_MUTEX_INITIALIZER;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> rc = pthread_mutex_init(&amp;lock, <span class="literal">NULL</span>);</span><br><span class="line">assert(rc==<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">Pthread_mutex_lock(<span class="type">pthread_mutex_t</span> *mutex)&#123;</span><br><span class="line">  <span class="type">int</span> rc = pthread_mutex_lock(mutex);</span><br><span class="line">  assert(rc==<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="controlling-interrupts">controlling interrupts</h3>
<p>禁止中断, 适合单处理器系统</p>
<h3 id="test-and-set-atomatic-instruction">test and set atomatic instruction</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">TestAndSet</span><span class="params">(<span class="type">int</span> *ptr, <span class="type">int</span> new)</span>&#123;</span><br><span class="line">  <span class="type">int</span> old = *ptr;</span><br><span class="line">  *ptr = new;</span><br><span class="line">  <span class="keyword">return</span> old;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//testandset 为原子指令</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> __<span class="title">lock_t</span>&#123;</span><span class="type">int</span> flag;&#125; <span class="type">lock_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">init</span><span class="params">(<span class="type">lock_t</span> *lock)</span>&#123;</span><br><span class="line">  lock-&gt;flag = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">lock</span><span class="params">(<span class="type">lock_t</span> *lock)</span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(TestAndSet(&amp;lock-&gt;flag, <span class="number">1</span>) == <span class="number">1</span>)</span><br><span class="line">    ;<span class="comment">//spin</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">unlock</span><span class="params">(<span class="type">lock_t</span> *lock)</span>&#123;</span><br><span class="line">  lock-&gt;flag = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="compare-and-swap">compare and swap</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">CompareAndSwap</span><span class="params">(<span class="type">int</span> *ptr, <span class="type">int</span> expect, <span class="type">int</span> new)</span>&#123;</span><br><span class="line">  <span class="type">int</span> actual = *ptr;</span><br><span class="line">  <span class="keyword">if</span>(actual == expected)</span><br><span class="line">    *ptr = new;</span><br><span class="line">  <span class="keyword">return</span> actual;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">lock</span><span class="params">(<span class="type">lock_t</span> *lock)</span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(CompareAndSwap(&amp;lock-&gt;flag, <span class="number">0</span>, <span class="number">1</span>) == <span class="number">1</span>)</span><br><span class="line">    ;<span class="comment">//spin</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="load-linked-and-store-conditional-llsc">load-linked and store-conditional (LL/SC)</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">LoadLinked</span><span class="params">(<span class="type">int</span> *ptr)</span>&#123;<span class="keyword">return</span> *ptr&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">StoreConditional</span><span class="params">(<span class="type">int</span> *ptr, <span class="type">int</span> value)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(no one has updated *ptr since the LoadLinked to this address)&#123;</span><br><span class="line">    *ptr = value;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">lock</span><span class="params">(<span class="type">lock_t</span> *lock)</span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">while</span>(LoadLinked(&amp;lock-&gt;flag, <span class="number">1</span>) == <span class="number">1</span>)</span><br><span class="line">      ;<span class="comment">//spin</span></span><br><span class="line">    <span class="keyword">if</span>(StoreConditional(&amp;lock-&gt;flag, <span class="number">1</span>) == <span class="number">1</span>)</span><br><span class="line">      <span class="keyword">return</span> ;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="fetch-and-addticket-and-turn">fetch and add(ticket and turn)</h3>
<p>保证公平性</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">FetchAndAdd</span><span class="params">(<span class="type">int</span> *ptr)</span>&#123;</span><br><span class="line">  <span class="type">int</span> old = *ptr;</span><br><span class="line">  *ptr = old+<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> old;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> __<span class="title">lock_t</span>&#123;</span></span><br><span class="line">  <span class="type">int</span> ticket;</span><br><span class="line">  <span class="type">int</span> turn;</span><br><span class="line">&#125; <span class="type">lock_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">lock</span><span class="params">(<span class="type">lock_t</span> *lock)</span>&#123;</span><br><span class="line">  <span class="type">int</span> mytyrn = FetchAndAdd(&amp;lock-&gt;ticket);</span><br><span class="line">  <span class="keyword">while</span>(lock-&gt;turn != myturn)</span><br><span class="line">    ;<span class="comment">//spin</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">unlock</span><span class="params">(<span class="type">lock_t</span> *lock)</span>&#123;</span><br><span class="line">  FetchAndAdd(&amp;lock-&gt;turn);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="yield持续-spinn-导致效率为-1n">yield(持续 spinn 导致效率为 1/N)</h3>
<p><code>yield()</code>放弃 cpu</p>
<h3 id="队列">队列</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> __<span class="title">lock_t</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> flag;</span><br><span class="line">    <span class="type">int</span> guard;</span><br><span class="line">    <span class="type">queue_t</span> *q;</span><br><span class="line">&#125; <span class="type">lock_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">lock_init</span><span class="params">(<span class="type">lock_t</span> *m)</span>&#123;</span><br><span class="line">    m-&gt;flag = <span class="number">0</span>;</span><br><span class="line">    m-&gt;guard = <span class="number">0</span>;</span><br><span class="line">    queue_init(m-&gt;q);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">lock</span><span class="params">(<span class="type">lock_t</span> *m)</span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(TesAndSet(&amp;m-&gt;guard, <span class="number">1</span>) == <span class="number">1</span>)</span><br><span class="line">    ;<span class="comment">//spin</span></span><br><span class="line">    <span class="keyword">if</span>(m-&gt;flag == <span class="number">0</span>)&#123;</span><br><span class="line">        m-&gt;flag = <span class="number">1</span>;</span><br><span class="line">        m-&gt;guard = <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        queue_add(m-&gt;q, gettid());</span><br><span class="line">     	  setpark();<span class="comment">//put thread to sleep</span></span><br><span class="line">      	<span class="comment">//If another thread calls unpark before park is actually called, the subsequent park returns immediately instead of sleeping</span></span><br><span class="line">        m-&gt;guard = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">unlock</span><span class="params">(<span class="type">lock_t</span> *m)</span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(TesAndSet(&amp;m-&gt;guard, <span class="number">1</span>) == <span class="number">1</span>)</span><br><span class="line">    ;<span class="comment">//spin</span></span><br><span class="line">    <span class="keyword">if</span>(queue_empty(m-&gt;q))</span><br><span class="line">        m-&gt;flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        unpark(queue_remove(m-&gt;q));</span><br><span class="line">    m-&gt;guard = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="two-phase-locks">two-phase locks</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">mutex_lock</span><span class="params">(<span class="type">int</span> *mutex)</span>&#123;</span><br><span class="line">    <span class="type">int</span> v;</span><br><span class="line">    <span class="keyword">if</span>(atomic_bit_test_and_set(mutex, <span class="number">31</span>) == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    atomic_increment(mutex);</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(atomic_bit_test_and_set(mutex, <span class="number">31</span>)==<span class="number">0</span>)&#123;</span><br><span class="line">            atomic_decrement(mutex);</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        v = *mutex;</span><br><span class="line">        <span class="keyword">if</span>(v&gt;=<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        futex_wait(mutex, v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">mutex_unlock</span> <span class="params">(<span class="type">int</span> *mutex)</span> &#123;</span><br><span class="line">    <span class="comment">/* Adding 0x80000000 to the counter results</span></span><br><span class="line"><span class="comment">    there are not other interested threads */</span> </span><br><span class="line">    <span class="keyword">if</span> (atomic_add_zero (mutex, <span class="number">0x80000000</span>))</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">/* There are other threads waiting for this wake one of them up. */</span></span><br><span class="line">    futex_wake (mutex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="lock-based-data-structure">lock based data structure</h2>
<p>thread safe</p>
<h3 id="counter">counter</h3>
<p>sloppy counter</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> __<span class="title">counter_t</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> global;</span><br><span class="line">    <span class="type">pthread_mutex_t</span> glock;</span><br><span class="line">    <span class="type">int</span> local[NUMCPUS];</span><br><span class="line">    <span class="type">pthread_mutex_t</span> llock[NUMCPUS];</span><br><span class="line">    <span class="type">int</span> threshold;</span><br><span class="line">&#125; <span class="type">counter_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">init</span><span class="params">(<span class="type">counter_t</span> *c, <span class="type">int</span> threshold)</span>&#123;</span><br><span class="line">    c-&gt;threshold = threshold;</span><br><span class="line">    c-&gt;global = <span class="number">0</span>;</span><br><span class="line">    pthread_mutex_init(&amp;c-&gt;glock, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;NUMCPUS; i++)&#123;</span><br><span class="line">        c-&gt;local[i] = <span class="number">0</span>;</span><br><span class="line">        pthread_mutex_init(&amp;c-&gt;llock[i], <span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">update</span><span class="params">(<span class="type">counter_t</span> *c, <span class="type">int</span> threadID, <span class="type">int</span> amt)</span>&#123;</span><br><span class="line">    <span class="comment">//amt amount</span></span><br><span class="line">    pthread_mutex_lock(&amp;c-&gt;llock[threadID]);</span><br><span class="line">    c-&gt;local[threadID] += amt;</span><br><span class="line">    <span class="keyword">if</span>(c-&gt;local[threadID] &gt;= c-&gt;threshold)&#123;</span><br><span class="line">        pthread_mutex_lock(&amp;c-&gt;glock);</span><br><span class="line">        c-&gt;global += c-&gt;local[threadID];</span><br><span class="line">        pthread_mutex_unlock(&amp;c-&gt;glock);</span><br><span class="line">        c-&gt;local[threadID] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    pthread_mutex_unlock(&amp;c-&gt;llock[threadID]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">get</span><span class="params">(<span class="type">counter_t</span> *c)</span>&#123;</span><br><span class="line">    pthread_mutex_lock(&amp;c-&gt;glock);</span><br><span class="line">    <span class="type">int</span> val = c-&gt;global;</span><br><span class="line">    pthread_mutex_unlock(&amp;c-&gt;glock);</span><br><span class="line">    <span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>关键在于 threshold 值</p>
<p>s=1 即为无 sloppy lock</p>
<h3 id="linked-list">linked list</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> __<span class="title">node_t</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> key;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> __<span class="title">node_t</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; <span class="type">node_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> __<span class="title">list_t</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">node_t</span> *head;</span><br><span class="line">    <span class="type">pthread_mutex_t</span> lock;</span><br><span class="line">&#125;<span class="type">list_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">List_Init</span><span class="params">(<span class="type">list_t</span> *l)</span>&#123;</span><br><span class="line">    l-&gt;head = <span class="literal">NULL</span>;</span><br><span class="line">    pthread_mutex_init(&amp;l-&gt;lock, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">List_Insert</span><span class="params">(<span class="type">list_t</span> *l, <span class="type">int</span> key)</span>&#123;</span><br><span class="line">    <span class="type">node_t</span> *new = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">node_t</span>));</span><br><span class="line">    <span class="keyword">if</span>(new==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        perror(<span class="string">&quot;malloc&quot;</span>);</span><br><span class="line">        pthread_mutex_unlock(&amp;l-&gt;lock);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    new-&gt;key = key;</span><br><span class="line">  	</span><br><span class="line">  	pthread_mutex_lock(&amp;l-&gt;lock);</span><br><span class="line">    new-&gt;next = l-&gt;head;</span><br><span class="line">    l-&gt;head = new;</span><br><span class="line">    pthread_mutex_unlock(&amp;l-&gt;lock);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">List_Lookup</span><span class="params">(<span class="type">list_t</span> *l, <span class="type">int</span> key)</span>&#123;</span><br><span class="line">  	<span class="type">int</span> rv = <span class="number">-1</span>;</span><br><span class="line">    pthread_mutex_lock(&amp;l-&gt;lock);</span><br><span class="line">    <span class="type">node_t</span> *curr = l-&gt;head;</span><br><span class="line">    <span class="keyword">while</span>(curr)&#123;</span><br><span class="line">        <span class="keyword">if</span>(curr-&gt;key == key)&#123;</span><br><span class="line">            rv=<span class="number">0</span>;</span><br><span class="line">						<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        curr = curr-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    pthread_mutex_unlock(&amp;l-&gt;lock);</span><br><span class="line">    <span class="keyword">return</span> rv;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="queue">queue</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> __<span class="title">node_t</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> value;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> __<span class="title">node_t</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; <span class="type">node_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> __<span class="title">queue_t</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">node_t</span> *head;</span><br><span class="line">    <span class="type">node_t</span> *tail;</span><br><span class="line">    <span class="type">pthread_mutex_t</span> head_lock;</span><br><span class="line">    <span class="type">pthread_mutex_t</span> tail_lock;</span><br><span class="line">&#125;<span class="type">queue_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Queue_Init</span><span class="params">(<span class="type">queue_t</span> *q)</span>&#123;</span><br><span class="line">    <span class="type">node_t</span> *tmp = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">node_t</span>));</span><br><span class="line">    tmp-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    q-&gt;head = q-&gt;tail = tmp;</span><br><span class="line">    pthread_mutex_init(&amp;q-&gt;head_lock, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_mutex_init(&amp;q-&gt;tail_lock, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Queue_Enqueue</span><span class="params">(<span class="type">queue_t</span> *q, <span class="type">int</span> value)</span>&#123;</span><br><span class="line">    <span class="type">node_t</span> *tmp = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">node_t</span>));</span><br><span class="line">    assert(tmp!=<span class="literal">NULL</span>);</span><br><span class="line">    tmp-&gt;value = value;</span><br><span class="line">    tmp-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    pthread_mutex_lock(&amp;q-&gt;tail_lock);</span><br><span class="line">    q-&gt;tail-&gt;next = tmp;</span><br><span class="line">    q-&gt;tail = tmp;</span><br><span class="line">    pthread_mutex_unlock(&amp;q-&gt;tail_lock);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">Queue_Dequeue</span><span class="params">(<span class="type">queue_t</span> *q, <span class="type">int</span> *value)</span>&#123;</span><br><span class="line">    pthread_mutex_lock(&amp;q-&gt;head_lock);</span><br><span class="line">    <span class="type">node_t</span> *tmp = q-&gt;head;</span><br><span class="line">    <span class="type">node_t</span> *new_head = tmp-&gt;next;</span><br><span class="line">    <span class="keyword">if</span>(new_head == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        pthread_mutex_unlock(&amp;q-&gt;head_lock);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    *value = new_head-&gt;value;</span><br><span class="line">    q-&gt;head = new_head;</span><br><span class="line">    pthread_mutex_unlock(&amp;q-&gt;head_lock);</span><br><span class="line">    <span class="built_in">free</span>(tmp);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="hash-table">hash table</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> BUCKETS 101</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> __<span class="title">hash_t</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">list_t</span> lists[BUCKETS];</span><br><span class="line">&#125;<span class="type">hash_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">hash_init</span><span class="params">(<span class="type">hash_t</span> *h)</span>&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;BUCKETS; i++)</span><br><span class="line">        List_Init(&amp;h-&gt;lists[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">hash_insert</span><span class="params">(<span class="type">hash_t</span> *h, <span class="type">int</span> key)</span>&#123;</span><br><span class="line">    <span class="type">int</span> bucket = key%BUCKETS;</span><br><span class="line">    <span class="keyword">return</span> List_Insert(&amp;h-&gt;lists[bucket], key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">hash_lookup</span><span class="params">(<span class="type">hash_t</span> *h, <span class="type">int</span> key)</span>&#123;</span><br><span class="line">    <span class="type">int</span> bucket = key%BUCKETS;</span><br><span class="line">    <span class="keyword">return</span> List_Lookup(&amp;h-&gt;lists[bucket], key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="condition-variables">condition variables</h2>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> done = <span class="number">0</span>;</span><br><span class="line"><span class="type">pthread_mutex_t</span> m = PTHREAD_MUTEX_INITIALIZER;</span><br><span class="line"><span class="type">pthread_cond_t</span> c = PTHREAD_COND_INITIALIZER;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">thr_exit</span><span class="params">()</span>&#123;</span><br><span class="line">    pthread_mutex_lock(&amp;m);</span><br><span class="line">    done = <span class="number">1</span>;</span><br><span class="line">    pthread_cond_signal(&amp;c);</span><br><span class="line">    pthread_mutex_unlock(&amp;m);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">child</span><span class="params">(<span class="type">void</span> *arg)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;child\n&quot;</span>);</span><br><span class="line">    thr_exit();</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">thr_join</span><span class="params">()</span>&#123;</span><br><span class="line">    pthread_mutex_lock(&amp;m);</span><br><span class="line">    <span class="keyword">while</span>(done == <span class="number">0</span>)</span><br><span class="line">        pthread_cond_wait(&amp;c, &amp;m);</span><br><span class="line">    pthread_mutex_unlock(&amp;m);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;parent beigin\n&quot;</span>);</span><br><span class="line">    <span class="type">pthread_t</span> p;</span><br><span class="line">    pthread_create(&amp;p, <span class="literal">NULL</span>, child, <span class="literal">NULL</span>);</span><br><span class="line">    thr_join();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;parent end\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Pthread_cond_wait: put sleep, release lock, when return acquire lock</p>
<h3 id="生产者消费者模型">生产者消费者模型</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MAX 10</span></span><br><span class="line"><span class="type">int</span> buffer[MAX];</span><br><span class="line"><span class="type">int</span> fill = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> use = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">put</span><span class="params">(<span class="type">int</span> value)</span>&#123;</span><br><span class="line">    buffer[fill] = value;</span><br><span class="line">    fill = (fill+<span class="number">1</span>)%MAX;</span><br><span class="line">    count++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">get</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> tmp = buffer[use];</span><br><span class="line">    use = (use+<span class="number">1</span>)%MAX;</span><br><span class="line">    count--;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">cond_t</span> empty, fill;</span><br><span class="line"><span class="type">mutux_t</span> m;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">producer</span><span class="params">(<span class="type">void</span> *arg)</span>&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;loops; i++)&#123;</span><br><span class="line">        pthread_mutex_lock(&amp;m);</span><br><span class="line">        <span class="keyword">while</span>(count == MAX)</span><br><span class="line">            pthread_cond_wait(&amp;empty, &amp;m);</span><br><span class="line">        put(i);</span><br><span class="line">        pthread_cond_signal(&amp;fill);</span><br><span class="line">        pthread_mutex_unlock(&amp;m);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">consumer</span><span class="params">(<span class="type">void</span> *arg)</span>&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;loops; i++)&#123;</span><br><span class="line">        pthread_mutex_lock(&amp;m);</span><br><span class="line">        <span class="keyword">while</span>(count==<span class="number">0</span>)</span><br><span class="line">            pthread_cond_wait(&amp;fill, &amp;m);</span><br><span class="line">        <span class="type">int</span> tmp = get();</span><br><span class="line">        pthread_cond_signal(&amp;empty);</span><br><span class="line">        pthread_mutex_unlock(&amp;m);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, tmp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="semaphores-信号量">semaphores 信号量</h2>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;semaphore.h&gt;</span></span></span><br><span class="line"><span class="type">sem_t</span> s;</span><br><span class="line">sem_init(&amp;s, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line"><span class="comment">//arg1 semaphore, arg2 flags usually null, arg3 initial value</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">sem_wait</span><span class="params">(<span class="type">sem_t</span> s)</span>&#123;</span><br><span class="line">  <span class="comment">//decrement</span></span><br><span class="line">  <span class="comment">//sem &gt;= 0 return</span></span><br><span class="line">  <span class="comment">//else wait</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">sem_post</span><span class="params">(<span class="type">sem_t</span> s)</span>&#123;</span><br><span class="line">  <span class="comment">//increment</span></span><br><span class="line">  <span class="comment">//wake sleep threads</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="binary-semaphores-lock">binary semaphores: lock</h4>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">sem_t</span> s;</span><br><span class="line">sem_init(&amp;s, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">sem_wait(&amp;s);</span><br><span class="line"><span class="comment">//critical section</span></span><br><span class="line">sem_post(&amp;s);</span><br></pre></td></tr></table></figure>
<p>注意初始化为 1</p>
<h4 id="as-condition-variables">as condition variables</h4>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">sem_t</span> s;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span>* <span class="title function_">child</span><span class="params">(<span class="type">void</span> *arg)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;child\n&quot;</span>);</span><br><span class="line">    sem_post(&amp;s);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span>&#123;</span><br><span class="line">    sem_init(&amp;s, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;parent begin\n&quot;</span>);</span><br><span class="line">    <span class="type">pthread_t</span> c;</span><br><span class="line">    pthread_create(c, <span class="literal">NULL</span>, child, <span class="literal">NULL</span>);</span><br><span class="line">    sem_wait(&amp;s);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;parent end\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意初始化为 0</p>
<h4 id="生产者消费者">生产者消费者</h4>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MAX 10</span></span><br><span class="line"><span class="type">int</span> buffer[MAX];</span><br><span class="line"><span class="type">int</span> fill = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> use = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">put</span><span class="params">(<span class="type">int</span> value)</span>&#123;</span><br><span class="line">    buffer[fill] = value;</span><br><span class="line">    fill = (fill+<span class="number">1</span>)%MAX;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">get</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> tmp = buffer[use];</span><br><span class="line">    use = (use+<span class="number">1</span>)%MAX;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">sem_t</span> empty;<span class="comment">//MAX</span></span><br><span class="line"><span class="type">sem_t</span> full;<span class="comment">//0</span></span><br><span class="line"><span class="type">sem_t</span> mutex;<span class="comment">//1</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">producer</span><span class="params">(<span class="type">void</span> *arg)</span>&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;loops; i++)&#123;</span><br><span class="line">        sem_wait(&amp;empty);</span><br><span class="line">        sem_wait(&amp;mutex);</span><br><span class="line">        put(i);</span><br><span class="line">        sem_post(&amp;mutex);</span><br><span class="line">        sem_post(&amp;full)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">consumer</span><span class="params">(<span class="type">void</span> *arg)</span>&#123;</span><br><span class="line">    <span class="type">int</span> i, tmp=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (tmp!=<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        sem_wait(&amp;full);</span><br><span class="line">        sem_wait(&amp;mutex);</span><br><span class="line">        tmp = get();</span><br><span class="line">        sem_post(&amp;mutex);</span><br><span class="line">        sem_post(&amp;empty);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, tmp);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span>&#123;</span><br><span class="line">    sem_init(&amp;empty, <span class="number">0</span>, MAX);</span><br><span class="line">    sem_init(&amp;full, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    sem_init(&amp;mutex, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="读写锁">读写锁</h4>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> __<span class="title">rwlock_t</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">sem_t</span> lock;</span><br><span class="line">    <span class="type">sem_t</span> writelock;</span><br><span class="line">    <span class="type">int</span> readers;</span><br><span class="line">&#125;<span class="type">rwlock_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">rwlock_init</span><span class="params">(<span class="type">rwlock_t</span> *rw)</span>&#123;</span><br><span class="line">    rw-&gt;readers = <span class="number">0</span>;</span><br><span class="line">    sem_init(&amp;rw-&gt;lock, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    sem_init(&amp;rw-&gt;writelock, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">rwlock_acquire_readlock</span><span class="params">(<span class="type">rwlock_t</span> *rw)</span>&#123;</span><br><span class="line">    sem_wait(&amp;rw-&gt;lock);</span><br><span class="line">    rw-&gt;readers++;</span><br><span class="line">    <span class="keyword">if</span>(rw-&gt;readers == <span class="number">1</span>)</span><br><span class="line">        sem_wait(&amp;rw-&gt;writelock);</span><br><span class="line">    sem_post(&amp;rw-&gt;lock);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">rwlock_release_readlock</span><span class="params">(<span class="type">rwlock_t</span> *rw)</span>&#123;</span><br><span class="line">    sem_wait(&amp;rw-&gt;lock);</span><br><span class="line">    rw-&gt;readers--;</span><br><span class="line">    <span class="keyword">if</span>(rw-&gt;readers == <span class="number">0</span>)</span><br><span class="line">        sem_post(&amp;rw-&gt;writelock);</span><br><span class="line">    sem_post(&amp;rw-&gt;lock);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">rwlock_acquire_writelock</span><span class="params">(<span class="type">rwlock_t</span> *rw)</span>&#123;</span><br><span class="line">    sem_wait(&amp;rw-&gt;writelock);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">rwlock_release_writelock</span><span class="params">(<span class="type">rwlock_t</span> *rw)</span>&#123;</span><br><span class="line">    sem_post(&amp;rw-&gt;writelock);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="dining-philosophers">dining philosophers</h4>
<h2 id="common-problems">common problems</h2>
<ul>
<li>非死锁
<ul>
<li>违反原子性</li>
<li>违反顺序性(状态量)</li>
</ul></li>
<li>死锁
<ul>
<li>mutual exclusion
<ul>
<li>atomic operation</li>
</ul></li>
<li>hold and wait
<ul>
<li>acquiring all locks at once, atomically</li>
</ul></li>
<li>no preemption
<ul>
<li>repeat trying</li>
</ul></li>
<li>circular wait
<ul>
<li>always acquiring l1 before l2</li>
</ul></li>
</ul></li>
</ul>
<h2 id="基于事件的并发">基于事件的并发</h2>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">select</span> <span class="params">(<span class="type">int</span> nfds, <span class="comment">//number of file descriptions</span></span></span><br><span class="line"><span class="params">            fd_set *<span class="keyword">restrict</span> readfds,</span></span><br><span class="line"><span class="params">            fd_set *<span class="keyword">restrict</span> writefds,</span></span><br><span class="line"><span class="params">            fd_set *<span class="keyword">restrict</span> errorfds,</span></span><br><span class="line"><span class="params">            <span class="keyword">struct</span> timeval *<span class="keyword">restrict</span> timeout)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">    fd_set readFDs;</span><br><span class="line">    FD_ZERO(&amp;readFDs);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> fd;</span><br><span class="line">    <span class="keyword">for</span>(fd=minFD; fd&lt;maxFD; fd++)</span><br><span class="line">      FD_SET(fd, &amp;readFDs);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> rc = select(maxFD+<span class="number">1</span>, &amp;readFDs, null, null, null);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> fd;</span><br><span class="line">    <span class="keyword">for</span>(fd=minFD; fd&lt;maxFD; fd++)</span><br><span class="line">      <span class="keyword">if</span>(FD_ISSET(fd, &amp;readFDs))</span><br><span class="line">        processFD(fd);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="异步-ioasynchronous-io">异步 io(asynchronous io)</h3>
<p>AIO control block</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">aiocb</span> &#123;</span> </span><br><span class="line">  <span class="type">int</span> aio_fildes; <span class="comment">/* File descriptor */</span> </span><br><span class="line">  <span class="type">off_t</span> aio_offset; <span class="comment">/* File offset */</span> </span><br><span class="line">  <span class="keyword">volatile</span> <span class="type">void</span> * aio_buf； <span class="comment">/* Location of buffer */</span> </span><br><span class="line">  <span class="type">size_t</span> aio_nbytes; <span class="comment">/* Length of transfer */</span> &#125;;</span><br></pre></td></tr></table></figure>
<h1 id="persistence">persistence</h1>
<p>##IO device</p>
<p>register: status, command, data</p>
<p>PIO: programmed io(main cpu is involved in data movement)</p>
<p>use interrupt to avoid spin(device fast: poll, device slow: interrupt)</p>
<h3 id="dmadirect-memory-access">DMA(direct memory access)</h3>
<h3 id="device-communication">device communication</h3>
<p>IO instruction</p>
<p>memory mapped io</p>
<h3 id="device-driver">device driver</h3>
<h2 id="hard-disk-drives">hard disk drives</h2>
<h3 id="interface">interface</h3>
<p>platter 硬盘的一个面</p>
<p>spindle 旋转中心RPM(rotations per minute 7200-15000)</p>
<p>track 一个圈</p>
<p>sector track 的一部分(扇形)512B</p>
<p>disk arm disk head 读写探针, one per surface</p>
<h3 id="how-to-io">how to io</h3>
<ol type="1">
<li>move to track (seek time)</li>
<li>move to sector(rotational delay)</li>
</ol>
<p>track buffer(cache)</p>
<h4 id="when-writing">when writing</h4>
<ul>
<li>write back caching</li>
<li>write through</li>
</ul>
<h3 id="disk-scheduling">disk scheduling</h3>
<ul>
<li>SSTF(shortest seek time first)</li>
<li>elevator(scan)
<ul>
<li>F-SCAN, freezed queue when doing a sweep</li>
<li>C-SCAN, circular scan, the algorithm sweeps from outer-to-inner, and then inner-to-outer, etc</li>
</ul></li>
<li>SPTF(shortest positioning time first, SATF, shortest access time first)</li>
</ul>
<h2 id="raidsredundant-arrays-of-inexpensive-disks">RAIDs(redundant arrays of inexpensive disks)</h2>
<p>指标: capacity, reliability, performance</p>
<h3 id="raids-0-striping">raids 0: striping</h3>
<p>无备份, 全平行</p>
<p>sequencial read NS</p>
<p>sequencial write NS</p>
<p>random read NR</p>
<p>random wirte NR</p>
<figure>
<img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h6c7p2fje4j20qy070wf0.jpg" alt="截屏2022-09-19 20.59.36" /><figcaption aria-hidden="true">截屏2022-09-19 20.59.36</figcaption>
</figure>
<h3 id="raids-1-mirroring">raids 1: mirroring</h3>
<p>raid10 and raid01</p>
<p>sequencial read NS/2</p>
<p>sequencial write NS/2</p>
<p>random read NR</p>
<p>random wirte NR/2</p>
<p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h6c7reblzgj20ak0h8aau.jpg" alt="截屏2022-09-19 21.01.50" style="zoom:33%;" /></p>
<h2 id="raids4-奇偶校验">raids4 奇偶校验</h2>
<p>sequencial read S(N-1)</p>
<p>sequencial write S(N-1)</p>
<p>random read R(N-1)</p>
<p>random wirte R/2</p>
<figure>
<img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h6c7yphl70j20ie06q3yo.jpg" alt="截屏2022-09-19 21.08.52" /><figcaption aria-hidden="true">截屏2022-09-19 21.08.52</figcaption>
</figure>
<h2 id="raid-5-循环奇偶校验">raid 5 循环奇偶校验</h2>
<figure>
<img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h6c80ryadrj20jo07uglv.jpg" alt="截屏2022-09-19 21.10.54" /><figcaption aria-hidden="true">截屏2022-09-19 21.10.54</figcaption>
</figure>
<figure>
<img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h6c813n1ogj20ya0dm408.jpg" alt="截屏2022-09-19 21.11.12" /><figcaption aria-hidden="true">截屏2022-09-19 21.11.12</figcaption>
</figure>
<h2 id="file-and-directories">file and directories</h2>
<p>inode number --&gt; low-level name</p>
<p>file descripter</p>
<p>standard input, output, error</p>
<h3 id="link">link</h3>
<h4 id="hard-link">hard link</h4>
<p>The way link works is that it simply creates another name in the directory you are creating the link to, and refers it to the same inode number</p>
<p>reference count</p>
<p>only file, cannot dir</p>
<p>only existed file</p>
<h4 id="symbolic-link">symbolic link</h4>
<p>hold path name</p>
<h2 id="file-system">file system</h2>
<p>block: 4K</p>
<p>inode(index node): 256B</p>
<p>free list</p>
<p>inode bitmap, data bitmap</p>
<p>indirect pointer</p>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>int</tag>
        <tag>node</tag>
        <tag>mutex</tag>
        <tag>lock</tag>
        <tag>key</tag>
      </tags>
  </entry>
  <entry>
    <title>beginning-database-design读书笔记</title>
    <url>/2022/11/f839b2a889ed.html</url>
    <content><![CDATA[<blockquote>

</blockquote>
<span id="more"></span>
<h1 id="chapter-2-guided-tour-of-the-development-process">Chapter 2: Guided Tour of the Development Process</h1>
<p>用用例(use case)抽象出模型</p>
<ul>
<li>类</li>
<li>关系</li>
</ul>
<p>For data retrieval or reporting tasks, ask questions about <strong>which attributes might be used for sorting, grouping, or selecting data.(or mis-spell)</strong> These attributes may be candidates for additional classes.</p>
<ol type="1">
<li>Express the problem in terms of what a user might want to achieve. For a database problem, this will typically be in terms of the data to be stored and the information that needs to be retrieved. Sketch some <strong>initial use cases and a data model</strong>.</li>
<li><strong>Think about other possible uses of the information and how the data might be usefully ordered or grouped.</strong> Undertake an iterative analysis process of reconsidering the data model and the use cases, until you are satisfied that you have a complete and precise understanding of the problem. For larger problems, this stage may include making some simplifying or other pragmatic choices. The bulk of this book will concentrate on this phase of the process.</li>
<li>Choose the type of product to manage the data and create an appropriate design. <strong>For a relational database, this will involve designing tables, keys, and foreign keys.</strong> Different structures will be required if the project is to be implemented in some other type of product such as a programming language or a spreadsheet. The design phase is discussed more fully in Chapters 7 to Chapter 9.</li>
<li>Build the application. For a relational database, this will include setting up the tables and developing forms and reports to satisfy the use cases. The mechanics of how to do this in any particular product is outside the scope of this book, but there are numerous how–to books available that will help you.</li>
</ol>
<h1 id="chapter-3-initial-requirements-and-use-cases">Chapter 3: Initial Requirements and Use Cases</h1>
<p>steps:</p>
<ul>
<li>What does the user do?</li>
<li>What data are involved?</li>
<li>What is the main objective(主体) of the system?</li>
<li>What data are needed to satisfy this objective?(明确系统的范围)</li>
<li>What are the input(maintain) use cases?</li>
<li>What is the first data model?</li>
<li>What are the output use cases?</li>
</ul>
<h1 id="chapter-4-learning-from-the-data-model">Chapter 4: Learning from the Data Model</h1>
<p>questions:</p>
<ul>
<li><p><strong>Optionality:</strong> Should it be 0 or 1?</p></li>
<li><p><strong>Cardinality of 1:</strong> Might it occasionally be 2?</p></li>
<li><p><strong>Cardinality of 1:</strong> What about historical data?</p>
<p>是否保存? 如何保存?</p></li>
<li><p><strong>Many–Many:</strong> Are we missing anything?</p>
<p>中间类</p></li>
</ul>
<h1 id="chapter-5-developing-a-data-model">Chapter 5: Developing a Data Model</h1>
<p>Some useful questions to ask when considering whether to represent information as an attribute, class, or relationship are summarized here:</p>
<ul>
<li>“Am I likely to want to <strong>summarize, group, or select</strong> using a given piece of information?” For example, might you want to select teams based on grade? If so, consider making the piece of information into a class.</li>
<li>“Am I likely now or in the future to <strong>store other data about this piece of information</strong>?” For example, might you want to keep information such as phone and address about a captain? Does (or should) this information already exist in another class? If so, consider representing the piece of information as a relationship between the classes.</li>
</ul>
<p>不要存在冗余路径(route), 不要存在关系闭环(closed path)</p>
<p>With two routes for the same information, we risk getting two different answers unless the data is very carefully maintained.</p>
<h2 id="fan-trap">fan trap:</h2>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8mdqk6ceaj30js0iu3zb.jpg" alt="截屏2022-11-29 22.44.54" style="zoom:33%;" /></p>
<p>增加新的关系</p>
<h2 id="chasm-trap">chasm trap:</h2>
<figure>
<img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8mdrxfi6nj30n20lyjs9.jpg" alt="截屏2022-11-29 22.46.14" /><figcaption aria-hidden="true">截屏2022-11-29 22.46.14</figcaption>
</figure>
<p>增加一个新的 object(null)</p>
<h2 id="三元关系">三元关系</h2>
<p>增加relationship: connection class</p>
<ul>
<li>Any attributes in the new class must depend on a particular combination of objects from <em>each</em> of the participating classes; such as, what do I need to know about a particular <em>member</em> playing on a particular <em>team</em> in a particular <em>match</em>?</li>
<li>Consider what information might be pertinent to two objects from <em>pairs</em> of the contributing classes; for example, what do I need to know about a particular member and a particular team <em>independent</em> of any match? 这种需要单独增加两个类之间的联系</li>
</ul>
<h2 id="两个-class-之间有多个-relationship">两个 class 之间有多个 relationship</h2>
<h2 id="self-relationship">self relationship</h2>
<h1 id="chapter-6-generalization-and-specialization">Chapter 6: Generalization and Specialization</h1>
<h2 id="继承">继承</h2>
<ul>
<li>If different objects have mutually exclusive values for some attributes (e.g., administrators have grades but technicians have dates), consider specialized subclasses.</li>
<li>When you think <em>this is like that except for...</em> consider subclasses.</li>
<li>When two classes have a similar relationship with another class, consider a new generalized superclass (e.g., if both students and staff are assigned parking spaces, consider a generalized class for people).</li>
</ul>
<p>特化: 继承, <em>Software entities (e.g. classes) should be open for extension and closed for modi<strong>fi</strong>cation</em>.</p>
<p>泛化: 提炼出基类</p>
<p>基类都应该是抽象的</p>
<p>多继承的问题: 多个基类会排列组合产生很多的子类</p>
<h2 id="组合-聚合">组合 聚合</h2>
<h1 id="chapter-7-from-data-model-to-relational-database-design">Chapter 7: From Data Model to Relational Database Design</h1>
<h2 id="domains-and-constraints">Domains and Constraints</h2>
<p>domain 作用域是数据库, constraints 作用域是表</p>
<p>后加的数据可以为 null, 避免强制填入不恰当的数据</p>
<p>A good rule of thumb is th-at any data that you are likely to want to <strong>search for, sort by, or extract</strong> in some way should be in a field all by itself.</p>
<h2 id="referential-integrity">referential integrity</h2>
<p>each <em>value</em> in a foreign key field must exist as values in the primary key field of the table being referred to</p>
<h2 id="关系">关系</h2>
<h3 id="many-关系">1-many 关系</h3>
<p>For a 1–Many relationship, the key field from the table representing the class <strong>at the 1 end is added as a foreign key</strong> in the table representing the class at the Many end.</p>
<h3 id="many-many-关系">many-many 关系</h3>
<p>拆分为两个 1-many 关系, 增加关系类, 主键是两个外键的组合</p>
<h3 id="关系-1">1-1 关系</h3>
<p>两侧分别作为外键会有不同的影响(主键不会重复, 但外键可能重复)</p>
<h3 id="继承关系">继承关系</h3>
<p>将父类作为外键插入子类表</p>
<h1 id="chapter-8-normalization">Chapter 8: Normalization</h1>
<h2 id="定义">定义</h2>
<h3 id="key">key</h3>
<p>The key fields functionally determine all the other fields in the table.</p>
<h3 id="primary-key">primary key</h3>
<p>A primary key has no subset of the fields that is also a key.</p>
<h3 id="candidate-key">candidate key</h3>
<p>A candidate key is a key where no subset of the fields is also a key.</p>
<h2 id="范式">范式</h2>
<h3 id="第一范式">第一范式</h3>
<p>A table is not in first normal form if it is keeping <strong>multiple values for a piece of information</strong>.</p>
<p>解决方法:</p>
<p>remove the multivalued information from the table. Create a new table with that information and the primary key of the original table.</p>
<h3 id="第二范式">第二范式</h3>
<p>A table is in second normal form if it is in first normal form AND <strong>we need ALL the fields in the key</strong> to determine the values of the non–key fields.</p>
<p>解决方法</p>
<p>remove those non–key fields that are not dependent on the whole of the primary key. Create another table with these fields and the part of the primary key on which they do depend.</p>
<h3 id="第三范式">第三范式</h3>
<p>A table is in third normal form if it is in second normal form AND no non–key fields depend on a field(s) that is not the primary key.</p>
<p>解决方法</p>
<p>If a table is not in third normal form, remove the non–key fields that are dependent on a field(s) that is not the primary key. Create another table with this field(s) and the field on which it does depend.</p>
<h3 id="boyce-codd-范式">boyce codd 范式</h3>
<p>A table is in Boyce–Codd normal form if every determinant could be a primary key.</p>
<p>A table in Boyce–Codd normal form is one in which every determinant could be a primary key.</p>
<p>即不存在多余的依赖关系</p>
<p><em>A table is based on the key, the whole key, and nothing but the key (so help me Codd)</em></p>
<h1 id="chapter-9-more-on-keys-and-constraints">Chapter 9: More on Keys and Constraints</h1>
<ul>
<li><p>Where a primary key is made up of several concatenated fields, <strong>it is worth considering a generated ID number to reduce the size of the foreign keys referencing the table.</strong></p></li>
<li><p>Unique constraints can be used to enforce a 1–1 relationship.</p></li>
<li><p>A constraint on the value of a field may be more appropriate than a relationship to another (very simple) table.</p>
<p>但是这会导致比较难增加新的枚举值(如果是table 只需要 insert row)</p></li>
<li><p>You have three options when you wish to delete a row that it is being referenced by a foreign key:</p>
<ul>
<li>Disallow the deletion.</li>
<li>Make the field referencing the deleted row NULL (“nullify delete”).</li>
<li>Remove all rows that reference the deleted row (“cascade delete”).</li>
</ul></li>
</ul>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>key</tag>
        <tag>primary</tag>
        <tag>fields</tag>
        <tag>information</tag>
        <tag>field</tag>
      </tags>
  </entry>
  <entry>
    <title>cpp20入门读书笔记</title>
    <url>/2023/01/804677221633.html</url>
    <content><![CDATA[<blockquote>

</blockquote>
<span id="more"></span>
<blockquote>
<p>目前编译器对 c++20 只部分支持, 请谨慎使用</p>
</blockquote>
<h1 id="basic-ideas">1. Basic Ideas</h1>
<h1 id="introducing-fundamental-types-of-data">2. Introducing Fundamental Types of Data</h1>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> braced_init &#123;<span class="number">15</span>&#125;;</span><br><span class="line"><span class="comment">//The braced initializer form, however, is slightly safer when it comes to so-called narrowing conversions窄化转换 . A narrowing conversion changes a value to a type with a more limited range of values范围变小. Any such conversion thus has the potential to lose information.</span></span><br><span class="line"><span class="comment">//大括号初始化如果窄化转换,标准编译器会提出 warning, 其他的则不一定</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">function_notation</span><span class="params">(<span class="number">15</span>)</span></span>;</span><br><span class="line"><span class="type">int</span> assignment_notation = <span class="number">15</span>;</span><br></pre></td></tr></table></figure>
<p>Type signed char is always one byte</p>
<p>The signed modifier is mostly optional; if omitted, your type will <strong>be signed by default.</strong> The only <strong>exception to this rule is char</strong>. While the unmodified type char does exist, it is compiler-dependent whether it is signed or unsigned.</p>
<p>Only use variables of the unmodified char type to store letter characters. To store numbers, you should use either signed char or unsigned char. std::byte type to store binary data</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> counter &#123;&#125;; <span class="comment">// counter starts at zero</span></span><br><span class="line"><span class="comment">//Zero initialization works for any fundamental type. For all fundamental numeric types, for instance, an empty braced initializer is always assumed to contain the number zero.</span></span><br></pre></td></tr></table></figure>
<p>Ever since C++14, you can use the single quote character, ', to make numeric literals more readable. Here’s an example: <code>22'333 -1'234LL 12'345ULL</code></p>
<p>there are situations where you do need to add the correct literal suffixes, such as when you initialize a variable with type <strong>auto</strong></p>
<p>Binary literals were introduced by the C++14 standard. You write a binary integer literal as a sequence of binary digits (0 or 1) prefixed by either <strong>0b or 0B</strong>, eg: <code>0b1010101</code></p>
<p><code>import &lt;numbers&gt;;</code> <code>std::numbers::e</code> <code>std::numbers::e_v&lt;float&gt;</code> 特定长度 <code>#include &lt;cmath&gt;</code></p>
<p><strong>implicit conversions</strong> . The way this works is that the variable of a type with the more limited range is converted to the type of the other. order:<strong>signed 优先度低于 unsigned</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">long</span> <span class="type">double</span></span><br><span class="line"><span class="type">double</span></span><br><span class="line"><span class="type">float</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> </span><br><span class="line"><span class="type">long</span> <span class="type">long</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span></span><br><span class="line"><span class="type">long</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span></span><br><span class="line"><span class="type">int</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> x &#123;<span class="number">20u</span>&#125;;</span><br><span class="line"><span class="type">int</span> y &#123;<span class="number">30</span>&#125;;</span><br><span class="line">x-y <span class="comment">// type is unsigned int</span></span><br></pre></td></tr></table></figure>
<p><code>std::format</code> available in cpp20</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">std::cout &lt;&lt; std::format(<span class="string">&quot;Pond diameter required for &#123;&#125; fish is &#123;:.2&#125; feet.\n&quot;</span>, fish_count, pond_diameter);</span><br><span class="line"></span><br><span class="line"><span class="comment">//[[fill]align][sign][#][0][width][.precision][type]</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// Default alignment: right for numbers, left otherwise </span></span><br><span class="line">  std::cout &lt;&lt; std::format(<span class="string">&quot;&#123;:7&#125;|&#123;:7&#125;|&#123;:7&#125;|&#123;:7&#125;|&#123;:7&#125;\n&quot;</span>, <span class="number">1</span>, <span class="number">-.2</span>, <span class="string">&quot;str&quot;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="literal">true</span>); </span><br><span class="line">  <span class="comment">//Left and right alignment + custom fill character</span></span><br><span class="line">  std::cout &lt;&lt; std::format(<span class="string">&quot;&#123;:*&lt;7&#125;|&#123;:*&lt;7&#125;|&#123;:*&gt;7&#125;|&#123;:*&gt;7&#125;|&#123;:*&gt;7&#125;\n&quot;</span>, <span class="number">1</span>,<span class="number">-.2</span>,<span class="string">&quot;str&quot;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="literal">true</span>); </span><br><span class="line">  <span class="comment">//Centered alignment + 0 formatting option for numbers </span></span><br><span class="line">  std::cout &lt;&lt; std::format(<span class="string">&quot;&#123;:^07&#125;|&#123;:^07&#125;|&#123;:^7&#125;|&#123;:^7&#125;|&#123;:^7&#125;\n&quot;</span>, <span class="number">1</span>, <span class="number">-.2</span>, <span class="string">&quot;str&quot;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1| -0.2|str |c |true</span></span><br><span class="line"><span class="comment">1******|-0.2***|****str|******c|***true </span></span><br><span class="line"><span class="comment">0000001|-0000.2| str | c | true</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p><code>&lt;limits&gt;</code></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">std::cout &lt;&lt; <span class="string">&quot;Maximum value of type double is &quot;</span> &lt;&lt; std::numeric_limits&lt;<span class="type">double</span>&gt;::<span class="built_in">max</span>();</span><br></pre></td></tr></table></figure>
<p>Type <strong>wchar_t</strong> is a fundamental type intended for character sets where a single character does not fit into one byte. Hence its name: wchar_t derives from wide character , because the character is “wider” than the usual one-byte character. By contrast, type char is referred to as “narrow” because of the limited range of character codes that are available. You define wide-character literals in a similar way to literals of type char, but you prefix them with L. Here’s an example:<code>wchar_t z &#123;L'Z'&#125;;</code> use <strong>char8_t, char16_t, or char32_t</strong> instead. Values of these types are intended to store characters encoded as UTF-8, UTF-16, or UTF-32, their prefix are: u8, u16/u, U</p>
<h2 id="auto">auto</h2>
<p><strong>Caution</strong> You need to be careful when using braced initializers with the auto keyword. For example, suppose you write this (notice the equals sign!):</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> m = &#123;<span class="number">10</span>&#125;; </span><br><span class="line"><span class="comment">// m has type std::initializer_list&lt;int&gt;</span></span><br></pre></td></tr></table></figure>
<p>To summarize, if your compiler properly supports <strong>C++17</strong>, you can use braced initialization to initialize any variable with a single value, provided you do not combine it with an assignment. If your compiler is not fully up-to-date yet, however, you should simply never use braced initializers with auto. Instead, either explicitly state the type or use assignment or functional notation.</p>
<h1 id="working-with-fundamental-data-types">3. Working with Fundamental Data Types</h1>
<p>Remember that the lifetime and scope of a variable are different things. Lifetime is the period of execution time over which a variable survives. Scope is the region of program code over which the variable name can be used. It’s important not to get these two ideas confused.</p>
<p>Variables defined outside of all blocks and classes are also called <strong>globals and have global scope</strong> (which is also called global namespace scope). This means they’re accessible in all the functions <strong>in the source file</strong> following the point at which they’re defined. If you define them at the beginning of a source file, they’ll be accessible throughout the file. In Chapter 11, we’ll show how to declare variables that can be used in multiple files.Global variables have static storage duration by default. use <code>::</code>to access</p>
<p>The <strong>using</strong> keyword has many uses:</p>
<ul>
<li><p>It allows you to refer to (specific or all) <strong>enumerators</strong> of scoped enumerations without specifying the enumeration’s name as scope.</p></li>
<li><p>It allows you to refer to (specific or all) types and functions of a <strong>namespace without specifying</strong> the namespace’s name as scope.</p></li>
<li><p>It allows you to define <strong>aliases for other types</strong>. In legacy code, you might still encounter typedef being used for the same purpose.</p></li>
</ul>
<h1 id="making-decisions">4. Making Decisions</h1>
<h1 id="arrays-and-loops">5. Arrays and Loops</h1>
<ul>
<li><p>for range loop</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; v = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> <span class="type">int</span>&amp; i : v) <span class="comment">// access by const reference</span></span><br><span class="line">        std::cout &lt;&lt; i &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i : v) <span class="comment">// access by value, the type of i is int</span></span><br><span class="line">        std::cout &lt;&lt; i &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp;&amp; i : v) <span class="comment">// access by forwarding reference, the type of i is int&amp;</span></span><br><span class="line">        std::cout &lt;&lt; i &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> <span class="keyword">auto</span>&amp; cv = v;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp;&amp; i : cv) <span class="comment">// access by f-d reference, the type of i is const int&amp;</span></span><br><span class="line">        std::cout &lt;&lt; i &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> n : &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;) <span class="comment">// the initializer may be a braced-init-list</span></span><br><span class="line">        std::cout &lt;&lt; n &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> a[] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> n : a) <span class="comment">// the initializer may be an array</span></span><br><span class="line">        std::cout &lt;&lt; n &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ([[maybe_unused]] <span class="type">int</span> n : a)  </span><br><span class="line">        std::cout &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="string">&#x27; &#x27;</span>; <span class="comment">// the loop variable need not be used</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> n = v.<span class="built_in">size</span>(); <span class="keyword">auto</span> i : v) <span class="comment">// the init-statement (C++20)</span></span><br><span class="line">        std::cout &lt;&lt; --n + i &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">typedef</span> <span class="keyword">decltype</span>(v)::value_type <span class="type">elem_t</span>; <span class="type">elem_t</span> i : v)</span><br><span class="line">    <span class="comment">// typedef declaration as init-statement (C++20)</span></span><br><span class="line">        std::cout &lt;&lt; i &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">using</span> <span class="type">elem_t</span> = <span class="keyword">decltype</span>(v)::value_type; <span class="type">elem_t</span> i : v)</span><br><span class="line">    <span class="comment">// alias declaration as init-statement (C++23)</span></span><br><span class="line">        std::cout &lt;&lt; i &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="pointers-and-references">6. Pointers and References</h1>
<blockquote>
<p>Low-level dynamic memory manipulation is synonymous for a wide range of serious hazards such as dangling pointers, multiple deallocations, deallocation mismatches, memory leaks, and so on. Our golden rule is therefore this: never use the low-level new/new[] and delete/delete[] operators directly. Containers (and std::vector&lt;&gt; in particular) and smart pointers are nearly always the better choice!</p>
</blockquote>
<p><code>float const * const pvalue &#123;&amp;value&#125;;</code> read from right to left, * means "pointer to"</p>
<h2 id="new-delete">new delete</h2>
<p>It is perfectly <strong>safe to apply delete on a pointer variable that holds the value nullptr</strong>. The statement then has no effect at all. Using if tests such as the following is therefore not necessary</p>
<p>Note that the <strong>delete operator frees the memory but does not change the pointer</strong>. After the previous statement has executed, pvalue still contains the address of the memory that was allocated, but the memory is now free and may be allocated immediately to something else. A pointer that contains such a spurious address is sometimes called a <strong>dangling pointer.</strong> always resetting a pointer when you release the memory to which it points, like this:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> pvalue; <span class="comment">// Release memory pointed to by pvalue </span></span><br><span class="line">pvalue = <span class="literal">nullptr</span>; <span class="comment">// Reset the pointer</span></span><br></pre></td></tr></table></figure>
<p>如果二次 delete 会报错捏</p>
<h2 id="smart-pointer">smart pointer</h2>
<p>Smart pointers are normally used only to store the address of memory allocated in the free store.</p>
<p>By far the most notable feature of a smart pointer is that you <strong>don’t have to worry about using the delete or delete[] operator to free the memory</strong>. It will be released automatically when it is no longer needed. This means that multiple deallocations, allocation/deallocation mismatches, and memory leaks will no longer be possible. If you consistently use smart pointers, dangling pointers will be a thing of the past as well.</p>
<p>Smart pointer types are defined by templates inside the<code>&lt;memory&gt;</code>module of the Standard Library</p>
<ul>
<li><p><code>unique_ptr&lt;T&gt;</code></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> pdata &#123; std::<span class="built_in">make_unique</span>&lt;<span class="type">double</span>&gt;(<span class="number">999.0</span>) &#125;;</span><br><span class="line">cout &lt;&lt; pdata &lt;&lt; endl;<span class="comment">//指针地址</span></span><br><span class="line">cout &lt;&lt; *pdata &lt;&lt; endl;<span class="comment">//指向的值 999.0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> pdata&#123;std::<span class="built_in">make_unique</span>&lt;Foo&gt;(Foo&#123;<span class="number">1</span>&#125;)&#125;;</span><br><span class="line">cout &lt;&lt; pdata &lt;&lt; endl;  <span class="comment">// 指针地址</span></span><br><span class="line">cout &lt;&lt; pdata.<span class="built_in">get</span>() &lt;&lt; endl;<span class="comment">// 指针地址, 注意是.get()</span></span><br><span class="line">pdata.<span class="built_in">reset</span>(<span class="keyword">new</span> Foo&#123;<span class="number">2</span>&#125;);</span><br><span class="line">Foo* p_foo &#123;pdata.<span class="built_in">release</span>()&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> pvalues&#123; std::<span class="built_in">make_unique</span>&lt;<span class="type">double</span>[]&gt;(n) &#125;;</span><br></pre></td></tr></table></figure>
<p>In other words, there can never be two or more unique_ptr&lt;T&gt; objects pointing to the same memory address at the same time. A unique_ptr&lt;&gt; object is said to own what it points to exclusively.</p></li>
<li><p><code>shared_ptr&lt;T&gt;</code></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> pdata&#123; std::<span class="built_in">make_shared</span>&lt;<span class="type">double</span>&gt;(<span class="number">999.0</span>) &#125;</span><br><span class="line">std::shared_ptr&lt;<span class="type">double</span>&gt; pdata2 &#123;pdata&#125;;</span><br></pre></td></tr></table></figure>
<p>there can be any number of shared_ptr<T> objects that contain—or, share—the same address. The <strong>reference count</strong> for a shared_ptr&lt;&gt; containing a given free store address is incremented each time a new shared_ptr&lt;&gt; object is created containing that address, and it’s decremented when a shared_ptr&lt;&gt; containing the address is destroyed or assigned to point to a different address. All shared_ptr&lt;&gt; objects that <strong>point to the same address</strong> have access to the count of how many there are.</p></li>
<li><p><code>weak_ptr&lt;T&gt;</code></p>
<p>A weak_ptr&lt;T&gt; is linked to a shared_ptr&lt;T&gt; and contains the same address. Creating a weak_ptr&lt;&gt; does not increment the reference count associated with the linked shared_ptr&lt;&gt; object, though, so a weak_ptr&lt;&gt; does not prevent the object pointed to from being destroyed.</p>
<p>One use for having weak_ptr&lt;&gt; objects is to avoid so- called reference cycles with shared_ptr&lt;&gt; objects. Conceptually, a reference cycle is where a shared_ptr&lt;&gt; inside an object x points to some other object y that contains a shared_ptr&lt;&gt;, which points back to x.</p></li>
</ul>
<h2 id="reference-in-loop">reference in loop</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">double</span> sum &#123;&#125;;</span><br><span class="line"><span class="type">unsigned</span> count &#123;&#125;;</span><br><span class="line"><span class="type">double</span> temperatures[] &#123;<span class="number">45.5</span>, <span class="number">50.0</span>, <span class="number">48.2</span>, <span class="number">57.0</span>, <span class="number">63.8</span>&#125;; </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> t : temperatures)<span class="comment">//t is double</span></span><br><span class="line">&#123;</span><br><span class="line">  sum += t;</span><br><span class="line">  ++count; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> &amp;t : temperatures) &#123;<span class="comment">//t is double&amp;</span></span><br><span class="line">        sum += t;</span><br><span class="line">        ++count;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h1 id="working-with-strings">7. Working with Strings</h1>
<ul>
<li>Internally, the terminating null character is still present in the array managed by a std::string object, but only for compatibility with legacy and/or C functions. As a user of std::string, you normally do not need to know that it even exists. All string functionality transparently deals with this legacy character for you.</li>
<li>You can use the <strong>+</strong> operator to concatenate a string object with a string literal, a character, or another string object.</li>
<li><code>std::to_string() std::stoi() std::stod()</code></li>
</ul>
<h1 id="defining-functions">8. Defining Functions</h1>
<ul>
<li>Input parameters should be reference-to-const, except for smaller values such as those of fundamental types. Returning values is generally preferred over output parameters.</li>
<li>Returning a reference from a function allows the function to be used on the left of an assignment operator. Specifying the return type as a reference-to-const prevents this.</li>
</ul>
<h1 id="vocabulary-types">9. Vocabulary Types</h1>
<ul>
<li><p>Use <strong>std::optional&lt;&gt;</strong> to represent any value that may or may not be present. Examples are optional inputs to a function or the result of a function that may fail. This makes your code self-documenting and therefore safer. As of C++17, the Standard Library provides std::optional &lt;&gt;, designed to replace all implicit encodings of optional values that we showed earlier.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">std::optional&lt;<span class="type">int</span>&gt; </span></span><br><span class="line"><span class="function">  <span class="title">find_last</span><span class="params">(<span class="type">const</span> std::string&amp; s,              </span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="type">char</span> c, </span></span></span><br><span class="line"><span class="params"><span class="function">            std::optional&lt;<span class="type">int</span>&gt; startIndex)</span></span>; </span><br><span class="line"></span><br><span class="line"><span class="function">std::optional&lt;<span class="type">int</span>&gt; </span></span><br><span class="line"><span class="function">  <span class="title">read_int_setting</span><span class="params">(<span class="type">const</span> std::string&amp; file, </span></span></span><br><span class="line"><span class="params"><span class="function">                   <span class="type">const</span> std::string&amp; setting)</span></span>;</span><br></pre></td></tr></table></figure>
<p>We replaced it with a default value that is equal to <code>std::nullopt</code> . This special constant is defined by the Standard Library to initialize optional&lt;T&gt; values that do not (yet) have a T value assigned. To check:<br />
you have the compiler convert the optional&lt;&gt; to a Boolean for you, you call the <strong>has_value()</strong> function, or you <strong>compare the optional&lt;&gt; to nullopt</strong> . To get: you can either use the *** operator** or call the <strong>value()</strong> function. Assigning the optional<size_t> return value directly to a size_t, however, would not be possible. The compiler cannot convert values of type optional<size_t> to values of type size_t.</p></li>
<li><p>Use <strong>std::string_view</strong> instead of const std::string&amp; to avoid inadvertent copies of string literals or other character arrays.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">find_words</span><span class="params">(std::vector&lt;std::string&gt;&amp; words,</span></span></span><br><span class="line"><span class="params"><span class="function">                <span class="type">const</span> std::string&amp; text,</span></span></span><br><span class="line"><span class="params"><span class="function">                <span class="type">const</span> std::string&amp; separators)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::string text; <span class="comment">// The string to be searched</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Enter some text terminated by *:\n&quot;</span>;</span><br><span class="line">    std::<span class="built_in">getline</span>(std::cin, text, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">    <span class="type">const</span> std::string separators&#123;<span class="string">&quot; ,;:.\&quot;!?&#x27;\n&quot;</span>&#125;;</span><br><span class="line">    std::vector&lt;std::string&gt; words; <span class="comment">// Words found</span></span><br><span class="line">    <span class="built_in">find_words</span>(</span><br><span class="line">        words, text, <span class="string">&quot; ,;:.\&quot;!?&#x27;\n&quot;</span>); <span class="comment">/* no more &#x27;separators&#x27; constant! */</span></span><br><span class="line">    <span class="comment">//list_words(words);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这里, find_words 第三个参数传入的是字符串常量(const  char[])而不是引用</span></span><br><span class="line"><span class="comment">//编译器会隐式临时复制, 然后传入这个复制的引用</span></span><br></pre></td></tr></table></figure>
<p>The compiler, however, will refuse any and all implicit conversions of std::string_view objects to values of type std::string (give it a try!).</p>
<p>string_view does not provide a <strong>c_str()</strong> function to convert it to a const char* array.<code>std::string&#123;my_view&#125;.</code></p></li>
<li><p>Use <strong>std::span&lt;const T&gt;</strong> instead of, for instance, const std::vector&lt;T&gt;&amp; parameters to make the same function work as well for C-style arrays, std::array&lt;&gt; objects, etc.</p></li>
<li><p>Similarly, use std::span&lt;T&gt; instead of std::vector&lt;T&gt;&amp; parameters, unless you need the ability to add or remove elements.</p></li>
<li><p>The reason is that there is one significant difference between a span and a view: a span &lt;&gt;, unlike a</p>
<p>string_view , allows you to reassign or change the elements of the underlying array. While a span&lt;&gt; allows you to reassign or otherwise alter elements, it does not allow you to add or remove any elements. That is, a span&lt;&gt; does not offer members such as push_back(), erase(), or clear(). Otherwise, a span&lt;&gt; could never be created for C-style arrays or std::array&lt;&gt; objects.</p></li>
<li><p>Use std::span&lt;(const) T,N&gt; instead of (const) std::array&lt;T,N&gt;&amp; parameters to make the same function work for C-style arrays (or other containers you know to contain at least N elements).</p></li>
</ul>
<h1 id="function-templates">10. Function Templates</h1>
<p>need examples</p>
<h1 id="modules-and-namespaces">11. Modules and Namespaces</h1>
<p>C++ is object oriented, in the sense that it supports the object oriented paradigm for software development.</p>
<p>However, differently from Java, C++ doesn't force you to group function definitions in classes: the standard C++ way for declaring a function is to just declare a function, without any class.</p>
<p>If instead you are talking about method declaration/definition then the standard way is to put just the declaration in an include file (normally named <code>.h</code> or <code>.hpp</code>) and the definition in a separate implementation file (normally named <code>.cpp</code> or <code>.cxx</code>). I agree this is indeed somewhat annoying and requires some duplication but it's how the language was designed (the main concept is that C++ compilation is done one unit at a time: you need the .cpp of the unit being compiled and just the .h of all the units being used by the compiled code; in other words the include file for a class must contain all the information needed to be able to generate code that uses the class). There are a LOT of details about this, with different implications about compile speed, execution speed, binary size and binary compatibility.</p>
<p>For quick experiments anything works... but for bigger projects the separation is something that is practically required (even if it may make sense to keep some implementation details in the public .h).</p>
<p>Note: Even if you know Java, C++ is a completely different language... and it's a language that cannot be learned by experimenting. The reason is that it's a rather complex language with a lot of asymmetries and apparently illogical choices, and most importantly, when you make a mistake there are no "runtime error angels" to save you like in Java... but there are instead "undefined behavior daemons".</p>
<p>The only reasonable way to learn C++ is by reading... no matter how smart you are there is no way you can guess what the committee decided (actually being smart is sometimes even a problem because the correct answer is illogical and a consequence of historical heritage.)</p>
<p>Just pick a <a href="https://stackoverflow.com/q/388242/320726">good book</a> or two and read them cover to cover.</p>
<h1 id="defining-your-own-data-types">12. Defining Your Own Data Types</h1>
<ul>
<li>const member functions can’t modify the member variables of a class object unless the member variables have been declared as mutable.</li>
</ul>
<h1 id="operator-overloading">13. Operator Overloading</h1>
<p>For a unary operator defined as a <strong>class member function</strong>, the operand is the class object. For a unary operator defined as a <strong>global operator function</strong>, the operand is the function parameter.</p>
<p>For a binary operator function declared <strong>as a member of a class</strong>, <strong>the left operand is the class object, and the right operand is the function parameter.</strong> For a binary operator defined by a <strong>global operator function</strong>, <strong>the first parameter specifies the left operand, and the second parameter specifies the right operand</strong>.</p>
<p>If you overload operators == and &lt;=&gt;, you get operators !=, &lt;, &gt;, &lt;=, and &gt;= all for free. In many cases you can even have the compiler generate the code for you.</p>
<h1 id="inheritance">14. Inheritance</h1>
<p>A derived class constructor can, and often should, explicitly call constructors for its direct bases in the initialization list for the constructor. If you don’t call one explicitly, the base class’s default constructor is called. A copy constructor in a derived class, for one, should always call the copy constructor of all direct base classes.</p>
<h1 id="polymorphism">15. Polymorphism</h1>
<p>You should use the override qualifier with each member function of a derived class that overrides a virtual base class member. This causes the compiler to verify that the functions signatures in the base and derived classes are, and forever remain, the same.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Carton</span> : <span class="keyword">public</span> Box</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">volume</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span> </span>&#123; <span class="comment">// Function body as before...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Details of the class as in Ex15_02... &#125;;</span></span><br></pre></td></tr></table></figure>
<p>The <strong>dynamic_cast&lt;&gt;</strong> operator is generally used to cast from a pointer-to-a-polymorphic-base-class to a pointer- to-a-derived-class. If the pointer does not point to an object of the given derived class type, <strong>dynamic_cast&lt;&gt; evaluates to nullptr</strong>. This type check is performed dynamically, at runtime.</p>
<h1 id="runtime-errors-and-exceptions">16. Runtime Errors and Exceptions</h1>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// Code that may throw exceptions must be in a try block...</span></span><br><span class="line">  <span class="keyword">if</span> (test &gt; <span class="number">5</span>)</span><br><span class="line">      <span class="keyword">throw</span> <span class="string">&quot;test is greater than 5&quot;</span>; <span class="comment">// Throws an exception of type const char*</span></span><br><span class="line">  <span class="comment">// This code only executes if the exception is not thrown... &#125;</span></span><br><span class="line">  <span class="built_in">catch</span> (<span class="type">const</span> <span class="type">char</span>* message)</span><br><span class="line">  &#123;</span><br><span class="line">  <span class="comment">// Code to handle the exception...</span></span><br><span class="line">  <span class="comment">// ...which executes if an exception of type &#x27;char*&#x27; or &#x27;const char*&#x27; is thrown </span></span><br><span class="line">        std::cout &lt;&lt; message &lt;&lt; std::endl; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>If an exception isn’t caught by any catch block, then the std::terminate() function is called, which immediately aborts the program execution.</p>
<p>The noexcept specification for a function indicates that the function does not throw exceptions. If a noexcept function does throw an exception it does not catch, std::terminate() is called.</p>
<p>Even if a destructor does not have an explicit noexcept specifier, the compiler will almost always generate one for you. This implies that you must never allow an exception to leave a destructor; otherwise, std::terminate() will be triggered.</p>
<p>The Standard Library defines a range of standard exception types in the <stdexcept> module that are derived from the std::exception class that is defined in the <exception> module.</p>
<h1 id="class-templates">17. Class Templates</h1>
<p>Always use the copy-and-swap idiom to implement the copy assignment operator in terms of the copy constructor and a (noexcept) swap() function. Use the const-and-back-again idiom to implement non- const overloads in terms of const overloads of the same member function to avoid having to repeat yourself. This is an example of the DRY principle (Don’t Repeat Yourself), which advocates avoiding code duplication at all costs.</p>
<h1 id="move-semantics">18. Move Semantics</h1>
<p>std::move() can be used to convert an lvalue (such as a named variable) into an rvalue. Take care, though. Once moved, an object should normally not be used anymore.</p>
<p><strong>std::move() Does Not Move</strong></p>
<p>Make no mistake, std::move() does not move anything. All this function does is turn a given lvalue into an rvalue reference.</p>
<p>If there’s no move assignment operator for Array&lt;&gt; to accept the rvalue, the copy assignment operator will be used instead. So, always remember, adding std::move() is of no consequence if the function or constructor that you are passing a value to has no overload with an rvalue reference parameter!</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Array&lt;std::string&gt; more_strings&#123; <span class="number">2&#x27;000</span> &#125;; Array&lt;std::string&gt;&amp;&amp; rvalue_ref&#123; std::<span class="built_in">move</span>(more_strings) &#125;; </span><br><span class="line">strings = rvalue_ref;</span><br></pre></td></tr></table></figure>
<p>Notwithstanding that the rvalue_ref variable clearly has an rvalue reference type, the output of the program will show that the corresponding object is copied: <code>Array of 1000 elements moved (assignment) Array of 2000 elements copied</code></p>
<p>Every variable name expression is an lvalue, even if the type of that variable is an rvalue reference type. To move the contents of a named variable, you must therefore always add std::move():</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">strings = std::<span class="built_in">move</span>(rvalue_ref);</span><br></pre></td></tr></table></figure>
<p>One way to work around this duplication is to redefine the const T&amp; overload in terms of the T&amp;&amp; one like so:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"> <span class="type">void</span> Array&lt;T&gt;::<span class="built_in">push_back</span>(<span class="type">const</span> T&amp; element)</span><br><span class="line"> &#123; <span class="built_in">push_back</span>(T&#123; element &#125;); <span class="comment">// Create a temporary, transient copy and push that &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//better way in one function</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="type">void</span> Array&lt;T&gt;::<span class="built_in">push_back</span>(T element) <span class="comment">// Pass by value (copied lvalue, or moved rvalue!) </span></span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">newArray[m_size] = std::<span class="built_in">move</span>(element); <span class="comment">// Move the new element...</span></span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>how a modern C++ compiler is supposed to <strong>handle return-by-value</strong> (slightly simplified, as always):</p>
<ul>
<li><p>In a return statement of the form return name;, a compiler is obliged to treat name as if it were an rvalue expression, provided name is either the name of a locally defined automatic variable or that of a function parameter.</p></li>
<li><p>In a return statement of the form return name;, a compiler is allowed to apply the so-called named return value optimization (NRVO), provided name is the name of a locally defined automatic variable (so not if it is that of a function parameter).</p></li>
</ul>
<p>The first bullet implies that using std::move(result) in our example would be, at the very least, redundant. Even</p>
<p><strong>without the std::move(), the compiler already treats result as if it is an rvalue</strong>. The second bullet moreover implies that return std::move(result) would prohibit the NRVO optimization. NRVO applies solely to statements of the form return result;</p>
<p>if the variable value in return value; has static or thread-local storage duration (see Chapter 11), you need to add std::move() if moving is what you want. This case is rare, though. When returning an object’s member variable, as in return m_member_variable;, std::move() is again required if you do not want the member variable to be copied. If the return statement contains any other lvalue expression besides the name of a single variable, then NRVO does not apply, nor will the compiler treat this lvalue as if it were an rvalue when looking for a constructor.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Array&lt;T&gt;&amp; Array&lt;T&gt;::<span class="keyword">operator</span>=(Array&amp;&amp; rhs) <span class="keyword">noexcept</span> &#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Array of &quot;</span> &lt;&lt; rhs.m_size &lt;&lt; <span class="string">&quot; elements moved (assignment)&quot;</span></span><br><span class="line">              &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">if</span> (&amp;rhs != <span class="keyword">this</span>) <span class="comment">// prevent trouble with self-assignments</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">delete</span>[] m_elements;         <span class="comment">// delete[] all existing elements</span></span><br><span class="line">        m_elements = rhs.m_elements; <span class="comment">// copy the elements pointer and the size</span></span><br><span class="line">        m_size = rhs.m_size;</span><br><span class="line">        rhs.m_elements = <span class="literal">nullptr</span>; <span class="comment">// make sure rhs does not delete[] m_elements</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>; <span class="comment">// return lhs</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//move and swap</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">Array&lt;T&gt;&amp; Array&lt;T&gt;::<span class="keyword">operator</span>=(Array&amp;&amp; rhs) <span class="keyword">noexcept</span> &#123;</span><br><span class="line">    Array&lt;T&gt; <span class="built_in">moved</span>(std::<span class="built_in">move</span>(rhs)); <span class="comment">// move... (noexcept)</span></span><br><span class="line">    <span class="built_in">swap</span>(moved);                    <span class="comment">// ... and swap (noexcept)</span></span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;                   <span class="comment">// return lhs</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="first-class-functions">19. First-Class Functions</h1>
<p>lambda</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> less&#123;[](<span class="type">int</span> x, <span class="type">int</span> y) &#123; <span class="keyword">return</span> x &lt; y; &#125;&#125;;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Minimum element: &quot;</span> &lt;&lt; *<span class="built_in">findOptimum</span>(numbers, less) &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure>
<p>in []</p>
<ul>
<li><p>capture by value : =, or just para name</p></li>
<li><p>capture by ref : &amp;</p></li>
<li><p>specific :</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> counter&#123; [&amp;count](<span class="type">int</span> x, <span class="type">int</span> y) </span><br><span class="line">    &#123; ++count; <span class="keyword">return</span> x &lt; y; &#125; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>Here, count is the only variable in the enclosing scope that can be accessed from within the body of the lambda.</p>
<p>The capture default, if used, should always come first. Capture clauses such as [&amp;counter, =] or [number_to_search_for, &amp;] are therefore not allowed.</p>
<p>If you use the = capture default, you are no longer allowed to capture any specific variables by value; similarly, if you use &amp;, you can no longer capture specific variables by reference. Capture clauses such as [&amp;, &amp;counter] or [=, &amp;counter, number_to_search_for] are therefore not allowed.</p></li>
</ul>
<h1 id="containers-and-algorithms">20. Containers and Algorithms</h1>
<h1 id="constrained-templates-and-concepts">21. Constrained Templates and Concepts</h1>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>std</tag>
        <tag>cout</tag>
        <tag>rvalue</tag>
        <tag>optional</tag>
        <tag>move</tag>
      </tags>
  </entry>
  <entry>
    <title>cpp20实践读书笔记</title>
    <url>/2023/01/1776e7688699.html</url>
    <content><![CDATA[<blockquote>

</blockquote>
<span id="more"></span>
<h1 id="chapter-1-a-crash-course-in-c-and-the-standard-library">CHAPTER 1: A Crash Course in C++ and the Standard Library</h1>
<h2 id="preprocessor">preprocessor</h2>
<table>
<colgroup>
<col style="width: 8%" />
<col style="width: 33%" />
<col style="width: 58%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">PREPROCESSOR DIRECTIVE</th>
<th>FUNCTIONALITY</th>
<th>COMMON USES</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">#include [file]</td>
<td>The specified file is inserted into the code at the location of the directive.</td>
<td>Almost always used to include header files so that code can make use of functionality defined elsewhere.</td>
</tr>
<tr class="even">
<td style="text-align: left;">#define [id] [value]</td>
<td>Every occurrence of the specified identifier is replaced with the specified value.</td>
<td>use less, most in c</td>
</tr>
<tr class="odd">
<td style="text-align: left;">#ifdef [id] #endif <br />#ifndef [id] #endif</td>
<td>Code within the ifdef (“if defined”) or ifndef (“if not defined”) blocks are conditionally included or omitted based on whether the specified identifier has been defined with #define.</td>
<td>Used most frequently to protect against circular includes. Each header file starts with an #ifndef checking the absence of an identifier, followed by a #define directive to define that identifier. The header file ends with an #endif. This prevents the file from being included multiple times; see the example after this table.</td>
</tr>
<tr class="even">
<td style="text-align: left;">#pragma [xyz]</td>
<td>xyz is compiler dependent. Most compilers support a #pragma to display a warning or error if the directive is reached during preprocessing.</td>
<td>See the example after this table.</td>
</tr>
</tbody>
</table>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> MYHEADER_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MYHEADER_H</span></span><br><span class="line"><span class="comment">// ... the contents of this header file </span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br></pre></td></tr></table></figure>
<h2 id="standard-io">standard io</h2>
<p>WARNING Keep in mind that endl inserts a new line into the stream and flushes everything currently in its buffers down the chute.</p>
<p>Overusing endl, for example in a loop, is not recommended because it will have a performance impact. On the other hand, inserting into the stream also inserts a new line but does not automatically flush the buffers.</p>
<h1 id="chapter-2-working-with-strings-and-string-views">CHAPTER 2: Working with Strings and String Views</h1>
<h1 id="chapter-3-coding-with-style">CHAPTER 3: Coding with Style</h1>
<h1 id="chapter-4-designing-professional-c-programs">CHAPTER 4: Designing Professional C++ Programs</h1>
<h1 id="chapter-5-designing-with-objects">CHAPTER 5: Designing with Objects</h1>
<h1 id="chapter-6-designing-for-reuse">CHAPTER 6: Designing for Reuse</h1>
<h1 id="chapter-7-memory-management">CHAPTER 7: Memory Management</h1>
<h1 id="chapter-8-gaining-proficiency-with-classes-and-objects">CHAPTER 8: Gaining Proficiency with Classes and Objects</h1>
<h1 id="chapter-9-mastering-classes-and-objects">CHAPTER 9: Mastering Classes and Objects</h1>
<h1 id="chapter-10-discovering-inheritance-techniques">CHAPTER 10: Discovering Inheritance Techniques</h1>
<h1 id="chapter-11-odds-and-ends">CHAPTER 11: Odds and Ends</h1>
<h1 id="chapter-12-writing-generic-code-with-templates">CHAPTER 12: Writing Generic Code with Templates</h1>
<h1 id="chapter-13-demystifying-c-io">CHAPTER 13: Demystifying C++ I/O</h1>
<h1 id="chapter-14-handling-errors">CHAPTER 14: Handling Errors</h1>
<h1 id="chapter-15-overloading-c-operators">CHAPTER 15: Overloading C++ Operators</h1>
<h1 id="chapter-16-overview-of-the-c-standard-library">CHAPTER 16: Overview of the C++ Standard Library</h1>
<h1 id="chapter-17-understanding-iterators-and-the-ranges-library">CHAPTER 17: Understanding Iterators and the Ranges Library</h1>
<h1 id="chapter-18-standard-library-containers">CHAPTER 18: Standard Library Containers</h1>
<h1 id="chapter-19-function-pointers-function-objects-and-lambda-expressions">CHAPTER 19: Function Pointers, Function Objects, and Lambda Expressions</h1>
<h1 id="chapter-20-mastering-standard-library-algorithms">CHAPTER 20: Mastering Standard Library Algorithms</h1>
<h1 id="chapter-21-string-localization-and-regular-expressions">CHAPTER 21: String Localization and Regular Expressions</h1>
<h1 id="chapter-22-date-and-time-utilities">CHAPTER 22: Date and Time Utilities</h1>
<h1 id="chapter-23-random-number-facilities">CHAPTER 23: Random Number Facilities</h1>
<h1 id="chapter-24-additional-library-utilities">CHAPTER 24: Additional Library Utilities</h1>
<h1 id="chapter-25-customizing-and-extending-the-standard-library">CHAPTER 25: Customizing and Extending the Standard Library</h1>
<h1 id="chapter-26-advanced-templates">CHAPTER 26: Advanced Templates</h1>
<h1 id="chapter-27-multithreaded-programming-with-c">CHAPTER 27: Multithreaded Programming with C++</h1>
<h1 id="chapter-28-maximizing-software-engineering-methods">CHAPTER 28: Maximizing Software Engineering Methods</h1>
<h1 id="chapter-29-writing-efficient-c">CHAPTER 29: Writing Efficient C++</h1>
<h1 id="chapter-30-becoming-adept-at-testing">CHAPTER 30: Becoming Adept at Testing</h1>
<h1 id="chapter-31-conquering-debugging">CHAPTER 31: Conquering Debugging</h1>
<h1 id="chapter-32-incorporating-design-techniques-and-frameworks">CHAPTER 32: Incorporating Design Techniques and Frameworks</h1>
<h1 id="chapter-33-applying-design-patterns">CHAPTER 33: Applying Design Patterns</h1>
<h1 id="chapter-34-developing-cross-platform-and-cross-language-applications">CHAPTER 34: Developing Cross-Platform and Cross-Language Applications</h1>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>library</tag>
        <tag>chapter</tag>
        <tag>ifndef</tag>
        <tag>identifier</tag>
        <tag>endif</tag>
      </tags>
  </entry>
  <entry>
    <title>面经</title>
    <url>/2021/12/fa447478d9bd.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="8b9187b4168e515703a35b79cf5e5f14b16bfae644f2dcf19a41121cda95a469"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>私密</category>
      </categories>
      <tags>
        <tag>int</tag>
        <tag>leetcode</tag>
        <tag>problems</tag>
        <tag>res</tag>
        <tag>offer</tag>
      </tags>
  </entry>
  <entry>
    <title>effective_cpp读书笔记</title>
    <url>/2022/09/84cc1427d0ce.html</url>
    <content><![CDATA[<blockquote>

</blockquote>
<span id="more"></span>
<h1 id="序">序</h1>
<p>声明, 签名(参数, 返回类型), 定义(内存的地点)</p>
<p>构造函数 explicit 禁止隐式类型转换</p>
<p>copy 构造函数: 对象如何以值传递</p>
<h1 id="少用-define">少用 define</h1>
<p>旧式编译器也许不支持上述语法，它们不允许 static 成员在其声明式上获得初值。此外所谓的 “in-class 初值设定”也只允许对<strong>整数常量</strong>进行。如果你的编译器不支持上述语法，你可以将初值放在定义式：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CostEstimate</span> &#123;</span><br><span class="line">  <span class="keyword">private</span>: </span><br><span class="line">  <span class="type">static</span> <span class="type">const</span> <span class="type">double</span> FudgeFactor; <span class="comment">//static class 常量声明 </span></span><br><span class="line">  <span class="comment">//位于头文件内 </span></span><br><span class="line">&#125;; </span><br><span class="line"><span class="type">const</span> <span class="type">double</span> / /<span class="type">static</span> <span class="keyword">class</span> 常量定义 CostEstimate::FudgeFactor = <span class="number">1.35</span>; <span class="comment">//位于实现文件内</span></span><br></pre></td></tr></table></figure>
<p>the enum hack</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>&#123;</span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">  <span class="keyword">enum</span>&#123;num = <span class="number">5</span>&#125;;</span><br><span class="line">  <span class="type">int</span> scores[num];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>用 inline 函数代替 define</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">callWithMax</span><span class="params">(<span class="type">const</span> T&amp; a, <span class="type">const</span> T&amp;b)</span></span>&#123;</span><br><span class="line">  <span class="built_in">f</span>(a&gt;b?a:b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="尽可能使用-const">尽可能使用 const</h1>
<p>编译器强制实行约束</p>
<p>迭代器的 const 和指针一样</p>
<p>const_iterator 等价于 const T*</p>
<p>const iterator 等价于 T* const</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">const</span> C&amp; <span class="keyword">operator</span> = (<span class="type">const</span> C c)&#123;</span><br><span class="line">        i = c.i;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span>&amp; a)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> ci = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> i = ci;</span><br><span class="line">    C c;</span><br><span class="line">    C newc = c;</span><br><span class="line">  	<span class="built_in">add</span>(ci);<span class="comment">//error add(int a)可行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>￥# const 成员函数</p>
<p>在函数声明最后加 const <code>const int add(int a)const&#123;&#125;</code></p>
<p>可以重载</p>
<p>不会对这个类的对象的数据成员作出任何改变, 即在 const 成员函数中无法赋值</p>
<table>
<thead>
<tr class="header">
<th>对象可否调用函数</th>
<th style="text-align: center;">const 对象</th>
<th style="text-align: center;">noconst 对象</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>const 成员函数</td>
<td style="text-align: center;">yes</td>
<td style="text-align: center;">yes</td>
</tr>
<tr class="even">
<td>noconst 成员函数</td>
<td style="text-align: center;">no</td>
<td style="text-align: center;">yes</td>
</tr>
</tbody>
</table>
<p>const 成员函数也不要提供修改途径(比如返回引用), 虽然可以通过编译</p>
<p>可以通过声明成员变量为 <code>mutable</code> 在 const 函数中改变对象的数据</p>
<h1 id="对象使用前初始化">对象使用前初始化</h1>
<p>对于内置类型进行手动初始化, 对于其他类型确保构造函数对每一个成员都进行初始化</p>
<p>赋值!=初始化</p>
<p>对象成员变量的初始化发生在进入构造函数本体之前(使用初始化列表)</p>
<p>\1) If the constructor is for the most-derived class, virtual bases are initialized in the order in which they appear in depth-first left-to-right traversal of the base class declarations <strong>(left-to-right refers to the appearance in base-specifier lists)</strong></p>
<p>\2) Then, direct bases are initialized in left-to-right order as they appear in this class's base-specifier list</p>
<p>\3) Then, non-static data member are initialized in order of declaration in the class definition.</p>
<p>\4) Finally, the body of the constructor is executed</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">C</span>(<span class="type">int</span> i, <span class="type">int</span> j, <span class="type">int</span> k):<span class="built_in">b</span>(i), <span class="built_in">a</span>(j), <span class="built_in">c</span>(k)&#123;</span><br><span class="line">        std::cout&lt;&lt;a&lt;&lt;b&lt;&lt;c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="type">int</span> b;</span><br><span class="line">    <span class="type">int</span> c;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="function">C <span class="title">c</span><span class="params">(a++, a++, a++)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//102</span></span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">ABEntry::<span class="built_in">ABEntry</span>(<span class="type">int</span> a):<span class="built_in">A</span>(a), <span class="built_in">Father</span>(a), <span class="built_in">otherFunc</span>()&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>non-local static 对象初始化: 由于 c++ 未规定这类变量的初始化顺序, 如果别的编译单元使用该对象, 可能得到未初始化的对象</p>
<p>因此, 需要将 non-local static 对象放到专属函数中, 使其变成 local-static 对象, 函数返回 reference</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">ClassC&amp; <span class="title">c</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="type">static</span> D d;</span><br><span class="line">  <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="默认函数">默认函数</h1>
<p>空类: 拷贝构造该函数, 拷贝操作符, 析构函数, 如果没有任何构造函数: 默认构造函数</p>
<p>默认拷贝: 将来源对象的每一个 non-static 成员变量拷贝到目标对象。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    string&amp; s;</span><br><span class="line">    <span class="built_in">C</span>(string str):<span class="built_in">s</span>(str)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    string str = <span class="string">&quot;?&quot;</span>;</span><br><span class="line">    string str2 = <span class="string">&quot;!&quot;</span>;</span><br><span class="line">    <span class="function">C <span class="title">c</span><span class="params">(str)</span></span>;</span><br><span class="line">    <span class="function">C <span class="title">c2</span><span class="params">(str2)</span></span>;</span><br><span class="line">    c = c2;<span class="comment">//error 未定义拷贝运算符</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//含引用, const 成员 都是如此</span></span><br></pre></td></tr></table></figure>
<h1 id="virtual-析构函数">virtual 析构函数</h1>
<p>析构函数的运作方式是, 最深层派生(most derived)的那个 class 其虚构函数最先被调用, 然后是调用其每一个 base class 的析构函数</p>
<h1 id="构造函数析构函数不应该调用-virtual-函数">构造函数析构函数不应该调用 virtual 函数</h1>
<p>构造函数中调用虚函数, 在基类构造函数执行时会调用基类的虚函数而不会下降到派生类</p>
<p>析构函数调用虚函数, 派生对象的成员变量呈现未定义状态, 编译器会无视他们, 进入基类析构函数后对象就成了一个基类对象</p>
<h1 id="operator-返回-this-引用-处理自我赋值">operator= 返回 *this 引用, 处理自我赋值</h1>
<p>实现连锁赋值</p>
<p>自我赋值:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">C&amp; C::<span class="keyword">operator</span>=(<span class="type">const</span> C&amp; rhs)&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">this</span> == &amp;rhs) <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//copy and swap</span></span><br><span class="line">C&amp; C::<span class="keyword">operator</span>=(<span class="type">const</span> C&amp; rhs)&#123;</span><br><span class="line">  C <span class="built_in">tmp</span>(rhs);</span><br><span class="line">  <span class="built_in">swap</span>(tmp, *<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="将resource放到对象中">将resource放到对象中</h1>
<p>auto_ptr</p>
<h1 id="对象在进入构造函数体时就已经完成初始化">对象在进入构造函数体时就已经完成初始化?</h1>
<h1 id="小心返回-reference">小心返回 reference</h1>
<p>￥</p>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>class</tag>
        <tag>int</tag>
        <tag>const</tag>
        <tag>rhs</tag>
        <tag>static</tag>
      </tags>
  </entry>
  <entry>
    <title>headfirst面向对象读书笔记</title>
    <url>/2022/11/a58f730a2a3b.html</url>
    <content><![CDATA[<blockquote>
<p>headfirst面向对象读书笔记, 主要设计一个程序的整体设计, 从需求到规划到实现到测试</p>
</blockquote>
<span id="more"></span>
<ul>
<li><p>三步走</p>
<ol type="1">
<li>确认软件做客户要他做的事</li>
<li>运用基本的的 OO 原则增加软件的灵活性</li>
<li>努力实现可维护可重用的设计</li>
</ol></li>
<li><p>低耦合</p></li>
<li><p><strong>封装</strong>: 保护应用程序的某一部分的信息免遭其他部分的干扰, 应该将变化之物封装起来</p></li>
<li><p>变更: 确保每个类只有一个改变的理由</p></li>
<li><p>内聚力: 内聚力越高, 每个类的责任就定义的越好且越相关</p></li>
<li><p>当你有一组特性跨对象变化时, 使用集合来动态存储, 可以在新特性加入时避免改变程序代码</p></li>
<li><p>根据用户需要的<strong>功能</strong>整理出需求</p></li>
<li><p>需求: <strong>需求列表</strong></p></li>
<li><p>领域分析: 识别、收集、组织及表示领域相关信息的流程，根据的是现有系统与其开发历程的研究、领域专家捕捉到的知识、潜在的理论以及领域里新兴的技术。</p>
<ul>
<li>避免构建不属于你责任范围内的系统部分</li>
</ul></li>
<li><p>用例: <strong>用例过程</strong>, 用例中的名词可能是代码里的类</p>
<p>用用例检查需求, 用例的每一步会满足(涉及)需求</p>
<ul>
<li>明确的价值</li>
<li>起点与终点</li>
<li>外部启动者</li>
</ul></li>
<li><p>主要路径和替换路径</p></li>
<li><p>从第一步到最后一步通过用例的完整路径称为场景</p></li>
<li><p><strong>用例图</strong>:</p>
<ul>
<li>系统, 系统中的用例, 参与者</li>
<li>使用功能列表确定用例图是完整的</li>
</ul></li>
<li><p>接口: 对接口编码而不是对实现, 对接口编码, 程序代码将使用该接口的所有子类, 甚至是还没被创建的那些</p></li>
<li><p>构建系统时尽可能把细节往后拖延</p></li>
<li><p><strong>架构</strong>: 片段如何组织在一起以及哪些比较重要</p>
<ul>
<li>从功能列表中找出比较重要的</li>
<li>架构三问:
<ol type="1">
<li>他是系统本质的一部分吗</li>
<li>他到底是什么意思</li>
<li>我该怎么做</li>
</ol></li>
</ul></li>
<li><p><strong>OO 原则</strong></p>
<ol type="1">
<li>OCP open-close priciple 类应该对扩展开放, 对修改关闭 灵活性!</li>
<li>DRY dont repeat yourself 将共同之物抽取出来置于单一地方来避免重复的额程序代码 一个地方一个需求!</li>
<li>SRP single responsibility principle(内聚力) 每一个对象具有单一职责 $class $method itself!!!</li>
<li>LSP Liskov substitution principle 子类型必须能替换其基类型</li>
</ol></li>
<li><p>继承</p></li>
<li><p>委托: 保护对象免受软件中其他对象实现改变的干扰</p>
<ul>
<li>假如你需要使用另一个类的功能性，但不想改变该动能性，考虑以委托代替继承。</li>
</ul></li>
<li><p>组合: 当你想要使用由接口所定义的行为，并且从该接口的种种实现中进行选择时，组合是最有威力的，不论是在编译期间还是在运行时。</p>
<ul>
<li>在组合中, 当对象被摧毁时, 其所有行为也会被摧毁</li>
</ul></li>
<li><p>聚合: 可以独立于主要对象之外存在</p></li>
<li><p>驱动开发</p>
<ul>
<li>功能驱动开发</li>
<li>用例驱动开发</li>
<li>测试驱动开发, 测试应该具有原子性</li>
</ul></li>
<li><p>编程方式</p>
<ul>
<li>契约式编程: 你正在与客户的程序代码 合作，以对你将如何处理有问题的状况达成协议。 (return null)</li>
<li>防御性编程: 你正在确保客户取得“安全的"响应，不管客户要什么。(throw exception)</li>
</ul></li>
</ul>
<p>整体流程</p>
<ol type="1">
<li>功能列表</li>
<li>用例图</li>
<li>分解问题</li>
<li>需求</li>
<li>领域分析</li>
<li>初步设计(OO 原则)</li>
<li>实现</li>
<li>交付</li>
</ol>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
  </entry>
  <entry>
    <title>http权威指南读书笔记</title>
    <url>/2022/12/968c41444c80.html</url>
    <content><![CDATA[<blockquote>

</blockquote>
<span id="more"></span>
<h1 id="第1章http概述">第1章HTTP概述</h1>
<h2 id="http因特网的多媒体信使">1.1 HTTP——因特网的多媒体信使</h2>
<h2 id="web客户端和服务器">1.2 Web客户端和服务器</h2>
<h2 id="资源">1.3资源</h2>
<h3 id="媒体类型">1.3.1媒体类型</h3>
<p>MIME (multipurpose internet mail extensions)</p>
<h3 id="uri">1.3.2 URI</h3>
<p>URI uniform resource identifier</p>
<h3 id="url">1.3.3 URL</h3>
<p>uniform resource link</p>
<h3 id="urn">1.3.4 URN</h3>
<p>uniform resource name</p>
<h2 id="事务">1.4事务</h2>
<p>一个HTTP事务由一条(从客户端发往服务器的)请求命令和一个(从服务器发回客户端的)响应结果组成。这种通信是通过名为HTTP报文(HTTP message)的格式化数据块进行的</p>
<h3 id="方法">1.4.1方法</h3>
<h3 id="状态码">1.4.2状态码</h3>
<h3 id="web页面中可以包含多个对象">1.4.3 Web页面中可以包含多个对象</h3>
<h2 id="报文">1.5报文</h2>
<h2 id="连接">1.6连接</h2>
<h3 id="tcpip">1.6.1 TCPIP</h3>
<h3 id="连接ip地址及端口号">1.6.2连接、IP地址及端口号</h3>
<p>http 默认 port 80</p>
<h3 id="使用telnet实例">1.6.3使用Telnet实例</h3>
<h2 id="协议版本">1.7协议版本</h2>
<h2 id="web的结构组件">1.8 Web的结构组件</h2>
<h3 id="代理">1.8.1代理</h3>
<h3 id="缓存">1.8.2缓存</h3>
<h3 id="网关">1.8.3网关</h3>
<h3 id="隧道">1.8.4隧道</h3>
<h3 id="agent代理">1.8.5 Agent代理</h3>
<h2 id="起始部分的结束语">1.9起始部分的结束语</h2>
<h2 id="更多信息">1.10更多信息</h2>
<h3 id="http协议信息">1.10.1 HTTP协议信息</h3>
<h3 id="历史透视">1.10.2历史透视</h3>
<h3 id="其他万维网信息">1.10.3其他万维网信息</h3>
<h1 id="第2章url与资源">第2章URL与资源</h1>
<h2 id="浏览因特网资源">2.1浏览因特网资源</h2>
<p>http://www.joes-hardware.com/seasonal/index-fall.html</p>
<p>url 方案 + 服务器位置 + 资源路径</p>
<h2 id="url的语法">2.2 URL的语法</h2>
<h3 id="方案使用什么协议">2.2.1方案——使用什么协议</h3>
<h3 id="主机与端口">2.2.2主机与端口</h3>
<h3 id="用户名和密码">2.2.3用户名和密码</h3>
<h3 id="路径">2.2.4路径</h3>
<h3 id="参数">2.2.5参数</h3>
<p>ftp://prep.ai.mit.edu/pub/gnu;type=d</p>
<h3 id="查询字符串">2.2.6查询字符串</h3>
<p>http://www.joes-hardware.com/inventory-check.cgi?item=12731&amp;color=blue</p>
<p>?属性=属性&amp;属性=属性</p>
<h3 id="片段">2.2.7片段</h3>
<p>http://www.joes-hardware.com/tools.html#drills</p>
<p>#标签</p>
<p>客户端不能将片段传给服务器, 浏览器会根据片段显示感兴趣的资源</p>
<h2 id="url快捷方式">2.3 URL快捷方式</h2>
<h3 id="相对url">2.3.1相对URL</h3>
<figure>
<img src="https://tva1.sinaimg.cn/large/008vxvgGly1h90qdsgbi4j30wo0tmwhy.jpg" alt="截屏2022-12-12 08.40.20" /><figcaption aria-hidden="true">截屏2022-12-12 08.40.20</figcaption>
</figure>
<h3 id="自动扩展url">2.3.2自动扩展URL</h3>
<h2 id="各种令人头疼的字符">2.4各种令人头疼的字符</h2>
<h3 id="url字符集">2.4.1 URL字符集</h3>
<h3 id="编码机制">2.4.2编码机制</h3>
<p>%hex_1 hex_2 表示 ascii 码</p>
<h3 id="字符限制">2.4.3字符限制</h3>
<h3 id="另外一点说明">2.4.4另外一点说明</h3>
<h2 id="方案的世界">2.5方案的世界</h2>
<p>mailto:joe@joes-hardware.com ftp://anonymous:joe%40joeshardware.com@prep.ai.mit.edu:21/pub/gnu/</p>
<p>file:///Users/akunda/Downloads/HTTP%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%EF%BC%88%E4%B8%AD%E6%96%87%E7%89%88ocr%EF%BC%89.pdf</p>
<h2 id="未来展望">2.6未来展望</h2>
<h2 id="更多信息-1">2.7更多信息</h2>
<h1 id="第3章-http报文">第3章 HTTP报文</h1>
<h2 id="报文流">3.1报文流</h2>
<h3 id="报文流入源端服务器">3.1.1报文流入源端服务器</h3>
<h3 id="报文向下游流动">3.1.2报文向下游流动</h3>
<h2 id="报文的组成部分">3.2报文的组成部分</h2>
<p>起始行和首部是 ascii 文本</p>
<h3 id="报文的语法">3.2.1报文的语法</h3>
<h3 id="起始行">3.2.2起始行</h3>
<h3 id="首部">3.2.3首部</h3>
<h3 id="实体的主体部分">3.2.4实体的主体部分</h3>
<h4 id="版本0.9的报文">3.2.5版本0.9的报文</h4>
<h2 id="方法-1">3.3方法</h2>
<h3 id="安全方法">3.3.1 安全方法</h3>
<p>get head, 使用这类 http 请求不会在服务器上产生什么结果</p>
<h3 id="get">3.3.2 GET</h3>
<h3 id="head">3.3.3 HEAD</h3>
<p>服务器开发者必须确保返回的首部与 GET 请求所返回的首部完全相同。遵循 HTTP/1.1 规范，就必须实现 HEAD 方法。</p>
<h3 id="put">3.3.4 PUT</h3>
<p>将请求的主体部分存储在服务器上, 具有幂等性</p>
<p>PUT 方法的语义就是让服务器用请求的主体部分来创建 1 个由所请求的 URL 命名的新文档，或者，如果那个 URL 已经存在的话，就用这个主体来替代它。</p>
<h3 id="post">3.3.5 POST</h3>
<p>向服务器发送需要处理的数据</p>
<p>通常用啦支持表单(form)</p>
<h3 id="trace">3.3.6 TRACE</h3>
<h3 id="options">3.3.7 OPTIONS</h3>
<h3 id="delete">3.3.8 DELETE</h3>
<h3 id="扩展方法">3.3.9扩展方法</h3>
<h2 id="状态码-1">3.4状态码</h2>
<figure>
<img src="https://tva1.sinaimg.cn/large/008vxvgGly1h9147yyfyhj30ts0hydil.jpg" alt="截屏2022-12-12 16.39.11" /><figcaption aria-hidden="true">截屏2022-12-12 16.39.11</figcaption>
</figure>
<figure>
<img src="https://tva1.sinaimg.cn/large/008vxvgGly1h91489y6kpj30te13y45b.jpg" alt="截屏2022-12-12 16.39.28" /><figcaption aria-hidden="true">截屏2022-12-12 16.39.28</figcaption>
</figure>
<figure>
<img src="https://tva1.sinaimg.cn/large/008vxvgGly1h9148igds3j30te0x2tei.jpg" alt="截屏2022-12-12 16.39.39" /><figcaption aria-hidden="true">截屏2022-12-12 16.39.39</figcaption>
</figure>
<h2 id="首部-1">3.5首部</h2>
<h3 id="通用首部">3.5.1通用首部</h3>
<h3 id="请求首部">3.5.2请求首部</h3>
<h3 id="响应首部">3.5.3响应首部</h3>
<h3 id="实体首部">3.5.4实体首部</h3>
<h2 id="更多信息-2">3.6更多信息</h2>
<h1 id="第4章-连接管理">第4章 连接管理</h1>
<h2 id="tcp连接">4.1 TCP连接</h2>
<h3 id="tcp的可靠数据管道">4.1.1 TCP的可靠数据管道</h3>
<h3 id="tcp流是分段的由ip分组传送">4.1.2 TCP流是分段的、由IP分组传送</h3>
<h3 id="保持tcp连接的正确运行">4.1.3保持TCP连接的正确运行</h3>
<h3 id="用tcp套接字编程">4.1.4用TCP套接字编程</h3>
<h2 id="对tcp性能的考虑">4.2对TCP性能的考虑</h2>
<h3 id="http事务的时延">4.2.1 HTTP事务的时延</h3>
<h3 id="性能聚焦区域">4.2.2 性能聚焦区域</h3>
<p>TCP 连接建立握手</p>
<p>TCP 慢启动拥塞控制</p>
<p>数据聚集的 Nagle 算法</p>
<p>用于捎带确认的 TCP 延迟确认算法</p>
<p>TIME_WAIT 时延和端口耗尽</p>
<h3 id="tcp连接的握手时延">4.2.3 TCP连接的握手时延</h3>
<p>tcp 三次握手</p>
<h3 id="延迟确认">4.2.4延迟确认</h3>
<p>延迟确认算法会在一个特定的窗口时间（通常是100~ 200毫 秒）内将输出确认存放在<strong>缓冲区</strong>中，以寻找能够捎带它的输出数据分组。如果在那 个时间段内没有输出数据分组，就将确认信息放在单独的分组中传送。</p>
<p>一问一答的模式会被这种算法限制速度, 可以禁用</p>
<h3 id="tcp慢启动">4.2.5 TCP慢启动</h3>
<p>可以使用持久连接</p>
<h3 id="nagle算法与tcp_nodelay">4.2.6 Nagle算法与TCP_NODELAY</h3>
<p>Nagle 算法（根据其发明者 John Nagle 命名）试图在发送一个分组之前，将大量 TCP 数据绑定在一起，以提高网络效率。RFC 896 “TP/TCP 互连网络中的拥塞控 制”对此算法进行了描述。它鼓励发送全尺寸的tcp 段 (LAN 1500 bytes)</p>
<p>用 TCP_NODELAY 禁用 nagle 算法</p>
<h3 id="time_wait累积与端口耗尽">4.2.7 TIME_WAIT累积与端口耗尽</h3>
<p>2MSL</p>
<h2 id="http连接的处理">4.3 HTTP连接的处理</h2>
<h3 id="常被误解的connection首部">4.3.1常被误解的Connection首部</h3>
<p>逐跳首部, 跳完删除</p>
<p>HTTP 应用程序收到一条带有 Connection 首部的报文时，接收端会解析发送端 请求的所有选项，并将其应用。 然后会在将此报文转发给下一跳地址之前，<strong>删除 Connection 首部以及 Connection 中列出的所有首部。</strong></p>
<h3 id="串行事务处理时延">4.3.2串行事务处理时延</h3>
<h2 id="并行连接">4.4并行连接</h2>
<h3 id="并行连接可能会提高页面的加载速度">4.4.1并行连接可能会提高页面的加载速度</h3>
<h3 id="并行连接不一定更快">4.4.2并行连接不一定更快</h3>
<p>可能原因是因为带宽不足</p>
<h3 id="并行连接可能让人感觉更快一些">4.4.3并行连接可能让人“感觉”更快一些</h3>
<h2 id="持久连接">4.5持久连接</h2>
<p>减少开销: 慢启动, 连接建立</p>
<h3 id="持久以及并行连接">4.5.1 持久以及并行连接</h3>
<h4 id="http1.0-keep-alive连接">4.5.2 HTTP/1.0+ keep-alive连接</h4>
<h3 id="keep-alive操作">4.5.3 Keep-Alive操作</h3>
<h3 id="keep-alive选项">4.5.4 Keep-Alive选项</h3>
<h3 id="keep-alive连接的限制和规则">4.5.5 Keep-Alive连接的限制和规则</h3>
<h3 id="keep-alive和哑代理">4.5.6 Keep-Alive和哑代理</h3>
<p>盲中继: 不理解 connection 首部的代理</p>
<figure>
<img src="https://tva1.sinaimg.cn/large/008vxvgGly1h96wg3r99pj30wm0g00uh.jpg" alt="截屏2022-12-13 04.53.16" /><figcaption aria-hidden="true">截屏2022-12-13 04.53.16</figcaption>
</figure>
<p>因此代理必须删除 connection 中的首部</p>
<h3 id="插入proxy-connection">4.5.7插入Proxy-Connection</h3>
<p>在网景的变通做法是，浏览器会向代理发送非标准的 Proxy-Connection 扩展首部，而不是官方支持的著名的 Connection 首部。如果代理是盲中继，它会将无意义的 Proxy-Connection 首部转发给 Web 服务器，服务器会忽略此首部，不会带来任何问题。 但如果代理是个聪明的代理（能够理解持久连接的握手动作)，就用一个 Connection 首部取代无意义的 Proxy-Connection 首部，然后将其发送给服务器，以收到预期的效果。</p>
<h4 id="http-1.1持久连接">4.5.8 HTTP/ 1.1持久连接</h4>
<p>默认激活</p>
<h3 id="持久连接的限制和规则">4.5.9持久连接的限制和规则</h3>
<p>"如果客户端不想在连接上发送其他请求了，就应该在最后一条请求中发送一个 Conneetion: close 请求首部。</p>
<p>HTTP/1.1 的代理必须能够分别管理与客户端和服务器的持久连接——每个持久 连接都只适用于<strong>一跳传输</strong>。</p>
<h2 id="管道化连接">4.6管道化连接</h2>
<h2 id="关闭连接的奥秘">4.7关闭连接的奥秘</h2>
<h3 id="任意解除连接">4.7.1“任意”解除连接</h3>
<h3 id="content-length及截尾操作">4.7.2 Content-Length及截尾操作</h3>
<p>任何 http 响应都应该有明确的 content-length 首部, 用来预防连接的突然关闭</p>
<h3 id="连接关闭容限重试以及幂等性">4.7.3连接关闭容限、重试以及幂等性</h3>
<p>客户端不应该对非幂等请求进行管道连接(post)</p>
<h3 id="正常关闭连接">4.7.4正常关闭连接</h3>
<p>半关闭: 单独关闭输入或者输出通道</p>
<p>关闭输出信道是安全的, 关闭输入信道是危险的</p>
<p>比如你已经在一条持久连接上发送了10 条管道式请求了，响应也已经收到了，正在操作系统的缓冲区中存着呢（但应用程序还未将其读走)。 现在，假设你发送了 第11条请求，但服务器认为你使用这条连接的时间已经够长了，决定将其关闭。那么你的第11 条请求就会被发送到一条已关闭的连接上去，并会向你回送一条重置信 息。<strong>这个重置信息会清空你的输人缓冲区。</strong></p>
<p>但不幸的是，无法确保对等实体会实现半关闭，或对其进行检查。因此，想要正常关闭连接的应用程序应该<strong>先半关闭其输出信道，然后周期性地检查其输入信道的状态</strong>（查找数据，或流的末尾)。如果在一定的时间区间内对端没有关闭输人信道，应用程序可以强制关闭连接，以节省资源。</p>
<h2 id="更多信息-3">4.8更多信息</h2>
<h3 id="http连接">4.8.1 HTTP连接</h3>
<h3 id="http性能问题">4.8.2 HTTP性能问题</h3>
<h3 id="tcpip-1">4.8.3 TCPIP</h3>
<h1 id="第5章web服务器">第5章Web服务器</h1>
<h2 id="各种形状和尺寸的web服务器">5.1各种形状和尺寸的Web服务器</h2>
<h3 id="web服务器的实现">5.1.1 Web服务器的实现</h3>
<h3 id="通用软件web服务器">5.1.2通用软件Web服务器</h3>
<h3 id="web服务器设备">5.1.3 Web服务器设备</h3>
<h3 id="嵌入式web服务器">5.1.4嵌入式Web服务器</h3>
<h2 id="最小的perl-web服务器">5.2最小的Perl Web服务器</h2>
<h2 id="实际的web服务器会做些什么">5.3实际的Web服务器会做些什么</h2>
<h2 id="第一步接受客户端连接">5.4第一步——接受客户端连接</h2>
<h3 id="处理新连接">5.4.1处理新连接</h3>
<h3 id="客户端主机名识别">5.4.2客户端主机名识别</h3>
<p>反向 DNS, 将客户端 ip 转换成主机名</p>
<h3 id="通过ident确定客户端用户">5.4.3通过ident确定客户端用户</h3>
<p>如果客户端支持 ident 协议, 就会在 113 port 监听请求, 服务端从这里请求用户名</p>
<h2 id="第二步接收请求报文">5.5第二步——接收请求报文</h2>
<h3 id="报文的内部表示法">5.5.1报文的内部表示法</h3>
<h3 id="连接的输入输出处理结构">5.5.2连接的输入／输出处理结构</h3>
<h2 id="第三步处理请求">5.6第三步——处理请求</h2>
<h2 id="第四步对资源的映射及访问">5.7第四步——对资源的映射及访问</h2>
<h3 id="docroot">5.7.1 docroot</h3>
<p>Web 服务器支持各种不同类型的资源映射，但最简单的资源映射形式就是用请求 URI作为名字来访问 Web服务器文件系统中的文件。 通常，web 服务器的文件系统中会有一个特殊的文件夹专门用于存放 Web 内容。这个文件夹被称为文档的根目录（document root，或 docroot)。Web 服务器从请求报文中获取 URI，并将其附加在文档根目录的后面。</p>
<h3 id="目录列表">5.7.2目录列表</h3>
<p>web 服务器对应目录 url 的请求时</p>
<ol type="1">
<li>返回错误</li>
<li>返回索引文件 index.html</li>
<li>扫描目录, 返回包含目录内容的文件</li>
</ol>
<h3 id="动态内容资源的映射">5.7.3动态内容资源的映射</h3>
<p>cgi common gateway interface</p>
<h3 id="服务器端包含项">5.7.4服务器端包含项</h3>
<p>SSI server side includes</p>
<h3 id="访问控制">5.7.5访问控制</h3>
<h2 id="第五步构建响应">5.8第五步——构建响应</h2>
<h3 id="响应实体">5.8.1响应实体</h3>
<h3 id="mime类型">5.8.2 MIME类型</h3>
<h3 id="重定向">5.8.3重定向</h3>
<ul>
<li>永久删除资源 301</li>
<li>临时删除资源 303, 307</li>
<li>url 增强</li>
<li>负载均衡</li>
<li>服务器关联</li>
<li>规范目录名称 在目录名后加斜线</li>
</ul>
<h2 id="第六步发送响应">5.9第六步——发送响应</h2>
<h2 id="第七步记录日志">5.10第七步——记录日志</h2>
<h2 id="更多信息-4">5.11更多信息</h2>
<h1 id="第6章-代理">第6章 代理</h1>
<h2 id="web的中间实体">6.1 Web的中间实体</h2>
<h3 id="私有和共享代理">6.1.1私有和共享代理</h3>
<h3 id="代理与网关的对比">6.1.2代理与网关的对比</h3>
<p>代理两端使用同一种协议</p>
<p>网关将不同的协议连接起来</p>
<h2 id="为什么使用代理">6.2为什么使用代理</h2>
<ul>
<li>防火墙</li>
<li>web 缓存</li>
<li>反向代理
<ul>
<li>正向代理: 代理属于客户端的一部分</li>
<li>反向代理: 代理为服务器的一部分</li>
</ul></li>
<li>内容路由器</li>
<li>转码器</li>
<li>匿名</li>
</ul>
<h2 id="代理会去往何处">6.3代理会去往何处</h2>
<h3 id="代理服务器的部署">6.3.1代理服务器的部署</h3>
<h3 id="代理的层次结构">6.3.2代理的层次结构</h3>
<h3 id="代理是如何获取流量的">6.3.3代理是如何获取流量的</h3>
<ul>
<li>修改客户端</li>
<li>修改网络, 拦截代理</li>
<li>修改 dns</li>
<li>修改 web 服务器</li>
</ul>
<h2 id="客户端的代理设置">6.4客户端的代理设置</h2>
<p>PAC proxy auto configuration</p>
<p>WPAD web proxy autodiscovery protocol</p>
<h3 id="客户端的代理配置手工配置">6.4.1客户端的代理配置：手工配置</h3>
<h3 id="客户端代理配置pac文件">6.4.2客户端代理配置：PAC文件</h3>
<p>FindProxyForURL(url, host)</p>
<p>返回:</p>
<ul>
<li>direct 直接连接</li>
<li>proxy host:port 使用指定代理</li>
<li>socks host:port 使用指定 socks 服务器(使用 socks(socket secure) 协议的服务器) Bill希望通过互联网与Jane沟通，但他们的网络之间存在一个<a href="https://zh.m.wikipedia.org/wiki/防火墙">防火墙</a>，Bill不能直接与Jane沟通。所以，Bill连接到他的网络上的SOCKS代理，告知它他想要与Jane建立连接；SOCKS代理打开一个能穿过防火墙的连接，并促进Bill和Jane之间的通信。</li>
</ul>
<h3 id="客户端代理配置wpad">6.4.3客户端代理配置：WPAD</h3>
<h2 id="与代理请求有关的一些棘手问题">6.5与代理请求有关的一些棘手问题</h2>
<h3 id="代理uri与服务器uri的不同">6.5.1代理URI与服务器URI的不同</h3>
<p>(1)没有设置客户端使用代理时，它会发送部分 URI（参见图 6-15a)。</p>
<p>(2）设置客户端使用代理时，它会发送完整 URI（参见图 6-15b)。</p>
<h3 id="与虚拟主机一样的问题">6.5.2与虚拟主机一样的问题</h3>
<p>显式的代理要求在请求报文中使用完整 URI 来解决这个问题</p>
<p>虚拟主机 Web 服务器要求使用 Host 首部来承载主机和端口信息。</p>
<h3 id="拦截代理会收到部分uri">6.5.3拦截代理会收到部分URI</h3>
<h3 id="代理既可以处理代理请求也可以处理服务器请求">6.5.4代理既可以处理代理请求，也可以处理服务器请求</h3>
<ul>
<li><p>如果提供的是完整 URI，代理就应该使用这个完整 URI。</p></li>
<li><p>如果提供的是部分 URI，而且有 Host 首部，就应该用 Host 首部来确定原始服 务器的名字和端口号。</p></li>
<li><p>如果提供的是部分 URI,而且没有Host 首部,就要用其他方法来确定原始服务器：</p>
<ul>
<li>如果代理是代表原始服务器的替代物，可以用真实服务器的地址和端口号来 配置代理：</li>
<li>如果流最被拦截了，而且拦截者也可以提供原始的IP 地址和端口，代理就可 以使用拦截技术提供的IP 地址和端口号（参见第20章</li>
<li>如果所有方法都失败了，代理没有足够的信息来确定原始服务器，就必须返 回一条错误报文（通常是建议用户升级到支持 Host 首部的现代浏览器)。</li>
</ul></li>
</ul>
<h3 id="转发过程中对uri的修改">6.5.5转发过程中对URI的修改</h3>
<h3 id="uri的客户端自动扩展和主机名解析">6.5.6 URI的客户端自动扩展和主机名解析</h3>
<p>但是，如果没有找到主机，很多浏览器都会尝试者提供某种主机名自动“扩展”机制，以防用户输入的是主机“简短”的缩写形式）。</p>
<ul>
<li>很多浏览器会尝试着加入前缀 www.和后缀.com</li>
<li>有些浏览器甚至会将未解析出来的 URI 传递给第三方站点，这个站点会尝试着 校正拼写错误，并给出一些用户可能希望访问的 URI 建议。</li>
<li>而且，大多数系统中的 DNS配置允许用户只输入主机名的前缀，然后 DNS 会自 动搜索域名。如果用户位于域名 oreilly.com 的范围之内，并输人了主机名 host7， DNS会自动尝试将其与 host7.oreilly.com 进行匹配。这并不是完整有效的主机名。</li>
</ul>
<h3 id="没有代理时uri的解析">6.5.7没有代理时URI的解析</h3>
<p>客户端查找有效主机名</p>
<h3 id="有显式代理时uri的解析">6.5.8有显式代理时URI的解析</h3>
<p>不扩展直接发给代理</p>
<h3 id="有拦截代理时uri的解析">6.5.9有拦截代理时URI的解析</h3>
<p>客户端查找有效的主机名</p>
<p>在第(4a) 步中，客户端已经成功解析了主机名，并有了一张IP 地址列表。有些 IP 地址可能已经停用了，所以，通常客户端会<strong>尝试着连接每个 IP 地址</strong>，直到成 功为止。 但对拦截代理来说，第一次连接请求就会被代理服务器拦截成功，不会 连接到原始服务器上去。客户端认为它在与 Web 服务器进行成功的对话，但那 个 Web 服务器可能甚至都不处于活跃状态。 当代理最终准备好与真正的原始服务器进行交互时〔第（5b）步]，代理可能会发 现那个 IP 地址实际指向的是一个已停用的服务器。为了提供与浏览器相同级别 的容错机制，<strong>代理可以通过解析 Host 首部的主机名，也可以通过对IP 地址的反向 DNS 查找来尝试其他IP 地址。</strong>將浏览器配置为使用显式代理时，它们会依赖 代理的容错机制，所以对拦截和显式的代理实现来说，在 DNS解析到已停用服 务器时，提供容错机制是很重要的。</p>
<h2 id="追踪报文">6.6追踪报文</h2>
<h3 id="via首部">6.6.1 via首部</h3>
<h3 id="trace方法">6.6.2 TRACE方法</h3>
<h2 id="代理认证">6.7代理认证</h2>
<p>407</p>
<h2 id="代理的互操作性">6.8代理的互操作性</h2>
<h3 id="处理代理不支持的首部和方法">6.8.1处理代理不支持的首部和方法</h3>
<h3 id="options发现对可选特性的支持">6.8.2 OPTIONS：发现对可选特性的支持</h3>
<h3 id="allow首部">6.8.3 Allow首部</h3>
<h2 id="更多信息-5">6.9更多信息</h2>
<h1 id="第7章-缓存">第7章 缓存</h1>
<h2 id="冗余的数据传输">7.1冗余的数据传输</h2>
<h2 id="带宽瓶颈">7.2带宽瓶颈</h2>
<h2 id="瞬间拥塞">7.3瞬间拥塞</h2>
<h2 id="距离时延">7.4距离时延</h2>
<h2 id="命中和未命中的">7.5命中和未命中的</h2>
<h3 id="再验证">7.5.1再验证</h3>
<p>get if-modified-since</p>
<ul>
<li>命中 304 not modified</li>
<li>未命中 200 ok</li>
<li>已删除 404 not found</li>
</ul>
<h3 id="命中率">7.5.2命中率</h3>
<h3 id="字节命中率">7.5.3字节命中率</h3>
<p>字节命中率表示的是缓存提供的字节在传输的所有字节中所占的比例。通过这种度量方式，可以得知节省流量的程度. 100% 的字节命中率说明每个字节都来自缓存， 没有流量流到因特网上去。</p>
<h3 id="区分命中和未命中的情况">7.5.4区分命中和未命中的情况</h3>
<p>响应中的 Date 首部 如果比当前时间要早得多, 通常认为来自缓存</p>
<p>age 首部</p>
<h2 id="缓存的拓扑结构">7.6缓存的拓扑结构</h2>
<h3 id="私有缓存">7.6.1私有缓存</h3>
<h3 id="公有代理缓存">7.6.2公有代理缓存</h3>
<p>代理缓存</p>
<h3 id="代理缓存的层次结构">7.6.3代理缓存的层次结构</h3>
<h3 id="网状缓存内容路由以及对等缓存">7.6.4网状缓存、内容路由以及对等缓存</h3>
<h2 id="缓存的处理步骤">7.7缓存的处理步骤</h2>
<ol type="1">
<li><p>接收——缓存从网络中读取抵达的请求报文。</p></li>
<li><p>解析——缓存对报文进行解析，提取出 URL 和各种首部。</p></li>
<li><p>查询—缓存查看是否有本地副本可用，如果没有，就获取一份副本（并将其保 存在本地）。</p></li>
</ol>
<p>(4)新鲜度检测——缓存查看已缓存副本是否足够新鲜，如果不是，就询问服务器是 否有任何更新。</p>
<p>(5)创建响应——缓存会用新的首部和已缓存的主体来构建一条响应报文。</p>
<ol start="6" type="1">
<li>发送——缓存通过网络将响应发回给客户端。</li>
</ol>
<p>(7)日志——缓存可选地创建一个日志文件条目来描述这个事务。</p>
<h3 id="第一步接收">7.7.1第一步——接收</h3>
<h3 id="第二步解析">7.7.2第二步——解析</h3>
<h3 id="第三步查找">7.7.3第三步——查找</h3>
<h3 id="第四步新鲜度检测">7.7.4第四步——新鲜度检测</h3>
<p>freshness limit</p>
<h3 id="第五步创建响应">7.7.5第五步——创建响应</h3>
<h3 id="第六步发送">7.7.6第六步——发送</h3>
<h3 id="第七步日志">7.7.7第七步——日志</h3>
<h3 id="缓存处理流程图">7.7.8缓存处理流程图</h3>
<h2 id="保持副本的新鲜">7.8保持副本的新鲜</h2>
<figure>
<img src="https://tva1.sinaimg.cn/large/008vxvgGly1h96wfu393oj30wk0j40ug.jpg" alt="截屏2022-12-14 00.10.58" /><figcaption aria-hidden="true">截屏2022-12-14 00.10.58</figcaption>
</figure>
<h3 id="文档过期">7.8.1文档过期</h3>
<p>cache-control: max-age</p>
<p>expires</p>
<h3 id="过期日期和使用期">7.8.2过期日期和使用期</h3>
<h3 id="服务器再验证">7.8.3服务器再验证</h3>
<p>已缓存文档过期意味着到进行核对的时间了, 这种情况叫服务器再验证</p>
<h3 id="用条件方法进行再验证">7.8.4用条件方法进行再验证</h3>
<p>if-modified-since</p>
<p>if-none-match</p>
<h3 id="if-modified-sincedate再验证">7.8.5 If-Modified-Since：Date再验证</h3>
<p>IMS 请求</p>
<h3 id="if-none-match实体标签再验证">7.8.6 If-None-Match：实体标签再验证</h3>
<p>版本号</p>
<h3 id="强弱验证器">7.8.7强弱验证器</h3>
<p>ETag: W/"v2.6"</p>
<p>If-None-Match: W/"v2.6"</p>
<h3 id="什么时候应该使用实体标签和最近修改日期">7.8.8什么时候应该使用实体标签和最近修改日期</h3>
<h2 id="控制缓存的能力">7.9控制缓存的能力</h2>
<h3 id="no-store与no-cache响应首部">7.9.1 no-Store与no-Cache响应首部</h3>
<p>no-store 不存储在代理缓存中</p>
<p>no-cache 在验证前不提供缓存</p>
<h3 id="max-age响应首部">7.9.2 max-age响应首部</h3>
<p>单位: 秒</p>
<h3 id="expires响应首部">7.9.3 Expires响应首部</h3>
<p>内容: 过期的日期</p>
<h3 id="must-revalidate响应首部">7.9.4 must-revalidate响应首部</h3>
<p>Cache-Control: must-revalidate响应首部告诉缓存，在事先没有跟原始服务 器进行再验证的情况下，不能提供这个对象的陈旧副本 缓存仍然可以随意提供新 鮮的副本。如果在缓存进行 must -revalidate 新鲜度检查时，原始服务器不可 用，缓存就必须返回一条 504 Gateway Timeout 错误。</p>
<h3 id="试探性过期">7.9.5试探性过期</h3>
<p>LM-factor</p>
<figure>
<img src="https://tva1.sinaimg.cn/large/008vxvgGly1h96wfnrz8dj30xo08awfd.jpg" alt="截屏2022-12-14 00.40.40" /><figcaption aria-hidden="true">截屏2022-12-14 00.40.40</figcaption>
</figure>
<h3 id="客户端的新鲜度限制">7.9.6客户端的新鲜度限制</h3>
<h3 id="注意事项">7.9.7注意事项</h3>
<h2 id="设置缓存控制">7.10设置缓存控制</h2>
<h3 id="控制apache的http首部">7.10.1控制Apache的HTTP首部</h3>
<h3 id="通过http-equiv控制html缓存">7.10.2通过HTTP-EQUIv控制HTML缓存</h3>
<h2 id="详细算法">7.11详细算法</h2>
<h3 id="使用期和新鲜生存期">7.11.1使用期和新鲜生存期</h3>
<h3 id="使用期的计算">7.11.2使用期的计算</h3>
<p>使用期就是服务器发布响应(或服务器对其进行了再验证)之后进行的总时间</p>
<h3 id="完整的使用期计算算法">7.11.3完整的使用期计算算法</h3>
<h3 id="新鲜生存期计算">7.11.4新鲜生存期计算</h3>
<h3 id="完整的服务器新鲜度算法">7.11.5完整的服务器——新鲜度算法</h3>
<h2 id="缓存和广告">7.12缓存和广告</h2>
<h3 id="发布广告者的两难处境">7.12.1发布广告者的两难处境</h3>
<p>缓存会向原始服务器隐藏实际的访问次数</p>
<h3 id="发布者的响应">7.12.2发布者的响应</h3>
<p>一种方法是配置缓存, 使其每次访问都要与原始服务器再验证</p>
<h3 id="日志迁移">7.12.3日志迁移</h3>
<p>迁移命中日志</p>
<h3 id="命中计数和使用限制">7.12.4命中计数和使用限制</h3>
<p>Meter 首部</p>
<h2 id="更多信息-6">7.13更多信息</h2>
<h1 id="第8章-集成点网关隧道及中继">第8章 集成点：网关、隧道及中继</h1>
<h2 id="网关-1">8.1网关</h2>
<p>抽象出了一种能够到达资源的方法</p>
<h2 id="协议网关">8.2协议网关</h2>
<p>协议转换</p>
<h3 id="http-服务器端web网关">8.2.1 HTTP/* 服务器端Web网关</h3>
<h3 id="httphttps服务器端安全网关">8.2.2 HTTP/HTTPS：服务器端安全网关</h3>
<h3 id="httpshttp客户端安全加速器网关">8.2.3 HTTPS/HTTP客户端安全加速器网关</h3>
<h2 id="资源网关">8.3资源网关</h2>
<h3 id="cgi">8.3.1CGI</h3>
<p>快速 cgi</p>
<h3 id="服务器扩展api">8.3.2服务器扩展API</h3>
<h2 id="应用程序接口和web服务">8.4应用程序接口和Web服务</h2>
<h2 id="隧道-1">8.5隧道</h2>
<h3 id="用connect建立http隧道">8.5.1用CONNECT建立HTTP隧道</h3>
<p>CONNECT 方法请求隧道网关创建一条到达任意目的服务器和端口的 TCP 连接，并 对客户端和服务器之间的后继数据进行盲转发。</p>
<h3 id="数据隧道定时及连接管理">8.5.2数据隧道、定时及连接管理</h3>
<h3 id="ssl隧道">8.5.3 SSL隧道</h3>
<h3 id="ssl隧道与httphttps网关的对比">8.5.4 SSL隧道与HTTP/HTTPS网关的对比</h3>
<h3 id="隧道认证">8.5.5隧道认证</h3>
<h3 id="隧道的安全性考虑">8.5.6隧道的安全性考虑</h3>
<h2 id="中继">8.6中继</h2>
<p>relay</p>
<h2 id="更多信息-7">8.7更多信息</h2>
<h1 id="第9章web机器人">第9章Web机器人</h1>
<h2 id="爬虫及爬行方式">9.1爬虫及爬行方式</h2>
<h3 id="从哪儿开始根集">9.1.1从哪儿开始：根集</h3>
<h3 id="链接的提取以及相对链接的标准化">9.1.2链接的提取以及相对链接的标准化</h3>
<h3 id="避免环路的出现">9.1.3避免环路的出现</h3>
<h3 id="循环与复制">9.1.4循环与复制</h3>
<h3 id="面包屑留下的痕迹">9.1.5面包屑留下的痕迹</h3>
<p>存在位数组, 检查点, 树和散列表</p>
<h3 id="别名与机器人环路">9.1.6别名与机器人环路</h3>
<h3 id="规范化url">9.1.7规范化URL</h3>
<h3 id="文件系统连接环路">9.1.8文件系统连接环路</h3>
<h3 id="动态虚拟web空间">9.1.9动态虚拟Web空间</h3>
<h3 id="避免循环和重复">9.1.10避免循环和重复</h3>
<h2 id="机器人的http">9.2机器人的HTTP</h2>
<h3 id="识别请求首部">9.2.1识别请求首部</h3>
<h3 id="虚拟主机">9.2.2虚拟主机</h3>
<h3 id="条件请求">9.2.3条件请求</h3>
<h3 id="对响应的处理">9.2.4对响应的处理</h3>
<h3 id="user-agent导向">9.2.5 User-Agent导向</h3>
<h2 id="行为不当的机器人">9.3行为不当的机器人</h2>
<h2 id="拒绝机器人访问">9.4拒绝机器人访问</h2>
<p>robots.txt</p>
<h3 id="拒绝机器人访问标准">9.4.1拒绝机器人访问标准</h3>
<h4 id="web站点和robots.txt文件">9.4.2 Web站点和robots.txt文件</h4>
<h4 id="robots.txt文件的格式">9.4.3 robots.txt文件的格式</h4>
<h4 id="其他有关robots.txt的知识">9.4.4其他有关robots.txt的知识</h4>
<h4 id="缓存和robots.txt的过期">9.4.5缓存和robots.txt的过期</h4>
<h3 id="拒绝机器人访问的perl代码">9.4.6拒绝机器人访问的Perl代码</h3>
<h3 id="html的robot-control元标签">9.4.7 HTML的robot-control元标签</h3>
<h2 id="机器人的规范">9.5机器人的规范</h2>
<h2 id="搜索引擎">9.6搜索引擎</h2>
<h3 id="大格局">9.6.1大格局</h3>
<h3 id="现代搜索引擎结构">9.6.2现代搜索引擎结构</h3>
<h3 id="全文索引">9.6.3全文索引</h3>
<h3 id="发布查询请求">9.6.4发布查询请求</h3>
<h3 id="对结果进行排序并提供查询结果">9.6.5对结果进行排序，并提供查询结果</h3>
<h3 id="欺诈">9.6.6欺诈</h3>
<h2 id="更多信息-8">9.7更多信息</h2>
<h1 id="第10章http-ng">第10章HTTP-NG</h1>
<h2 id="http发展中存在的问题">10.1 HTTP发展中存在的问题</h2>
<h2 id="http-ng的活动">10.2 HTTP-NG的活动</h2>
<h2 id="模块化及功能增强">10.3模块化及功能增强</h2>
<h2 id="分布式对象">10.4分布式对象</h2>
<h2 id="第一层报文传输">10.5第一层——报文传输</h2>
<h2 id="第二层远程调用">10.6第二层——远程调用</h2>
<h2 id="第三层web应用">10.7第三层——Web应用</h2>
<h2 id="webmux">10.8 WebMUX</h2>
<h2 id="二进制连接协议">10.9二进制连接协议</h2>
<h2 id="当前的状态">10.10当前的状态</h2>
<h2 id="更多信息-9">10.11更多信息</h2>
<h1 id="第11章-客户端识别与cookie机制">第11章 客户端识别与cookie机制</h1>
<h2 id="个性化接触">11.1个性化接触</h2>
<h2 id="http首部">11.2 HTTP首部</h2>
<h2 id="客户端ip地址">11.3客户端IP地址</h2>
<h2 id="用户登录">11.4用户登录</h2>
<p>authorization 首部</p>
<h2 id="胖url">11.5胖URL</h2>
<p>fat URL</p>
<p>对普通 url进行扩展</p>
<h2 id="cookie">11.6 cookie</h2>
<h3 id="cookie的类型">11.6.1 cookie的类型</h3>
<p>会话 cookie , 持久 cookie</p>
<h3 id="cookie是如何工作的">11.6.2 cookie是如何工作的</h3>
<p>服务器: set-cookie</p>
<p>客户端: cookie</p>
<h3 id="cookie罐客户端的状态">11.6.3 cookie罐：客户端的状态</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Netscape HTTP Cookie File</span><br><span class="line"># http://www.netscape.com/newsref/sta/cookie_epec.html </span><br><span class="line"># This is a generated file! Do not edit. </span><br><span class="line"># </span><br><span class="line"># domain                 allh  path secure expires name value</span><br><span class="line"></span><br><span class="line">www.fedex.com            FALSE /    FALSE 1136109676 cc    /us/ </span><br><span class="line">.bankofamericaonline.com TRUE  /    FALSE 1009789256 Btate CA</span><br><span class="line">cnn.com                  TRUE  /    FALSE 1035069235 SelEdition www</span><br><span class="line">secure.eepulse.net       FALSE /eePulse FALSE 1007162968 cid %FE%FF%002 </span><br><span class="line">www.reformamt.org        TRUE  /forum FALSE 1033761379 LastVisit 1003520952 </span><br><span class="line">www.reformamt.org        TRUE  /forum FALSE 1033761379 UserName Guest</span><br></pre></td></tr></table></figure>
<h3 id="不同站点使用不同的cookie">11.6.4不同站点使用不同的cookie</h3>
<p>浏览器只向服务器发送服务器产生的那些 cookie</p>
<h3 id="cookie成分">11.6.5 cookie成分</h3>
<h3 id="cookies版本0netscape">11.6.6 cookies版本0（Netscape</h3>
<h3 id="cookies版本1rfc-2965">11.6.7 cookies版本1（RFC 2965）</h3>
<h3 id="cookie与会话跟踪">11.6.8 cookie与会话跟踪</h3>
<h3 id="cookie与缓存">11.6.9 cookie与缓存</h3>
<h3 id="cookie安全性和隐私">11.6.10 cookie、安全性和隐私</h3>
<h2 id="更多信息-10">11.7更多信息</h2>
<h1 id="第12章-基本认证机制">第12章 基本认证机制</h1>
<h2 id="认证">12.1认证</h2>
<h3 id="http的质询响应认证框架">12.1.1 HTTP的质询／响应认证框架</h3>
<p>401 unauthorized</p>
<h3 id="认证协议与首部">12.1.2认证协议与首部</h3>
<h3 id="安全域">12.1.3安全域</h3>
<h2 id="基本认证">12.2基本认证</h2>
<h3 id="基本认证实例">12.2.1基本认证实例</h3>
<h3 id="base-64用户名密码编码">12.2.2 Base-64用户名／密码编码</h3>
<h3 id="代理认证-1">12.2.3代理认证</h3>
<h2 id="基本认证的安全缺陷">12.3基本认证的安全缺陷</h2>
<p>基本认证会将用户名和密码以一种很容易解码的形式表示, 实际上就是以明码传输的</p>
<p>即使加密, 也可以被拦截从而不断发送请求</p>
<h2 id="更多信息-11">12.4更多信息</h2>
<h1 id="第13章-摘要认证">第13章 摘要认证</h1>
<h2 id="摘要认证的改进">13.1摘要认证的改进</h2>
<h3 id="用摘要保护密码">13.1.1用摘要保护密码</h3>
<p>不发送密码, 而是发送指纹或者密码的摘要</p>
<h3 id="单向摘要">13.1.2单向摘要</h3>
<p>MD5-&gt;128 位</p>
<h3 id="用随机数防止重放攻击">13.1.3用随机数防止重放攻击</h3>
<p>随机数 nonce</p>
<h3 id="摘要认证的握手机制">13.1.4摘要认证的握手机制</h3>
<h2 id="摘要的计算">13.2摘要的计算</h2>
<h3 id="摘要算法的输入数据">13.2.1摘要算法的输入数据</h3>
<h3 id="算法hd和kdsd">13.2.2算法H（d和KD（s，d）</h3>
<h3 id="与安全性相关的数据a1">13.2.3与安全性相关的数据（A1）</h3>
<h3 id="与报文有关的数据a2">13.2.4与报文有关的数据（A2）</h3>
<h3 id="摘要算法总述">13.2.5摘要算法总述</h3>
<h3 id="摘要认证会话">13.2.6摘要认证会话</h3>
<h3 id="预授权">13.2.7预授权</h3>
<p>成功时发送下一个随机数</p>
<h3 id="随机数的选择">13.2.8随机数的选择</h3>
<h3 id="对称认证">13.2.9对称认证</h3>
<h2 id="增强保护质量">13.3增强保护质量</h2>
<h3 id="报文完整性保护">13.3.1报文完整性保护</h3>
<h3 id="摘要认证首部">13.3.2摘要认证首部</h3>
<h2 id="应该考虑的实际问题">13.4应该考虑的实际问题</h2>
<h3 id="多重质询">13.4.1多重质询</h3>
<h3 id="差错处理">13.4.2差错处理</h3>
<h3 id="保护空间">13.4.3保护空间</h3>
<h3 id="重写uri">13.4.4重写URI</h3>
<h3 id="缓存-1">13.4.5缓存</h3>
<h2 id="安全性考虑">13.5安全性考虑</h2>
<h3 id="首部篡改">13.5.1首部篡改</h3>
<h3 id="重放攻击">13.5.2重放攻击</h3>
<h3 id="多重认证机制">13.5.3多重认证机制</h3>
<h3 id="词典攻击">13.5.4词典攻击</h3>
<h3 id="恶意代理攻击和中间人攻击">13.5.5恶意代理攻击和中间人攻击</h3>
<h3 id="选择明文攻击">13.5.6选择明文攻击</h3>
<p>使用摘要认证的客户端会用服务器提供的随机数来生成响应。但如果中间有一个被 入侵的或恶意的代理在拦截流景（或者有个恶意的原始服务器），就可以很容易地为 客户端的响应计算提供随机数。使用已知密钥来计算响应可以简化响应的密码分析 过程。这种方式被称为选择明文攻击 （chosen plaintext attack)。选择明文攻击有以 下几种变体形式。</p>
<h3 id="存储密码">13.5.7存储密码</h3>
<h2 id="更多信息-12">13.6更多信息</h2>
<h1 id="第14章-安全http">第14章 安全HTTP</h1>
<h2 id="保护http的安全">14.1保护HTTP的安全</h2>
<h2 id="数字加密">14.2数字加密</h2>
<h3 id="密码编制的机制与技巧">14.2.1密码编制的机制与技巧</h3>
<h3 id="密码">14.2.2密码</h3>
<h3 id="密码机">14.2.3密码机</h3>
<h3 id="使用了密钥的密码">14.2.4使用了密钥的密码</h3>
<p>这些密码参数被称为秘钥(key)</p>
<h3 id="数字密码">14.2.5数字密码</h3>
<h2 id="对称密钥加密技术">14.3对称密钥加密技术</h2>
<p>e=d=k</p>
<h3 id="密钥长度与枚举攻击">14.3.1密钥长度与枚举攻击</h3>
<h3 id="建立共享密钥">14.3.2建立共享密钥</h3>
<h2 id="公开密钥加密技术">14.4公开密钥加密技术</h2>
<h3 id="rsa">14.4.1RSA</h3>
<h3 id="混合加密系统和会话密钥">14.4.2混合加密系统和会话密钥</h3>
<h2 id="数字签名">14.5数字签名</h2>
<p>签名是(用私钥)加了密的校验和</p>
<p>过程:</p>
<ul>
<li>将报文变为定长的摘要</li>
<li>对摘要进行私钥加密</li>
<li>将签名附在报文末尾一并发出</li>
</ul>
<h2 id="数字证书-certs">14.6数字证书 certs</h2>
<h3 id="证书的主要内容">14.6.1证书的主要内容</h3>
<ul>
<li>对象的名称</li>
<li>过期时间</li>
<li>证书发布者</li>
<li>来自发布证书者的数字签名</li>
<li>对象的公开密钥</li>
</ul>
<h4 id="x.509-v3证书">14.6.2 X.509 v3证书</h4>
<h3 id="用证书对服务器进行认证">14.6.3用证书对服务器进行认证</h3>
<h2 id="https细节介绍">14.7 HTTPS——细节介绍</h2>
<h3 id="https概述">14.7.1 HTTPS概述</h3>
<h3 id="https方案">14.7.2 HTTPS方案</h3>
<p>port: 443</p>
<p>ssl 是一个二进制协议</p>
<h3 id="建立安全传输">14.7.3建立安全传输</h3>
<h3 id="ssl握手">14.7.4 SSL握手</h3>
<h3 id="服务器证书">14.7.5服务器证书</h3>
<h3 id="站点证书的有效性">14.7.6站点证书的有效性</h3>
<p>CA</p>
<p>核对签名</p>
<p>验证证书中的域名和对话的服务器域名是否匹配</p>
<h3 id="虚拟主机与证书">14.7.7虚拟主机与证书</h3>
<h2 id="https客户端实例">14.8 HTTPS客户端实例</h2>
<h3 id="openssl">14.8.1 OpenSSL</h3>
<h3 id="简单的https客户端">14.8.2简单的HTTPS客户端</h3>
<h3 id="执行openssl客户端">14.8.3执行OpenSSL客户端</h3>
<h2 id="通过代理以隧道形式传输安全流量">14.9通过代理以隧道形式传输安全流量</h2>
<p>代理是防火墙路由器唯一允许进行 http 流量交换的设备</p>
<h2 id="更多信息-13">14.10更多信息</h2>
<h3 id="http安全性">14.10.1 HTTP安全性</h3>
<h3 id="ssl与tls">14.10.2 SSL与TLS</h3>
<h3 id="公开密钥基础设施">14.10.3公开密钥基础设施</h3>
<h3 id="数字密码-1">14.10.4数字密码</h3>
<h1 id="第15章-实体和编码">第15章 实体和编码</h1>
<h2 id="报文是箱子实体是货物">15.1报文是箱子，实体是货物</h2>
<h2 id="content-length实体的大小">15.2 Content-Length：实体的大小</h2>
<h3 id="检测截尾">15.2.1检测截尾</h3>
<h3 id="错误的content-length">15.2.2错误的Content-Length</h3>
<h3 id="content-length与持久连接">15.2.3 Content-Length与持久连接</h3>
<h3 id="内容编码">15.2.4内容编码</h3>
<h3 id="确定实体主体长度的规则">15.2.5确定实体主体长度的规则</h3>
<h2 id="实体摘要">15.3实体摘要</h2>
<p>content-MD5</p>
<h2 id="媒体类型和字符集">15.4媒体类型和字符集</h2>
<p>content-type</p>
<h3 id="文本的字符编码">15.4.1文本的字符编码</h3>
<p>charset</p>
<h3 id="多部分媒体类型">15.4.2多部分媒体类型</h3>
<h3 id="多部分表格提交">15.4.3多部分表格提交</h3>
<h3 id="多部分范围响应">15.4.4多部分范围响应</h3>
<h2 id="内容编码-1">15.5内容编码</h2>
<p>这种编码是在发送方应用到内容之上的, 编好码的数据就放在实体主题中, 像往常一样发送给接收方</p>
<h3 id="内容编码过程">15.5.1内容编码过程</h3>
<h3 id="内容编码类型">15.5.2内容编码类型</h3>
<p>content-encoding</p>
<h3 id="accept-encoding首部">15.5.3 Accept-Encoding首部</h3>
<h2 id="传输编码和分块编码">15.6传输编码和分块编码</h2>
<p>使用传输编码是为了改变报文中的数据在网络上传输的方式</p>
<p>经过内容编码的报文, 知识对报文的实体进行编码, 而传输编码作用在整个报文上, 报文自身的结构发生了变化</p>
<h3 id="可靠传输">15.6.1可靠传输</h3>
<h3 id="transfer-encoding首部">15.6.2 Transfer-Encoding首部</h3>
<h3 id="分块编码">15.6.3分块编码</h3>
<p>分块编码把报文分割为若干个大小已知的块。块之间是紧挨着发送的，这样就不需要在发送之前知道整个报文的大小了。</p>
<p>只需要允许服务器把主体逐块发送, 说明每块的大小就可以了</p>
<p>(服务器可以以一个大小为 0 的块作为主体结束的标志)</p>
<figure>
<img src="https://tva1.sinaimg.cn/large/008vxvgGly1h96wfa26h6j30zu0pudiy.jpg" alt="截屏2022-12-15 02.19.14" /><figcaption aria-hidden="true">截屏2022-12-15 02.19.14</figcaption>
</figure>
<h3 id="内容编码与传输编码的结合">15.6.4内容编码与传输编码的结合</h3>
<h3 id="传输编码的规则">15.6.5传输编码的规则</h3>
<h2 id="随时间变化的实例">15.7随时间变化的实例</h2>
<h2 id="验证码和新鲜度">15.8验证码和新鲜度</h2>
<h3 id="新鲜度">15.8.1新鲜度</h3>
<h3 id="有条件的请求与验证码">15.8.2有条件的请求与验证码</h3>
<h2 id="范围请求">15.9范围请求</h2>
<p>允许客户端实际上之请求文档的一部分, 或者说某个范围</p>
<p>range 首部</p>
<h2 id="差异编码">15.10差异编码</h2>
<p>delta-base</p>
<h2 id="更多信息-14">15.11更多信息</h2>
<h1 id="第16章-国际化">第16章 国际化</h1>
<h2 id="http对国际性内容的支持">16.1 HTTP对国际性内容的支持</h2>
<h2 id="字符集与http">16.2字符集与HTTP</h2>
<h3 id="字符集是把字符转换为二进制码的编码">16.2.1字符集是把字符转换为二进制码的编码</h3>
<h3 id="字符集和编码如何工作">16.2.2字符集和编码如何工作</h3>
<h3 id="字符集不对字符就不对">16.2.3字符集不对，字符就不对</h3>
<h3 id="标准化的mime-charset值">16.2.4标准化的MIME charset值</h3>
<ul>
<li>us-ascii 8 位最高位不用, 128 个字符</li>
<li>iso-8859-1 8 位, 低 7 位和 ascii 一样, 高位支持西欧字符, 又叫 latin1, 是 html 默认字符集</li>
</ul>
<h3 id="content-type首部和charset首部以及meta标志">16.2.5 Content-Type首部和Charset首部以及META标志</h3>
<h3 id="accept-charset首部">16.2.6 Accept-Charset首部</h3>
<h2 id="多语言字符编码入门">16.3多语言字符编码入门</h2>
<h3 id="字符集术语">16.3.1字符集术语</h3>
<h3 id="字符集的命名很糟糕">16.3.2字符集的命名很糟糕</h3>
<h3 id="字符">16.3.3字符</h3>
<h3 id="字形连笔以及表示形式">16.3.4字形、连笔以及表示形式</h3>
<h3 id="编码后的字符集">16.3.5编码后的字符集</h3>
<h3 id="字符编码方案">16.3.6字符编码方案</h3>
<ul>
<li>utf-8: 无模态变宽, 第一字节的高位表示编码后字符所用的字节数, 和 ascii 兼容 <img src="https://tva1.sinaimg.cn/large/008vxvgGly1h96wf56vqoj30x60e4mz3.jpg" alt="截屏2022-12-15 02.29.38" /></li>
</ul>
<h2 id="语言标记与http">16.4语言标记与HTTP</h2>
<h3 id="content-language首部">16.4.1 Content-Language首部</h3>
<h3 id="accept-language首部">16.4.2 Accept-Language首部</h3>
<h3 id="语言标记的类型">16.4.3语言标记的类型</h3>
<h3 id="子标记">16.4.4子标记</h3>
<h3 id="大小写">16.4.5大小写</h3>
<p>不区分大小写</p>
<h3 id="iana语言标记注册">16.4.6 IANA语言标记注册</h3>
<p>sgn-US-MA</p>
<p>三个子标记</p>
<h3 id="第一个子标记名字空间">16.4.7第一个子标记——名字空间</h3>
<ul>
<li>zh chi/zho</li>
<li>en eng</li>
</ul>
<h3 id="第二个子标记名字空间">16.4.8第二个子标记——名字空间</h3>
<ul>
<li>中国 CN</li>
<li>英国 GB</li>
<li>美国 US</li>
</ul>
<h3 id="其余子标记名字空间">16.4.9其余子标记——名字空间</h3>
<h3 id="配置和语言有关的首选项">16.4.10配置和语言有关的首选项</h3>
<h3 id="语言标记参考表">16.4.11语言标记参考表</h3>
<h2 id="国际化的uri">16.5国际化的URI</h2>
<h3 id="全球性的可转抄能力与有意义的字符的较量">16.5.1全球性的可转抄能力与有意义的字符的较量</h3>
<h3 id="uri字符集合">16.5.2 URI字符集合</h3>
<figure>
<img src="https://tva1.sinaimg.cn/large/008vxvgGly1h96wefvu2aj30x007st9e.jpg" alt="截屏2022-12-15 02.31.51" /><figcaption aria-hidden="true">截屏2022-12-15 02.31.51</figcaption>
</figure>
<h3 id="转义和反转义">16.5.3转义和反转义</h3>
<p>%FF 两个十六进制表示 ascii</p>
<h3 id="转义国际化字符">16.5.4转义国际化字符</h3>
<h3 id="uri中的模态切换">16.5.5 URI中的模态切换</h3>
<h2 id="其他需要考虑的地方">16.6其他需要考虑的地方</h2>
<h3 id="首部和不合规范的数据">16.6.1首部和不合规范的数据</h3>
<p>http 首部必须使用 ascii</p>
<p>且大小写不敏感</p>
<h3 id="日期">16.6.2日期</h3>
<h3 id="域名">16.6.3域名</h3>
<h2 id="更多信息-15">16.7更多信息</h2>
<h3 id="附录">16.7.1附录</h3>
<h3 id="互联网的国际化">16.7.2互联网的国际化</h3>
<h3 id="国际标准">16.7.3国际标准</h3>
<h1 id="第17章-内容协商与转码">第17章 内容协商与转码</h1>
<h2 id="内容协商技术">17.1内容协商技术</h2>
<h2 id="客户端驱动的协商">17.2客户端驱动的协商</h2>
<h2 id="服务器驱动的协商">17.3服务器驱动的协商</h2>
<h3 id="内容协商首部集">17.3.1内容协商首部集</h3>
<h3 id="内容协商首部中的质量值">17.3.2内容协商首部中的质量值</h3>
<p>q 从 0.0 到 1.0 , 1.0 优先级最高</p>
<h3 id="随其他首部集而变化">17.3.3随其他首部集而变化</h3>
<h3 id="apache中的内容协商">17.3.4 Apache中的内容协商</h3>
<h3 id="服务器端扩展">17.3.5服务器端扩展</h3>
<h2 id="透明协商">17.4透明协商</h2>
<h3 id="进行缓存与备用候选">17.4.1进行缓存与备用候选</h3>
<h3 id="vary首部">17.4.2 Vary首部</h3>
<h2 id="转码">17.5转码</h2>
<p>服务器可以把现存的文档转换成某种客户端可用的文档</p>
<h3 id="格式转换">17.5.1格式转换</h3>
<h3 id="信息综合">17.5.2信息综合</h3>
<h3 id="内容注入">17.5.3内容注入</h3>
<h3 id="转码与静态预生成的对比">17.5.4转码与静态预生成的对比</h3>
<h2 id="下一步计划">17.6下一步计划</h2>
<h2 id="更多信息-16">17.7更多信息</h2>
<h1 id="第18章web主机托管">第18章Web主机托管</h1>
<h2 id="主机托管服务">18.1主机托管服务</h2>
<h2 id="虚拟主机托管">18.2虚拟主机托管</h2>
<h3 id="虚拟服务器请求缺乏主机信息">18.2.1虚拟服务器请求缺乏主机信息</h3>
<h3 id="设法让虚拟主机托管正常工作">18.2.2设法让虚拟主机托管正常工作</h3>
<h4 id="http-1.1的host首部">18.2.3 HTTP/ 1.1的Host首部</h4>
<h2 id="使网站更可靠">18.3使网站更可靠</h2>
<h3 id="镜像的服务器集群">18.3.1镜像的服务器集群</h3>
<h3 id="内容分发网络">18.3.2内容分发网络</h3>
<h3 id="cdn中的反向代理缓存">18.3.3 CDN中的反向代理缓存</h3>
<h3 id="cdn中的代理缓存">18.3.4 CDN中的代理缓存</h3>
<h2 id="让网站更快">18.4让网站更快</h2>
<h2 id="更多信息-17">18.5更多信息</h2>
<h1 id="第19章-发布系统">第19章 发布系统</h1>
<h2 id="frontpage为支持发布而做的服务器扩展">19.1 FrontPage为支持发布而做的服务器扩展</h2>
<h3 id="frontpage服务器扩展">19.1.1 FrontPage服务器扩展</h3>
<h3 id="frontpage术语表">19.1.2 FrontPage术语表</h3>
<h3 id="frontpage的rpc协议">19.1.3 FrontPage的RPC协议</h3>
<h3 id="frontpage的安全模型">19.1.4 FrontPage的安全模型</h3>
<h2 id="webdav与协作写作">19.2 WebDAV与协作写作</h2>
<h3 id="webdav的方法">19.2.1 WebDAV的方法</h3>
<h3 id="webdav与xml">19.2.2 WebDAV与XML</h3>
<h3 id="webdav首部集">19.2.3 WebDAV首部集</h3>
<h3 id="webdav的锁定与防止覆写">19.2.4 WebDAV的锁定与防止覆写</h3>
<h3 id="lock方法">19.2.5 LOCK方法</h3>
<h3 id="unlock方法">19.2.6 UNLOCK方法</h3>
<h3 id="属性和元数据">19.2.7属性和元数据</h3>
<h3 id="propfind方法">19.2.8 PROPFIND方法</h3>
<h3 id="proppatch方法">19.2.9 PROPPATCH方法</h3>
<h3 id="集合与名字空间管理">19.2.10集合与名字空间管理</h3>
<h3 id="mkcol方法">19.2.11 MKCOL方法</h3>
<h3 id="delete方法">19.2.12 DELETE方法</h3>
<h3 id="copy与move方法">19.2.13 COPY与MOVE方法</h3>
<h4 id="增强的http1.1方法">19.2.14增强的HTTP/1.1方法</h4>
<h3 id="webdav中的版本管理">19.2.15 WebDAV中的版本管理</h3>
<h3 id="webdav的未来发展">19.2.16 WebDAV的未来发展</h3>
<h2 id="更多信息-18">19.3更多信息</h2>
<h1 id="第20章-重定向与负载均衡">第20章 重定向与负载均衡</h1>
<h2 id="为什么要重定向">20.1为什么要重定向</h2>
<h2 id="重定向到何地">20.2重定向到何地</h2>
<h2 id="重定向协议概览">20.3重定向协议概览</h2>
<h2 id="通用的重定向方法">20.4通用的重定向方法</h2>
<h3 id="http重定向">20.4.1 HTTP重定向</h3>
<p>302 redirect</p>
<p>优点: 重定向服务器知道客户端的 ip</p>
<p>缺点:</p>
<ul>
<li>原始服务器需要处理大量重定向请求</li>
<li>增加用户时延, 因为要往返两次</li>
<li>重定向服务器瘫痪站点就会瘫痪</li>
</ul>
<h3 id="dns重定向">20.4.2 DNS重定向</h3>
<p>将几个 ip 关联到一个 domain</p>
<ul>
<li>dns 轮转, 通过 dns 解析轮转发送 ip 地址实现重定向和负载均衡 但是缓存可能会讲 dns 查找得结果记住, 所以 dns 轮转通常不会平衡单个客户端的负载</li>
</ul>
<h3 id="任播寻址">20.4.3任播寻址</h3>
<p>几个地理上分散的 web 服务器拥有完全相同的 ip, 并且会通过骨干路由器的"最短路径"将客户端的请求发送给离他最近的服务器</p>
<h3 id="ip-mac转发">20.4.4 IP MAC转发</h3>
<p>支持MAC 转发的第四层交换机通常会将请求转发给几个代理缓在, 并在它们之间 平衡负载。类似地，也可以将 HTTP 流量转发给备用 HTTP 服务器。</p>
<p>因为 MAC 地址转发只是点对点的，所以服务器或代理只能位于离交换机<strong>一跳远</strong>地方。</p>
<h3 id="ip地址转发">20.4.5 IP地址转发</h3>
<p>第四层设备检测 tcp/ip 地址, 修改目的 ip 进行转发, 也叫 NAT(network address translation)</p>
<h3 id="网元控制协议">20.4.6网元控制协议</h3>
<p>NECP network element control protocol, 允许网元与服务器元素进行交互</p>
<h2 id="代理的重定向方法">20.5代理的重定向方法</h2>
<h3 id="显式浏览器配置">20.5.1显式浏览器配置</h3>
<p>手动</p>
<h3 id="代理自动配置">20.5.2代理自动配置</h3>
<p>PAC proxy auto config</p>
<p>PAC 是个 js 文件, 必须定义函数</p>
<p><code>function FindProxyForURL(url, host)</code></p>
<p>返回重定向的 url</p>
<h3 id="web代理自动发现协议">20.5.3 Web代理自动发现协议</h3>
<p>WPAD web proxy auto discovery</p>
<p>CURL config URL</p>
<ul>
<li>使用 WPAD 找到 pac 文件的 curl</li>
<li>根据 curl 找到pac 文件</li>
<li>执行 pac 文件</li>
<li>发送 http 请求</li>
</ul>
<h2 id="缓存重定向方法">20.6缓存重定向方法</h2>
<p>WCCP web cache communication protocol</p>
<ul>
<li>启动包含了一些支持 WCCP 的路由器和缓存的网络，这些路由器和缓存之间可 以相互通信。</li>
<li>一组路由器及其目标缓存构成一个 WCCP服务组。服务组的配置说明了要将何种流量发往何处、流量是如何发送的以及如何在服务组的缓存之间进行负载均衡。</li>
<li>如果服务组配置为重定向 HTTP 流量，服务组中的路由器就会将 HTTP 请求发送 给服务组中的缓存。</li>
<li>HTTP 请求抵达服务组中的路由器时，路由器会（根据对请求 IP 地址的散列，或 者“掩码/值”的配对策略）选择服务组中的某个缓存为请求提供服务。</li>
<li>路由器向缓存发送请求分组，可以用缓存的 IP 地址来封装分组，也可以通过IP MAC 转发来实现。 如果缓存无法为请求提供服务，就将分组返回给路由器进行普通的转发。 服务组中的成员会互相交换心跳报文，不断验证对方的可用性。</li>
</ul>
<h2 id="因特网缓存协议">20.7因特网缓存协议</h2>
<h2 id="缓存阵列路由协议">20.8缓存阵列路由协议</h2>
<h2 id="超文本缓存协议">20.9超文本缓存协议</h2>
<h3 id="htcp认证">20.9.1 HTCP认证</h3>
<h3 id="设置缓存策略">20.9.2设置缓存策略</h3>
<h2 id="更多信息-19">20.10更多信息</h2>
<h1 id="第21章-日志记录与使用情况跟踪">第21章 日志记录与使用情况跟踪</h1>
<h2 id="记录内容">21.1记录内容</h2>
<h2 id="日志格式">21.2日志格式</h2>
<h3 id="常见日志格式">21.2.1常见日志格式</h3>
<h3 id="组合日志格式">21.2.2组合日志格式</h3>
<h3 id="网景扩展日志格式">21.2.3网景扩展日志格式</h3>
<h3 id="网景扩展2日志格式">21.2.4网景扩展2日志格式</h3>
<h3 id="squid代理日志格式">21.2.5 Squid代理日志格式</h3>
<h2 id="命中率测量">21.3命中率测量</h2>
<h3 id="概述">21.3.1概述</h3>
<h3 id="meter首部">21.3.2 Meter首部</h3>
<h2 id="关于隐私的考虑">21.4关于隐私的考虑</h2>
<h2 id="更多信息-20">21.5更多信息</h2>
<h1 id="第六部分-附录">第六部分 附录</h1>
<h1 id="附录a-uri方案">附录A URI方案</h1>
<h1 id="附录bhttp状态码">附录BHTTP状态码</h1>
<h1 id="附录c-http首部参考">附录C HTTP首部参考</h1>
<h1 id="附录d-mime类型">附录D MIME类型</h1>
<h1 id="附录e-base-64编码">附录E Base-64编码</h1>
<h1 id="附录f摘要认证">附录F摘要认证</h1>
<h1 id="附录g语言标记">附录G语言标记</h1>
<h1 id="附录h-mime字符集注册表">附录H MIME字符集注册表</h1>
<p>Process finished with exit code 0</p>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>http</tag>
        <tag>uri</tag>
        <tag>web</tag>
        <tag>url</tag>
        <tag>cookie</tag>
      </tags>
  </entry>
  <entry>
    <title>tcpip详解读书笔记</title>
    <url>/2022/12/331cfaa59458.html</url>
    <content><![CDATA[<blockquote>

</blockquote>
<span id="more"></span>
<h1 id="chapter-1-introduction">Chapter 1 Introduction</h1>
<h2 id="architectural-principles">1.1 Architectural Principles</h2>
<h3 id="packets-connections-and-datagrams">1.1.1 Packets, Connections, and Datagrams</h3>
<p>分组交换-&gt;多路复用</p>
<p>FIFO-&gt;统计复用</p>
<p>数据报: 所有识别信息都位于分组中而不是交换机中</p>
<p>消息边界: 大部分数据报协议是保留消息边界的(UDP), 但是在电路交换和虚电路网络中, 不会保留消息边界(TCP)</p>
<h3 id="the-end-to-end-argument-and-fate-sharing">1.1.2 The End-to-End Argument and Fate Sharing</h3>
<p>端到端论点: 只有在通信系统端角度的应用知识的帮助下，才能完全和正确地实现问题中提到的功能。因此，作为通信自身的一个特点，不可能提供有疑问的功能。（有时， 通信系统提供的一个功能不完整的版本可能用于提高性能。）</p>
<p>命运共享: 建议所有必要的状态放在通信端点</p>
<h3 id="error-control-and-flow-control">1.1.3 Error Control and Flow Control</h3>
<p>差错控制: 网络中, 尽力而为</p>
<p>流量控制: 端</p>
<h2 id="design-and-implementation">1.2 Design and Implementation</h2>
<h3 id="layering">1.2.1 Layering</h3>
<p>从底层到高层数字递增</p>
<p>5 层 TCP/IP</p>
<p>7 层 OSI</p>
<h3 id="multiplexing-demultiplexing-and-encapsulation-in-layered-implementations">1.2.2 Multiplexing, Demultiplexing, and Encapsulation in Layered Implementations</h3>
<p>PDU 协议数据单元</p>
<p>switch, bridge 对网络层透明</p>
<h2 id="the-architecture-and-protocols-of-the-tcpip-suite">1.3 The Architecture and Protocols of the TCP/IP Suite</h2>
<h3 id="the-arpanet-reference-model">1.3.1 The ARPANET Reference Model</h3>
<p>三种类型 ip 地址:</p>
<p>单播, 广播, 组播</p>
<p>ICMP, IGMP</p>
<p>DCCP, SCTP</p>
<h3 id="multiplexing-demultiplexing-and-encapsulation-in-tcpip">1.3.2 Multiplexing, Demultiplexing, and Encapsulation in TCP/IP</h3>
<p>每层都有一个标识符</p>
<h3 id="port-numbers">1.3.3 Port Numbers</h3>
<p>熟知端口号: 0~1023</p>
<p>注册端口号: 1024~49151, 它们松散地绑定于一些服务。也就是说有许多服务绑定于这些端口，这些端口同样用于许多其它目的。例如：许多系统处理动态端口从1024左右开始。</p>
<p>私有端口号: 49152~65535, 理论上，不应为服务分配这些端口。实际上，机器通常从1024起分配动态端口。但也有例外：SUN的RPC端口从32768开始。</p>
<p>奇数端口号</p>
<h3 id="names-addresses-and-the-dns">1.3.4 Names, Addresses, and the DNS</h3>
<h2 id="internets-intranets-and-extranets">1.4 Internets, Intranets, and Extranets</h2>
<h2 id="designing-applications">1.5 Designing Applications</h2>
<h3 id="clientserver">1.5.1 Client/Server</h3>
<h3 id="peer-to-peer">1.5.2 Peer-to-Peer</h3>
<h3 id="application-programming-interfaces-apis">1.5.3 Application Programming Interfaces (APIs)</h3>
<h2 id="standardization-process">1.6 Standardization Process</h2>
<h3 id="request-for-comments-rfc">1.6.1 Request for Comments (RFC)</h3>
<h3 id="other-standards">1.6.2 Other Standards</h3>
<h2 id="implementations-and-software-distributions">1.7 Implementations and Software Distributions</h2>
<h2 id="attacks-involving-the-internet-architecture">1.8 Attacks Involving the Internet Architecture</h2>
<h2 id="summary">1.9 Summary</h2>
<h2 id="references">1.10 References</h2>
<h1 id="chapter-2-the-internet-address-architecture">Chapter 2 The Internet Address Architecture</h1>
<h2 id="introduction">2.1 Introduction</h2>
<h2 id="expressing-ip-addresses">2.2 Expressing IP Addresses</h2>
<p>ipv4: 4*8 = 32</p>
<p>ipv6: 8*16 = 128</p>
<p>ipv6 写法标准:</p>
<ol type="1">
<li>一个块中前导的零不必书写。在前面的例子中，地址可写为 5f05:2000:80ad:5800:58:800:2023:1d71。</li>
<li>全零的块可以省略，并用符号：代替。例如，IPv6 地址0:0:0:0:0:0:0:1可简写为 ::1. 同样，地址 2001:0db8:0:0:0:0:0:2可简写为 2001:db8::2。为了避免出现歧义，一个 IPv6 地址 中符号 :: 只能使用一次。</li>
<li>在IPv6 格式中嵌入IPv4 地址可使用混合符号形式，紧接着 IPv4 部分的地址块的值为ffff，地址的其余部分使用点分四组格式。例如，IPv6 地址 ::ffff:10.0.0.1可表示 IPv4 地址 10.0.0.1。它被称为IPv4 映射的 IPv6 地址。</li>
<li>IPv6 地址的低 32 位通常采用点分四组表示法。因此，IPv6 地址 ::0102:f001 相当于地址：::1.2.240.1。它被称为IPv4 兼容的 IPv6 地址。需要注意，IPv4 兼容地址与IPv4 映射地址不同；它们只是在能用类似 IPv4 地址的方式书写或由软件处理方面给人以兼容的感觉。这种地 址最初用于 IPv4 和 IPv6 之间的过渡计划，但现在不再需要 [RFC4291]。</li>
<li>前导的零必须压缩（例如，2001:0db8::0022变成 2001:db8::22)</li>
<li>:: 只能用于影响最大的地方（压缩最多的零)，但并不只是针对16位的块。如果多个块中包含等长度的零，顺序靠前的块将被替换为 ::</li>
<li>a 到 f 的十六进制数字应该用小写表示。</li>
</ol>
<p>在大多数情况下，我们会遵守这些规则。</p>
<h2 id="basic-ip-address-structure">2.3 Basic IP Address Structure</h2>
<h3 id="classful-addressing">2.3.1 Classful Addressing</h3>
<p>(192 是 C 类地址)</p>
<p>ABC 用于单播地址</p>
<p>有几个地址通常不作为单播地址使用, 特别是第一个和最后一个, 一般要-2</p>
<figure>
<img src="https://tva1.sinaimg.cn/large/008vxvgGly1h9ib4d26ecj30v00i2wfz.jpg" alt="截屏2022-12-27 13.32.26" /><figcaption aria-hidden="true">截屏2022-12-27 13.32.26</figcaption>
</figure>
<h3 id="subnet-addressing">2.3.2 Subnet Addressing</h3>
<p>将主机号划分为子网 id 和主机 id</p>
<h3 id="subnet-masks">2.3.3 Subnet Masks</h3>
<p>子网掩码用来划分子网id和主机id</p>
<p>外部 router 不关心子网掩码</p>
<h3 id="variable-length-subnet-masks-vlsm">2.3.4 Variable-Length Subnet Masks (VLSM)</h3>
<p>每个子网可以使用不同长度的子网掩码</p>
<h3 id="broadcast-addresses">2.3.5 Broadcast Addresses</h3>
<p>(子网广播地址)</p>
<p>即网络id 子网 id 不变, 将主机 id 全部设置为 1</p>
<p>但是这种定向广播是又问同样的, 在 internet 中被禁用</p>
<p>本地网络广播; 255.255.255.255, 不会被路由器转发, 但是同一网络中的其他主机会收到</p>
<h3 id="ipv6-addresses-and-interface-identifiers">2.3.6 IPv6 Addresses and Interface Identifiers</h3>
<h2 id="cidrclassless-inter-domain-routing-and-aggregation">2.4 CIDR(Classless Inter-Domain Routing) and Aggregation</h2>
<p>为了解决两个问题: ip 不足, 以及路由表过大</p>
<h3 id="prefixes">2.4.1 Prefixes</h3>
<p>类似 VLSM, CIDR掩码可以采用任意长度, 这个掩码是全球路由系统可见的, 这个又叫网络前缀</p>
<h3 id="aggregation-聚合">2.4.2 Aggregation 聚合</h3>
<p>分层路由: ip 地址与路由器的拓扑位置有关</p>
<p>在 internet 中, 通过将相邻的多个 ip 前缀合并为一个短前缀的过程叫做聚合</p>
<h2 id="special-use-addresses">2.5 Special-Use Addresses</h2>
<p>0.0.0.0/8 本地主机</p>
<p>127.0.0.1 主机回送地址</p>
<p>172.16.0.0/12, 192.168.0.0/16专用网络, 内联网地址, 不会出现在公共网中</p>
<p>255.255.255.255/32 本地网络广播地址</p>
<h3 id="addressing-ipv4ipv6-translators">2.5.1 Addressing IPv4/IPv6 Translators</h3>
<p>嵌入 ipv4 的 ipv6 地址</p>
<h3 id="multicast-addresses">2.5.2 Multicast Addresses</h3>
<p>ASM 任意源组播</p>
<p>SSM 特定组播, 每个组只使用一个方发送方</p>
<h3 id="ipv4-multicast-addresses">2.5.3 IPv4 Multicast Addresses</h3>
<h3 id="ipv6-multicast-addresses">2.5.4 IPv6 Multicast Addresses</h3>
<h3 id="anycast-addresses">2.5.5 Anycast Addresses</h3>
<h2 id="allocation">2.6 Allocation</h2>
<h3 id="unicast">2.6.1 Unicast</h3>
<p>RIR(Regional Internet Registry) -&gt; ISP -&gt; 客户</p>
<ul>
<li>PA 供应商聚合</li>
<li>PI 供应商独立</li>
</ul>
<p>供应商倾向使用 PA, 因为可以进行聚合减小路由表, PI 一般需要额外收费</p>
<h3 id="multicast">2.6.2 Multicast</h3>
<h2 id="unicast-address-assignment">2.7 Unicast Address Assignment</h2>
<h3 id="single-providerno-networksingle-address">2.7.1 Single Provider/No Network/Single Address</h3>
<p>单设备</p>
<h3 id="single-providersingle-networksingle-address">2.7.2 Single Provider/Single Network/Single Address</h3>
<p>LAN: 路由器</p>
<h3 id="single-providermultiple-networksmultiple-addresses">2.7.3 Single Provider/Multiple Networks/Multiple Addresses</h3>
<p>DMZ(demilitarized zone)</p>
<h3 id="multiple-providersmultiple-networksmultiple-addresses-multihoming">2.7.4 Multiple Providers/Multiple Networks/Multiple Addresses (Multihoming)</h3>
<h2 id="attacks-involving-ip-addresses">2.8 Attacks Involving IP Addresses</h2>
<h2 id="summary-1">2.9 Summary</h2>
<h2 id="references-1">2.10 References</h2>
<h1 id="chapter-3-link-layer">Chapter 3 Link Layer</h1>
<h2 id="introduction-1">3.1 Introduction</h2>
<h2 id="ethernet-and-the-ieee-802-lanman-standards">3.2 Ethernet and the IEEE 802 LAN/MAN Standards</h2>
<h3 id="the-ieee-802-lanman-standards">3.2.1 The IEEE 802 LAN/MAN Standards</h3>
<h3 id="the-ethernet-frame-format">3.2.2 The Ethernet Frame Format</h3>
<h4 id="pq-virtual-lans-and-qos-tagging">3.2.3 802.1p/q: Virtual LANs and QoS Tagging</h4>
<h5 id="ax-link-aggregation-formerly-802.3ad">3.2.4 802.1AX: Link Aggregation (Formerly 802.3ad)</h5>
<h3 id="full-duplex-power-save-autonegotiation-and-802.1x-flow-control">3.3 Full Duplex, Power Save, Autonegotiation, and 802.1X Flow Control</h3>
<h3 id="duplex-mismatch">3.3.1 Duplex Mismatch</h3>
<h3 id="wake-on-lan-wol-power-saving-and-magic-packets">3.3.2 Wake-on LAN (WoL), Power Saving, and Magic Packets</h3>
<h3 id="link-layer-flow-control">3.3.3 Link-Layer Flow Control</h3>
<h2 id="bridges-and-switches">3.4 Bridges and Switches</h2>
<h3 id="spanning-tree-protocol-stp">3.4.1 Spanning Tree Protocol (STP)</h3>
<h4 id="ak-multiple-registration-protocol-mrp">3.4.2 802.1ak: Multiple Registration Protocol (MRP)</h4>
<h3 id="wireless-lansieee-802.11wi-fi">3.5 Wireless LANs—IEEE 802.11(Wi-Fi)</h3>
<h4 id="frames">3.5.1 802.11 Frames</h4>
<h3 id="power-save-mode-and-the-time-sync-function-tsf">3.5.2 Power Save Mode and the Time Sync Function (TSF)</h3>
<h4 id="media-access-control">3.5.3 802.11 Media Access Control</h4>
<h3 id="physical-layer-details-rates-channels-and-frequencies">3.5.4 Physical-Layer Details: Rates, Channels, and Frequencies</h3>
<h3 id="wi-fi-security">3.5.5 Wi-Fi Security</h3>
<h4 id="wi-fi-mesh-802.11s">3.5.6 Wi-Fi Mesh (802.11s)</h4>
<h2 id="point-to-point-protocol-ppp">3.6 Point-to-Point Protocol (PPP)</h2>
<h3 id="link-control-protocol-lcp">3.6.1 Link Control Protocol (LCP)</h3>
<h3 id="multilink-ppp-mp">3.6.2 Multilink PPP (MP)</h3>
<h3 id="compression-control-protocol-ccp">3.6.3 Compression Control Protocol (CCP)</h3>
<h3 id="ppp-authentication">3.6.4 PPP Authentication</h3>
<h3 id="network-control-protocols-ncps">3.6.5 Network Control Protocols (NCPs)</h3>
<h3 id="header-compression">3.6.6 Header Compression</h3>
<h3 id="example">3.6.7 Example</h3>
<h2 id="loopback">3.7 Loopback</h2>
<h2 id="mtu-and-path-mtu">3.8 MTU and Path MTU</h2>
<h2 id="tunneling-basics">3.9 Tunneling Basics</h2>
<h3 id="unidirectional-links">3.9.1 Unidirectional Links</h3>
<h2 id="attacks-on-the-link-layer">3.10 Attacks on the Link Layer</h2>
<h2 id="summary-2">3.11 Summary</h2>
<h2 id="references-2">3.12 References</h2>
<h1 id="chapter-4-arp-address-resolution-protocol">Chapter 4 ARP: Address Resolution Protocol</h1>
<h2 id="introduction-2">4.1 Introduction</h2>
<h2 id="an-example">4.2 An Example</h2>
<h3 id="direct-delivery-and-arp">4.2.1 Direct Delivery and ARP</h3>
<h2 id="arp-cache">4.3 ARP Cache</h2>
<h2 id="arp-frame-format">4.4 ARP Frame Format</h2>
<h2 id="arp-examples">4.5 ARP Examples</h2>
<h3 id="normal-example">4.5.1 Normal Example</h3>
<h3 id="arp-request-to-a-nonexistent-host">4.5.2 ARP Request to a Nonexistent Host</h3>
<h2 id="arp-cache-timeout">4.6 ARP Cache Timeout</h2>
<h2 id="proxy-arp">4.7 Proxy ARP</h2>
<h2 id="gratuitous-arp-and-address-conflict-detection-acd">4.8 Gratuitous ARP and Address Conflict Detection (ACD)</h2>
<h2 id="the-arp-command">4.9 The arp Command</h2>
<h2 id="using-arp-to-set-an-embedded-devices-ipv4-address">4.10 Using ARP to Set an Embedded Device’s IPv4 Address</h2>
<h2 id="attacks-involving-arp">4.11 Attacks Involving ARP</h2>
<h2 id="summary-3">4.12 Summary</h2>
<h2 id="references-3">4.13 References</h2>
<h1 id="chapter-5-the-internet-protocol-ip">Chapter 5 The Internet Protocol (IP)</h1>
<h2 id="introduction-3">5.1 Introduction</h2>
<h2 id="ipv4-and-ipv6-headers">5.2 IPv4 and IPv6 Headers</h2>
<h3 id="ip-header-fields">5.2.1 IP Header Fields</h3>
<h3 id="the-internet-checksum">5.2.2 The Internet Checksum</h3>
<h3 id="ds-field-and-ecn-formerly-called-the-tos-byte-or-ipv6-traffic-class">5.2.3 DS Field and ECN (Formerly Called the ToS Byte or IPv6 Traffic Class)</h3>
<h3 id="ip-options">5.2.4 IP Options</h3>
<h2 id="ipv6-extension-headers">5.3 IPv6 Extension Headers</h2>
<h3 id="ipv6-options">5.3.1 IPv6 Options</h3>
<h3 id="routing-header">5.3.2 Routing Header</h3>
<h3 id="fragment-header">5.3.3 Fragment Header</h3>
<h2 id="ip-forwarding">5.4 IP Forwarding</h2>
<h3 id="forwarding-table">5.4.1 Forwarding Table</h3>
<h3 id="ip-forwarding-actions">5.4.2 IP Forwarding Actions</h3>
<h3 id="examples">5.4.3 Examples</h3>
<h3 id="discussion">5.4.4 Discussion</h3>
<h2 id="mobile-ip">5.5 Mobile IP</h2>
<h3 id="the-basic-model-bidirectional-tunneling">5.5.1 The Basic Model: Bidirectional Tunneling</h3>
<h3 id="route-optimization-ro">5.5.2 Route Optimization (RO)</h3>
<h3 id="discussion-1">5.5.3 Discussion</h3>
<h2 id="host-processing-of-ip-datagrams">5.6 Host Processing of IP Datagrams</h2>
<h3 id="host-models">5.6.1 Host Models</h3>
<h3 id="address-selection">5.6.2 Address Selection</h3>
<h2 id="attacks-involving-ip">5.7 Attacks Involving IP</h2>
<h2 id="summary-4">5.8 Summary</h2>
<h2 id="references-4">5.9 References</h2>
<h1 id="chapter-6-system-configuration-dhcp-and-autoconfiguration">Chapter 6 System Configuration: DHCP and Autoconfiguration</h1>
<h2 id="introduction-4">6.1 Introduction</h2>
<h2 id="dynamic-host-configuration-protocol-dhcp">6.2 Dynamic Host Configuration Protocol (DHCP)</h2>
<h3 id="address-pools-and-leases">6.2.1 Address Pools and Leases</h3>
<h3 id="dhcp-and-bootp-message-format">6.2.2 DHCP and BOOTP Message Format</h3>
<h3 id="dhcp-and-bootp-options">6.2.3 DHCP and BOOTP Options</h3>
<h3 id="dhcp-protocol-operation">6.2.4 DHCP Protocol Operation</h3>
<h3 id="dhcpv6">6.2.5 DHCPv6</h3>
<h3 id="using-dhcp-with-relays">6.2.6 Using DHCP with Relays</h3>
<h3 id="dhcp-authentication">6.2.7 DHCP Authentication</h3>
<h3 id="reconfigure-extension">6.2.8 Reconfigure Extension</h3>
<h3 id="rapid-commit">6.2.9 Rapid Commit</h3>
<h3 id="location-information-lci-and-lost">6.2.10 Location Information (LCI and LoST)</h3>
<h3 id="mobility-and-handoff-information-mos-and-andsf">6.2.11 Mobility and Handoff Information (MoS and ANDSF)</h3>
<h3 id="dhcp-snooping">6.2.12 DHCP Snooping</h3>
<h2 id="stateless-address-autoconfiguration-slaac">6.3 Stateless Address Autoconfiguration (SLAAC)</h2>
<h3 id="dynamic-configuration-of-ipv4-link-local-addresses">6.3.1 Dynamic Configuration of IPv4 Link-Local Addresses</h3>
<h3 id="ipv6-slaac-for-link-local-addresses">6.3.2 IPv6 SLAAC for Link-Local Addresses</h3>
<h2 id="dhcp-and-dns-interaction">6.4 DHCP and DNS Interaction</h2>
<h2 id="ppp-over-ethernet-pppoe">6.5 PPP over Ethernet (PPPoE)</h2>
<h2 id="attacks-involving-system-configuration">6.6 Attacks Involving System Configuration</h2>
<h2 id="summary-5">6.7 Summary</h2>
<h2 id="references-5">6.8 References</h2>
<h1 id="chapter-7-firewalls-and-network-address-translation-nat">Chapter 7 Firewalls and Network Address Translation (NAT)</h1>
<h2 id="introduction-5">7.1 Introduction</h2>
<h2 id="firewalls">7.2 Firewalls</h2>
<h3 id="packet-filtering-firewalls">7.2.1 Packet-Filtering Firewalls</h3>
<h3 id="proxy-firewalls">7.2.2 Proxy Firewalls</h3>
<h2 id="network-address-translation-nat">7.3 Network Address Translation (NAT)</h2>
<h3 id="traditional-nat-basic-nat-and-napt">7.3.1 Traditional NAT: Basic NAT and NAPT</h3>
<h3 id="address-and-port-translation-behavior">7.3.2 Address and Port Translation Behavior</h3>
<h3 id="filtering-behavior">7.3.3 Filtering Behavior</h3>
<h3 id="servers-behind-nats">7.3.4 Servers behind NATs</h3>
<h3 id="hairpinning-and-nat-loopback">7.3.5 Hairpinning and NAT Loopback</h3>
<h3 id="nat-editors">7.3.6 NAT Editors</h3>
<h3 id="service-provider-nat-spnat-and-service-provider-ipv6-transition">7.3.7 Service Provider NAT (SPNAT) and Service Provider IPv6 Transition</h3>
<h2 id="nat-traversal">7.4 NAT Traversal</h2>
<h3 id="pinholes-and-hole-punching">7.4.1 Pinholes and Hole Punching</h3>
<h3 id="unilateral-self-address-fixing-unsaf">7.4.2 UNilateral Self-Address Fixing (UNSAF)</h3>
<h3 id="session-traversal-utilities-for-nat-stun">7.4.3 Session Traversal Utilities for NAT (STUN)</h3>
<h3 id="traversal-using-relays-around-nat-turn">7.4.4 Traversal Using Relays around NAT (TURN)</h3>
<h3 id="interactive-connectivity-establishment-ice">7.4.5 Interactive Connectivity Establishment (ICE)</h3>
<h2 id="configuring-packet-filtering-firewalls-and-nats">7.5 Configuring Packet-Filtering Firewalls and NATs</h2>
<h3 id="firewall-rules">7.5.1 Firewall Rules</h3>
<h3 id="nat-rules">7.5.2 NAT Rules</h3>
<h3 id="direct-interaction-with-nats-and-firewalls-upnp-nat-pmp-and-pcp">7.5.3 Direct Interaction with NATs and Firewalls: UPnP, NAT-PMP, and PCP</h3>
<h2 id="nat-for-ipv4ipv6-coexistence-and-transition">7.6 NAT for IPv4/IPv6 Coexistence and Transition</h2>
<h3 id="dual-stack-lite-ds-lite">7.6.1 Dual-Stack Lite (DS-Lite)</h3>
<h3 id="ipv4ipv6-translation-using-nats-and-algs">7.6.2 IPv4/IPv6 Translation Using NATs and ALGs</h3>
<h2 id="attacks-involving-firewalls-and-nats">7.7 Attacks Involving Firewalls and NATs</h2>
<h2 id="summary-6">7.8 Summary</h2>
<h2 id="references-6">7.9 References</h2>
<h1 id="chapter-8-icmpv4-and-icmpv6-internet-control-message-protocol">Chapter 8 ICMPv4 and ICMPv6: Internet Control Message Protocol</h1>
<h2 id="introduction-6">8.1 Introduction</h2>
<h3 id="encapsulation-in-ipv4-and-ipv6">8.1.1 Encapsulation in IPv4 and IPv6</h3>
<h2 id="icmp-messages">8.2 ICMP Messages</h2>
<h3 id="icmpv4-messages">8.2.1 ICMPv4 Messages</h3>
<h3 id="icmpv6-messages">8.2.2 ICMPv6 Messages</h3>
<h3 id="processing-of-icmp-messages">8.2.3 Processing of ICMP Messages</h3>
<h2 id="icmp-error-messages">8.3 ICMP Error Messages</h2>
<h3 id="extended-icmp-and-multipart-messages">8.3.1 Extended ICMP and Multipart Messages</h3>
<h3 id="destination-unreachable-icmpv4-type-3-icmpv6-type-1-and-packet-too-big-icmpv6-type-2">8.3.2 Destination Unreachable (ICMPv4 Type 3, ICMPv6 Type 1) and Packet Too Big (ICMPv6 Type 2)</h3>
<h3 id="redirect-icmpv4-type-5-icmpv6-type-137">8.3.3 Redirect (ICMPv4 Type 5, ICMPv6 Type 137)</h3>
<h3 id="icmp-time-exceeded-icmpv4-type-11-icmpv6-type-3">8.3.4 ICMP Time Exceeded (ICMPv4 Type 11, ICMPv6 Type 3)</h3>
<h3 id="parameter-problem-icmpv4-type-12-icmpv6-type-4">8.3.5 Parameter Problem (ICMPv4 Type 12, ICMPv6 Type 4)</h3>
<h2 id="icmp-queryinformational-messages">8.4 ICMP Query/Informational Messages</h2>
<h3 id="echo-requestreply-ping-icmpv4-types-08-icmpv6-types-129128">8.4.1 Echo Request/Reply (ping) (ICMPv4 Types 0/8, ICMPv6 Types 129/128)</h3>
<h3 id="router-discovery-router-solicitation-and-advertisement-icmpv4-types-9-10">8.4.2 Router Discovery: Router Solicitation and Advertisement (ICMPv4 Types 9, 10)</h3>
<h3 id="home-agent-address-discovery-requestreply-icmpv6-types-144145">8.4.3 Home Agent Address Discovery Request/Reply (ICMPv6 Types 144/145)</h3>
<h3 id="mobile-prefix-solicitationadvertisement-icmpv6-types-146147">8.4.4 Mobile Prefix Solicitation/Advertisement (ICMPv6 Types 146/147)</h3>
<h3 id="mobile-ipv6-fast-handover-messages-icmpv6-type-154">8.4.5 Mobile IPv6 Fast Handover Messages (ICMPv6 Type 154)</h3>
<h3 id="multicast-listener-queryreportdone-icmpv6-types-130131132">8.4.6 Multicast Listener Query/Report/Done (ICMPv6 Types 130/131/132)</h3>
<h3 id="version-2-multicast-listener-discovery-mldv2-icmpv6-type-143">8.4.7 Version 2 Multicast Listener Discovery (MLDv2) (ICMPv6 Type 143)</h3>
<h3 id="multicast-router-discovery-mrd-igmp-types-484950-icmpv6-types-151152153">8.4.8 Multicast Router Discovery (MRD) (IGMP Types 48/49/50, ICMPv6 Types 151/152/153)</h3>
<h2 id="neighbor-discovery-in-ipv6">8.5 Neighbor Discovery in IPv6</h2>
<h3 id="icmpv6-router-solicitation-and-advertisement-icmpv6-types-133-134">8.5.1 ICMPv6 Router Solicitation and Advertisement (ICMPv6 Types 133, 134)</h3>
<h3 id="icmpv6-neighbor-solicitation-and-advertisement-imcpv6-types-135-136">8.5.2 ICMPv6 Neighbor Solicitation and Advertisement (IMCPv6 Types 135, 136)</h3>
<h3 id="icmpv6-inverse-neighbor-discovery-solicitationadvertisement-icmpv6-types-141142">8.5.3 ICMPv6 Inverse Neighbor Discovery Solicitation/Advertisement (ICMPv6 Types 141/142)</h3>
<h3 id="neighbor-unreachability-detection-nud">8.5.4 Neighbor Unreachability Detection (NUD)</h3>
<h3 id="secure-neighbor-discovery-send">8.5.5 Secure Neighbor Discovery (SEND)</h3>
<h3 id="icmpv6-neighbor-discovery-nd-options">8.5.6 ICMPv6 Neighbor Discovery (ND) Options</h3>
<h2 id="translating-icmpv4-and-icmpv6">8.6 Translating ICMPv4 and ICMPv6</h2>
<h3 id="translating-icmpv4-to-icmpv6">8.6.1 Translating ICMPv4 to ICMPv6</h3>
<h3 id="translating-icmpv6-to-icmpv4">8.6.2 Translating ICMPv6 to ICMPv4</h3>
<h2 id="attacks-involving-icmp">8.7 Attacks Involving ICMP</h2>
<h2 id="summary-7">8.8 Summary</h2>
<h2 id="references-7">8.9 References</h2>
<h1 id="chapter-9-broadcasting-and-local-multicasting-igmp-and-mld">Chapter 9 Broadcasting and Local Multicasting (IGMP and MLD)</h1>
<h2 id="introduction-7">9.1 Introduction</h2>
<h2 id="broadcasting">9.2 Broadcasting</h2>
<h3 id="using-broadcast-addresses">9.2.1 Using Broadcast Addresses</h3>
<h3 id="sending-broadcast-datagrams">9.2.2 Sending Broadcast Datagrams</h3>
<h2 id="multicasting">9.3 Multicasting</h2>
<h3 id="converting-ip-multicast-addresses-to-802-macethernet-addresses">9.3.1 Converting IP Multicast Addresses to 802 MAC/Ethernet Addresses</h3>
<h3 id="examples-1">9.3.2 Examples</h3>
<h3 id="sending-multicast-datagrams">9.3.3 Sending Multicast Datagrams</h3>
<h3 id="receiving-multicast-datagrams">9.3.4 Receiving Multicast Datagrams</h3>
<h3 id="host-address-filtering">9.3.5 Host Address Filtering</h3>
<h2 id="the-internet-group-management-protocol-igmp-and-multicast-listener-discovery-protocol-mld">9.4 The Internet Group Management Protocol (IGMP) and Multicast Listener Discovery Protocol (MLD)</h2>
<h3 id="igmp-and-mld-processing-by-group-members-group-member-part">9.4.1 IGMP and MLD Processing by Group Members (“Group Member Part”)</h3>
<h3 id="igmp-and-mld-processing-by-multicast-routers-multicast-router-part">9.4.2 IGMP and MLD Processing by Multicast Routers (“Multicast Router Part”)</h3>
<h3 id="examples-2">9.4.3 Examples</h3>
<h3 id="lightweight-igmpv3-and-mldv2">9.4.4 Lightweight IGMPv3 and MLDv2</h3>
<h3 id="igmp-and-mld-robustness">9.4.5 IGMP and MLD Robustness</h3>
<h3 id="igmp-and-mld-counters-and-variables">9.4.6 IGMP and MLD Counters and Variables</h3>
<h3 id="igmp-and-mld-snooping">9.4.7 IGMP and MLD Snooping</h3>
<h2 id="attacks-involving-igmp-and-mld">9.5 Attacks Involving IGMP and MLD</h2>
<h2 id="summary-8">9.6 Summary</h2>
<h2 id="references-8">9.7 References</h2>
<h1 id="chapter-10-user-datagram-protocol-udp-and-ip-fragmentation">Chapter 10 User Datagram Protocol (UDP) and IP Fragmentation</h1>
<h2 id="introduction-8">10.1 Introduction</h2>
<h2 id="udp-header">10.2 UDP Header</h2>
<h2 id="udp-checksum">10.3 UDP Checksum</h2>
<h2 id="examples-3">10.4 Examples</h2>
<h2 id="udp-and-ipv6">10.5 UDP and IPv6</h2>
<h3 id="teredo-tunneling-ipv6-through-ipv4-networks">10.5.1 Teredo: Tunneling IPv6 through IPv4 Networks</h3>
<h2 id="udp-lite">10.6 UDP-Lite</h2>
<h2 id="ip-fragmentation">10.7 IP Fragmentation</h2>
<h3 id="example-udpipv4-fragmentation">10.7.1 Example: UDP/IPv4 Fragmentation</h3>
<h3 id="reassembly-timeout">10.7.2 Reassembly Timeout</h3>
<h2 id="path-mtu-discovery-with-udp">10.8 Path MTU Discovery with UDP</h2>
<h3 id="example-1">10.8.1 Example</h3>
<h2 id="interaction-between-ip-fragmentation-and-arpnd">10.9 Interaction between IP Fragmentation and ARP/ND</h2>
<h2 id="maximum-udp-datagram-size">10.10 Maximum UDP Datagram Size</h2>
<h3 id="implementation-limitations">10.10.1 Implementation Limitations</h3>
<h3 id="datagram-truncation">10.10.2 Datagram Truncation</h3>
<h2 id="udp-server-design">10.11 UDP Server Design</h2>
<h3 id="ip-addresses-and-udp-port-numbers">10.11.1 IP Addresses and UDP Port Numbers</h3>
<h3 id="restricting-local-ip-addresses">10.11.2 Restricting Local IP Addresses</h3>
<h3 id="using-multiple-addresses">10.11.3 Using Multiple Addresses</h3>
<h3 id="restricting-foreign-ip-address">10.11.4 Restricting Foreign IP Address</h3>
<h3 id="using-multiple-servers-per-port">10.11.5 Using Multiple Servers per Port</h3>
<h3 id="spanning-address-families-ipv4-and-ipv6">10.11.6 Spanning Address Families: IPv4 and IPv6</h3>
<h3 id="lack-of-flow-and-congestion-control">10.11.7 Lack of Flow and Congestion Control</h3>
<h2 id="translating-udpipv4-and-udpipv6-datagrams">10.12 Translating UDP/IPv4 and UDP/IPv6 Datagrams</h2>
<h2 id="udp-in-the-internet">10.13 UDP in the Internet</h2>
<h2 id="attacks-involving-udp-and-ip-fragmentation">10.14 Attacks Involving UDP and IP Fragmentation</h2>
<h2 id="summary-9">10.15 Summary</h2>
<h2 id="references-9">10.16 References</h2>
<h1 id="chapter-11-name-resolution-and-the-domain-name-system-dns">Chapter 11 Name Resolution and the Domain Name System (DNS)</h1>
<h2 id="introduction-9">11.1 Introduction</h2>
<h2 id="the-dns-name-space">11.2 The DNS Name Space</h2>
<h3 id="dns-naming-syntax">11.2.1 DNS Naming Syntax</h3>
<h2 id="name-servers-and-zones">11.3 Name Servers and Zones</h2>
<h2 id="caching">11.4 Caching</h2>
<h2 id="the-dns-protocol">11.5 The DNS Protocol</h2>
<h3 id="dns-message-format">11.5.1 DNS Message Format</h3>
<h3 id="the-dns-extension-format-edns0">11.5.2 The DNS Extension Format (EDNS0)</h3>
<h3 id="udp-or-tcp">11.5.3 UDP or TCP</h3>
<h3 id="question-query-and-zone-section-format">11.5.4 Question (Query) and Zone Section Format</h3>
<h3 id="answer-authority-and-additional-information-section-formats">11.5.5 Answer, Authority, and Additional Information Section Formats</h3>
<h3 id="resource-record-types">11.5.6 Resource Record Types</h3>
<h3 id="dynamic-updates-dns-update">11.5.7 Dynamic Updates (DNS UPDATE)</h3>
<h3 id="zone-transfers-and-dns-notify">11.5.8 Zone Transfers and DNS NOTIFY</h3>
<h2 id="sort-lists-round-robin-and-split-dns">11.6 Sort Lists, Round-Robin, and Split DNS</h2>
<h2 id="open-dns-servers-and-dyndns">11.7 Open DNS Servers and DynDNS</h2>
<h2 id="transparency-and-extensibility">11.8 Transparency and Extensibility</h2>
<h2 id="translating-dns-from-ipv4-to-ipv6-dns64">11.9 Translating DNS from IPv4 to IPv6 (DNS64)</h2>
<h2 id="llmnr-and-mdns">11.10 LLMNR and mDNS</h2>
<h2 id="ldap">11.11 LDAP</h2>
<h2 id="attacks-on-the-dns">11.12 Attacks on the DNS</h2>
<h2 id="summary-10">11.13 Summary</h2>
<h2 id="references-10">11.14 References</h2>
<h1 id="chapter-12-tcp-the-transmission-control-protocol-preliminaries">Chapter 12 TCP: The Transmission Control Protocol (Preliminaries)</h1>
<h2 id="introduction-10">12.1 Introduction</h2>
<h3 id="arq-and-retransmission">12.1.1 ARQ and Retransmission</h3>
<h3 id="windows-of-packets-and-sliding-windows">12.1.2 Windows of Packets and Sliding Windows</h3>
<h3 id="variable-windows-flow-control-and-congestion-control">12.1.3 Variable Windows: Flow Control and Congestion Control</h3>
<h3 id="setting-the-retransmission-timeout">12.1.4 Setting the Retransmission Timeout</h3>
<h2 id="introduction-to-tcp">12.2 Introduction to TCP</h2>
<h3 id="the-tcp-service-model">12.2.1 The TCP Service Model</h3>
<h3 id="reliability-in-tcp">12.2.2 Reliability in TCP</h3>
<h2 id="tcp-header-and-encapsulation">12.3 TCP Header and Encapsulation</h2>
<h2 id="summary-11">12.4 Summary</h2>
<h2 id="references-11">12.5 References</h2>
<h1 id="chapter-13-tcp-connection-management">Chapter 13 TCP Connection Management</h1>
<h2 id="introduction-11">13.1 Introduction</h2>
<h2 id="tcp-connection-establishment-and-termination">13.2 TCP Connection Establishment and Termination</h2>
<h3 id="tcp-half-close">13.2.1 TCP Half-Close</h3>
<h3 id="simultaneous-open-and-close">13.2.2 Simultaneous Open and Close</h3>
<h3 id="initial-sequence-number-isn">13.2.3 Initial Sequence Number (ISN)</h3>
<h3 id="example-2">13.2.4 Example</h3>
<h3 id="timeout-of-connection-establishment">13.2.5 Timeout of Connection Establishment</h3>
<h3 id="connections-and-translators">13.2.6 Connections and Translators</h3>
<h2 id="tcp-options">13.3 TCP Options</h2>
<h3 id="maximum-segment-size-mss-option">13.3.1 Maximum Segment Size (MSS) Option</h3>
<h3 id="selective-acknowledgment-sack-options">13.3.2 Selective Acknowledgment (SACK) Options</h3>
<h3 id="window-scale-wscale-or-wsopt-option">13.3.3 Window Scale (WSCALE or WSOPT) Option</h3>
<h3 id="timestamps-option-and-protection-against-wrapped-sequence-numbers-paws">13.3.4 Timestamps Option and Protection against Wrapped Sequence Numbers (PAWS)</h3>
<h3 id="user-timeout-uto-option">13.3.5 User Timeout (UTO) Option</h3>
<h3 id="authentication-option-tcp-ao">13.3.6 Authentication Option (TCP-AO)</h3>
<h2 id="path-mtu-discovery-with-tcp">13.4 Path MTU Discovery with TCP</h2>
<h3 id="example-3">13.4.1 Example</h3>
<h2 id="tcp-state-transitions">13.5 TCP State Transitions</h2>
<h3 id="tcp-state-transition-diagram">13.5.1 TCP State Transition Diagram</h3>
<h3 id="time_wait-2msl-wait-state">13.5.2 TIME_WAIT (2MSL Wait) State</h3>
<h3 id="quiet-time-concept">13.5.3 Quiet Time Concept</h3>
<h3 id="fin_wait_2-state">13.5.4 FIN_WAIT_2 State</h3>
<h3 id="simultaneous-open-and-close-transitions">13.5.5 Simultaneous Open and Close Transitions</h3>
<h2 id="reset-segments">13.6 Reset Segments</h2>
<h3 id="connection-request-to-nonexistent-port">13.6.1 Connection Request to Nonexistent Port</h3>
<h3 id="aborting-a-connection">13.6.2 Aborting a Connection</h3>
<h3 id="half-open-connections">13.6.3 Half-Open Connections</h3>
<h3 id="time-wait-assassination-twa">13.6.4 TIME-WAIT Assassination (TWA)</h3>
<h2 id="tcp-server-operation">13.7 TCP Server Operation</h2>
<h3 id="tcp-port-numbers">13.7.1 TCP Port Numbers</h3>
<h3 id="restricting-local-ip-addresses-1">13.7.2 Restricting Local IP Addresses</h3>
<h3 id="restricting-foreign-endpoints">13.7.3 Restricting Foreign Endpoints</h3>
<h3 id="incoming-connection-queue">13.7.4 Incoming Connection Queue</h3>
<h2 id="attacks-involving-tcp-connection-management">13.8 Attacks Involving TCP Connection Management</h2>
<h2 id="summary-12">13.9 Summary</h2>
<h2 id="references-12">13.10 References</h2>
<h1 id="chapter-14-tcp-timeout-and-retransmission">Chapter 14 TCP Timeout and Retransmission</h1>
<h2 id="introduction-12">14.1 Introduction</h2>
<h2 id="simple-timeout-and-retransmission-example">14.2 Simple Timeout and Retransmission Example</h2>
<h2 id="setting-the-retransmission-timeout-rto">14.3 Setting the Retransmission Timeout (RTO)</h2>
<h3 id="the-classic-method">14.3.1 The Classic Method</h3>
<h3 id="the-standard-method">14.3.2 The Standard Method</h3>
<h3 id="the-linux-method">14.3.3 The Linux Method</h3>
<h3 id="rtt-estimator-behaviors">14.3.4 RTT Estimator Behaviors</h3>
<h3 id="rttm-robustness-to-loss-and-reordering">14.3.5 RTTM Robustness to Loss and Reordering</h3>
<h2 id="timer-based-retransmission">14.4 Timer-Based Retransmission</h2>
<h3 id="example-4">14.4.1 Example</h3>
<h2 id="fast-retransmit">14.5 Fast Retransmit</h2>
<h3 id="example-5">14.5.1 Example</h3>
<h2 id="retransmission-with-selective-acknowledgments">14.6 Retransmission with Selective Acknowledgments</h2>
<h3 id="sack-receiver-behavior">14.6.1 SACK Receiver Behavior</h3>
<h3 id="sack-sender-behavior">14.6.2 SACK Sender Behavior</h3>
<h3 id="example-6">14.6.3 Example</h3>
<h2 id="spurious-timeouts-and-retransmissions">14.7 Spurious Timeouts and Retransmissions</h2>
<h3 id="duplicate-sack-dsack-extension">14.7.1 Duplicate SACK (DSACK) Extension</h3>
<h3 id="the-eifel-detection-algorithm">14.7.2 The Eifel Detection Algorithm</h3>
<h3 id="forward-rto-recovery-f-rto">14.7.3 Forward-RTO Recovery (F-RTO)</h3>
<h3 id="the-eifel-response-algorithm">14.7.4 The Eifel Response Algorithm</h3>
<h2 id="packet-reordering-and-duplication">14.8 Packet Reordering and Duplication</h2>
<h3 id="reordering">14.8.1 Reordering</h3>
<h3 id="duplication">14.8.2 Duplication</h3>
<h2 id="destination-metrics">14.9 Destination Metrics</h2>
<h2 id="repacketization">14.10 Repacketization</h2>
<h2 id="attacks-involving-tcp-retransmission">14.11 Attacks Involving TCP Retransmission</h2>
<h2 id="summary-13">14.12 Summary</h2>
<h2 id="references-13">14.13 References</h2>
<h1 id="chapter-15-tcp-data-flow-and-window-management">Chapter 15 TCP Data Flow and Window Management</h1>
<h2 id="introduction-13">15.1 Introduction</h2>
<h2 id="interactive-communication">15.2 Interactive Communication</h2>
<h2 id="delayed-acknowledgments">15.3 Delayed Acknowledgments</h2>
<h2 id="nagle-algorithm">15.4 Nagle Algorithm</h2>
<h3 id="delayed-ack-and-nagle-algorithm-interaction">15.4.1 Delayed ACK and Nagle Algorithm Interaction</h3>
<h3 id="disabling-the-nagle-algorithm">15.4.2 Disabling the Nagle Algorithm</h3>
<h2 id="flow-control-and-window-management">15.5 Flow Control and Window Management</h2>
<h3 id="sliding-windows">15.5.1 Sliding Windows</h3>
<h3 id="zero-windows-and-the-tcp-persist-timer">15.5.2 Zero Windows and the TCP Persist Timer</h3>
<h3 id="silly-window-syndrome-sws">15.5.3 Silly Window Syndrome (SWS)</h3>
<h3 id="large-buffers-and-auto-tuning">15.5.4 Large Buffers and Auto-Tuning</h3>
<h2 id="urgent-mechanism">15.6 Urgent Mechanism</h2>
<h3 id="example-7">15.6.1 Example</h3>
<h2 id="attacks-involving-window-management">15.7 Attacks Involving Window Management</h2>
<h2 id="summary-14">15.8 Summary</h2>
<h2 id="references-14">15.9 References</h2>
<h1 id="chapter-16-tcp-congestion-control">Chapter 16 TCP Congestion Control</h1>
<h2 id="introduction-14">16.1 Introduction</h2>
<h3 id="detection-of-congestion-in-tcp">16.1.1 Detection of Congestion in TCP</h3>
<h3 id="slowing-down-a-tcp-sender">16.1.2 Slowing Down a TCP Sender</h3>
<h2 id="the-classic-algorithms">16.2 The Classic Algorithms</h2>
<h3 id="slow-start">16.2.1 Slow Start</h3>
<h3 id="congestion-avoidance">16.2.2 Congestion Avoidance</h3>
<h3 id="selecting-between-slow-start-and-congestion-avoidance">16.2.3 Selecting between Slow Start and Congestion Avoidance</h3>
<h3 id="tahoe-reno-and-fast-recovery">16.2.4 Tahoe, Reno, and Fast Recovery</h3>
<h3 id="standard-tcp">16.2.5 Standard TCP</h3>
<h2 id="evolution-of-the-standard-algorithms">16.3 Evolution of the Standard Algorithms</h2>
<h3 id="newreno">16.3.1 NewReno</h3>
<h3 id="tcp-congestion-control-with-sack">16.3.2 TCP Congestion Control with SACK</h3>
<h3 id="forward-acknowledgment-fack-and-rate-halving">16.3.3 Forward Acknowledgment (FACK) and Rate Halving</h3>
<h3 id="limited-transmit">16.3.4 Limited Transmit</h3>
<h3 id="congestion-window-validation-cwv">16.3.5 Congestion Window Validation (CWV)</h3>
<h2 id="handling-spurious-rtosthe-eifel-response-algorithm">16.4 Handling Spurious RTOs—the Eifel Response Algorithm</h2>
<h2 id="an-extended-example">16.5 An Extended Example</h2>
<h3 id="slow-start-behavior">16.5.1 Slow Start Behavior</h3>
<h3 id="sender-pause-and-local-congestion-event-1">16.5.2 Sender Pause and Local Congestion (Event 1)</h3>
<h3 id="stretch-acks-and-recovery-from-local-congestion">16.5.3 Stretch ACKs and Recovery from Local Congestion</h3>
<h3 id="fast-retransmission-and-sack-recovery-event-2">16.5.4 Fast Retransmission and SACK Recovery (Event 2)</h3>
<h3 id="additional-local-congestion-and-fast-retransmit-events">16.5.5 Additional Local Congestion and Fast Retransmit Events</h3>
<h3 id="timeouts-retransmissions-and-undoing-cwnd-changes">16.5.6 Timeouts, Retransmissions, and Undoing cwnd Changes</h3>
<h3 id="connection-completion">16.5.7 Connection Completion</h3>
<h2 id="sharing-congestion-state">16.6 Sharing Congestion State</h2>
<h2 id="tcp-friendliness">16.7 TCP Friendliness</h2>
<h2 id="tcp-in-high-speed-environments">16.8 TCP in High-Speed Environments</h2>
<h3 id="highspeed-tcp-hstcp-and-limited-slow-start">16.8.1 HighSpeed TCP (HSTCP) and Limited Slow Start</h3>
<h3 id="binary-increase-congestion-control-bic-and-cubic">16.8.2 Binary Increase Congestion Control (BIC and CUBIC)</h3>
<h2 id="delay-based-congestion-control">16.9 Delay-Based Congestion Control</h2>
<h3 id="vegas">16.9.1 Vegas</h3>
<h3 id="fast">16.9.2 FAST</h3>
<h3 id="tcp-westwood-and-westwood">16.9.3 TCP Westwood and Westwood+</h3>
<h3 id="compound-tcp">16.9.4 Compound TCP</h3>
<h2 id="buffer-bloat">16.10 Buffer Bloat</h2>
<h2 id="active-queue-management-and-ecn">16.11 Active Queue Management and ECN</h2>
<h2 id="attacks-involving-tcp-congestion-control">16.12 Attacks Involving TCP Congestion Control</h2>
<h2 id="summary-15">16.13 Summary</h2>
<h2 id="references-15">16.14 References</h2>
<h1 id="chapter-17-tcp-keepalive">Chapter 17 TCP Keepalive</h1>
<h2 id="introduction-15">17.1 Introduction</h2>
<h2 id="description">17.2 Description</h2>
<h3 id="keepalive-examples">17.2.1 Keepalive Examples</h3>
<h2 id="attacks-involving-tcp-keepalives">17.3 Attacks Involving TCP Keepalives</h2>
<h2 id="summary-16">17.4 Summary</h2>
<h2 id="references-16">17.5 References</h2>
<h1 id="chapter-18-security-eap-ipsec-tls-dnssec-and-dkim">Chapter 18 Security: EAP, IPsec, TLS, DNSSEC, and DKIM</h1>
<h2 id="introduction-16">18.1 Introduction</h2>
<h2 id="basic-principles-of-information-security">18.2 Basic Principles of Information Security</h2>
<h2 id="threats-to-network-communication">18.3 Threats to Network Communication</h2>
<h2 id="basic-cryptography-and-security-mechanisms">18.4 Basic Cryptography and Security Mechanisms</h2>
<h3 id="cryptosystems">18.4.1 Cryptosystems</h3>
<h3 id="rivest-shamir-and-adleman-rsa-public-key-cryptography">18.4.2 Rivest, Shamir, and Adleman (RSA) Public Key Cryptography</h3>
<h3 id="diffie-hellman-merkle-key-agreement-aka-diffie-hellman-or-dh">18.4.3 Diffie-Hellman-Merkle Key Agreement (aka Diffie-Hellman or DH)</h3>
<h3 id="signcryption-and-elliptic-curve-cryptography-ecc">18.4.4 Signcryption and Elliptic Curve Cryptography (ECC)</h3>
<h3 id="key-derivation-and-perfect-forward-secrecy-pfs">18.4.5 Key Derivation and Perfect Forward Secrecy (PFS)</h3>
<h3 id="pseudorandom-numbers-generators-and-function-families">18.4.6 Pseudorandom Numbers, Generators, and Function Families</h3>
<h3 id="nonces-and-salt">18.4.7 Nonces and Salt</h3>
<h3 id="cryptographic-hash-functions-and-message-digests">18.4.8 Cryptographic Hash Functions and Message Digests</h3>
<h3 id="message-authentication-codes-macs-hmac-cmac-and-gmac">18.4.9 Message Authentication Codes (MACs, HMAC, CMAC, and GMAC)</h3>
<h3 id="cryptographic-suites-and-cipher-suites">18.4.10 Cryptographic Suites and Cipher Suites</h3>
<h2 id="certificates-certificate-authorities-cas-and-pkis">18.5 Certificates, Certificate Authorities (CAs), and PKIs</h2>
<h4 id="public-key-certificates-certificate-authorities-and-x.509">18.5.1 Public Key Certificates, Certificate Authorities, and X.509</h4>
<h3 id="validating-and-revoking-certificates">18.5.2 Validating and Revoking Certificates</h3>
<h3 id="attribute-certificates">18.5.3 Attribute Certificates</h3>
<h2 id="tcpip-security-protocols-and-layering">18.6 TCP/IP Security Protocols and Layering</h2>
<h4 id="network-access-control-802.1x-802.1ae-eap-and-pana">18.7 Network Access Control: 802.1X, 802.1AE, EAP, and PANA</h4>
<h3 id="eap-methods-and-key-derivation">18.7.1 EAP Methods and Key Derivation</h3>
<h3 id="the-eap-re-authentication-protocol-erp">18.7.2 The EAP Re-authentication Protocol (ERP)</h3>
<h3 id="protocol-for-carrying-authentication-for-network-access-pana">18.7.3 Protocol for Carrying Authentication for Network Access (PANA)</h3>
<h2 id="layer-3-ip-security-ipsec">18.8 Layer 3 IP Security (IPsec)</h2>
<h3 id="internet-key-exchange-ikev2-protocol">18.8.1 Internet Key Exchange (IKEv2) Protocol</h3>
<h3 id="authentication-header-ah">18.8.2 Authentication Header (AH)</h3>
<h3 id="encapsulating-security-payload-esp">18.8.3 Encapsulating Security Payload (ESP)</h3>
<h3 id="multicast-1">18.8.4 Multicast</h3>
<h3 id="l2tpipsec">18.8.5 L2TP/IPsec</h3>
<h3 id="ipsec-nat-traversal">18.8.6 IPsec NAT Traversal</h3>
<h3 id="example-8">18.8.7 Example</h3>
<h2 id="transport-layer-security-tls-and-dtls">18.9 Transport Layer Security (TLS and DTLS)</h2>
<h4 id="tls-1.2">18.9.1 TLS 1.2</h4>
<h3 id="tls-with-datagrams-dtls">18.9.2 TLS with Datagrams (DTLS)</h3>
<h2 id="dns-security-dnssec">18.10 DNS Security (DNSSEC)</h2>
<h3 id="dnssec-resource-records">18.10.1 DNSSEC Resource Records</h3>
<h3 id="dnssec-operation">18.10.2 DNSSEC Operation</h3>
<h3 id="transaction-authentication-tsig-tkey-and-sig0">18.10.3 Transaction Authentication (TSIG, TKEY, and SIG(0))</h3>
<h3 id="dnssec-with-dns64">18.10.4 DNSSEC with DNS64</h3>
<h2 id="domainkeys-identified-mail-dkim">18.11 DomainKeys Identified Mail (DKIM)</h2>
<h3 id="dkim-signatures">18.11.1 DKIM Signatures</h3>
<h3 id="example-9">18.11.2 Example</h3>
<h2 id="attacks-on-security-protocols">18.12 Attacks on Security Protocols</h2>
<h2 id="summary-17">18.13 Summary</h2>
<h2 id="references-17">18.14 References</h2>
<h1 id="其他">其他</h1>
<h1 id="internet-www-difference">internet www difference</h1>
<table>
<colgroup>
<col style="width: 3%" />
<col style="width: 48%" />
<col style="width: 47%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">S.No.</th>
<th style="text-align: left;">INTERNET</th>
<th style="text-align: left;">WWW</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">1</td>
<td style="text-align: left;">Internet is a global network of networks.</td>
<td style="text-align: left;">WWW stands for World wide Web.</td>
</tr>
<tr class="even">
<td style="text-align: left;">2</td>
<td style="text-align: left;">Internet is a means of connecting a computer to any other computer anywhere in the world.</td>
<td style="text-align: left;">World Wide Web which is a collection of information which is accessed via the Internet.</td>
</tr>
<tr class="odd">
<td style="text-align: left;">3</td>
<td style="text-align: left;">Internet is infrastructure.</td>
<td style="text-align: left;">WWW is <strong>service</strong> on top of that infrastructure.</td>
</tr>
<tr class="even">
<td style="text-align: left;">4</td>
<td style="text-align: left;">Internet can be viewed as a big book-store.</td>
<td style="text-align: left;">Web can be viewed as collection of books on that store.</td>
</tr>
<tr class="odd">
<td style="text-align: left;">5</td>
<td style="text-align: left;">At some advanced level, to understand we can think of the Internet as hardware.</td>
<td style="text-align: left;">At some advanced level, to understand we can think of the WWW as software.</td>
</tr>
<tr class="even">
<td style="text-align: left;">6</td>
<td style="text-align: left;">Internet is primarily hardware-based.</td>
<td style="text-align: left;">WWW is more software-oriented as compared to the Internet.</td>
</tr>
<tr class="odd">
<td style="text-align: left;">7</td>
<td style="text-align: left;">It is originated sometimes in late 1960s.</td>
<td style="text-align: left;">English scientist Tim Berners-Lee invented the World Wide Web in 1989.</td>
</tr>
<tr class="even">
<td style="text-align: left;">8</td>
<td style="text-align: left;">Internet is superset of WWW.</td>
<td style="text-align: left;">WWW is a subset of the Internet.</td>
</tr>
<tr class="odd">
<td style="text-align: left;">9</td>
<td style="text-align: left;">The first version of the Internet was known as ARPANET.</td>
<td style="text-align: left;">In the beginning WWW was known as NSFNET.</td>
</tr>
<tr class="even">
<td style="text-align: left;">10</td>
<td style="text-align: left;">Internet uses IP address.</td>
<td style="text-align: left;">WWW uses HTTP.</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>tcp</tag>
        <tag>ipv6</tag>
        <tag>internet</tag>
        <tag>ipv4</tag>
        <tag>addresses</tag>
      </tags>
  </entry>
  <entry>
    <title>insidecpp</title>
    <url>/2022/11/6d8f378b26de.html</url>
    <content><![CDATA[<blockquote>
<p>深入理解 cpp 对象模型读书笔记(这本书原文有非常非常非常多的错误, 建议看侯捷译文)</p>
</blockquote>
<span id="more"></span>
<h1 id="chapter-1.-object-lessons">Chapter 1. Object Lessons</h1>
<h2 id="layout-costs-for-adding-encapsulation">Layout Costs for Adding Encapsulation</h2>
<p>主要的 overhead 来自于 virtual 机制</p>
<h2 id="the-c-object-model">1.1 The C++ Object Model</h2>
<p>slot 模型</p>
<p>table 模型</p>
<p><strong>c++ 模型:</strong></p>
<ul>
<li>nonstatic member 在 object 内</li>
<li>static member, nonstatic 和 static function 在 object 外</li>
<li>每个类有一个 vtb(?)</li>
<li>每个 object 中有 vptr 指向 vtb(多继承不止一个, 继承自几个父类就有几个 vtb)</li>
<li>type_info 存储在 vtb 中用来支持 runtime 类型检查(RTTI)</li>
<li>base class member 直接存储在 derived object 中</li>
<li>虚基类: The original model of virtual base class support <strong>added a pointer into the class object for each associated virtual base class.</strong> Alternative models have evolved that either introduce <strong>a virtual base class table or augment the existing virtual table to maintain the location of each virtual base class</strong></li>
</ul>
<h2 id="a-keyword-distinction">1.2. A Keyword Distinction</h2>
<p>关于 struct 和 class</p>
<p>The data members within a single access section are guaranteed within C++ to be laid out in the order of their declaration.</p>
<p><strong>c++中多个 access setion 的 data layout 不确定</strong></p>
<p><strong>同样, base class 和 derived class 的成员 layout 顺序也不确定</strong></p>
<p><strong>virtual机制也会影响 layout</strong></p>
<p>The layout of data contained in multiple access sections, however, is left undefined. In the following declaration, for example, the C trick may or may not work, depending on whether the protected data members are placed before or after those declared private:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">stumble</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">   <span class="comment">// operations ...</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">   <span class="comment">// protected stuff</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">   <span class="comment">/* private stuff */</span></span><br><span class="line">   <span class="type">char</span> pc[ <span class="number">1</span> ];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>因为 layout 可能产生的变化, 在 c++中使用 c 风格的最好方法是包含而不是继承</p>
<h2 id="an-object-distinction">1.3. An Object Distinction</h2>
<p>In the OO paradigm, the programmer manipulates an unknown instance of a bounded but infinite set of types.</p>
<p>The actual type of the object addressed is not resolved in principle until <strong>runtime</strong> at each particular point of execution.</p>
<p>In C++, this is achieved only through the manipulation of objects through <strong>pointers and references</strong>.</p>
<p>In contrast, in the ADT paradigm the programmer manipulates <strong>an instance of a fixed, singular type that is completely defined at the point of compilation</strong>.</p>
<p>一个指针可能指向他和他的子类中的任一种实例</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">rotate</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">   X datum,</span></span></span><br><span class="line"><span class="params"><span class="function">   <span class="type">const</span> X *pointer,</span></span></span><br><span class="line"><span class="params"><span class="function">   <span class="type">const</span> X &amp;reference )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="comment">// cannot determine until run-time</span></span><br><span class="line">   <span class="comment">// actual instance of rotate() invoked</span></span><br><span class="line">   (*pointer).<span class="built_in">rotate</span>();</span><br><span class="line">   reference.<span class="built_in">rotate</span>();</span><br><span class="line">   <span class="comment">// always invokes X::rotate()</span></span><br><span class="line">   datum.<span class="built_in">rotate</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">main</span>() &#123;</span><br><span class="line">   Z z; <span class="comment">// a subtype of X</span></span><br><span class="line">   <span class="built_in">rotate</span>( z, &amp;z, z );</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br></pre></td></tr></table></figure>
<p>内存对 object 的要求: nonstatic memeber 大小, padding, vitual 机制</p>
<p><strong>不同类型的指针区别在于</strong>: That is, the type of a pointer instructs the compiler as to how to interpret the memory found at a particular address and also just how much memory that interpretation should span</p>
<p>eg:</p>
<ul>
<li>An integer pointer addressing memory location 1000 on a 32-bit machine spans the address space 1000—1003.</li>
<li>The ZooAnimal pointer, if we presume a conventional 8-byte String (a 4-byte character pointer and an integer to hold the string length), spans the address space 1000—1015.(还有其他成员)</li>
<li>ust out of curiosity, what address space does a <strong>void</strong>* pointer that holds memory location 1000 span? That's right, we don't know. That's why a pointer of type void* can only hold an address and not actually operate on the object it addresses.</li>
</ul>
<h3 id="static_cast">static_cast</h3>
<p><code>static_cast</code> is used for cases where you basically want to reverse an implicit conversion, with a few restrictions and additions. <code>static_cast</code> performs no runtime checks. This should be used if you know that you refer to an object of a specific type, and thus a check would be unnecessary. Example:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">void</span> *data)</span> </span>&#123;</span><br><span class="line"><span class="comment">// Conversion from MyClass* -&gt; void* is implicit</span></span><br><span class="line">MyClass *c = <span class="built_in">static_cast</span>&lt;MyClass*&gt;(data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">MyClass c;</span><br><span class="line"><span class="built_in">start_thread</span>(&amp;func, &amp;c)  <span class="comment">// func(&amp;c) will be called</span></span><br><span class="line">.<span class="built_in">join</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>In this example, you know that you passed a <code>MyClass</code> object, and thus there isn't any need for a runtime check to ensure this.</p>
<h3 id="dynamic_cast">dynamic_cast</h3>
<p><code>dynamic_cast</code> is useful when you don't know what the dynamic type of the object is. <strong>It returns a null pointer if the object referred to doesn't contain the type casted to as a base class</strong> (when you cast to a reference, a <code>bad_cast</code> exception is thrown in that case).</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (JumpStm *j = <span class="built_in">dynamic_cast</span>&lt;JumpStm*&gt;(&amp;stm)) &#123;</span><br><span class="line">...</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (ExprStm *e = <span class="built_in">dynamic_cast</span>&lt;ExprStm*&gt;(&amp;stm)) &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>You can <strong>not</strong> use <code>dynamic_cast</code> for downcast (casting to a derived class) if the argument type is not polymorphic. For example, the following code is not valid, because <code>Base</code> <strong>doesn't contain any virtual function:</strong></p>
<p>(如果有 virtual 可以转换)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Base</span> &#123; &#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Derived</span> : Base &#123; &#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Derived d; Base *b = &amp;d;</span><br><span class="line"><span class="built_in">dynamic_cast</span>&lt;Derived*&gt;(b); <span class="comment">// Invalid</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>An "up-cast" (cast to the base class) is always valid with both <code>static_cast</code> and <code>dynamic_cast</code>, and also without any cast, as an "up-cast" is an implicit conversion (assuming the base class is accessible, i.e. it's a <code>public</code> inheritance).</p>
<p>see also</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">L</span> &#123;</span><br><span class="line"><span class="keyword">public</span>: <span class="type">int</span> m;</span><br><span class="line"> <span class="comment">//virtual void f()&#123;&#125;;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> : <span class="keyword">public</span> L &#123;<span class="keyword">public</span>:  <span class="type">int</span> a;&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> : L &#123;<span class="keyword">public</span>:  <span class="type">int</span> b; &#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> : <span class="keyword">public</span> A , B &#123;<span class="keyword">public</span>:  <span class="type">int</span> c; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> C c;</span><br><span class="line"> C* pc = &amp;c;</span><br><span class="line"> A* pa = (A*)pc;</span><br><span class="line"></span><br><span class="line"> C* pcc = <span class="built_in">static_cast</span>&lt;C*&gt;(pa);</span><br><span class="line"> <span class="comment">//如果有 virtual 用 dynamic_cast 和 static_cast 都行</span></span><br><span class="line"> <span class="comment">//没有 virtual 就只能 static_cast</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="regular-cast">Regular Cast</h3>
<p>These casts are also called C-style cast. A C-style cast is basically identical to trying out a range of sequences of C++ casts, and taking the first C++ cast that works, without ever considering <code>dynamic_cast</code>. Needless to say, this is much more powerful as it combines all of <code>const_cast</code>, <code>static_cast</code> and <code>reinterpret_cast</code>, but it's also unsafe, because it does not use <code>dynamic_cast</code>.</p>
<p>In addition, C-style casts not only allow you to do this, but they also allow you to safely cast to a private base-class, while the "equivalent" <code>static_cast</code> sequence would give you a compile-time error for that.</p>
<p>Some people prefer C-style casts because of their brevity. I use them for numeric casts only, and use the appropriate C++ casts when user defined types are involved, as they provide stricter checking.</p>
<p>base = derived</p>
<p><strong>When a base class object is directly initialized or assigned with a derived class object,</strong> the derived object is <strong>sliced</strong> to fit into the available memory resources of the base type. There is nothing of the derived type remaining. Polymorphism is not present, and an observant compiler can resolve an invocation of a virtual function through the object at compile time, thus by-passing the virtual mechanism. This can be a significant performance win if the virtual function is defined as inline.</p>
<h1 id="chapter-2.-the-semantics-of-constructors">Chapter 2. The Semantics of Constructors</h1>
<p><strong>Global objects</strong> are guaranteed to have <strong>their associated memory "zeroed out" at program start-up.</strong></p>
<p>Local objects allocated on the program stack and heap objects allocated on the free-store do not have their associated memory zeroed out; rather, the memory retains the arbitrary bit pattern of its previous use.</p>
<blockquote>
<p>大原则: 用户定义了构造函数就 compiler 就不生成隐含默认构造函数</p>
</blockquote>
<h2 id="default-constructor-construction">2.1. Default Constructor Construction</h2>
<p>compiler 只做 implement 需要的事情, 只有当 implementation 需要的时候才会生成 default constructor</p>
<p>例如 int, 指针等不会被implicit默认构造函数初始化(值为随机值)</p>
<p>以上这种默认构造属于 trivial</p>
<p>一下几种情况默认构造函数是 nontrivial</p>
<h3 id="含有有默认构造函数的成员">含有有默认构造函数的成员</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>&#123;</span><br><span class="line">  <span class="comment">//public:</span></span><br><span class="line">  <span class="built_in">C</span>()&#123;cout&lt;&lt;<span class="string">&quot;?&quot;</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Base</span> &#123;</span><br><span class="line">    C c;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Base b;</span><br><span class="line">  <span class="comment">//ERROR: call to implicitly-deleted default constructor of &#x27;Base&#x27;</span></span><br><span class="line">  <span class="comment">//但是书上说会生成隐含默认构造函数, 这个函数会初始化 C 但是不会初始化 int 指针等类型的成员. 有点矛盾?</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//问题解决: C 的构造函数要是 public 就不会报错, 和书上一致</span></span><br></pre></td></tr></table></figure>
<p>The language requires that the (member) constructors be invoked in the order of member declaration within the class.(before user code)</p>
<h4 id="关于初始化顺序">关于初始化顺序</h4>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">C1</span> &#123;</span><br><span class="line">      <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">C1</span>() &#123; cout &lt;&lt; <span class="string">&quot;C1&quot;</span>; &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">C2</span> &#123;</span><br><span class="line">      <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">C2</span>() &#123; cout &lt;&lt; <span class="string">&quot;C2&quot;</span>; &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line">        C2 c2;</span><br><span class="line">        C1 c;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">Base</span>() : <span class="built_in">c2</span>() &#123; cout &lt;&lt; <span class="string">&quot;Base&quot;</span>; &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Derive</span> : Base &#123;</span><br><span class="line">        C1 c;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">Derive</span>() &#123; cout &lt;&lt; <span class="string">&quot;Derive&quot;</span>; &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    Derive d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//C2C1BaseC1Derive</span></span><br><span class="line"><span class="comment">//可见, 隐含成员构造和构造列表的顺序都取决于成员声明的顺序</span></span><br><span class="line"><span class="comment">//同时, 基类初始化在成员初始化之前</span></span><br></pre></td></tr></table></figure>
<h3 id="基类有默认构造函数">基类有默认构造函数</h3>
<h3 id="类中有虚函数">类中有虚函数</h3>
<ol type="1">
<li>类里声明或者继承了一个虚函数</li>
<li>基类链里有虚函数</li>
</ol>
<p>这种情况需要对 vptr 进行初始化</p>
<h3 id="有虚基类">有虚基类</h3>
<p>Virtual base class implementations vary widely across compilers. However, what is common to each implementation is the need to make the virtual base class location within each derived class object available at runtime.**</p>
<p>例如在 cfront 中</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">X</span> &#123; <span class="keyword">public</span>: <span class="type">int</span> i; &#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> : <span class="keyword">public</span> <span class="keyword">virtual</span> X   &#123; <span class="keyword">public</span>: <span class="type">int</span> j; &#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> : <span class="keyword">public</span> <span class="keyword">virtual</span> X   &#123; <span class="keyword">public</span>: <span class="type">double</span> d; &#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> : <span class="keyword">public</span> A, <span class="keyword">public</span> B &#123; <span class="keyword">public</span>: <span class="type">int</span> k; &#125;;</span><br><span class="line"><span class="comment">// cannot resolve location of pa-&gt;X::i at compile-time</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">( <span class="type">const</span> A* pa )</span> </span>&#123; pa-&gt;i = <span class="number">1024</span>; &#125;</span><br><span class="line"><span class="built_in">main</span>() &#123;</span><br><span class="line">   <span class="built_in">foo</span>( <span class="keyword">new</span> A );</span><br><span class="line">   <span class="built_in">foo</span>( <span class="keyword">new</span> C );</span><br><span class="line">   <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// possible compiler transformation</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">( <span class="type">const</span> A* pa )</span> </span>&#123; pa-&gt;__vbcX-&gt;i = <span class="number">1024</span>; &#125;</span><br></pre></td></tr></table></figure>
<h2 id="copy-constructor-construction">2.2. Copy Constructor Construction</h2>
<p>三种情况:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">X</span> &#123; ... &#125;;</span><br><span class="line">   X x;</span><br><span class="line"></span><br><span class="line"><span class="comment">// explicit initialization of one class object with another</span></span><br><span class="line">X xx = x;</span><br><span class="line"></span><br><span class="line"><span class="comment">//as argument</span></span><br><span class="line"><span class="built_in">foo</span>(x);</span><br><span class="line"></span><br><span class="line"><span class="comment">//as return </span></span><br><span class="line"><span class="function">X <span class="title">foo_bar</span><span class="params">()</span></span>&#123;</span><br><span class="line">  X xx;</span><br><span class="line">  <span class="keyword">return</span> xx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="default-memberwise-initialization">default memberwise initialization</h3>
<p>Default memberwise initialization <strong>copies the value of each built-in or derived data member</strong> (such as a pointer or an array) from the one class object to another. A <strong>member class object, however, is not copied; rather, memberwise initialization is recursively applied</strong>.</p>
<h3 id="bitwise-copy-semantics">bitwise copy semantics</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Word</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">   <span class="built_in">Word</span>( <span class="type">const</span> <span class="type">char</span>* );</span><br><span class="line">   ~<span class="built_in">Word</span>() &#123; <span class="keyword">delete</span> [] str; &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">   <span class="type">int</span>   cnt;</span><br><span class="line">	 <span class="type">char</span> *str; </span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//不需要生成 copy 构造函数, 不涉及函数调用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Word</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">   <span class="built_in">Word</span>( <span class="type">const</span> String&amp; );</span><br><span class="line">   ~<span class="built_in">Word</span>();</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">   <span class="type">int</span>    cnt;</span><br><span class="line">   String str;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//生成 copy 构造函数来调用 string 的拷贝构造函数</span></span><br></pre></td></tr></table></figure>
<p>一下四种情况的 class 不存在 bitwise copy semantics</p>
<ol type="1">
<li>含有成员, 他有拷贝构造函数(无论是自定义的还是编译器组装的)</li>
<li>继承自有拷贝构造函数的类(自定义的或编译器的)</li>
<li>声明了虚函数</li>
<li>继承链里有虚基类</li>
</ol>
<h3 id="有虚函数的重置-vptr">有虚函数的重置 vptr</h3>
<p>只要引入了 vptr 就不存在逐位拷贝语义, 需要拷贝构造函数来初始化 vptr</p>
<p>如果是 derived = base, vptr 不能直接复制, 必须要正确初始化 vptr</p>
<h3 id="关于虚基类-subobject">关于虚基类 subobject</h3>
<p>构造函数需要: 初始化 vptr, 定位 基类 subobject</p>
<p>还是 derived = base</p>
<h2 id="program-transformation-semantics">2.3. Program Transformation Semantics</h2>
<p>参数传入 和 结果返回 copy 构造函数</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">( X x0 )</span></span>;</span><br><span class="line"><span class="comment">// Pseudo C++ code compiler generated temporary</span></span><br><span class="line">X __temp0;</span><br><span class="line"><span class="comment">// compiler invocation of copy constructor</span></span><br><span class="line">__temp0.X::<span class="built_in">X</span> ( xx );</span><br><span class="line"><span class="comment">// rewrite function call to take temporary</span></span><br><span class="line"><span class="built_in">foo</span>( __temp0 );</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bar</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// Pseudo C++ Code</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bar</span><span class="params">( X&amp; __result )</span></span>&#123;</span><br><span class="line">	 X xx;</span><br><span class="line">   <span class="comment">// compiler generated invocation of default constructor</span></span><br><span class="line">   xx.X::<span class="built_in">X</span>();</span><br><span class="line">   <span class="comment">// compiler generated invocation</span></span><br><span class="line">   <span class="comment">// of copy constructor</span></span><br><span class="line">   __result.X::<span class="built_in">X</span>( xx );</span><br><span class="line">   <span class="keyword">return</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Pseudo C++ Code 不再调用 copy 构造函数, NRV</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bar</span><span class="params">( X &amp;__result )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   __result.X::<span class="built_in">X</span>( y, z );</span><br><span class="line">   <span class="keyword">return</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">B</span>() &#123;std::cout&lt;&lt;<span class="string">&quot;default&quot;</span>&lt;&lt;std::endl;&#125;</span><br><span class="line">    <span class="built_in">B</span>(<span class="type">const</span> B&amp; b) &#123; std::cout &lt;&lt; <span class="string">&quot;copy&quot;</span> &lt;&lt; std::endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">B <span class="title">fun</span><span class="params">(B b)</span> </span>&#123; <span class="keyword">return</span> b; &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">    B b;</span><br><span class="line">    B b_copy = <span class="built_in">fun</span>(b);</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">fun</span>(b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">default</span></span><br><span class="line"><span class="comment">copy</span></span><br><span class="line"><span class="comment">copy</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">copy</span></span><br><span class="line"><span class="comment">copy</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h2 id="member-initialization-list">2.4. Member Initialization List</h2>
<p>必须使用初始化列表:</p>
<p>reference, const, invoke base or member 带参构造函数</p>
<p>在函数体内的用赋值初始化会导致</p>
<ul>
<li>先调用默认构造函数</li>
<li>再调用赋值</li>
<li>摧毁临时对象</li>
</ul>
<p>The compiler iterates over the initialization list, <strong>inserting the initializations in the proper order within the constructor prior to any explicit user code.</strong>其顺序是根据声明顺序而不是 list 的顺序</p>
<p>最好不要在 list 里调用成员函数, 因为不清楚这个成员函数是否依赖其他成员</p>
<p><strong>问: this 指针何时初始化?</strong></p>
<h1 id="chapter-3.-the-semantics-of-data">Chapter 3. The Semantics of Data</h1>
<p>空类对象; sizeof == 1</p>
<h2 id="the-binding-of-a-data-member">3.1. The Binding of a Data Member</h2>
<p><strong>the analysis of the member function's body is delayed until the entire class declaration is seen.</strong></p>
<p>This is not true of the argument list of the member function, however. <strong>Names within the argument list are still resolved in place at the point they are first encountered.</strong></p>
<p>Nonintuitive bindings between extern and nested type names, therefore, can still occur. In the following code fragment, for example, the type of length in both member function signatures resolves to that of the global typedef—that is, to int. When the subsequent declaration of the nested typedef of length is encountered, the Standard requires that the earlier bindings be flagged as illegal:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> length;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point3d</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">   <span class="comment">// oops: length resolves to global</span></span><br><span class="line">   <span class="comment">// ok: _val resolves to Point3d::_val</span></span><br><span class="line">   <span class="built_in">mumble</span>( length val ) &#123; _val = val; &#125;</span><br><span class="line">   <span class="function">length <span class="title">mumble</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> _val; &#125;</span><br><span class="line">   <span class="comment">// ...</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">   <span class="comment">// length must be seen before its first</span></span><br><span class="line">   <span class="comment">// reference within the class.  This</span></span><br><span class="line">   <span class="comment">// declaration makes the prior reference illegal.</span></span><br><span class="line">   <span class="keyword">typedef</span> <span class="type">float</span> length;</span><br><span class="line">   length _val;</span><br><span class="line">   <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="data-member-layout">3.2. Data Member Layout</h2>
<p>The Standard requires <strong>within an access section</strong> (the private, public, or protected section of a class declaration) only that <strong>the members be set down such that "later members have higher addresses within a class object"</strong> . That is, the members are not required to be set down contiguously. What might intervene between the declared members? Alignment constraints on the type of a succeeding member may require padding. This is true both of C and C++, and in this case, the member layout of the two languages is in current practice the same.</p>
<p>The Standard also allows the <strong>compiler the freedom to order the data members within multiple access sections</strong> within a class in whatever order it sees fit.</p>
<p>即一个 access session 里是根据生命顺序 layout, 不同 session 之间是取决于编译器的</p>
<p>多个 session 不占用额外空间</p>
<h2 id="access-of-a-data-member">3.3. Access of a Data Member</h2>
<h3 id="static-member">static member</h3>
<p>实例和指针访问效率相同</p>
<h3 id="nonstatic-member">nonstatic member</h3>
<p>Access of a nonstatic data member requires <strong>the addition of the beginning address of the class object with the offset location of the data member.</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">c.m_y;</span><br><span class="line">--&gt;</span><br><span class="line">&amp;c + (&amp;C::m_y - <span class="number">1</span>) ;</span><br><span class="line">???</span><br><span class="line"><span class="comment">//注意里面的 -1 是为了让编译系统区分</span></span><br><span class="line"><span class="comment">//a pointer to data member that is addressing the first member of a class and no member.</span></span><br></pre></td></tr></table></figure>
<p>nonstatic member 的 offset 在编译时就知道, 访问时间与 c 无异</p>
<p>当有虚基类的时候, 访问会慢</p>
<h2 id="inheritance-and-the-data-member">3.4. Inheritance and the Data Member</h2>
<blockquote>
<p>(原文有较大问题请看侯捷译文)</p>
</blockquote>
<p>继承可能会导致 padding, 这些 padding 如果被优化会导致 base = derived 无法实现</p>
<p>多重继承时, derived 和第二及后续 base 的关系是不自然的</p>
<p>Base* bp = &amp;derived_object; 起始地址是一样的</p>
<p>Seconde_base* bsp = &amp;derived_object; 起始地址不一样需要调整</p>
<p>但是除了直接offset调整, 还需要增加是否为空的判断, 否则可能得到一个 sizeof 值</p>
<h3 id="虚继承的菱形继承问题">虚继承的菱形继承问题</h3>
<p>A class containing one or more virtual base class subobjects, such as istream, is divided into two regions: <strong>an invariant region and a shared region</strong>. <strong>Data within the invariant region remains at a fixed offset from the start of the object regardless of subsequent derivations</strong>. So members within the invariant region can be accessed directly. <strong>The shared region represents the virtual base class subobjects. The location of data within the shared region fluctuates with each derivation.</strong> <strong>So members within the shared region need to be accessed indirectly.</strong> What has varied among implementations is the method of indirect access.</p>
<p>即独立区域是直接访问, 共享区域是间接访问</p>
<p>a pointer to each virtual base class is inserted within each derived class object.</p>
<p>一种方法是 is to place not the address but the offset of the virtual base class within the virtual function table.</p>
<p>把到共享区的 offset 存在各个基类的 vptr[-1]里</p>
<figure>
<img src="https://tva1.sinaimg.cn/large/008vxvgGly1h81e4fo2zpj316y0u00vt.jpg" alt="IMG_4316F8EDE31A-1" /><figcaption aria-hidden="true">IMG_4316F8EDE31A-1</figcaption>
</figure>
<h2 id="object-member-efficiency">3.5. Object Member Efficiency</h2>
<p>几个表格</p>
<h2 id="pointer-to-data-members">3.6. Pointer to Data Members</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">string Student::*p = &amp;Student::m_name;</span><br><span class="line">Student s;</span><br><span class="line">s.*p;</span><br><span class="line">成员指针的值是 object 中成员的 offset + <span class="number">1</span></span><br><span class="line">+<span class="number">1</span> 是为了区分一个指针指向的是 没有 member 还是 第一个 member</span><br><span class="line">但是实际编译器里并没有体现+<span class="number">1</span>, 这条可以忽略</span><br><span class="line"><span class="function">both the <span class="title">compiler</span> <span class="params">(<span class="keyword">and</span> the user)</span> must remember to subtract 1 before</span></span><br><span class="line"><span class="function">actually <span class="keyword">using</span> the value to address a member.</span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure>
<p>一些表格</p>
<h1 id="chapter-4.-the-semantics-of-function">Chapter 4. The Semantics of Function</h1>
<h2 id="varieties-of-member-invocation">4.1. Varieties of Member Invocation</h2>
<p>member function 会被编译器内化为nonmember函数的形式</p>
<p>虚函数可以被声明为 inline, 当通过 object 直接调用时不会触发多态, 会使用 inline</p>
<h2 id="virtual-member-functions">4.2. Virtual Member Functions</h2>
<p>(纯虚函数如果没有被实现是不会分配虚函数 index 的)</p>
<p>虚函数在 runtime 期间的调用</p>
<ul>
<li>我不知道 ptr 所指的真正类型, 但是我知道 ptr指向一个 vtb</li>
<li>我不知道哪个func()是哪个函数, 但我知道所有的 func()在 vtb 中都有一个相同的 index</li>
</ul>
<h3 id="多重继承下的-virtual">多重继承下的 virtual</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Base2 *pbase2 = <span class="keyword">new</span> Derived;</span><br><span class="line"><span class="comment">//编译时会改写为</span></span><br><span class="line">Derived *tmp = <span class="keyword">new</span> Derived;</span><br><span class="line">Base2 *pbase2 = tmp? tmp+<span class="built_in">sizeof</span>(Base1):<span class="number">0</span>;</span><br></pre></td></tr></table></figure>
<p>多重继承下 一个 derived class 内含有 n-1 个额外的vtb, n 表示 base 个数, 所以单一继承不会有多余的 vtb 产生</p>
<figure>
<img src="https://tva1.sinaimg.cn/large/008vxvgGly1h824194s4kj30w20sm0ww.jpg" alt="截屏2022-11-12 09.57.52" /><figcaption aria-hidden="true">截屏2022-11-12 09.57.52</figcaption>
</figure>
<p>多重继承影响虚拟机制的情况有以下三种</p>
<ol type="1">
<li><p>用 base2 指针调用 derived virtual function</p></li>
<li><p>用 derived 指针调用 base2 virtual function</p></li>
<li><p>```cpp Base2 <em>pb2_1 = new Derived; Base2 </em>pb2_2 = pb2_1-&gt;clone(); <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## 4.3. Function Efficiency  </span><br><span class="line"></span><br><span class="line">inline 为程序优化提供更多可能</span><br><span class="line"></span><br><span class="line">表格</span><br><span class="line"></span><br><span class="line">## 4.4. Pointer-to-Member Functions </span><br><span class="line"></span><br><span class="line">不涉及虚拟的成员函数指针</span><br><span class="line"></span><br><span class="line">```cpp</span><br><span class="line">double(Point::*pmf)() = &amp;Point::x;</span><br><span class="line">(origin.*pmf)();</span><br></pre></td></tr></table></figure></p></li>
</ol>
<p>虚拟成员函数指针</p>
<p>它的值只是索引而不是真实地址</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">(*ptr-&gt;vptr[(<span class="type">int</span>)pmf])(ptr);</span><br></pre></td></tr></table></figure>
<h2 id="inline-functions">4.5. Inline Functions</h2>
<p>处理一个 inline 函数两个各个阶段</p>
<ol type="1">
<li>分析函数定义(分析其复杂度, 判断是否能成为 inline)</li>
<li>判断在调用处是否可以扩展</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span></span></span><br><span class="line"><span class="function"><span class="title">min</span><span class="params">( <span class="type">int</span> i, <span class="type">int</span> j )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">return</span> i &lt; j ? i : j;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span></span></span><br><span class="line"><span class="function"><span class="title">bar</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="type">int</span> minval;</span><br><span class="line">   <span class="type">int</span> val1 = <span class="number">1024</span>;</span><br><span class="line">   <span class="type">int</span> val2 = <span class="number">2048</span>;</span><br><span class="line"><span class="comment">/*(1)*/</span>minval = <span class="built_in">min</span>( val1, val2 );</span><br><span class="line"><span class="comment">/*(2)*/</span>minval = <span class="built_in">min</span>( <span class="number">1024</span>, <span class="number">2048</span> );</span><br><span class="line"><span class="comment">/*(3)*/</span>minval = <span class="built_in">min</span>( <span class="built_in">foo</span>(), <span class="built_in">bar</span>()+<span class="number">1</span> );</span><br><span class="line">   <span class="keyword">return</span> minval;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(<span class="number">1</span>) simple argument substitution</span><br><span class="line">minval = val1 &lt; val2 ? val1 : val2;</span><br><span class="line">(<span class="number">2</span>) constant folding following substitution</span><br><span class="line">minval = <span class="number">1024</span>;</span><br><span class="line">(<span class="number">3</span>) side-<span class="function">effects <span class="keyword">and</span> introduction of <span class="title">temporary</span><span class="params">(避免表达式重复求值)</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> t1</span>;</span><br><span class="line"><span class="type">int</span> t2;</span><br><span class="line">minval =</span><br><span class="line">   ( t1 = <span class="built_in">foo</span>() ), ( t2 = <span class="built_in">bar</span>() + <span class="number">1</span> ),</span><br><span class="line">   t1 &lt; t2 ? t1 : t2;</span><br></pre></td></tr></table></figure>
<p>inline 函数可能会导致大量的扩展码(局部变量)</p>
<h1 id="chapter-5.-semantics-of-construction-destruction-and-copy.">Chapter 5. Semantics of Construction, Destruction, and Copy.</h1>
<p>Presence of a Pure Virtual destructor</p>
<p>Presence of a Virtual Specification</p>
<p>Presence of const within a Virtual Specification</p>
<h2 id="object-construction-without-inheritance">5.1. Object Construction without Inheritance</h2>
<h2 id="object-construction-under-inheritance">5.2. Object Construction under Inheritance</h2>
<p>编译器扩充构造函数:</p>
<ol type="1">
<li>virtual base 构造函数</li>
<li>所有的 base 构造函数(按照声明顺序)</li>
<li>vptr</li>
<li>成员初始化列表, 未出现在初始化列表的 member 默认构造函数</li>
</ol>
<p>在自我拷贝时要注意判断筛选(释放资源前)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span> == &amp;rhs) <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br></pre></td></tr></table></figure>
<p>虚拟多继承中对于virtual base class 的构造函数调用(会被调用多次?) 可以被安排到 most_derived 的构造函数中</p>
<p>vptr 初始化位置在 base 构造函数之后, 初始化列表之前</p>
<p>在 class 的 constructor 的 member initialization list 中调用该 class 的一个虚拟函数，安全吗？就实际而言，将该函数运行于其 class's data member 的初始化行动中，总是安全的。vptr保证能够在 member initialization list 被扩展之前，由编译器正确设定好．但是在语意上这可能是不安全的，因为函数本身可能还得依 赖未被设立初值的 members.</p>
<h2 id="object-copy-semantics">5.3. Object Copy Semantics</h2>
<blockquote>
<p>关于几种拷贝</p>
<p><strong>Member-wise Copy</strong></p>
<p>Is when you visit each member and explicitly copy it, i<strong>nvoking its copy constructor</strong>. It is the proper way of copying things. If done right, it is tantamount to a deep-copy, because each member whose copy constructor you invoke will (or should) in turn perform member-wise copy of its own members, and so on. The opposite is bit-wise copy, which is a hack, see below.</p>
<p><strong>Bit-wise Copy</strong></p>
<p>Is a specific form of shallow copy. It is when you <strong>simply copy the bits of the source class to the target class, using <code>memcpy()</code></strong> or something similar. <strong>Constructors are not invoked</strong>, so you tend to get a class which <em>appears</em> to be all right but things start breaking in horrible ways as soon as you start using it. This is the opposite of member-wise copy, and is a quick and dirty hack that can sometimes be used when we know that there are no constructors to be invoked and no internal structures to be duplicated. For a discussion of what may go wrong with this, see this Q&amp;A: <a href="https://stackoverflow.com/questions/15123516/c-bitwise-vs-memberwise-copying">C++ bitwise vs memberwise copying?</a></p>
<p><strong>Shallow Copy</strong></p>
<p><strong>Refers to copying just the immediate members of an object,</strong> without duplicating whatever structures are pointed by them. It is what you get when you do a bit-wise copy.</p>
<p>(Note that there is no such thing as "shadow copy". I mean, there is such a thing, in file systems, but that's probably <em>not</em> what you had in mind.)</p>
<p><strong>Deep Copy</strong></p>
<p>Refers to not only copying the immediate members of an object, but also duplicating whatever structures are pointed by them. It is what you normally get when you do member-wise copy.</p>
<p><strong>To summarize:</strong></p>
<p>There are two categories:</p>
<ul>
<li>Shallow Copy</li>
<li>Deep Copy</li>
</ul>
<p>Then, there are two widely used techniques:</p>
<ul>
<li>Bit-wise Copy (a form of Shallow Copy)</li>
<li>Member-wise Copy (a form of Deep Copy, if done right.)</li>
</ul>
<p>As for the hear-say about someone who said something and someone who said something else: bit-wise copy is definitely always shallow copy. Member-wise copy is usually deep copy, but you may of course foul it up, so you may be thinking that you are making a deep copy while in fact you are not. Proper member-wise copy relies on having proper copy constructors.</p>
<p>Finally:</p>
<p><strong>The default copy constructor will do a bit-wise copy if the object is known to be trivially copyable, or a member-wise copy if not.</strong> However, the compiler does not always have enough information to perform a proper copy of each member. For example, a pointer is copied by making a copy of the pointer, not by making a copy of the pointed object. That's why you should generally not rely on the compiler providing you with a default copy constructor when your object is not trivially copyable.</p>
<p>A user-supplied constructor may do whatever type of copy the user likes. Hopefully, the user will choose wisely and do a member-wise copy.</p>
</blockquote>
<p>只有当默认行为导致语义不安全是才需要设计一个拷贝运算符</p>
<p>默认拷贝运算符 在以下情况下不会表现出 bitwise copy 语义</p>
<ol type="1">
<li>member 有拷贝运算符</li>
<li>base 有拷贝运算符</li>
<li>有 虚函数</li>
<li>继承自 virtual base</li>
</ol>
<p>注意虚拟继承的拷贝运算符</p>
<h2 id="object-efficiency.">5.4. Object Efficiency.</h2>
<p>一些表格</p>
<h2 id="semantics-of-destruction">5.5. Semantics of Destruction</h2>
<p>如果 class 没有定义 destructor，那么只有在 class 内带的 member object （或 是 class 自己的 base class）拥有 destructor 的情况下，编译器才会自动合成出一 个来．否则，destructor 会被视为不需要，也就不需被合成（当然更不需要被调用）．</p>
<p>析构函数扩展顺序:(存疑)</p>
<ol type="1">
<li>析构函数体</li>
<li>member 析构函数, 声明逆序</li>
<li>有 vptr, 重设相关的 vtb</li>
<li>nonvirtual base, 声明逆序</li>
<li>virtual base</li>
</ol>
<h1 id="chapter-6.-runtime-semantics">Chapter 6. Runtime Semantics</h1>
<h2 id="object-construction-and-destruction">6.1. Object Construction and Destruction</h2>
<h3 id="global">global</h3>
<p>C++ 保证，一定会在 main 函数中第一次用到 identity 之前，把 identity 构造 出来，而在 main 函数结束之前把 identity 摧毁掉。像 identity 这样的所谓 global object 如果有 constructor 和 destructor 的话，我们说它需要静态的初始化 操作和内存释放操作。</p>
<figure>
<img src="https://tva1.sinaimg.cn/large/008vxvgGly1h82pmhob14j30pg0buab2.jpg" alt="截屏2022-11-12 22.24.49" /><figcaption aria-hidden="true">截屏2022-11-12 22.24.49</figcaption>
</figure>
<h3 id="local-static">local static</h3>
<p>编译器的策略之一就是，无条件地在程序起始（startup）时构造出对象来． 然而这会导致所有的 local static class obiects 都在程序起始时被初始化，即使它们 所在的那个函数从不曾被调用过。因此，只在 identity 被调用时才把 matidentity 构造起来，是比较好的做法（现在的 C++ Standard 已经强制要求这 一点）。</p>
<h3 id="array-of-object">array of object</h3>
<p>如果定义了构造函数, 会依次调用</p>
<p>析构函数同上</p>
<h2 id="operators-new-and-delete">6.2. Operators new and delete</h2>
<p>new 步骤</p>
<ol type="1">
<li>分配内存</li>
<li>设立初值</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> *pi;</span><br><span class="line"><span class="keyword">if</span>(pi = __new(<span class="built_in">sizeof</span>(<span class="type">int</span>)))</span><br><span class="line">	*pi = <span class="number">5</span>;</span><br></pre></td></tr></table></figure>
<p>delete 步骤</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(pi!=<span class="number">0</span>)</span><br><span class="line">  __delete(pi);</span><br><span class="line"><span class="comment">//此时 pi 不会被清零</span></span><br></pre></td></tr></table></figure>
<h2 id="temporary-objects">6.3. Temporary Objects</h2>
<p>临时性对象的被摧毁，应该是对完整表达式（full-expression）求值过程中的 最后一个步骤．该完整表达式造成临时对象的产生(Section 12.2).</p>
<p>⋯凡含有表达式执行结果的临时性对象，应该存留到 object 的初始化操作 完成为止。</p>
<p>如果一个临时性对象被绑定于一个 reference，对象将残留，直到被初始化之 reference 的生命结束，或直到临时对象的生命范時（scope)结束——视哪一种情 先到达而定.</p>
<h1 id="chapter-7.-on-the-cusp-of-the-object-model">Chapter 7. On the Cusp of the Object Model</h1>
<h2 id="templates">7.1. Templates</h2>
<p>?</p>
<h2 id="exception-handling">7.2. Exception Handling</h2>
<h2 id="runtime-type-identification">7.3. Runtime Type Identification</h2>
<h2 id="efficient-but-inflexible">7.4. Efficient, but Inflexible?</h2>
<h1 id="关于作用域">关于作用域</h1>
<h1 id="多继承">多继承</h1>
<h2 id="多个基类">多个基类</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//成员函数</span></span><br><span class="line">C* pc;</span><br><span class="line">pc-&gt;<span class="built_in">bf</span>(<span class="number">2</span>);</span><br><span class="line"><span class="comment">//需要变换 this 指针</span></span><br><span class="line"><span class="built_in">bf_F1B</span>( (B*) ( (<span class="type">char</span>*) pc + <span class="built_in">delta</span>(B) ), <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//同理类型转换</span></span><br><span class="line">C* pc;</span><br><span class="line">B* pb;</span><br><span class="line">pb = (B*)pc;</span><br><span class="line"><span class="comment">//变换</span></span><br><span class="line">pb = (B*) ( (<span class="type">char</span>*) pc + <span class="built_in">delta</span>(B));</span><br><span class="line"></span><br><span class="line"><span class="comment">//为了避免 0 指针</span></span><br><span class="line">C* pc = <span class="number">0</span>;</span><br><span class="line">B* pb = <span class="number">0</span>;</span><br><span class="line">pb = pc;</span><br><span class="line">pb = (pc==<span class="number">0</span>)? <span class="number">0</span> : (B*) ( (<span class="type">char</span>*) pc + <span class="built_in">delta</span>(B));</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//涉及到歧义时</span></span><br><span class="line">pc-&gt;A::<span class="built_in">f</span>();</span><br><span class="line">pc-&gt;B::<span class="built_in">f</span>();</span><br></pre></td></tr></table></figure>
<h2 id="虚函数">虚函数</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">vtbl_entry</span> &#123;</span><br><span class="line">    <span class="built_in">void</span> (*fct)();</span><br><span class="line">	  <span class="type">int</span> delta;</span><br><span class="line">&#125;;</span><br><span class="line">-----------------</span><br><span class="line">|                | vtbl:</span><br><span class="line">| vptr ..........&gt;--------------------- </span><br><span class="line">| A part         | |C::f| <span class="number">0</span>           |</span><br><span class="line">|                | --------------------</span><br><span class="line">-----------------</span><br><span class="line">|                | vtbl:</span><br><span class="line">| vptr ..........&gt;--------------------- </span><br><span class="line">| B part         | |C::f| -<span class="built_in">delta</span>(B)   |</span><br><span class="line">|                | |B::g| <span class="number">0</span>           | </span><br><span class="line">----------------- --------------------- </span><br><span class="line">|                |</span><br><span class="line">| C part         | </span><br><span class="line">|                |</span><br><span class="line">-----------------</span><br><span class="line">  </span><br><span class="line">pb-&gt;<span class="built_in">f</span>();    </span><br><span class="line"><span class="comment">// call of C::f:</span></span><br><span class="line"><span class="comment">// register vtbl_entry* vt = &amp;pb-&gt;vtbl[index(f)];</span></span><br><span class="line"><span class="comment">// (*vt-&gt;fct) ( (B*) ( (char*)pb + vt-&gt;delta) )</span></span><br><span class="line"><span class="comment">// 这意味着每个基类都需要一个 vptr</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="multiple-inclusion">multiple inclusion</h2>
<p>下面这段代码是编译通过的</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">L</span> &#123;<span class="keyword">public</span>: <span class="type">int</span> m; &#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> : <span class="keyword">public</span> L &#123;<span class="keyword">public</span>:  <span class="type">int</span> a;&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> : L &#123;<span class="keyword">public</span>:  <span class="type">int</span> b; &#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> : A , B &#123;<span class="keyword">public</span>:  <span class="type">int</span> c; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    C c;</span><br><span class="line">    C* pc = &amp;c;</span><br><span class="line">    L* pl = (L*)(A*)pc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="虚基类">虚基类</h2>
<p>In other words, there must be a way of specifying that a base class must give rise to <strong>only one object in the final derived class even if it is mentioned as a base class several times</strong>. To distinguish this usage from independent multiple inheritance such base classes are specified to be virtual:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">L</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>: <span class="type">int</span> m;</span><br><span class="line">    <span class="comment">//virtual void f()&#123;&#125;;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> : <span class="keyword">public</span> L &#123;<span class="keyword">public</span>:  <span class="type">int</span> a;&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> : L &#123;<span class="keyword">public</span>:  <span class="type">int</span> b; &#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> : <span class="keyword">public</span> A , B &#123;<span class="keyword">public</span>:  <span class="type">int</span> c; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    C c;</span><br><span class="line">    C* pc = &amp;c;</span><br><span class="line">    A* pa = (A*)pc;</span><br><span class="line">    </span><br><span class="line">    C* pcc = <span class="built_in">static_cast</span>&lt;C*&gt;(pa);</span><br><span class="line">    <span class="comment">//如果有 virtual 用 dynamic_cast 和 static_cast 都行</span></span><br><span class="line">    <span class="comment">//没有 virtual 就只能 static_cast</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">-----------------</span><br><span class="line">.........  |</span><br><span class="line">. | AW part| g</span><br><span class="line">v |        |</span><br><span class="line">. ----------------- </span><br><span class="line">.........  |</span><br><span class="line">. | BW part| f</span><br><span class="line">v |        |</span><br><span class="line">. -----------------</span><br><span class="line">. |        |</span><br><span class="line">. | CW part| h</span><br><span class="line">v |        |        vtbl:</span><br><span class="line">. ----------------- ------------------------------</span><br><span class="line">.&gt;| vptr .........&gt; |BW::f | <span class="built_in">delta</span>(BW)-<span class="built_in">delta</span>(W) | </span><br><span class="line">  |        |        |AW::g | -<span class="built_in">delta</span>(W)          |</span><br><span class="line">  | W part | fghk   |CW::h | -<span class="built_in">delta</span>(W)          |</span><br><span class="line">  |        |        | W::k | <span class="number">0</span>                  |</span><br><span class="line">  ----------------- ------------------------------</span><br><span class="line"><span class="comment">//the delta stored with a function pointer in a vtbl is the delta of the class defining the function minus the delta of the class for which the vtbl is constructed.</span></span><br><span class="line">这个表似乎有点问题, delta 和 vptr 没弄明白</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">W</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">f</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">g</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">h</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">k</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AW</span> : <span class="keyword">virtual</span> W &#123; <span class="function"><span class="type">void</span> <span class="title">g</span><span class="params">()</span></span>; ... &#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BW</span> : <span class="keyword">virtual</span> W &#123; <span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">()</span></span>; ... &#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CW</span> : AW , BW &#123; <span class="function"><span class="type">void</span> <span class="title">h</span><span class="params">()</span></span>; ... &#125;;</span><br><span class="line">CW* pcw = <span class="keyword">new</span> CW;</span><br><span class="line">pcw-&gt;<span class="built_in">f</span>();        <span class="comment">// BW::f()</span></span><br><span class="line">pcw-&gt;<span class="built_in">g</span>();        <span class="comment">// AW::g()</span></span><br><span class="line">pcw-&gt;<span class="built_in">h</span>();        <span class="comment">// CW::h()</span></span><br><span class="line">((AW*)pcw)-&gt;<span class="built_in">f</span>(); <span class="comment">// BW::f();</span></span><br></pre></td></tr></table></figure>
<h2 id="构造函数与析构函数">构造函数与析构函数</h2>
<p>Constructors are executed in the order they appear in the list of bases <strong>except that a virtual base is always constructed before classes derived from it.</strong> A virtual base is always constructed (once only) by its "most derived" class. For example:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">V</span> &#123; <span class="built_in">V</span>(); <span class="built_in">V</span>(<span class="type">int</span>); ... &#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>: <span class="keyword">virtual</span> V &#123; <span class="built_in">A</span>(); <span class="built_in">A</span>(<span class="type">int</span>); ... &#125;; </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>: <span class="keyword">virtual</span> V &#123; <span class="built_in">B</span>(); <span class="built_in">B</span>(<span class="type">int</span>), ... &#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> : A, B     &#123; <span class="built_in">C</span>(); <span class="built_in">C</span>(<span class="type">int</span>), ... &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">V <span class="title">v</span><span class="params">(<span class="number">1</span>)</span></span>; <span class="function">A <span class="title">a</span><span class="params">(<span class="number">2</span>)</span></span>; <span class="function">B <span class="title">b</span><span class="params">(<span class="number">3</span>)</span></span>; <span class="function">C <span class="title">c</span><span class="params">(<span class="number">4</span>)</span></span>;</span><br></pre></td></tr></table></figure>
<h2 id="overhead">overhead</h2>
<p>The overhead in using this scheme is:</p>
<ol type="1">
<li><p>One subtraction of a constant for each use of a member in a base class that is included as the second</p>
<p>or subsequent base.</p></li>
<li><p>One word per function in each vtbl (to hold the delta).</p></li>
<li><p>One memory reference and one subtraction for each call of a virtual function.</p></li>
<li><p>One memory reference and one subtraction for access of a base class member of a virtual base class.</p></li>
</ol>
<p>Note that overheads [1] and [4] are only incurred where multiple inheritance is actually used, but overheads [2] and [3] are incurred for each class with virtual functions and for each virtual function call even when multiple inheritance is not used. Overheads [1] and [4] are only incurred when members of a second or subsequent base are accessed ‘‘from the outside’’; a member function of a virtual base class does not incur special overheads when accessing members of its class.</p>
<p>This implies that except for [2] and [3] you pay only for what you actually use; [2] and [3] impose a minor overhead on the virtual function mechanism even where only single inheritance is used. This latter overhead could be avoided by using an alternative implementation of multiple inheritance, but I don’t know of such an implementation that is also faster in the multiple inheritance case and as portable as the scheme described here.</p>
<p>Fortunately, these overheads are not significant. The time, space, and complexity overheads imposed on the compiler to implement multiple inheritance are not noticeable to the user.</p>
<h1 id="memory-layout">memory layout</h1>
<p>http://www.vishalchovatiya.com/memory-layout-of-cpp-object/</p>
<h2 id="object">object</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">X</span> &#123;</span><br><span class="line">    <span class="type">int</span>     x;</span><br><span class="line">    <span class="type">float</span>   xx;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">X</span>() &#123;&#125;</span><br><span class="line">    ~<span class="built_in">X</span>() &#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">printInt</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">printFloat</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">      |------------------------| &lt;------ X class object memory layout</span><br><span class="line">      |        int X::x        |</span><br><span class="line">      |------------------------|  stack segment</span><br><span class="line">      |       float X::xx      |       |   </span><br><span class="line">      |------------------------|       |</span><br><span class="line">      |                        |      \|/</span><br><span class="line">      |                        |    </span><br><span class="line">      |                        |</span><br><span class="line">------|------------------------|----------------</span><br><span class="line">      |         X::X()         | </span><br><span class="line">      |------------------------|       |   </span><br><span class="line">      |        X::~X()         |       |</span><br><span class="line">      |------------------------|      \|/</span><br><span class="line">      |      X::printInt()     |  text segment</span><br><span class="line">      |------------------------|</span><br><span class="line">      |     X::printFloat()    |</span><br><span class="line">      |------------------------|</span><br><span class="line">      |                        |            </span><br></pre></td></tr></table></figure>
<h2 id="virtual-func-static-member">+virtual func + static member</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">X</span> &#123;</span><br><span class="line">    <span class="type">int</span>         x;</span><br><span class="line">    <span class="type">float</span>       xx;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span>  count;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">X</span>() &#123;&#125;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">X</span>() &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">printAll</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">printInt</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">printFloat</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">printCount</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">      |------------------------| &lt;--- X class object memory layout</span><br><span class="line">      |        int X::x        |</span><br><span class="line">stack |------------------------|</span><br><span class="line">  |   |       float X::xx      |                      </span><br><span class="line">  |   |------------------------|      |---|--------------------------|</span><br><span class="line">  |   |         X::_vptr       |------|   |       type_info X        |</span><br><span class="line"> \|/  |------------------------|          |--------------------------|</span><br><span class="line">      |           o            |          |    address of X::~X()    |</span><br><span class="line">      |           o            |          |--------------------------|</span><br><span class="line">      |           o            |          | address of X::printAll() |</span><br><span class="line">      |                        |          |--------------------------|</span><br><span class="line">      |                        |</span><br><span class="line">------|------------------------|------------</span><br><span class="line">      |  static int X::count   |      /|\</span><br><span class="line">      |------------------------|       |</span><br><span class="line">      |           o            |  data segment           </span><br><span class="line">      |           o            |       |</span><br><span class="line">      |                        |      \|/</span><br><span class="line">------|------------------------|------------</span><br><span class="line">      |        X::X()          | </span><br><span class="line">      |------------------------|       |   </span><br><span class="line">      |        X::~X()         |       |</span><br><span class="line">      |------------------------|       | </span><br><span class="line">      |      X::printAll()     |      \|/ </span><br><span class="line">      |------------------------|  text segment</span><br><span class="line">      |      X::printInt()     |</span><br><span class="line">      |------------------------|</span><br><span class="line">      |     X::printFloat()    |</span><br><span class="line">      |------------------------|</span><br><span class="line">      | static X::printCount() |</span><br><span class="line">      |------------------------|</span><br><span class="line">      |                        |</span><br></pre></td></tr></table></figure>
<h2 id="inheritance">+inheritance</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">X</span> &#123;</span><br><span class="line">    <span class="type">int</span>     x;</span><br><span class="line">    string str;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">X</span>() &#123;&#125;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">X</span>() &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">printAll</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Y</span> : <span class="keyword">public</span> X &#123;</span><br><span class="line">    <span class="type">int</span>     y;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Y</span>() &#123;&#125;</span><br><span class="line">    ~<span class="built_in">Y</span>() &#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">printAll</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">      |------------------------------| &lt;---- Y class object memory layout</span><br><span class="line">      |          int X::x            |</span><br><span class="line">stack |------------------------------|</span><br><span class="line">  |   |              int string::len |</span><br><span class="line">  |   |string X::str ----------------|</span><br><span class="line">  |   |            char* string::str |         </span><br><span class="line"> \|/  |------------------------------|      |--|--------------------------|</span><br><span class="line">      |           X::_vptr           |------|  |       type_info Y        |</span><br><span class="line">      |------------------------------|         |--------------------------|</span><br><span class="line">      |          int Y::y            |         |    address of Y::~Y()    |</span><br><span class="line">      |------------------------------|         |--------------------------|</span><br><span class="line">      |               o              |         | address of Y::printAll() |</span><br><span class="line">      |               o              |         |--------------------------|</span><br><span class="line">      |               o              |              </span><br><span class="line">------|------------------------------|--------</span><br><span class="line">      |           X::X()             | </span><br><span class="line">      |------------------------------|       |   </span><br><span class="line">      |           X::~X()            |       |</span><br><span class="line">      |------------------------------|       | </span><br><span class="line">      |         X::printAll()        |      \|/ </span><br><span class="line">      |------------------------------|  text segment</span><br><span class="line">      |           Y::Y()             |</span><br><span class="line">      |------------------------------|</span><br><span class="line">      |           Y::~Y()            |</span><br><span class="line">      |------------------------------|</span><br><span class="line">      |         Y::printAll()        |</span><br><span class="line">      |------------------------------|</span><br><span class="line">      |      string::string()        |</span><br><span class="line">      |------------------------------|</span><br><span class="line">      |      string::~string()       |</span><br><span class="line">      |------------------------------|</span><br><span class="line">      |      string::length()        |</span><br><span class="line">      |------------------------------|</span><br><span class="line">      |                              |</span><br></pre></td></tr></table></figure>
<h2 id="multiple-inheritance">+ multiple inheritance</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">X</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span>     x;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">X</span>() &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">printX</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Y</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span>     y;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Y</span>() &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">printY</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Z</span> : <span class="keyword">public</span> X, <span class="keyword">public</span> Y &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span>     z;</span><br><span class="line">    ~<span class="built_in">Z</span>() &#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">printX</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">printY</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">printZ</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">      |------------------------------| &lt;----- Z class object memory layout</span><br><span class="line">stack |          int X::x            |         </span><br><span class="line">  |   |------------------------------|           |--------------------------|      </span><br><span class="line">  |   |          X:: _vptr           |----------&gt;|       type_info Z        |</span><br><span class="line">  |   |------------------------------|           |--------------------------|</span><br><span class="line"> \|/  |          int Y::y            |           |    address of Z::~Z()    |</span><br><span class="line">      |------------------------------|           |--------------------------|</span><br><span class="line">      |          Y:: _vptr           |------|    |   address of Z::printX() |</span><br><span class="line">      |------------------------------|      |    |--------------------------|</span><br><span class="line">      |          int Z::z            |      |    |--------GUARD_AREA--------|    </span><br><span class="line">      |------------------------------|      |    |--------------------------|</span><br><span class="line">      |              o               |      |---&gt;|       type_info Z        |</span><br><span class="line">      |              o               |           |--------------------------|</span><br><span class="line">      |              o               |           |    address of Z::~Z()    |</span><br><span class="line">      |                              |           |--------------------------|</span><br><span class="line">------|------------------------------|---------  |   address of Z::printY() |</span><br><span class="line">      |           X::~X()            |       |   |--------------------------|  </span><br><span class="line">      |------------------------------|       |          </span><br><span class="line">      |          X::printX()         |       |        </span><br><span class="line">      |------------------------------|       |         </span><br><span class="line">      |           Y::~Y()            |      \|/        </span><br><span class="line">      |------------------------------|  text segment</span><br><span class="line">      |          Y::printY()         |                </span><br><span class="line">      |------------------------------|                </span><br><span class="line">      |           Z::~Z()            |                </span><br><span class="line">      |------------------------------|                </span><br><span class="line">      |          Z::printX()         |                </span><br><span class="line">      |------------------------------|                </span><br><span class="line">      |          Z::printY()         |                </span><br><span class="line">      |------------------------------|                </span><br><span class="line">      |          Z::printZ()         |                </span><br><span class="line">      |------------------------------|                </span><br><span class="line">      |                              |                           </span><br></pre></td></tr></table></figure>
<h2 id="virtual-inheritance">+ virtual inheritance</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">X</span> &#123; <span class="type">int</span> x; &#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Y</span> : <span class="keyword">public</span> <span class="keyword">virtual</span> X &#123; <span class="type">int</span> y; &#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Z</span> : <span class="keyword">public</span> <span class="keyword">virtual</span> X &#123; <span class="type">int</span> z; &#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> : <span class="keyword">public</span> Y, <span class="keyword">public</span> Z &#123; <span class="type">int</span> a; &#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">                  |                |          </span><br><span class="line"> Y class  ------&gt; |----------------| &lt;--- A class object memory layout</span><br><span class="line">sub-object        |   Y::y         |          </span><br><span class="line">                  |----------------|       |--------------------------| </span><br><span class="line">                  |   Y::_vptr_Y   |--|    |    offset of X           | </span><br><span class="line"> Z class  ------&gt; |----------------|  |--&gt; |--------------------------|     </span><br><span class="line">sub-object        |   Z::z         |       |//offset(20) starts from Y|     </span><br><span class="line">                  |----------------|       |--------------------------|  </span><br><span class="line">                  |   Z::_vptr_Z   |--|       </span><br><span class="line">                  |----------------|  |        </span><br><span class="line"> A sub-object --&gt; |   A::a         |  |    |--------------------------| </span><br><span class="line">                  |----------------|  |    |    offset of X           | </span><br><span class="line"> X class -------&gt; |   X::x         |  |--&gt; |--------------------------|          </span><br><span class="line"> shared           |----------------|       |//offset(12) starts from Z|           </span><br><span class="line"> sub-object       |                |       |--------------------------|           </span><br></pre></td></tr></table></figure>
<h1 id="gcc-virtual-table">GCC virtual table</h1>
<h2 id="vtable-notes-on-multiple-inheritance-in-gcc-c-compiler-v4.0.1">VTable Notes on Multiple Inheritance in GCC C++ Compiler v4.0.1</h2>
<p>[http://www.cse.wustl.edu/~mdeters/seminar/fall2005/mi.html#basics] The Basics: Single Inheritance</p>
<h2 id="simple-multiple-inheritance">Simple Multiple Inheritance</h2>
<p>Now consider multiple inheritance:</p>
<blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class A &#123;</span><br><span class="line">public:</span><br><span class="line">  int a;</span><br><span class="line">  virtual void v();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class B &#123;</span><br><span class="line">public:</span><br><span class="line">  int b;</span><br><span class="line">  virtual void w();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class C : public A, public B &#123;</span><br><span class="line">public:</span><br><span class="line">  int c;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>In this case, objects of type C are laid out like this:</p>
<blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">                           +-----------------------+</span><br><span class="line">                           |     0 (top_offset)    |</span><br><span class="line">                           +-----------------------+</span><br><span class="line">c --&gt; +----------+         | ptr to typeinfo for C |</span><br><span class="line">      |  vtable  |-------&gt; +-----------------------+</span><br><span class="line">      +----------+         |         A::v()        |</span><br><span class="line">      |     a    |         +-----------------------+</span><br><span class="line">      +----------+         |    -8 (top_offset)    |</span><br><span class="line">      |  vtable  |---+     +-----------------------+</span><br><span class="line">      +----------+   |     | ptr to typeinfo for C |</span><br><span class="line">      |     b    |   +---&gt; +-----------------------+</span><br><span class="line">      +----------+         |         B::w()        |</span><br><span class="line">      |     c    |         +-----------------------+</span><br><span class="line">      +----------+</span><br></pre></td></tr></table></figure>
</blockquote>
<p><em>...but why?</em> Why two vtables in one? Well, think about typesubstitution. If I have a pointer-to-C, I can pass it to a functionthat expects a pointer-to-A or to a function that expects apointer-to-B. If a function expects a pointer-to-A and I want to passit the value of my variable <code>c</code> (of type pointer-to-C), I'malready set. Calls to <code>A::v()</code> can be made through the(first) vtable, and the called function can access the member<code>a</code> through the pointer I pass in the same way as it canthrough <em>any</em> pointer-to-A.</p>
<p>However, if I pass the value of my pointer variable <code>c</code> to a function that expects a pointer-to-B, we <em>also</em> need asubobject of type B in our C to refer it to. This is why we have thesecond vtable pointer. We can pass the pointer value<code>(c + 8 bytes)</code> to the function that expectsa pointer-to-B, and it's all set: it can make calls to<code>B::w()</code> through the (second) vtable pointer, and accessthe member <code>b</code> through the pointer we pass in the same wayas it can through any pointer-to-B.</p>
<p>Note that this "pointer-correction" needs to occur for called methodstoo. Class C inherits <code>B::w()</code> in this case. When<code>w()</code> is called on through a pointer-to-C, the pointer(which becomes the <strong>this</strong> pointer inside of <code>w()</code> needsto be adjusted. This is often called <em>this pointer adjustment</em>.</p>
<p>In some cases, the compiler will generate a <em>thunk</em> to fix up theaddress. Consider the same code as above but this time C overrides B'smember function <code>w()</code>:</p>
<blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class A &#123;</span><br><span class="line">public:</span><br><span class="line">  int a;</span><br><span class="line">  virtual void v();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class B &#123;</span><br><span class="line">public:</span><br><span class="line">  int b;</span><br><span class="line">  virtual void w();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class C : public A, public B &#123;</span><br><span class="line">public:</span><br><span class="line">  int c;</span><br><span class="line">  void w();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>C's object layout and vtable now look like this:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">                           +-----------------------+</span><br><span class="line">                           |     0 (top_offset)    |</span><br><span class="line">                           +-----------------------+</span><br><span class="line">c --&gt; +----------+         | ptr to typeinfo for C |</span><br><span class="line">      |  vtable  |-------&gt; +-----------------------+</span><br><span class="line">      +----------+         |         A::v()        |</span><br><span class="line">      |     a    |         +-----------------------+</span><br><span class="line">      +----------+         |         C::w()        |</span><br><span class="line">      |  vtable  |---+     +-----------------------+</span><br><span class="line">      +----------+   |     |    -8 (top_offset)    |</span><br><span class="line">      |     b    |   |     +-----------------------+</span><br><span class="line">      +----------+   |     | ptr to typeinfo for C |</span><br><span class="line">      |     c    |   +---&gt; +-----------------------+</span><br><span class="line">      +----------+         |    thunk to C::w()    |</span><br><span class="line">                           +-----------------------+</span><br></pre></td></tr></table></figure>
<p>Now, when <code>w()</code> is called on an instance of C through apointer-to-B, the thunk is called. What does the thunk do? Let'sdisassemble it (here, with gdb):</p>
<blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x0804860c &lt;_ZThn8_N1C1wEv+0&gt;:  addl   $0xfffffff8,0x4(%esp)</span><br><span class="line">0x08048611 &lt;_ZThn8_N1C1wEv+5&gt;:  jmp    0x804853c &lt;_ZN1C1wEv&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>So it merely adjusts the <strong>this</strong> pointer and jumps to<code>C::w()</code>. All is well.</p>
<p>But doesn't the above mean that B's vtable always points to this<code>C::w()</code> thunk? I mean, if we have a pointer-to-B that is legitimately a B (not a C), we don't want to invoke the thunk, right?</p>
<h2 id="attention"><strong>attention!!!!</strong></h2>
<p><u><strong>Right. The above embedded vtable for B in C is special to the B-in-C case.B's regular vtable is normal and points to <code>B::w()</code> directly.</strong></u></p>
<p>The Diamond: Multiple Copies of Base Classes (non-virtual inheritance)</p>
<p>Okay. Now to tackle the really hard stuff. Recall the usual problem ofmultiple copies of base classes when forming an inheritance diamond:</p>
<blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class A &#123;</span><br><span class="line">public:</span><br><span class="line">  int a;</span><br><span class="line">  virtual void v();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class B : public A &#123;</span><br><span class="line">public:</span><br><span class="line">  int b;</span><br><span class="line">  virtual void w();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class C : public A &#123;</span><br><span class="line">public:</span><br><span class="line">  int c;</span><br><span class="line">  virtual void x();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class D : public B, public C &#123;</span><br><span class="line">public:</span><br><span class="line">  int d;</span><br><span class="line">  virtual void y();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>Note that D inherits from both B and C, and B and C both inherit from A.This means that D has <em>two</em> copies of A in it. The object layoutand vtable embedding is what we would expect from the previous sections:</p>
<blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">                           +-----------------------+</span><br><span class="line">                           |     0 (top_offset)    |</span><br><span class="line">                           +-----------------------+</span><br><span class="line">d --&gt; +----------+         | ptr to typeinfo for D |</span><br><span class="line">      |  vtable  |-------&gt; +-----------------------+</span><br><span class="line">      +----------+         |         A::v()        |</span><br><span class="line">      |     a    |         +-----------------------+</span><br><span class="line">      +----------+         |         B::w()        |</span><br><span class="line">      |     b    |         +-----------------------+</span><br><span class="line">      +----------+         |         D::y()        |</span><br><span class="line">      |  vtable  |---+     +-----------------------+</span><br><span class="line">      +----------+   |     |   -12 (top_offset)    |</span><br><span class="line">      |     a    |   |     +-----------------------+</span><br><span class="line">      +----------+   |     | ptr to typeinfo for D |</span><br><span class="line">      |     c    |   +---&gt; +-----------------------+</span><br><span class="line">      +----------+         |         A::v()        |</span><br><span class="line">      |     d    |         +-----------------------+</span><br><span class="line">      +----------+         |         C::x()        |</span><br><span class="line">                           +-----------------------+</span><br></pre></td></tr></table></figure>
</blockquote>
<p>Of course, we expect A's data (the member <code>a</code>) to exist twicein D's object layout (and it is), and we expect A's virtual member functionsto be represented twice in the vtable (and <code>A::v()</code> is indeedthere). Okay, nothing new here.</p>
<p>The Diamond: Single Copies of Virtual Bases</p>
<p>But what if we apply <em>virtual</em> inheritance? C++ virtual inheritanceallows us to specify a diamond hierarchy but be guaranteed only one copyof virtually inherited bases. So let's write our code this way:</p>
<blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class A &#123;</span><br><span class="line">public:</span><br><span class="line">  int a;</span><br><span class="line">  virtual void v();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class B : public virtual A &#123;</span><br><span class="line">public:</span><br><span class="line">  int b;</span><br><span class="line">  virtual void w();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class C : public virtual A &#123;</span><br><span class="line">public:</span><br><span class="line">  int c;</span><br><span class="line">  virtual void x();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class D : public B, public C &#123;</span><br><span class="line">public:</span><br><span class="line">  int d;</span><br><span class="line">  virtual void y();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>All of a sudde 1000 n things get a <em>lot</em> more complicated. If we can onlyhave <em>one</em> copy of A in our representation of D, then we can nolonger get away with our "trick" of embedding a C in a D (and embeddinga vtable for the C part of D in D's vtable). But how can we handle theusual type substitution if we can't do this?</p>
<p>Let's try to diagram the layout:</p>
<blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">                                   +-----------------------+</span><br><span class="line">                                   |   20 (vbase_offset)   |</span><br><span class="line">                                   +-----------------------+</span><br><span class="line">                                   |     0 (top_offset)    |</span><br><span class="line">                                   +-----------------------+</span><br><span class="line">                                   | ptr to typeinfo for D |</span><br><span class="line">                      +----------&gt; +-----------------------+</span><br><span class="line">d --&gt; +----------+    |            |         B::w()        |</span><br><span class="line">      |  vtable  |----+            +-----------------------+</span><br><span class="line">      +----------+                 |         D::y()        |</span><br><span class="line">      |     b    |                 +-----------------------+</span><br><span class="line">      +----------+                 |   12 (vbase_offset)   |</span><br><span class="line">      |  vtable  |---------+       +-----------------------+</span><br><span class="line">      +----------+         |       |    -8 (top_offset)    |</span><br><span class="line">      |     c    |         |       +-----------------------+</span><br><span class="line">      +----------+         |       | ptr to typeinfo for D |</span><br><span class="line">      |     d    |         +-----&gt; +-----------------------+</span><br><span class="line">      +----------+                 |         C::x()        |</span><br><span class="line">      |  vtable  |----+            +-----------------------+</span><br><span class="line">      +----------+    |            |    0 (vbase_offset)   |</span><br><span class="line">      |     a    |    |            +-----------------------+</span><br><span class="line">      +----------+    |            |   -20 (top_offset)    |</span><br><span class="line">                      |            +-----------------------+</span><br><span class="line">                      |            | ptr to typeinfo for D |</span><br><span class="line">                      +----------&gt; +-----------------------+</span><br><span class="line">                                   |         A::v()        |</span><br><span class="line">                                   +-----------------------+</span><br></pre></td></tr></table></figure>
</blockquote>
<p>Okay. So you see that A is now embedded in D in essentially thesame way that other bases are. But it's embedded in D rather than inits directly-derived classes.</p>
<p>Construction/Destruction in the Presence of Multiple Inheritance</p>
<p>How is the above object constructed in memory when the object itself isconstructed? And how do we ensure that a partially-constructed object(and its vtable) are safe for constructors to operate on?</p>
<p>Fortunately, it's all handled very carefully for us. Say we're constructinga new object of type D (through, for example, <code>new D</code>).First, the memory for the object is allocated in the heap and a pointerreturned. D's constructor is invoked, but before doing any D-specificconstruction it call's A's constructor on the object (after adjusting the<strong>this</strong> pointer, of course!). A's constructor fills in the A partof the D object as if it were an instance of A.</p>
<blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">d --&gt; +----------+</span><br><span class="line">      |          |</span><br><span class="line">      +----------+</span><br><span class="line">      |          |</span><br><span class="line">      +----------+</span><br><span class="line">      |          |</span><br><span class="line">      +----------+</span><br><span class="line">      |          |       +-----------------------+</span><br><span class="line">      +----------+       |     0 (top_offset)    |</span><br><span class="line">      |          |       +-----------------------+</span><br><span class="line">      +----------+       | ptr to typeinfo for A |</span><br><span class="line">      |  vtable  |-----&gt; +-----------------------+</span><br><span class="line">      +----------+       |         A::v()        |</span><br><span class="line">      |    a     |       +-----------------------+</span><br><span class="line">      +----------+</span><br></pre></td></tr></table></figure>
</blockquote>
<p>Control is returned to D's constructor, which invokes B's constructor.(Pointer adjustment isn't needed here.) When B's constructor is done,the object looks like this:</p>
<blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">                                             B-in-D</span><br><span class="line">                          +-----------------------+</span><br><span class="line">              </span><br><span class="line">1000</span><br><span class="line">            |   20 (vbase_offset)   |</span><br><span class="line">                          +-----------------------+</span><br><span class="line">                          |     0 (top_offset)    |</span><br><span class="line">                          +-----------------------+</span><br><span class="line">d --&gt; +----------+        | ptr to typeinfo for B |</span><br><span class="line">      |  vtable  |------&gt; +-----------------------+</span><br><span class="line">      +----------+        |         B::w()        |</span><br><span class="line">      |    b     |        +-----------------------+</span><br><span class="line">      +----------+        |    0 (vbase_offset)   |</span><br><span class="line">      |          |        +-----------------------+</span><br><span class="line">      +----------+        |   -20 (top_offset)    |</span><br><span class="line">      |          |        +-----------------------+</span><br><span class="line">      +----------+        | ptr to typeinfo for B |</span><br><span class="line">      |          |   +--&gt; +-----------------------+</span><br><span class="line">      +----------+   |    |         A::v()        |</span><br><span class="line">      |  vtable  |---+    +-----------------------+</span><br><span class="line">      +----------+</span><br><span class="line">      |    a     |</span><br><span class="line">      +----------+</span><br></pre></td></tr></table></figure>
</blockquote>
<p><em>But wait... B's constructor modified the A part of the object by changingit's vtable pointer!</em> How did it know to distinguish this kind of B-in-Dfrom a B-in-something-else (or a standalone B for that matter)? Simple.The <em>virtual table table</em> told it to do this. This structure,abbreviated VTT, is a table of vtables used in construction. In our case,the VTT for D looks like this:</p>
<blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">                                                                  B-in-D</span><br><span class="line">                                               +-----------------------+</span><br><span class="line">                                               |   20 (vbase_offset)   |</span><br><span class="line">            VTT for D                          +-----------------------+</span><br><span class="line">+-------------------+                          |     0 (top_offset)    |</span><br><span class="line">|    vtable for D   |-------------+            +-----------------------+</span><br><span class="line">+-------------------+             |            | ptr to typeinfo for B |</span><br><span class="line">| vtable for B-in-D |-------------|----------&gt; +-----------------------+</span><br><span class="line">+-------------------+             |            |         B::w()        |</span><br><span class="line">| vtable for B-in-D |-------------|--------+   +-----------------------+</span><br><span class="line">+-------------------+             |        |   |    0 (vbase_offset)   |</span><br><span class="line">| vtable for C-in-D |-------------|-----+  |   +-----------------------+</span><br><span class="line">+-------------------+             |     |  |   |   -20 (top_offset)    |</span><br><span class="line">| vtable for C-in-D |-------------|--+  |  |   +-----------------------+</span><br><span class="line">+-------------------+             |  |  |  |   | ptr to typeinfo for B |</span><br><span class="line">|    vtable for D   |----------+  |  |  |  +-&gt; +-----------------------+</span><br><span class="line">+-------------------+          |  |  |  |      |         A::v()        |</span><br><span class="line">|    vtable for D   |-------+  |  |  |  |      +-----------------------+</span><br><span class="line">+-------------------+       |  |  |  |  |</span><br><span class="line">                            |  |  |  |  |                         C-in-D</span><br><span class="line">                            |  |  |  |  |      +-----------------------+</span><br><span class="line">                            |  |  |  |  |      |   12 (vbase_offset)   |</span><br><span class="line">                            |  |  |  |  |      +-----------------------+</span><br><span class="line">                            |  |  |  |  |      |     0 (top_offset)    |</span><br><span class="line">                            |  |  |  |  |      +-----------------------+</span><br><span class="line">                            |  |  |  |  |      | ptr to typeinfo for C |</span><br><span class="line">                            |  |  |  |  +----&gt; +-----------------------+</span><br><span class="line">                            |  |  |  |         |         C::x()        |</span><br><span class="line">                            |  |  |  |         +-----------------------+</span><br><span class="line">                            |  |  |  |         |    0 (vbase_offset)   |</span><br><span class="line">                            |  |  |  |         +-----------------------+</span><br><span class="line">                            |  |  |  |         |   -12 (top_offset)    |</span><br><span class="line">                            |  |  |  |         +-----------------------+</span><br><span class="line">                            |  |  |  |         | ptr to typeinfo for C |</span><br><span class="line">                            |  |  |  +--</span><br><span class="line">1000</span><br><span class="line">-----&gt; +-----------------------+</span><br><span class="line">                            |  |  |            |         A::v()        |</span><br><span class="line">                            |  |  |            +-----------------------+</span><br><span class="line">                            |  |  |</span><br><span class="line">                            |  |  |                                    D</span><br><span class="line">                            |  |  |            +-----------------------+</span><br><span class="line">                            |  |  |            |   20 (vbase_offset)   |</span><br><span class="line">                            |  |  |            +-----------------------+</span><br><span class="line">                            |  |  |            |     0 (top_offset)    |</span><br><span class="line">                            |  |  |            +-----------------------+</span><br><span class="line">                            |  |  |            | ptr to typeinfo for D |</span><br><span class="line">                            |  |  +----------&gt; +-----------------------+</span><br><span class="line">                            |  |               |         B::w()        |</span><br><span class="line">                            |  |               +-----------------------+</span><br><span class="line">                            |  |               |         D::y()        |</span><br><span class="line">                            |  |               +-----------------------+</span><br><span class="line">                            |  |               |   12 (vbase_offset)   |</span><br><span class="line">                            |  |               +-----------------------+</span><br><span class="line">                            |  |               |    -8 (top_offset)    |</span><br><span class="line">                            |  |               +-----------------------+</span><br><span class="line">                            |  |               | ptr to typeinfo for D |</span><br><span class="line">                            +----------------&gt; +-----------------------+</span><br><span class="line">                               |               |         C::x()        |</span><br><span class="line">                               |               +-----------------------+</span><br><span class="line">                               |               |    0 (vbase_offset)   |</span><br><span class="line">                               |               +-----------------------+</span><br><span class="line">                               |               |   -20 (top_offset)    |</span><br><span class="line">                               |               +-----------------------+</span><br><span class="line">                               |               | ptr to typeinfo for D |</span><br><span class="line">                               +-------------&gt; +-----------------------+</span><br><span class="line">                                               |         A::v()        |</span><br><span class="line">                                               +-----------------------+</span><br></pre></td></tr></table></figure>
</blockquote>
<p>D's constructor passes a pointer into D's VTT to B's constructor (in thiscase, it passes in the address of the first B-in-D entry). And, indeed,the vtable that was used for the object layout above is a special vtableused just for the construction of B-in-D.</p>
<p>Control is returned to the D constructor, and it calls the C constructor(with a VTT address parameter pointing to the "C-in-D+12" entry). WhenC's constructor is done with the object it looks like this:</p>
<blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">                                                                           B-in-D</span><br><span class="line">                                                        +-----------------------+</span><br><span class="line">                                                        |   20 (vbase_offset)   |</span><br><span class="line">                                                        +-----------------------+</span><br><span class="line">                                                        |     0 (top_offset)    |</span><br><span class="line">                                                        +-----------------------+</span><br><span class="line">                                                        | ptr to typeinfo for B |</span><br><span class="line">                    +---------------------------------&gt; +-----------------------+</span><br><span class="line">                    |                                   |         B::w()        |</span><br><span class="line">                    |                                   +-----------------------+</span><br><span class="line">                    |                          C-in-D   |    0 (vbase_offset)   |</span><br><span class="line">                    |       +-----------------------+   +-----------------------+</span><br><span class="line">d --&gt; +----------+  |       |   12 (vbase_offset)   |   |   -20 (top_offset)    |</span><br><span class="line">      |  vtable  |</span><br><span class="line">1000</span><br><span class="line">--+       +-----------------------+   +-----------------------+</span><br><span class="line">      +----------+          |     0 (top_offset)    |   | ptr to typeinfo for B |</span><br><span class="line">      |    b     |          +-----------------------+   +-----------------------+</span><br><span class="line">      +----------+          | ptr to typeinfo for C |   |         A::v()        |</span><br><span class="line">      |  vtable  |--------&gt; +-----------------------+   +-----------------------+</span><br><span class="line">      +----------+          |         C::x()        |</span><br><span class="line">      |    c     |          +-----------------------+</span><br><span class="line">      +----------+          |    0 (vbase_offset)   |</span><br><span class="line">      |          |          +-----------------------+</span><br><span class="line">      +----------+          |   -12 (top_offset)    |</span><br><span class="line">      |  vtable  |--+       +-----------------------+</span><br><span class="line">      +----------+  |       | ptr to typeinfo for C |</span><br><span class="line">      |    a     |  +-----&gt; +-----------------------+</span><br><span class="line">      +----------+          |         A::v()        |</span><br><span class="line">                            +-----------------------+</span><br></pre></td></tr></table></figure>
</blockquote>
<p>As you see, C's constructor again modified the embedded A's vtable pointer.The embedded C and A objects are now using the special construction C-in-Dvtable, and the embedded B object is using the special construction B-in-Dvtable. Finally, D's constructor finishes the job and we end up with thesame diagram as before:</p>
<blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">                                   +-----------------------+</span><br><span class="line">                                   |   20 (vbase_offset)   |</span><br><span class="line">                                   +-----------------------+</span><br><span class="line">                                   |     0 (top_offset)    |</span><br><span class="line">                                   +-----------------------+</span><br><span class="line">                                   | ptr to typeinfo for D |</span><br><span class="line">                      +----------&gt; +-----------------------+</span><br><span class="line">d --&gt; +----------+    |            |         B::w()        |</span><br><span class="line">      |  vtable  |----+            +-----------------------+</span><br><span class="line">      +----------+                 |         D::y()        |</span><br><span class="line">      |     b    |                 +-----------------------+</span><br><span class="line">      +----------+                 |   12 (vbase_offset)   |</span><br><span class="line">      |  vtable  |---------+       +-----------------------+</span><br><span class="line">      +----------+         |       |    -8 (top_offset)    |</span><br><span class="line">      |     c    |         |       +-----------------------+</span><br><span class="line">      +----------+         |       | ptr to typeinfo for D |</span><br><span class="line">      |     d    |         +-----&gt; +-----------------------+</span><br><span class="line">      +----------+                 |         C::x()        |</span><br><span class="line">      |  vtable  |----+            +-----------------------+</span><br><span class="line">      +----------+    |            |    0 (vbase_offset)   |</span><br><span class="line">      |     a    |    |            +-----------------------+</span><br><span class="line">      +----------+    |            |   -20 (top_offset)    |</span><br><span class="line">                      |            +-----------------------+</span><br><span class="line">                      |            | ptr to typeinfo for D |</span><br><span class="line">                      +----------&gt; +-----------------------+</span><br><span class="line">                                   |         A::v()        |</span><br><span class="line">                                   +-----------------------+</span><br></pre></td></tr></table></figure>
</blockquote>
<p>Destruction occurs in the same fashion but in reverse. D's destructoris invoked. After the user's destruction code runs, the destructorcalls C's destructor and directs it to use the relevant portion of D'sVTT. C's destructor manipulates the vtable pointers in the same wayit did during construction; that is, the relevant vtable pointers nowpoint into the C-in-D construction vtable. Then it runs the user'sdestruction code for C and returns control to D's destructor, whichnext invokes B's destructor with a reference into D's VTT. B'sdestructor sets up the relevant portions of the object to refer intothe B-in-D construction vtable. It runs the user's destruction codefor B and returns control to D's destructor, which finally invokes A'sdestructor. A's destructor changes the vtable for the A portion ofthe object to refer into the vtable for A. Finally, control returnsto D's destructor and d 1000 estruction of the object is complete. Thememory once used by the object is returned to the system.</p>
<p>Now, in fact, the story is somewhat more complicated. Have you everseen those "in-charge" and "not-in-charge" constructor and destructorspecifications in GCC-produced warning and error messages or inGCC-produced binaries? Well, the fact is that there can be twoconstructor implementations and up to three destructor implementations.</p>
<p>An "in-charge" (or <em>complete object</em>) constructor is one thatconstructs virtual bases, and a "not-in-charge" (or <em>baseobject</em>) constructor is one that does not. Consider our aboveexample. If a B is constructed, its constructor needs to call A'sconstructor to construct it. Similarly, C's constructor needs toconstruct A. However, if B and C are constructed as part of aconstruction of a D, their constructors <em>should not</em> constructA, because A is a virtual base and D's constructor will take care ofconstructing it exactly once for the instance of D. Consider thecases:</p>
<ul>
<li>If you do a <code>new A</code>, A's "in-charge" constructor isinvoked to construct A.</li>
<li>When you do a <code>new B</code>, B's "in-charge" constructor isinvoked. It will call the "not-in-charge" constructor for A.</li>
<li><code>new C</code> is similar to <code>new B</code>.</li>
<li>A <code>new D</code> invokes D's "in-charge" constructor. Wewalked through this example. D's "in-charge" constructor calls the"not-in-charge" versions of A's, B's, and C's constructors (in thatorder).</li>
</ul>
<p>An "in-charge" destructor is the analogue of an "in-charge"constructor---it takes charge of destructing virtual bases. Similarly,a "not-in-charge" destructor is generated. But there's a third one aswell. An "in-charge deleting" destructor is one that <em>deallocates</em>the storage as well as destructing the object. So when is one called in preferenceto the other?</p>
<p>Well, there are two kinds of objects that can be destructed---those allocated on thestack, and those allocated in the heap. Consider this code (given our diamond hierarchywith virtual-inheritance from before):</p>
<blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">D d;            // allocates a D on the stack and constructs it</span><br><span class="line">D *pd = new D;  // allocates a D in the heap and constructs it</span><br><span class="line">/* ... */</span><br><span class="line">delete pd;      // calls &quot;in-charge deleting&quot; destructor for D</span><br><span class="line">return;         // calls &quot;in-charge&quot; destructor for stack-allocated D</span><br></pre></td></tr></table></figure>
</blockquote>
<p>We see that the actual delete operator isn't invoked by the code doingthe delete, but rather by the in-charge deleting destructor for theobject being deleted. Why do it this way? Why not have the callercall the in-charge destructor, then delete the object? Then you'd haveonly two copies of destructor implementations instead of three...</p>
<p>Well, the compiler <em>could</em> do such a thing, but it would be morecomplicated for other reasons. Consider this code (assuming a virtual destructor,which you always use, right?...<em>right?!?</em>):</p>
<blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">D *pd = new D;  // allocates a D in the heap and constructs it</span><br><span class="line">C *pc = d;      // we have a pointer-to-C that points to our heap-allocated D</span><br><span class="line">/* ... */</span><br><span class="line">delete pc;      // call destructor thunk through vtable, but what about delete?</span><br></pre></td></tr></table></figure>
</blockquote>
<p>If you didn't have an "in-charge deleting" variety of D's destructor, thenthe delete operation would need to adjust the pointer just like the destructorthunk does. Remember, the C object is embedded in a D, and so ourpointer-to-C above is adjusted to point into the middle of our D object.We can't just delete this pointer, since it isn't the pointer that wasreturned by <code>malloc()</code> when we constructed it.</p>
<p>So, if we didn't have an in-charge deleting destructor, we'd have to havethunks to the delete operator (and represent them in our vtables), or somethingelse similar.</p>
<p>Thunks, Virtual and Non-Virtual</p>
<p>This section not written yet.</p>
<p>Multiple Inheritance with Virtua 1000 l Methods on One Side</p>
<p>Okay. One last exercise. What if we have a diamond inheritance hierarchywith virtual inheritance, as before, but only have virtual methods along oneside of it? So:</p>
<blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class A &#123;</span><br><span class="line">public:</span><br><span class="line">  int a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class B : public virtual A &#123;</span><br><span class="line">public:</span><br><span class="line">  int b;</span><br><span class="line">  virtual void w();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class C : public virtual A &#123;</span><br><span class="line">public:</span><br><span class="line">  int c;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class D : public B, public C &#123;</span><br><span class="line">public:</span><br><span class="line">  int d;</span><br><span class="line">  virtual void y();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>In this case the object layout is the following:</p>
<blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">                                   +-----------------------+</span><br><span class="line">                                   |   20 (vbase_offset)   |</span><br><span class="line">                                   +-----------------------+</span><br><span class="line">                                   |     0 (top_offset)    |</span><br><span class="line">                                   +-----------------------+</span><br><span class="line">                                   | ptr to typeinfo for D |</span><br><span class="line">                      +----------&gt; +-----------------------+</span><br><span class="line">d --&gt; +----------+    |            |         B::w()        |</span><br><span class="line">      |  vtable  |----+            +-----------------------+</span><br><span class="line">      +----------+                 |         D::y()        |</span><br><span class="line">      |     b    |                 +-----------------------+</span><br><span class="line">      +----------+                 |   12 (vbase_offset)   |</span><br><span class="line">      |  vtable  |---------+       +-----------------------+</span><br><span class="line">      +----------+         |       |    -8 (top_offset)    |</span><br><span class="line">      |     c    |         |       +-----------------------+</span><br><span class="line">      +----------+         |       | ptr to typeinfo for D |</span><br><span class="line">      |     d    |         +-----&gt; +-----------------------+</span><br><span class="line">      +----------+</span><br><span class="line">      |     a    |</span><br><span class="line">      +----------+</span><br></pre></td></tr></table></figure>
</blockquote>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>class</tag>
        <tag>vtable</tag>
        <tag>offset</tag>
        <tag>virtual</tag>
        <tag>member</tag>
      </tags>
  </entry>
  <entry>
    <title>代码大全读书笔记</title>
    <url>/2023/03/8fb81ad8abe1.html</url>
    <content><![CDATA[<blockquote>

</blockquote>
<span id="more"></span>
<h1 id="第1章-欢迎进入软件构建的世界">第1章 欢迎进入软件构建的世界</h1>
<h2 id="什么是软件构建">1.1 什么是软件构建</h2>
<p>详细设计, 编码, 调试, 集成, 开发者测试 构建产生源代码</p>
<h2 id="软件构建为何如此重要">1.2 软件构建为何如此重要</h2>
<h2 id="如何阅读本书">1.3 如何阅读本书</h2>
<h1 id="第2章-用隐喻来更充分地理解软件开发">第2章 用隐喻来更充分地理解软件开发</h1>
<h2 id="隐喻的重要性">2.1 隐喻的重要性</h2>
<p>建模</p>
<h2 id="如何使用软件隐喻">2.2 如何使用软件隐喻</h2>
<h2 id="常见的软件隐喻">2.3 常见的软件隐喻</h2>
<h1 id="第3章-三思而后行前期准备">第3章 三思而后行：前期准备</h1>
<h2 id="前期准备的重要性">3.1 前期准备的重要性</h2>
<h2 id="辨明你所从事的软件的类型">3.2 辨明你所从事的软件的类型</h2>
<h3 id="在序列式开发法和迭代式开发法之间做出选择">在序列式开发法和迭代式开发法之间做出选择</h3>
<p>以下更适合序列化开发 - 需求稳定 - 设计直截了当 - 团队对此领域熟悉 - 风险小 - 需要长期可预测性 - 后期改变需求代价昂贵</p>
<p>以下更适合迭代方法 - 需求不稳定 - 设计复杂 - 团队对领域不熟悉 - 风险多 - 不需要长期可预测性 - 后期改变需求代价低</p>
<h2 id="问题定义的先决条件">3.3 问题定义的先决条件</h2>
<p>从客户的角度出发</p>
<h2 id="需求的先决条件">3.4 需求的先决条件</h2>
<p>针对功能需求 - 是否详细定义了输入输出 - 是否定义输出格式 - 是否定义软硬件接口 - 是否定义通信接口协议 - 是否列出用户所有需求 - 是否定于每个任务需要和得到的数据</p>
<h2 id="架构的先决条件">3.5 架构的先决条件</h2>
<h3 id="架构的典型组成部分">架构的典型组成部分</h3>
<ul>
<li>程序组织</li>
<li>主要的类</li>
<li>数据设计</li>
<li>业务规则</li>
<li>ui</li>
<li>资源管理</li>
<li>安全性</li>
<li>性能</li>
<li>可伸缩性</li>
<li>互用性</li>
<li>国际化</li>
<li>输入输出</li>
<li>错误处理</li>
<li>容错性</li>
<li>可行性</li>
<li>过度工程</li>
</ul>
<h2 id="花费在前期准备上的时间长度">3.6 花费在前期准备上的时间长度</h2>
<h1 id="第4章-关键的构建决策">第4章 关键的“构建”决策</h1>
<h2 id="选择编程语言">4.1 选择编程语言</h2>
<h2 id="编程约定">4.2 编程约定</h2>
<h2 id="你在技术浪潮中的位置">4.3 你在技术浪潮中的位置</h2>
<h2 id="选择主要的构建实践方法">4.4 选择主要的构建实践方法</h2>
<h1 id="第5章-软件构建中的设计">第5章 软件构建中的设计</h1>
<h2 id="设计中的挑战">5.1 设计中的挑战</h2>
<ul>
<li>设计是一个险恶的问题 险恶(wicked)问题: 只有通过解决或者部分解决才能被明确的问题</li>
<li>设计是个了无章法的过程（即使它能得出清爽的成果）</li>
<li>设计就是确定取舍和调整顺序的过程</li>
<li>设计受到诸多限制</li>
<li>设计是不确定的</li>
<li>设计是一个启发式过程(探索性)</li>
<li>设计是自然而然形成的</li>
</ul>
<h2 id="关键的设计概念">5.2 关键的设计概念</h2>
<h3 id="软件的首要技术任务管理复杂度">软件的首要技术任务：管理复杂度</h3>
<h3 id="理想的设计特征">理想的设计特征</h3>
<h3 id="设计的层次">设计的层次</h3>
<ul>
<li>软件系统</li>
<li>子系统或包</li>
<li>类</li>
<li>子程序</li>
<li>子程序内部</li>
</ul>
<h2 id="设计构造块启发式方法">5.3 设计构造块：启发式方法</h2>
<h3 id="关于设计启发的总结">关于设计启发的总结</h3>
<ul>
<li>寻找现实世界的对象</li>
<li>形成一致的抽象画</li>
<li>封装实现细节</li>
<li>在可能得情况下继承</li>
<li>信息隐藏</li>
<li>找到容易改变的区域</li>
<li>松散耦合</li>
<li>通用设计模式</li>
</ul>
<h2 id="设计实践">5.4 设计实践</h2>
<h2 id="对流行的设计方法的评论">5.5 对流行的设计方法的评论</h2>
<h1 id="第6章-可以工作的类">第6章 可以工作的类</h1>
<h2 id="类的基础抽象数据类型-abstract-data-types-adts">6.1 类的基础：抽象数据类型 abstract data types ADTs</h2>
<h2 id="良好的类接口">6.2 良好的类接口</h2>
<p><strong>少暴露信息</strong>! 可访问性尽可能低</p>
<p>每个接口都由一个可编程(programmatic)的部分和 一个语义(sernantic)部分组成。可编程的部分由接又中的数据 类 型 和 其 他 属 性 构 成 ， 编 译 器 能 强 制 性 地 要 求 它 们 ( 在 编 译 时 检 查 错 误 )。 而 语 义 部分则由“本接口将会被怎样使用” 的假定组成，而这些是无法通过编译器来强 制实施的。</p>
<p>Scott Meyers在《EffectiveC++》一书第2版中的第34条里介绍了可以解决 这个问题的一个惯用技法(Meyers 1998)。他建议你把类的接又与类的实现隔离开，并在类的声明中包含一个指针，让该指针指向类的实现，但不能包含任何其 他实现细节。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  ...</span><br><span class="line">  <span class="built_in">Employee</span>();</span><br><span class="line">  ...</span><br><span class="line">  <span class="function">FullName <span class="title">GetName</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function">String <span class="title">GetAddress</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  EmployeeImplementation *m_implementation;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="有关设计和实现的问题">6.3 有关设计和实现的问题</h2>
<h3 id="包含有一个的关系">包含（“有一个……”的关系）</h3>
<p>警惕有超过约7个数据成员的类 研究表明，人们在做其他事情时能记住的 离 散 项 目 的 个 数 是 <strong>7 士 2</strong> (Miller 1956)。</p>
<h3 id="继承是一个关系">继承（“是一个……”关系）</h3>
<p>什么时候继承</p>
<ul>
<li>如果多个类共享数据而非行为，应该创建这些类可以包含的共用对象。</li>
<li>如果多个类共享行为而非数据，应该让它们从共同的基类继承而来，并在基 类里定义共用的子程序。</li>
<li>如果多个类既共享数据也共享行为，应该让它们从一 个共同的基类继承而 来，并在基类里定义共用的数据和子程序。</li>
<li>当你想由基类控制接口时，使用继承;当你想自己控制接口时，使用包含。</li>
</ul>
<h2 id="创建类的原因">6.4 创建类的原因</h2>
<ul>
<li>为现实世界中的对象建模</li>
<li>为抽象的对象建模</li>
<li>降低复杂度</li>
<li>隔离复杂度</li>
<li>隐藏实现细节</li>
<li>限制变动的影响范围</li>
<li>建立中心控制点</li>
<li>代码重用</li>
</ul>
<h2 id="与具体编程语言相关的问题">6.5 与具体编程语言相关的问题</h2>
<p>virtual</p>
<h2 id="超越类包">6.6 超越类：包</h2>
<h1 id="第7章-高质量的子程序">第7章 高质量的子程序</h1>
<h2 id="创建子程序的正当理由">7.1 创建子程序的正当理由</h2>
<ul>
<li>降低复杂度, 特别是嵌套层次很深时</li>
<li>引入中间抽象, 用子程序说明代码用意</li>
<li>避免代码重复</li>
<li>隐藏执行顺序</li>
<li>简化 bool 判断</li>
</ul>
<h3 id="似乎过于简单而没必要写成子程序的操作">似乎过于简单而没必要写成子程序的操作</h3>
<p>可以增加可读性</p>
<h2 id="在子程序层上设计">7.2 在子程序层上设计</h2>
<p><strong>内聚性</strong></p>
<p>最好的内聚性: 功能内聚性</p>
<h2 id="好的子程序名字">7.3 好的子程序名字</h2>
<ul>
<li><p>好的子程序名字应该描述所有的输出结果和副作用</p></li>
<li><p>使用准确的动词和动宾短语</p></li>
<li><p>不要有数字(1, 2, 3)</p></li>
<li><p>9~15 字符</p></li>
<li><p>对仗 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">add/remove  </span><br><span class="line">begin/end </span><br><span class="line">create/destroy </span><br><span class="line">first/last</span><br><span class="line">get/put </span><br><span class="line">get/set</span><br><span class="line">increment/decrement </span><br><span class="line">insert/delete </span><br><span class="line">lock/unlock </span><br><span class="line">min/max</span><br><span class="line">next/previous </span><br><span class="line">old/new</span><br><span class="line">open/close </span><br><span class="line">show/hide</span><br><span class="line">source/target </span><br><span class="line">start/stop</span><br><span class="line">up/down</span><br></pre></td></tr></table></figure></p></li>
</ul>
<h2 id="子程序可以写多长">7.4 子程序可以写多长</h2>
<p>50 rows</p>
<h2 id="如何使用子程序参数">7.5 如何使用子程序参数</h2>
<ul>
<li>按照输入-修改-输出排列参数</li>
<li>不同子程序的类似参数要顺序一致</li>
<li>状态变量放在最后</li>
<li>不要把子程序参数用作 工作变量</li>
<li>断言判断参数假定</li>
<li>参数&lt;=7 个</li>
</ul>
<h2 id="使用函数时要特别考虑的问题">7.6 使用函数时要特别考虑的问题</h2>
<p>不要返回局部数据的引用和指针</p>
<h2 id="宏子程序和内联子程序">7.7 宏子程序和内联子程序</h2>
<h1 id="第8章-防范式编程">第8章 防范式编程</h1>
<h2 id="保护程序免遭无效输入数据的破坏">8.1 保护程序免遭无效输入数据的破坏</h2>
<ul>
<li>检查来源于外部的数据的值</li>
<li>检查子程序输入参数的值</li>
<li>决定如何处理错误的输出数据</li>
</ul>
<h2 id="断言">8.2 断言</h2>
<ul>
<li>用错误处理代码来处理预期会发生的状况，用断言来处理绝不应该发生的状 况</li>
<li>避免把需要执行的代码放到断言中</li>
<li>用断言来注解并验证前条件和后条件</li>
</ul>
<h2 id="错误处理技术">8.3 错误处理技术</h2>
<h2 id="异常">8.4 异常</h2>
<h2 id="隔离程序以免遭由错误造成的损害">8.5 隔离程序以免遭由错误造成的损害</h2>
<h2 id="辅助调试代码">8.6 辅助调试代码</h2>
<h3 id="不要自动地把产品版本的限制强加于开发版本之上">不要自动地把产品版本的限制强加于开发版本之上</h3>
<h3 id="尽早引入辅助调试的手段">尽早引入辅助调试的手段</h3>
<h3 id="采用冒进式编程">采用冒进式编程</h3>
<h3 id="计划移除调试辅助代码">计划移除调试辅助代码</h3>
<h2 id="确定在产品代码中该保留多少防范式代码">8.7 确定在产品代码中该保留多少防范式代码</h2>
<h2 id="防范式编程时保持防范">8.8 防范式编程时保持防范</h2>
<h1 id="第9章-伪代码编程过程">第9章 伪代码编程过程</h1>
<h2 id="创建类和子程序的步骤概述">9.1 创建类和子程序的步骤概述</h2>
<h2 id="伪代码">9.2 伪代码</h2>
<h2 id="通过伪代码编程过程创建子程序">9.3 通过伪代码编程过程创建子程序</h2>
<h2 id="伪代码编程过程之外的其他方案">9.4 伪代码编程过程之外的其他方案</h2>
<h1 id="第10章-使用变量的一般事项">第10章 使用变量的一般事项</h1>
<h2 id="数据认知">10.1 数据认知</h2>
<h2 id="轻松掌握变量定义">10.2 轻松掌握变量定义</h2>
<h2 id="变量初始化原则">10.3 变量初始化原则</h2>
<p>声明时初始化</p>
<p>靠近时初始化</p>
<h2 id="作用域">10.4 作用域</h2>
<p>使变量引用局部化</p>
<p>尽可能缩短变量的“存活”时间</p>
<h2 id="持续性">10.5 持续性</h2>
<h2 id="绑定时间">10.6 绑定时间</h2>
<h2 id="数据类型和控制结构之间的关系">10.7 数据类型和控制结构之间的关系</h2>
<h2 id="为变量指定单一用途">10.8 为变量指定单一用途</h2>
<h1 id="第11章-变量名的力量">第11章 变量名的力量</h1>
<h2 id="选择好变量名的注意事项">11.1 选择好变量名的注意事项</h2>
<h3 id="最适当的名字长度">最适当的名字长度</h3>
<p>10~16</p>
<p>短的变量名用于临时变量</p>
<h3 id="变量名字中的计算值限定词">变量名字中的计算值限定词</h3>
<p>限定词放在最后</p>
<p>(把计算的量放在名字最后的这条规则也有例外，那就是 Num限定词的位置已经是约定俗成的。Num放在变量名的开始位置代表 一个总数)</p>
<h3 id="变量名字中的常用对仗词">变量名字中的常用对仗词</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">begin/end</span><br><span class="line">first/last</span><br><span class="line">locked/unlocked</span><br><span class="line">min/max</span><br><span class="line">next/previous</span><br><span class="line">old/new </span><br><span class="line">opened/closed </span><br><span class="line">visible/invisible</span><br><span class="line">source/target </span><br><span class="line">source/destination </span><br><span class="line">up/down</span><br></pre></td></tr></table></figure>
<h2 id="为特定类型的数据命名">11.2 为特定类型的数据命名</h2>
<h3 id="为状态变量命名">为状态变量命名</h3>
<p>少用<code>flag</code>多用 bool</p>
<h3 id="为临时变量命名">为临时变量命名</h3>
<h3 id="为布尔变量命名">为布尔变量命名</h3>
<ul>
<li>done</li>
<li>error</li>
<li>found</li>
<li>success/ok</li>
<li>not</li>
</ul>
<h3 id="为枚举类型命名">为枚举类型命名</h3>
<p><code>Color_Red</code></p>
<h2 id="命名规则的力量">11.3 命名规则的力量</h2>
<h2 id="非正式命名规则">11.4 非正式命名规则</h2>
<h3 id="语言无关规则的指导原则">语言无关规则的指导原则</h3>
<p>区分变量和子程序</p>
<p>区分类和对象</p>
<p>标识全局变量</p>
<p>标识成员变量</p>
<p>标识类型</p>
<p>标识具名常量</p>
<p>标识枚举</p>
<p>标识只读</p>
<h3 id="语言相关规则的指导原则">语言相关规则的指导原则</h3>
<h3 id="混合语言编程的注意事项">混合语言编程的注意事项</h3>
<h2 id="标准前缀">11.5 标准前缀</h2>
<h3 id="用户自定义类型缩写">用户自定义类型缩写</h3>
<p>比如, ch, doc, scr, wn</p>
<h3 id="语义前缀">语义前缀</h3>
<p>c, m, g</p>
<h2 id="创建具备可读性的短名称">11.6 创建具备可读性的短名称</h2>
<h3 id="一般的缩写指导原则">一般的缩写指导原则</h3>
<p>去掉非前置元音</p>
<h3 id="语音缩写">语音缩写</h3>
<p>不提倡</p>
<h2 id="应该避免的名称">11.7 应该避免的名称</h2>
<h1 id="第12章-基本数据类型">第12章 基本数据类型</h1>
<h2 id="使用数的普遍规则">12.1 使用数的普遍规则</h2>
<p>magic number: 没有经过解释的数值文字量</p>
<p>预防除 0</p>
<h2 id="整数">12.2 整数</h2>
<p>除法, 溢出</p>
<h2 id="浮点数">12.3 浮点数</h2>
<p>避免数量级相差太大的加减</p>
<p>避免等量判断</p>
<p>舍入</p>
<h2 id="字符和字符串">12.4 字符和字符串</h2>
<p>避免 magic str</p>
<p>国际化</p>
<p>unicode</p>
<h2 id="布尔变量">12.5 布尔变量</h2>
<p>用布尔变量说明代码含义</p>
<h2 id="枚举类型">12.6 枚举类型</h2>
<p>枚举提高可靠性</p>
<p>检查非法数值</p>
<p>定义第一项和最后一项用于循环边界</p>
<p>将第一个元素预留作为非法值</p>
<h2 id="命名常量">12.7 命名常量</h2>
<p>避免使用文字量</p>
<h2 id="数组">12.8 数组</h2>
<p>越界, 边界</p>
<p>用容器替代</p>
<h2 id="创建你自己的类型类型别名">12.9 创建你自己的类型（类型别名）</h2>
<ul>
<li>减少信息分发(隐藏信息)</li>
<li>用于代码说明</li>
<li>便于移植</li>
</ul>
<h1 id="第13章-不常见的数据类型">第13章 不常见的数据类型</h1>
<h2 id="结构">13.1 结构</h2>
<p>用结构体简化参数列表</p>
<h2 id="指针">13.2 指针</h2>
<p>从概念上看，每一个指针都包舍两个部分:内存中的某处位置，以及如何解 释该位置中的内容。</p>
<ul>
<li>把指针操作限制在子程序或者类中</li>
<li>同时声明和定义</li>
<li>分配和释放</li>
<li>使用前检查</li>
<li>狗牌(tag, 增加荣誉)</li>
<li>删除后置空</li>
</ul>
<h2 id="全局数据">13.3 全局数据</h2>
<h3 id="用访问子程序来取代全局数据">用访问子程序来取代全局数据</h3>
<h1 id="第14章-组织直线型代码">第14章 组织直线型代码</h1>
<h2 id="必须有明确顺序的语句">14.1 必须有明确顺序的语句</h2>
<ul>
<li>使子程序名能突显依赖关系</li>
<li>利用子程序参数明确依赖关系</li>
</ul>
<h2 id="顺序无关的语句">14.2 顺序无关的语句</h2>
<h3 id="把相关的语句组织在一起">把相关的语句组织在一起</h3>
<h1 id="第15章-使用条件语句">第15章 使用条件语句</h1>
<h2 id="if语句">15.1 if语句</h2>
<ul>
<li>先写正常代码路径, 再写不正常</li>
<li>正常情况放在 if 后而不是 else 后</li>
<li>if 后跟一个有意义的语句</li>
</ul>
<h2 id="case语句">15.2 case语句</h2>
<h3 id="为case选择最有效的排序">为case选择最有效的排序</h3>
<p>最常执行的放在最前面</p>
<p>不要刻意使用 case, 如果处理复杂请使用 if</p>
<h1 id="第16章-控制循环">第16章 控制循环</h1>
<h2 id="选择循环的种类">16.1 选择循环的种类</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">score = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">GetNextRating</span>(&amp;ratingIncrement);</span><br><span class="line">rating = rating + ratingIncrement;</span><br><span class="line"><span class="keyword">while</span> ((score &lt; targetScore) &amp;&amp; (ratingIncrement != <span class="number">0</span>)) &#123;</span><br><span class="line">    <span class="built_in">GetNextScore</span>(&amp;scoreIncrement);</span><br><span class="line">    score = score + scoreIncrement;</span><br><span class="line">    <span class="built_in">GetNextRating</span>(&amp;ratingIncrement);</span><br><span class="line">    rating = rating + ratingIncrement;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//修改为↓</span></span><br><span class="line">score = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="built_in">GetNextRating</span>(&amp;ratingIncrement);</span><br><span class="line">    rating = rating + ratingIncrement;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!((score &lt; targetScore) &amp;&amp; (ratingIncrement ! = <span class="number">0</span>)))</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">GetextScore</span>(&amp;scoreIncrement);</span><br><span class="line">    score = score + scoreincrement;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>把退出条件写在一起</li>
</ul>
<h2 id="循环控制">16.2 循环控制</h2>
<h3 id="进入循环">进入循环</h3>
<p>初始化代码紧跟循环开始之后</p>
<h3 id="处理好循环体">处理好循环体</h3>
<p>循环内务放在最后(计数器等)</p>
<h3 id="退出循环">退出循环</h3>
<h3 id="检查端点">检查端点</h3>
<p>off-by-one</p>
<h3 id="使用循环变量">使用循环变量</h3>
<h3 id="循环应该有多长">循环应该有多长</h3>
<p>同子程序</p>
<h2 id="轻松创建循环由内而外">16.3 轻松创建循环——由内而外</h2>
<h2 id="循环和数组的关系">16.4 循环和数组的关系</h2>
<h1 id="第17章-不常见的控制结构">第17章 不常见的控制结构</h1>
<h2 id="子程序中的多个返回">17.1 子程序中的多个返回</h2>
<p>及时循环避免多层 if 嵌套</p>
<h2 id="递归">17.2 递归</h2>
<ul>
<li>安全计数器防止无限递归</li>
</ul>
<h2 id="goto">17.3 goto</h2>
<h2 id="对不常见控制结构的看法">17.4 对不常见控制结构的看法</h2>
<h1 id="第18章-表驱动方法">第18章 表驱动方法</h1>
<h2 id="表驱动方法使用总则">18.1 表驱动方法使用总则</h2>
<h2 id="直接访问表">18.2 直接访问表</h2>
<h3 id="示例一个月中的天数days-in-month">示例：一个月中的天数（Days-in-Month）</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">daysPerMonth = &#123; 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 &#125;</span><br><span class="line">days = daysPerMonth[month-1]</span><br></pre></td></tr></table></figure>
<h2 id="索引访问表">18.3 索引访问表</h2>
<h2 id="阶梯访问表">18.4 阶梯访问表</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">rangeLimit[] = &#123;<span class="number">50.0</span>, <span class="number">65.0</span>, <span class="number">75.0</span>, <span class="number">90.0</span>, <span class="number">100.0</span>&#125;;</span><br><span class="line">grade[] As String = (<span class="string">&quot;F&quot;</span>, <span class="string">&quot;E&quot;</span>, <span class="string">&quot;D&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;A&quot;</span>);</span><br><span class="line">maxGradeLevel = grade.length - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">gradeLevel = <span class="number">0</span>;</span><br><span class="line">studentGrade = <span class="string">&quot;A&quot;</span>;</span><br><span class="line"><span class="keyword">while</span> ((studentGrade = <span class="string">&quot;A&quot;</span>) <span class="built_in">and</span> (gradeLevel &lt; maxGradeLevel)) &#123;</span><br><span class="line">    <span class="built_in">If</span>(studentScore &lt; <span class="built_in">rangeLimit</span>(gradeLevel)) </span><br><span class="line">      	studentGrade = <span class="built_in">grade</span>(gradeLevel);</span><br><span class="line">    gradeLevel = gradeLevel + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="表查询的其他示例">18.5 表查询的其他示例</h2>
<p>--- 未完待续</p>
<h1 id="第19章-一般控制问题">第19章 一般控制问题</h1>
<h2 id="布尔表达式">19.1 布尔表达式</h2>
<p>注意短路(惰性求值)</p>
<p>按照数轴的方式写表达式 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MIN_ELEMENTS &lt;= i and i &lt;= MAX_ELEMENTS </span><br><span class="line">i &lt; MIN ELEMENTS or MAX_ ELEMENTS &lt; i</span><br></pre></td></tr></table></figure></p>
<h2 id="复合语句块">19.2 复合语句（块）</h2>
<h2 id="空语句">19.3 空语句</h2>
<h2 id="驯服危险的深层嵌套">19.4 驯服危险的深层嵌套</h2>
<p>避免使用超过三层嵌套</p>
<h3 id="减少嵌套的方法">减少嵌套的方法</h3>
<ul>
<li><p>重复测试 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (inputStatus == InputStatus_Success) &#123;</span><br><span class="line">    <span class="comment">// lots of code</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (printerRoutine != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="comment">// lots of code</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ((inputstatus == InputStatus_Success) &amp;&amp; (printerRoutine != <span class="literal">NULL</span>) &amp;&amp;</span><br><span class="line">    <span class="built_in">SetupPage</span>()) &#123;</span><br><span class="line">    <span class="comment">// lots of code</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">AllocMem</span>(&amp;printData)) &#123;</span><br><span class="line">        <span class="comment">// lots of code</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li>
<li><p>break <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123; <span class="comment">// begin break block</span></span><br><span class="line">    <span class="keyword">if</span> (inputStatus != InputStatus_Success) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">// break out of block</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// lots of code</span></span><br><span class="line">    <span class="keyword">if</span> (printerRoutine == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">break</span>; <span class="comment">// break out of block</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// lots of code</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">SetupPage</span>()) &#123;</span><br><span class="line">        <span class="keyword">break</span>; <span class="comment">// break out of block</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// lots of code</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">AllocMem</span>(sprintData)) &#123;</span><br><span class="line">        <span class="keyword">break</span>; <span class="comment">// break out of block</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// lots of code</span></span><br><span class="line">&#125; <span class="keyword">while</span> (FALSE);</span><br><span class="line"><span class="comment">// end break block</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></p></li>
<li><p>case</p></li>
<li><p>深层嵌套放入子程序</p></li>
<li><p>面向对象 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">TransactionData transactionData;</span><br><span class="line">Transaction* transaction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">TransactionsComplete</span>()) &#123;</span><br><span class="line">    <span class="comment">// read transaction record and complete transaction</span></span><br><span class="line">    transactionData = <span class="built_in">ReadTransaction</span>();</span><br><span class="line">    transaction = TransactionFactory.<span class="built_in">Create</span>(transactionData);</span><br><span class="line">    transaction-&gt;<span class="built_in">Complete</span>();</span><br><span class="line">    <span class="keyword">delete</span> transaction;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li>
</ul>
<h2 id="编程基础结构化编程">19.5 编程基础：结构化编程</h2>
<p>结构化编程的核心思想很简单，那就是一个应用程序应该只采用一些单入单 出 的 控 制 结 构 ( 也 称 为 单 一 入 又 、 单 一 出 又 的 控 制 结 构 )。 单 入 单 出 的 控 制 结 构 指 的就是一个代码块，它只能从一个位置开始执行，并且只能结束于一个位置。</p>
<h2 id="控制结构与复杂度">19.6 控制结构与复杂度</h2>
<h1 id="第20章-软件质量概述">第20章 软件质量概述</h1>
<h2 id="软件质量的特性">20.1 软件质量的特性</h2>
<h2 id="改善软件质量的技术">20.2 改善软件质量的技术</h2>
<h2 id="不同质量保障技术的相对效能">20.3 不同质量保障技术的相对效能</h2>
<h3 id="缺陷检测率">缺陷检测率</h3>
<h3 id="找出缺陷的成本">找出缺陷的成本</h3>
<h3 id="修正缺陷的成本">修正缺陷的成本</h3>
<h2 id="什么时候进行质量保证工作">20.4 什么时候进行质量保证工作</h2>
<h2 id="软件质量的普遍原理">20.5 软件质量的普遍原理</h2>
<h1 id="第21章-协同构造">第21章 协同构造</h1>
<h2 id="协同开发实践概要">21.1 协同开发实践概要</h2>
<h3 id="协同构造是其他质量保证技术的补充">协同构造是其他质量保证技术的补充</h3>
<h3 id="协同构造有利于传授公司文化以及编程专业知识">协同构造有利于传授公司文化以及编程专业知识</h3>
<h3 id="集体所有权适用于所有形式的协同构造">集体所有权适用于所有形式的协同构造</h3>
<h3 id="在构造前后都应保持协作">在构造前后都应保持协作</h3>
<h2 id="结对编程">21.2 结对编程</h2>
<h3 id="成功运用结对编程的关键">成功运用结对编程的关键</h3>
<h3 id="结对编程的好处">结对编程的好处</h3>
<h2 id="正式检查">21.3 正式检查</h2>
<h3 id="你期望检查能够带来什么结果">你期望检查能够带来什么结果</h3>
<h3 id="检查中的人员角色">检查中的人员角色</h3>
<h3 id="检查的一般步骤">检查的一般步骤</h3>
<h3 id="检查中的自尊心">检查中的自尊心</h3>
<h3 id="检查和代码大全">检查和代码大全</h3>
<h3 id="检查总结">检查总结</h3>
<h2 id="其他类型的协同开发实践">21.4 其他类型的协同开发实践</h2>
<h3 id="走查">走查</h3>
<h3 id="代码阅读">代码阅读</h3>
<h3 id="大型演示">大型演示</h3>
<h3 id="协同构造技术的比较">协同构造技术的比较</h3>
<h3 id="参考资料">参考资料</h3>
<h3 id="结对编程-1">结对编程</h3>
<h3 id="检查">检查</h3>
<h3 id="相关标准">相关标准</h3>
<h3 id="关键点">关键点</h3>
<h1 id="第22章-开发者测试">第22章 开发者测试</h1>
<h2 id="开发者测试在软件质量中的角色">22.1 开发者测试在软件质量中的角色</h2>
<h3 id="构造中测试">构造中测试</h3>
<h2 id="推荐的开发者测试方法">22.2 推荐的开发者测试方法</h2>
<h3 id="先测试还是后测试">先测试还是后测试</h3>
<h3 id="开发者测试的局限性">开发者测试的局限性</h3>
<h2 id="测试技巧锦囊">22.3 测试技巧锦囊</h2>
<h3 id="不完整的测试">不完整的测试</h3>
<h3 id="结构化的基础测试">结构化的基础测试</h3>
<h3 id="数据流测试">数据流测试</h3>
<h3 id="等价类划分">等价类划分</h3>
<h3 id="猜测错误">猜测错误</h3>
<h3 id="边界值分析">边界值分析</h3>
<h3 id="几类坏数据">几类坏数据</h3>
<h3 id="几类好数据">几类好数据</h3>
<h3 id="采用容易手工检查的测试用例">采用容易手工检查的测试用例</h3>
<h2 id="典型错误">22.4 典型错误</h2>
<h3 id="哪些类包含最多的错误">哪些类包含最多的错误？</h3>
<h3 id="错误的分类">错误的分类</h3>
<h3 id="不完善的构造过程引发错误所占的比例">不完善的构造过程引发错误所占的比例</h3>
<h3 id="你期望能发现多少错误">你期望能发现多少错误</h3>
<h3 id="测试本身的错误">测试本身的错误</h3>
<h2 id="测试支持工具">22.5 测试支持工具</h2>
<h3 id="为测试各个类构造脚手架">为测试各个类构造脚手架</h3>
<h3 id="diff工具">Diff工具</h3>
<h3 id="测试数据生成器">测试数据生成器</h3>
<h3 id="覆盖率监视器">覆盖率监视器</h3>
<h3 id="数据记录器日志记录器">数据记录器/日志记录器</h3>
<h3 id="符号调试工具">符号调试工具</h3>
<h3 id="系统干扰器">系统干扰器</h3>
<h3 id="错误数据库">错误数据库</h3>
<h2 id="改善测试过程">22.6 改善测试过程</h2>
<h3 id="有计划的测试">有计划的测试</h3>
<h3 id="重新测试回归测试">重新测试（回归测试）</h3>
<h3 id="自动化测试">自动化测试</h3>
<h2 id="保留测试记录">22.7 保留测试记录</h2>
<h3 id="个人测试记录">个人测试记录</h3>
<h3 id="推荐读物">推荐读物</h3>
<h3 id="测试">测试</h3>
<h3 id="测试脚手架">测试脚手架</h3>
<h3 id="测试优先的开发">测试优先的开发</h3>
<h3 id="相关标准-1">相关标准</h3>
<h3 id="关键点-1">关键点</h3>
<h1 id="第23章-调-试">第23章 调 试</h1>
<h2 id="调试概述">23.1 调试概述</h2>
<h3 id="调试在软件质量中所扮演的角色">调试在软件质量中所扮演的角色</h3>
<h3 id="调试效率的巨大差异">调试效率的巨大差异</h3>
<h3 id="让你有所收获的缺陷">让你有所收获的缺陷</h3>
<h3 id="一种效率低下的调试方法">一种效率低下的调试方法</h3>
<h2 id="寻找缺陷">23.2 寻找缺陷</h2>
<h3 id="科学的调试方法">科学的调试方法</h3>
<h3 id="寻找缺陷的一些小建议">寻找缺陷的一些小建议</h3>
<h3 id="语法错误">语法错误</h3>
<h2 id="修正缺陷">23.3 修正缺陷</h2>
<h2 id="调试中的心理因素">23.4 调试中的心理因素</h2>
<h3 id="心理取向如何导致调试时的盲目">心理取向如何导致调试时的盲目</h3>
<h3 id="心理距离在调试中的作用">“心理距离”在调试中的作用</h3>
<h2 id="调试工具明显的和不那么明显的">23.5 调试工具——明显的和不那么明显的</h2>
<h3 id="源代码比较工具">源代码比较工具</h3>
<h3 id="编译器的警告消息">编译器的警告消息</h3>
<h3 id="扩展的语法和逻辑检查">扩展的语法和逻辑检查</h3>
<h3 id="执行性能分析器">执行性能分析器</h3>
<h3 id="测试框架">测试框架</h3>
<h3 id="调试器">调试器</h3>
<h3 id="其它资源">其它资源</h3>
<h3 id="关键点-2">关键点</h3>
<h1 id="第24章-重构">第24章 重构</h1>
<h2 id="软件进化的类型">24.1 软件进化的类型</h2>
<h3 id="软件进化的哲学">软件进化的哲学</h3>
<h2 id="重构简介">24.2 重构简介</h2>
<h3 id="重构的理由">重构的理由</h3>
<h3 id="拒绝重构的理由">拒绝重构的理由</h3>
<h2 id="特定的重构">24.3 特定的重构</h2>
<h3 id="数据级的重构">数据级的重构</h3>
<h3 id="语句级的重构">语句级的重构</h3>
<h3 id="子程序级重构">子程序级重构</h3>
<h3 id="类实现的重构">类实现的重构</h3>
<h3 id="类接口的重构">类接口的重构</h3>
<h3 id="系统级重构">系统级重构</h3>
<h2 id="安全的重构">24.4 安全的重构</h2>
<h3 id="不宜重构的情况">不宜重构的情况</h3>
<h2 id="重构策略">24.5 重构策略</h2>
<h3 id="推荐读物-1">推荐读物</h3>
<h3 id="关键点-3">关键点</h3>
<h1 id="第25章-代码调整策略">第25章 代码调整策略</h1>
<h2 id="性能概述">25.1 性能概述</h2>
<h3 id="质量特性和性能">质量特性和性能</h3>
<h3 id="性能和代码调整">性能和代码调整</h3>
<h2 id="代码调整简介">25.2 代码调整简介</h2>
<h3 id="pareto法则">Pareto法则</h3>
<h3 id="一些无稽之谈">一些无稽之谈</h3>
<h3 id="何时调整代码">何时调整代码</h3>
<h3 id="编译器优化">编译器优化</h3>
<h2 id="蜜糖和哥斯拉">25.3 蜜糖和哥斯拉</h2>
<h3 id="常见的低效率之源">常见的低效率之源</h3>
<h3 id="常见操作的相对效率">常见操作的相对效率</h3>
<h2 id="性能测量">25.4 性能测量</h2>
<h3 id="性能测量应当精确">性能测量应当精确</h3>
<h2 id="反复调整">25.5 反复调整</h2>
<h2 id="代码调整方法总结">25.6 代码调整方法总结</h2>
<h3 id="推荐读物-2">推荐读物</h3>
<h3 id="算法和数据类型">算法和数据类型</h3>
<h3 id="关键点-4">关键点</h3>
<h1 id="第26章-代码调整方法">第26章 代码调整方法</h1>
<h2 id="逻辑">26.1 逻辑</h2>
<h3 id="在知道答案后停止判断">在知道答案后停止判断</h3>
<h3 id="按照出现频率来调整判断顺序">按照出现频率来调整判断顺序</h3>
<h3 id="相似逻辑结构之间的性能比较">相似逻辑结构之间的性能比较</h3>
<h3 id="用查找表替代复杂表达式">用查找表替代复杂表达式</h3>
<h3 id="使用惰性求值">使用惰性求值</h3>
<h2 id="循环">26.2 循环</h2>
<h3 id="将判断外提unswitching">将判断外提（Unswitching）</h3>
<h3 id="合并循环">合并循环</h3>
<h3 id="展开">？？？？？展开</h3>
<h3 id="尽可能减少再循环内部做的工作">尽可能减少再循环内部做的工作</h3>
<h3 id="哨兵值">哨兵值</h3>
<h3 id="把最忙的循环放在最内层">把最忙的循环放在最内层</h3>
<h3 id="削减强度">削减强度</h3>
<h2 id="数据变换">26.3 数据变换</h2>
<h3 id="使用整型数而不是浮点数">使用整型数而不是浮点数</h3>
<h3 id="数组维度尽可能少">数组维度尽可能少</h3>
<h3 id="尽可能减少数组引用">尽可能减少数组引用</h3>
<h3 id="使用辅助索引">使用辅助索引</h3>
<h3 id="使用缓存机制">使用缓存机制</h3>
<h2 id="表达式">26.4 表达式</h2>
<h3 id="利用代数恒等式">利用代数恒等式</h3>
<h3 id="削弱运算强度">削弱运算强度</h3>
<h3 id="编译时初始化">编译时初始化</h3>
<h3 id="小心系统函数">小心系统函数</h3>
<h3 id="使用正确的常量类型">使用正确的常量类型</h3>
<h3 id="预先算出结果">预先算出结果</h3>
<h3 id="删除公共子表达式">删除公共子表达式</h3>
<h2 id="子程序">26.5 子程序</h2>
<h3 id="将函数重写为内联">将函数重写为内联</h3>
<h2 id="用低级语言重写代码">26.6 用低级语言重写代码</h2>
<h2 id="变得越多事情反而更没变">26.7 变得越多，事情反而更没变</h2>
<h3 id="推荐读物-3">推荐读物</h3>
<h3 id="关键点-5">关键点</h3>
<h1 id="第27章-程序规模对构筑的影响">第27章 程序规模对“构筑”的影响</h1>
<h2 id="交流和规模">27.1 交流和规模</h2>
<h2 id="项目规模的范围">27.2 项目规模的范围</h2>
<h2 id="项目规模对错误的影响">27.3 项目规模对错误的影响</h2>
<h2 id="项目规模对生产率的影响">27.4 项目规模对生产率的影响</h2>
<h2 id="项目规模对开发活动的影响">27.5 项目规模对开发活动的影响</h2>
<h3 id="活动比例和项目规模">活动比例和项目规模</h3>
<h3 id="程序产品系统和系统产品">程序、产品、系统和系统产品</h3>
<h3 id="方法论和规模">方法论和规模</h3>
<h3 id="额外资源">额外资源</h3>
<h3 id="关键点-6">关键点</h3>
<h1 id="第28章-管理构筑">第28章 管理“构筑”</h1>
<h2 id="鼓励良好的编码实践">28.1 鼓励良好的编码实践</h2>
<h3 id="设定标准的考虑事项">设定标准的考虑事项</h3>
<h3 id="鼓励良好的编码实践的技术">鼓励良好的编码实践的技术</h3>
<h3 id="本书的角色">本书的角色</h3>
<h2 id="配置管理">28.2 配置管理</h2>
<h3 id="什么是配置管理">什么是配置管理？</h3>
<h3 id="需求变更和设计变更">需求变更和设计变更</h3>
<h3 id="软件代码变更">软件代码变更</h3>
<h3 id="工具版本">工具版本</h3>
<h3 id="机器配置">机器配置</h3>
<h3 id="备份计划">备份计划</h3>
<h3 id="有关配置管理的额外资源">有关配置管理的额外资源</h3>
<h2 id="评估构筑进度表">28.3 评估“构筑”进度表</h2>
<h3 id="评估的方法">评估的方法</h3>
<h3 id="评估构筑的工作量">评估“构筑”的工作量</h3>
<h3 id="对进度的影响">对进度的影响</h3>
<h3 id="评估与控制">评估与控制</h3>
<h3 id="如果你落后了该怎么办">如果你落后了该怎么办</h3>
<h3 id="有关软件评估的额外资源">有关软件评估的额外资源</h3>
<h2 id="度量">28.4 度量</h2>
<h3 id="有关软件度量的额外资源">有关软件度量的额外资源</h3>
<h2 id="把程序员当人看">28.5 把程序员当人看</h2>
<h3 id="程序员们怎样花费时间">程序员们怎样花费时间？</h3>
<h3 id="性能差异与质量差异">性能差异与质量差异</h3>
<h3 id="信仰问题">信仰问题</h3>
<h3 id="物理环境">物理环境</h3>
<h3 id="有关把程序员当人看的额外资源">有关“把程序员当人看”的额外资源</h3>
<h2 id="管理你的管理者">28.6 管理你的管理者</h2>
<h3 id="有关管理构造的额外资源">有关管理构造的额外资源</h3>
<h3 id="相关标准-2">相关标准</h3>
<h3 id="关键点-7">关键点</h3>
<h1 id="第29章-集成">第29章 集成</h1>
<h2 id="集成方式的重要性">29.1 集成方式的重要性</h2>
<h2 id="集成频率阶段式集成还是增量集成">29.2 集成频率——阶段式集成还是增量集成</h2>
<h3 id="阶段式集成">阶段式集成</h3>
<h3 id="增量集成">增量集成</h3>
<h3 id="增量集成的益处">增量集成的益处</h3>
<h2 id="增量集成的策略">29.3 增量集成的策略</h2>
<h3 id="自顶向下集成">自顶向下集成</h3>
<h3 id="自底向上集成">自底向上集成</h3>
<h3 id="三明治集成">三明治集成</h3>
<h3 id="风险导向的集成">风险导向的集成</h3>
<h3 id="功能导向的集成">功能导向的集成</h3>
<h3 id="t-型集成">T-型集成</h3>
<h3 id="集成方法小结">集成方法小结</h3>
<h3 id="持续集成">持续集成</h3>
<h3 id="额外资源-1">额外资源</h3>
<h3 id="关键点-8">关键点</h3>
<h1 id="第30章-编程工具">第30章 编程工具</h1>
<h2 id="设计工具">30.1 设计工具</h2>
<h2 id="源代码工具">30.2 源代码工具</h2>
<h3 id="编辑">编辑</h3>
<h3 id="分析代码质量">分析代码质量</h3>
<h3 id="重构源代码">重构源代码</h3>
<h3 id="数据词典">数据词典</h3>
<h2 id="可执行码工具">30.3 可执行码工具</h2>
<h3 id="产生目标码">产生目标码</h3>
<h3 id="除错">除错</h3>
<h3 id="测试-1">测试</h3>
<h3 id="代码微调">代码微调</h3>
<h2 id="工具导向的环境">30.4 工具导向的环境</h2>
<h2 id="打造你自己的编程工具">30.5 打造你自己的编程工具</h2>
<h3 id="项目特有的工具">项目特有的工具</h3>
<h3 id="脚本">脚本</h3>
<h2 id="工具幻境">30.6 工具幻境</h2>
<h3 id="额外资源-2">额外资源</h3>
<h3 id="关键点-9">关键点</h3>
<h1 id="第31章-布局与风格">第31章 布局与风格</h1>
<h2 id="基本原则">31.1 基本原则</h2>
<h3 id="布局的极端情况">布局的极端情况</h3>
<h3 id="格式化的基本原理">格式化的基本原理</h3>
<h3 id="人和计算机对程序的解读">人和计算机对程序的解读</h3>
<h3 id="好布局有什么用">好布局有什么用？</h3>
<h3 id="把布局作为一种信仰">把布局作为一种信仰</h3>
<h3 id="良好布局的目标">良好布局的目标</h3>
<h2 id="布局技术">31.2 布局技术</h2>
<h3 id="空白区">空白区</h3>
<h3 id="括号">括号</h3>
<h2 id="布局风格">31.3 布局风格</h2>
<h3 id="纯块结构">纯块结构</h3>
<h3 id="模仿纯块结构">模仿纯块结构</h3>
<h3 id="行尾布局">行尾布局</h3>
<h3 id="哪种风格最优">哪种风格最优？</h3>
<h2 id="控制结构的布局">31.4 控制结构的布局</h2>
<h3 id="格式化控制结构块的要点">格式化控制结构块的要点</h3>
<h3 id="其他考虑">其他考虑</h3>
<h2 id="单条语句的布局">31.5 单条语句的布局</h2>
<h3 id="语句长度">语句长度</h3>
<h3 id="用空格使语句显得清楚">用空格使语句显得清楚</h3>
<h3 id="格式化后续行">格式化后续行</h3>
<h3 id="每行仅写一条语句">每行仅写一条语句</h3>
<h3 id="数据声明的布局">数据声明的布局</h3>
<h2 id="注释的布局">31.6 注释的布局</h2>
<h2 id="子程序的布局">31.7 子程序的布局</h2>
<h2 id="类的布局">31.8 类的布局</h2>
<h3 id="类接口的布局">类接口的布局</h3>
<h3 id="类实现的布局">类实现的布局</h3>
<h3 id="文件和程序布局">文件和程序布局</h3>
<h3 id="更多资源">更多资源</h3>
<h3 id="关键点-10">关键点</h3>
<h1 id="第32章-自说明代码">第32章 自说明代码</h1>
<h2 id="外部文档">32.1 外部文档</h2>
<h2 id="编程风格作文档">32.2 编程风格作文档</h2>
<h2 id="注释或不注释">32.3 注释或不注释</h2>
<h2 id="高效注释之关键">32.4 高效注释之关键</h2>
<h3 id="注释种类">注释种类</h3>
<h3 id="高效注释">高效注释</h3>
<h3 id="最佳注释量">最佳注释量</h3>
<h2 id="注释技术">32.5 注释技术</h2>
<h3 id="注释单行">注释单行</h3>
<h3 id="注释代码段">注释代码段</h3>
<h3 id="注释数据声明">注释数据声明</h3>
<h3 id="注释控制结构">注释控制结构</h3>
<h3 id="注释子程序">注释子程序</h3>
<h3 id="注释类文件和程序">注释类、文件和程序</h3>
<h2 id="ieee标准">32.6 IEEE标准</h2>
<h3 id="软件质量保证标准">软件质量保证标准</h3>
<h3 id="更多资源-1">更多资源</h3>
<h3 id="关键点-11">关键点</h3>
<h1 id="第33章-个人性格">第33章 个人性格</h1>
<h2 id="个人性格是否和本书话题无关">33.1 个人性格是否和本书话题无关</h2>
<h2 id="聪明和谦虚">33.2 聪明和谦虚</h2>
<h2 id="求知欲">33.3 求知欲</h2>
<h2 id="诚实">33.4 诚实</h2>
<h2 id="交流与合作">33.5 交流与合作</h2>
<h2 id="创造力和纪律">33.6 创造力和纪律</h2>
<h2 id="偷懒">33.7 偷懒</h2>
<h2 id="不像你想象中那样起作用的性格">33.8 不像你想象中那样起作用的性格</h2>
<h3 id="矜持">矜持</h3>
<h3 id="经验">经验</h3>
<h3 id="编程狂人">编程狂人</h3>
<h2 id="习惯">33.9 习惯</h2>
<h3 id="更多资源-2">更多资源</h3>
<h3 id="关键点-12">关键点</h3>
<h1 id="第34章-软件开发艺术的有关问题">第34章 软件开发艺术的有关问题</h1>
<h2 id="克服复杂性">34.1 克服复杂性</h2>
<h2 id="精选编程过程">34.2 精选编程过程</h2>
<h2 id="为人写程序其次才是为机器">34.3 为人写程序，其次才是为机器</h2>
<h2 id="以所用语言编程但思路不受其约束">34.4 以所用语言编程，但思路不受其约束</h2>
<h2 id="借助规范集中注意力">34.5 借助规范集中注意力</h2>
<h2 id="基于问题域编程">34.6 基于问题域编程</h2>
<h3 id="将程序划分为不同层次的抽象">将程序划分为不同层次的抽象</h3>
<h2 id="当心落石">34.7 “当心落石”</h2>
<h2 id="反复再反复">34.8 反复，再反复</h2>
<h2 id="不要顽固不化">34.9 不要顽固不化</h2>
<h3 id="判断">判断</h3>
<h3 id="折中主义">折中主义</h3>
<h3 id="试验">试验</h3>
<h3 id="关键点-13">关键点</h3>
<h1 id="第35章-何处有更多信息">第35章 何处有更多信息</h1>
<h2 id="关于软件创建的信息">35.1 关于软件创建的信息</h2>
<h2 id="创建之外的话题">35.2 创建之外的话题</h2>
<h3 id="综述资料">综述资料</h3>
<h3 id="软件工程综览">软件工程综览</h3>
<h3 id="其他注释过的参考书目">其他注释过的参考书目</h3>
<h2 id="期刊">35.3 期刊</h2>
<h3 id="初级程序员杂志">初级程序员杂志</h3>
<h3 id="高级程序员杂志">高级程序员杂志</h3>
<h3 id="专题出版物">专题出版物</h3>
<h2 id="软件开发者的读书计划">35.4 软件开发者的读书计划</h2>
<h3 id="入门级">入门级</h3>
<h3 id="熟练级">熟练级</h3>
<h3 id="精通级">精通级</h3>
<h2 id="参加专业组织">35.5 参加专业组织</h2>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>break</tag>
        <tag>score</tag>
        <tag>transaction</tag>
        <tag>block</tag>
        <tag>success</tag>
      </tags>
  </entry>
  <entry>
    <title>游戏编程模式读书笔记</title>
    <url>/2023/02/5e52a7d197f6.html</url>
    <content><![CDATA[<blockquote>

</blockquote>
<span id="more"></span>
<h1 id="架构性能和游戏">架构，性能和游戏</h1>
<p>"YAGNI" You aren't gonna need it （你不需要那个）</p>
<p>Blaise Pascal有向著名的信件结尾，“我没时间写的更短。”</p>
<p>另一向名言来自Antoine de Saint Exupery：“臻于完美之时，不是加无可加，而是减无可减。</p>
<h1 id="重访设计模式">重访设计模式</h1>
<h2 id="命令模式">命令模式</h2>
<p>命令是具现化的方法调用。</p>
<p>称命令模式为“具现化方法调用”，意思是方法调用被存储在对象中。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Command</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Command</span>() &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">execute</span><span class="params">(GameActor&amp; actor)</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">undo</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Jumpcommand</span> : <span class="keyword">public</span> Command &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">execute</span><span class="params">(GameActor&amp; actor)</span> </span>&#123; actor.<span class="built_in">jump</span>(); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">undo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// undo operation</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">InputHandler</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function">Command* <span class="title">handleInput</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    Command* buttonX;</span><br><span class="line">    Command* buttonY;</span><br><span class="line">    Command* buttonA;</span><br><span class="line">    Command* buttonB;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Command* InputHandler ::<span class="built_in">handleInput</span>() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">isPressed</span>(Button_X))</span><br><span class="line">        <span class="keyword">return</span> buttonX;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">isPressed</span>(Button_Y))</span><br><span class="line">        <span class="keyword">return</span> buttonY;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">isPressed</span>(Button_A))</span><br><span class="line">        <span class="keyword">return</span> buttonA;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">isPressed</span>(Button_B))</span><br><span class="line">        <span class="keyword">return</span> buttonB;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Command* command = inputHandler.<span class="built_in">handleInput</span>();</span><br><span class="line">    <span class="keyword">if</span> (command) &#123;</span><br><span class="line">        command-&gt;<span class="built_in">execute</span>(actor);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="享元模式">享元模式</h2>
<p>将共有数据拿出来分离到一个类中</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TreeModel</span> &#123;</span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    Mesh mesh;</span><br><span class="line">    Texture bark;</span><br><span class="line">    Texture leaves;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tree</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    TreeModel* model;</span><br><span class="line"></span><br><span class="line">    Vector position;</span><br><span class="line">    <span class="type">double</span> height;</span><br><span class="line">    <span class="type">double</span> thickness;</span><br><span class="line">    Color barkTint;</span><br><span class="line">    Color leafrint;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="观察者模式">观察者模式</h2>
<p>成就系统?</p>
<p>观察者模式与事件系统的区别 观察者模式: 观察做了有趣事情的事物 事件系统: 观察的对象代表了发生的有趣事情</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Observer</span>() &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">onNotify</span><span class="params">(<span class="type">const</span> Entity&amp; entity, Event event)</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Achievements</span> : <span class="keyword">public</span> Observer &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">onNotify</span><span class="params">(<span class="type">const</span> Entity&amp; entity, Event event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (event) &#123;</span><br><span class="line">        <span class="keyword">case</span> EVENT_ENTITY_FELL:</span><br><span class="line">            <span class="keyword">if</span> (entity.<span class="built_in">isHero</span>() &amp;&amp; heroIsOnBridge_) &#123;</span><br><span class="line">                <span class="built_in">unlock</span>(ACHIEVEMENT_FELL_OFF_BRIDGE);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">unlock</span><span class="params">(Achievements achievement)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">bool</span> heroIsOnBridge_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Subject</span> &#123;</span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    Observer* observers[MAX_OBSERVERS];</span><br><span class="line">    <span class="comment">//也可以使用链表</span></span><br><span class="line">    <span class="type">int</span> numObservers_;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addobserver</span><span class="params">(Observer* observer)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">removeObserver</span><span class="params">(Observer* observer)</span> </span>&#123;&#125;</span><br><span class="line">    <span class="comment">// 记得在析构函数中 removeObserver</span></span><br><span class="line">    <span class="comment">// &lt;&lt;失效监听者问题&gt;&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">notify</span><span class="params">(<span class="type">const</span> Entity&amp; entity, Event event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; numObservers_; i++) &#123;</span><br><span class="line">            observers[i]-&gt;<span class="built_in">onNotify</span>(entity, event);</span><br><span class="line">            <span class="comment">//这里, 观察者会阻塞被观察者</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Physics</span> : <span class="keyword">public</span> Subject &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">updateEntity</span><span class="params">(Entity&amp; entity)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line">physics.<span class="built_in">entityFell</span>().<span class="built_in">addObserver</span>(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure>
<h2 id="原型模式">原型模式</h2>
<p>思路: 一个对象可以产生出与他自己相近的对象</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Monster</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Monster</span>() &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> Monster* <span class="title">clone</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Ghost</span> : <span class="keyword">public</span> Monster &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Ghost</span>(<span class="type">int</span> health, <span class="type">int</span> speed) : <span class="built_in">health_</span>(health), <span class="built_in">speed_</span>(speed) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> Monster* <span class="title">clone</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Ghost</span>(health_, speed_); &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> health_;</span><br><span class="line">    <span class="type">int</span> speed_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> Monster* (*SpawnCallback)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Spawner</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Spawner</span>(SpawnCallback spawn) : <span class="built_in">spawn_</span>(spawn) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Monster* <span class="title">spawnMonster</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">spawn_</span>(); &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    SpawnCallback spawn_;</span><br><span class="line">&#125;;</span><br><span class="line">Spawner* ghostSpawner = <span class="keyword">new</span> <span class="built_in">Spawner</span>(spawnGhost);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//template</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Spawner_template</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Spawner_template</span>() &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> Monster* <span class="title">spawnMonster</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SpawnerFor</span> : <span class="keyword">public</span> Spawner_template &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> Monster* <span class="title">spawnMonster</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">T</span>(); &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Spawner_template* ghostSpawner2 = <span class="keyword">new</span> <span class="built_in">SpawnerFor</span>&lt;Ghost&gt;();</span><br></pre></td></tr></table></figure>
<h2 id="单例模式">单例模式</h2>
<p>保证一个类只有一个实例, 并且提供了访问该实例的全局访问点</p>
<p>劣势: 有全局变量, 理解函数更加困难, 促进了耦合的发生, 不利于并行</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">FileSystem</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> FileSystem&amp; <span class="title">instance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 这里可以加平台判断(继承)</span></span><br><span class="line">        <span class="type">static</span> FileSystem* instance = <span class="keyword">new</span> <span class="built_in">FileSystem</span>();</span><br><span class="line">        <span class="comment">// 或者使用惰性初始化 if null then new</span></span><br><span class="line">        <span class="keyword">return</span> *instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">FileSystem</span>() &#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>我们希望变量尽可能局部, 对象影响的范围越小越好</p>
<ol type="1">
<li><p>传进来(将带向作为参数传进函数), 但是例如"日志"这种横切面关注点不适合</p></li>
<li><p>从基类获得</p></li>
<li><p>从现有的全局中获取 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Game</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> Game&amp; <span class="title">instance</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> instance_; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Log&amp; <span class="title">getLog</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> *log_; &#125;</span><br><span class="line">    <span class="function">FileSystem&amp; <span class="title">getFileSystem</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> *fileSystem_; &#125;</span><br><span class="line">    <span class="function">AudioPlayer&amp; <span class="title">getAudioPlayer</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> *audioPlayer_; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    <span class="type">static</span> Game instance_;</span><br><span class="line"></span><br><span class="line">    Log* log_;</span><br><span class="line">    FileSystem* fileSystem_;</span><br><span class="line">    AudioPlayer* audioPlayer_;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p></li>
<li><p>服务定位器(见后)</p></li>
</ol>
<h2 id="状态模式">状态模式</h2>
<p>有限状态机</p>
<p>先处理状态, 再处理输入</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">State</span> &#123; STATE_STANDING, STATE_JUMPING, STATE_DUCKING, STATE_DIVING &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Heroine::handleInput</span><span class="params">(Input input)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (state_) &#123;</span><br><span class="line">    <span class="keyword">case</span> STATE_STANDING:</span><br><span class="line">        <span class="keyword">if</span> (input == PRESS_B) &#123;</span><br><span class="line">            state_ = STATE_JUMPING;</span><br><span class="line">            yVelocity_ = JUMP_VELOCITY;</span><br><span class="line">            <span class="built_in">setGraphics</span>(IMAGE JUMP);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (input == PRESS_DOWN) &#123;</span><br><span class="line">            state = STATE_DUCKING;</span><br><span class="line">            <span class="built_in">setGraphics</span>(IMAGE_DUCK);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> STATE_JUMPING:</span><br><span class="line">        <span class="keyword">if</span> (input == PRESS_DOWN) &#123;</span><br><span class="line">            state_ = STATE_DIVING;</span><br><span class="line">            <span class="built_in">setGraphics</span>(IMAGE_DIVE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> STATE_DUCKING:</span><br><span class="line">        <span class="keyword">if</span> (input == RELEASE_DOWN) &#123;</span><br><span class="line">            state_ = STATE_STANDING;</span><br><span class="line">            <span class="built_in">setGraphics</span>(IMAGE_STAND);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>OO 状态模式</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Heroine</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">handleInput</span><span class="params">(Input input)</span> </span>&#123;</span><br><span class="line">        HeroineState* state = state_-&gt;<span class="built_in">handleInput</span>(*<span class="keyword">this</span>, input);</span><br><span class="line">        <span class="keyword">if</span> (state != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">delete</span> state_;</span><br><span class="line">            state_ = state;</span><br><span class="line">            state_-&gt;<span class="built_in">enter</span>(*<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123; state_-&gt;<span class="built_in">update</span>(*<span class="keyword">this</span>); &#125;</span><br><span class="line">    <span class="comment">// other methods</span></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    HeroineState* state_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HeroineState</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">HeroineState</span>() &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">handleInput</span><span class="params">(Heroine&amp; heroine, Input input)</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">update</span><span class="params">(Heroine&amp; heroine)</span> </span>&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DuckingState</span> : <span class="keyword">public</span> HeroineState &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">DuckingState</span>() : <span class="built_in">chargeTime_</span>(<span class="number">0</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">handleInput</span><span class="params">(Heroine&amp; heroine, Input input)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (input == RELEASE_DOWN) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">StandingState</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">update</span><span class="params">(Heroine&amp; heroine)</span> </span>&#123;</span><br><span class="line">        chargeTime_++;</span><br><span class="line">        <span class="keyword">if</span> (chargeTime_ &gt; MAX_CHARGE) &#123;</span><br><span class="line">            heroine.<span class="built_in">superBomb</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> chargeTime_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StandingState</span> : <span class="keyword">public</span> HeroineState &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">enter</span><span class="params">(Heroines heroine)</span> </span></span><br><span class="line"><span class="function">    </span>&#123; heroine.<span class="built_in">setGraphics</span>(IMAGE_STAND); &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>此外还有</p>
<ul>
<li>并发状态机(多个并列状态机)</li>
<li>分层状态机(状态可以有父状态, 如果子状态没有处理, 就交给父状态)</li>
<li>下推自动机(将之前的状态存储在栈中, 例如开完火就弹出开火状态, 返回到之前的状态)</li>
</ul>
<h1 id="序列模式">序列模式</h1>
<h2 id="双缓冲模式">双缓冲模式</h2>
<p>使用两个帧缓冲</p>
<p>使用条件</p>
<ul>
<li>需要维护一些增量修改的状态</li>
<li>当修改到一半时, 状态可能被外部请求</li>
<li>想要防止请求状态的外部代码知道内部的工作方式</li>
<li>想要读取状态并且不想等修改完成</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Framebuffer</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Framebuffer</span>() &#123; <span class="built_in">clear</span>(); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; WIDTH * HEIGHT; i++) &#123;</span><br><span class="line">            pixels_[i] = WHITE;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">draw</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; pixels_[(WIDTH * y) + x] = BLACK; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">const</span> <span class="type">char</span>* <span class="title">getPixels</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> pixels_; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    <span class="type">static</span> <span class="type">const</span> <span class="type">int</span> WIDTH = <span class="number">160</span>;</span><br><span class="line">    <span class="type">static</span> <span class="type">const</span> <span class="type">int</span> HEIGHT = <span class="number">120</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> pixels_[WIDTH * HEIGHT];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Scene</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Scene</span>() : <span class="built_in">current_</span>(&amp;buffers_[<span class="number">0</span>]), <span class="built_in">next_</span>(&amp;buffers_[<span class="number">1</span>]) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        next_-&gt;<span class="built_in">clear</span>();</span><br><span class="line">        next_-&gt;<span class="built_in">draw</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">swap</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Framebuffer&amp; <span class="title">getBuffer</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> *current_; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Framebuffer* temp = current_;</span><br><span class="line">        current_ = next_;</span><br><span class="line">        next_ = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Framebuffer buffers_[<span class="number">2</span>];</span><br><span class="line">    Framebuffer* current_;</span><br><span class="line">    Framebuffer* next_;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<ul>
<li>交换缓冲区使用引用或指针</li>
<li>缓冲的粒度?</li>
</ul>
<h2 id="游戏循环">游戏循环</h2>
<p>游戏循环: 事件循环, 处理用户输入但是不等待他</p>
<p>一个循环就是一个 tick</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">while(true)&#123;</span><br><span class="line">	processInput();</span><br><span class="line">	update();</span><br><span class="line">	render();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但是如何以固定的速度运行游戏?</p>
<p>方案 1</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="type">double</span> start = <span class="built_in">getCurrentTime</span>();</span><br><span class="line">    <span class="built_in">processInput</span>();</span><br><span class="line">    <span class="built_in">update</span>();</span><br><span class="line">    <span class="built_in">render</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sleep</span>(start + MS_PER_FRAME - <span class="built_in">getCurrentTime</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>方案 2</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">double</span> lastTime = <span class="built_in">getCurrentTime</span>();</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="type">double</span> current = <span class="built_in">getCurrentTime</span>();</span><br><span class="line">    <span class="type">double</span> elapsed = current - lastTime;</span><br><span class="line">    <span class="built_in">processInput</span>();</span><br><span class="line">    <span class="built_in">update</span>(elapsed);</span><br><span class="line">    <span class="built_in">render</span>();</span><br><span class="line">    lastTime = current;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>方案 3</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">double</span> previous = <span class="built_in">getCurrentTime</span>();</span><br><span class="line"><span class="type">double</span> lag = <span class="number">0.0</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="type">double</span> current = <span class="built_in">getCurrentTime</span>();</span><br><span class="line">    <span class="type">double</span> elapsed = current - previous;</span><br><span class="line">    previous = current;</span><br><span class="line">    lag += elapsed;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">processInput</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (lag &gt;= MS_ PER_UPDATE) &#123;</span><br><span class="line">        <span class="built_in">update</span>();</span><br><span class="line">        lag -= MS_ PER_ UPDATE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">render</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="更新方法">更新方法</h2>
<p>对象独立, 跟着时间进行模拟<code>update()</code></p>
<p>每一帧, 游戏循环遍历集合, 在每个对象上调用 update()方法</p>
<p>(可能需要用到双缓冲, 可能需要传入消逝的时间)</p>
<h1 id="行为模式">行为模式</h1>
<h2 id="字节码解释器模式">字节码(解释器模式)</h2>
<p>将行为编码为虚拟机上的指令</p>
<p><strong>指令集</strong>定义可执行的底层操作 一系列指令被编码为<strong>字节序列</strong> (可以想象成, <strong>每个字节码代表一个指令, 高层只需要使用字节码就能编写高层行为</strong>) <strong>虚拟机</strong>(解释器, 对字节码进行解析, 输入字节码, 执行对应的指令, <strong>可以使用栈</strong>来存储字节码和参数)使用中间值堆栈执行这些指令 通过组合指令定义复杂<strong>高层行为</strong></p>
<h2 id="子类沙箱">子类沙箱</h2>
<p>用一系列由<strong>基类提供的操作</strong>定义子类中的行为</p>
<p>比如: 在基类中提供 protected 方法, 这些方法是可供子类使用的基本单元 子类只需要继承基类, 然后在用基类的基本方法实现自己的<code>activate()</code>方法</p>
<p>但是这会导致 <strong>脆弱的基类</strong>问题: 基类变得难以改变</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Superpower</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Superpower</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">activate</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">move</span><span class="params">(<span class="type">double</span> x, <span class="type">double</span> y, <span class="type">double</span> z)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">playSound</span><span class="params">(SoundId sound, <span class="type">double</span> volume)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//这里的实现可以转发给其他组件 engine</span></span><br><span class="line">      <span class="comment">//soundEngine_play (sound, volume);</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">//也可以返回对象, 减少基类复杂度</span></span><br><span class="line">      <span class="comment">//return soundPlayer;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">spawnParticles</span><span class="params">(ParticleType type, <span class="type">int</span> count)</span> </span>&#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="类型对象">类型对象</h2>
<p>让类 A 灵活的创造新类型, 类 A 的每个实例都代表了不同的对象类型</p>
<p>eg: 要创建多种 monster</p>
<p>本质上是将部分的类型系统从硬编码的继承结构拉出, 放到可以运行时定义的数据中, 但是这样定义类型相关的行为就会变得困难</p>
<p>典型的例子就是 <strong>虚函数表</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Breed</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Breed</span>(<span class="type">int</span> health, <span class="type">const</span> <span class="type">char</span>* attack) : <span class="built_in">health_</span>(health), <span class="built_in">attack_</span>(attack) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Monster* <span class="title">newMonster</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Monster</span>(*<span class="keyword">this</span>); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getHealth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (health_ != <span class="number">0</span> || parent_ == <span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">return</span> health_;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> parent_-&gt;<span class="built_in">getHealth</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">const</span> <span class="type">char</span>* <span class="title">getAttack</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> attack_; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> health_;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* attack_;</span><br><span class="line">    Breed* parent_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Monster</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">const</span> <span class="type">char</span>* <span class="title">getAttack</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> breed_.<span class="built_in">getAttack</span>(); &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">Monster</span>(Breed&amp; breed) : <span class="built_in">health_</span>(breed.<span class="built_in">getHealth</span>()), <span class="built_in">breed_</span>(breed) &#123;&#125;</span><br><span class="line">    <span class="type">int</span> health_;</span><br><span class="line">    Breed&amp; breed_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Monster* monster = someBreed.<span class="built_in">newMonster</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="解耦模式">解耦模式</h1>
<h2 id="组件模式">组件模式</h2>
<p>允许单一实体 跨越多个领域 而不导致这些领域彼此耦合</p>
<p>但是这样会导致: 对象需要实例化初始化, 正确的连接, 不同组件间沟通会有困难, 控制他们如何使用内存会更复杂</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Bjorn</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> velocity;</span><br><span class="line">    <span class="type">int</span> x, Y;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(World&amp; world, Graphics&amp; graphics)</span> </span>&#123;</span><br><span class="line">        input_.<span class="built_in">update</span>(*<span class="keyword">this</span>);</span><br><span class="line">        physics_.<span class="built_in">update</span>(*<span class="keyword">this</span>, world);</span><br><span class="line">        graphics_.<span class="built_in">update</span>(*<span class="keyword">this</span>, graphics);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    InputComponent* input_;</span><br><span class="line">    PhysicsComponent physics_;</span><br><span class="line">    GraphicsComponent graphics_;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="事件队列">事件队列</h2>
<p>解耦发出消息的时间 和 处理他的时间</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (running) &#123;</span><br><span class="line">    Event event = <span class="built_in">getNextEvent</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>环形队列</p>
<p>等等(?)</p>
<h2 id="服务定位器">服务定位器</h2>
<p>提供服务的全局接入点, 避免使用者和服务类耦合</p>
<p><strong>服务类</strong>定义了操作的抽象接口, 分离的<strong>服务定位器</strong>提供查询获取服务的方法, 同时隐藏服务提供者的具体细节和定位它的过程</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ConsoleAudio</span> : <span class="keyword">public</span> Audio &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">playSound</span><span class="params">(<span class="type">int</span> soundID)</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">stopSound</span><span class="params">(<span class="type">int</span> soundID)</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">stopAllSounds</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Locator</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">initialize</span><span class="params">()</span> </span>&#123; service_ = &amp;nullService_; &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="type">static</span> Audio&amp; <span class="title">getAudio</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> *service_; &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">provide</span><span class="params">(Audio* service)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (service == <span class="literal">NULL</span>) </span><br><span class="line">            service = &amp;nullService_;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            service_ = service;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    <span class="type">static</span> Audio* service_;</span><br><span class="line">    <span class="type">static</span> NullAudio nullService_;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>日志系统的实现</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LoggedAudio</span> : <span class="keyword">public</span> Audio &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">LoggedAudio</span>(Audio&amp; wrapped) : <span class="built_in">wrapped_</span>(wrapped) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">playSound</span><span class="params">(<span class="type">int</span> soundID)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">log</span>(<span class="string">&quot;play sound&quot;</span>);</span><br><span class="line">        wrapped_.<span class="built_in">playSound</span>(soundID);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">stopSound</span><span class="params">(<span class="type">int</span> soundID)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">log</span>(<span class="string">&quot;stop sound&quot;</span>);</span><br><span class="line">        wrapped_.<span class="built_in">stopSound</span>(soundID);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">stopAllSounds</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">log</span>(<span class="string">&quot;stop all sounds&quot;</span>);</span><br><span class="line">        wrapped_.<span class="built_in">stopAllSounds</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">log</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* message)</span> </span>&#123;&#125;</span><br><span class="line">    Audio&amp; wrapped_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">enableAudioLogging</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Audio* service = <span class="keyword">new</span> <span class="built_in">LoggedAudio</span>(Locator::<span class="built_in">getAudio</span>());</span><br><span class="line">    Locator::<span class="built_in">provide</span>(service);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>反射?: 编程语言在运行时与类型系统打交道的能力</p>
<h1 id="优化模式">优化模式</h1>
<h2 id="数据局部性">数据局部性</h2>
<p>cpu 缓存</p>
<p>c++ 中的指针访问, 虚函数都会导致内存访问不连续</p>
<p>冷/热分割</p>
<h2 id="脏标识模式">脏标识模式</h2>
<p>将工作延期至需要其结果才去执行, 避免不必要的工作</p>
<h2 id="对象池模式">对象池模式</h2>
<p>放弃单独的分配和释放对象, 从固定的池中重用对象</p>
<h2 id="空间分区">空间分区</h2>
<p>将对象根据位置存储在数据结构中, 来高效的定位对象</p>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>public</tag>
        <tag>virtual</tag>
        <tag>state</tag>
        <tag>void</tag>
        <tag>filesystem</tag>
      </tags>
  </entry>
  <entry>
    <title>自顶向下读书笔记</title>
    <url>/2022/08/5f9009e5e107.html</url>
    <content><![CDATA[<blockquote>

</blockquote>
<span id="more"></span>
<h1 id="目录">目录</h1>
<h2 id="computer-networks-and-the-internet">1 Computer Networks and the Internet</h2>
<p>1.1 What Is the Internet?</p>
<p>1.1.1 A Nuts-and-Bolts Description</p>
<p>host/end system, connected by communication links &amp; packet switches</p>
<p>Link-layer switches are typically used in access networks, while routers are typically used in the network core</p>
<p>ISP</p>
<p>1.1.2 A Services Description</p>
<p>API</p>
<p>1.1.3 What Is a Protocol?</p>
<p>1.2 The Network Edge</p>
<p>1.2.1 Access Networks : host+first router</p>
<p>home access</p>
<ul>
<li>DSL(telephone) cable(TV, HFC) FTTH(optical) Satellite</li>
</ul>
<p>enterprise access</p>
<ul>
<li>LAN(Ethernet, wifi, 蜂窝)</li>
</ul>
<p>1.2.2 Physical Media</p>
<table>
<thead>
<tr class="header">
<th>access</th>
<th>media</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>DSL</td>
<td>twisted-pair copper wire</td>
</tr>
<tr class="even">
<td>HFC</td>
<td>coaxial cable</td>
</tr>
<tr class="odd">
<td>FTTH</td>
<td>fiber optics</td>
</tr>
</tbody>
</table>
<p>1.3 The Network Core</p>
<p>1.3.1 Packet Switching</p>
<ul>
<li>store and forward</li>
<li>delay</li>
<li>route</li>
</ul>
<p>1.3.2 Circuit Switching</p>
<p>traditional telephone network</p>
<p>1.3.3 A Network of Networks</p>
<ul>
<li>ISP</li>
</ul>
<p>1.4 Delay, Loss, and Throughput in Packet-Switched Networks</p>
<p>1.4.1 Overview of Delay in Packet-Switched Networks</p>
<ul>
<li>processing delay, queuing delay, transmission delay, propagation delay</li>
</ul>
<p>1.4.2 Queuing Delay and Packet Loss</p>
<ul>
<li>traffic intensity La/R</li>
</ul>
<p>1.4.3 End-to-End Delay</p>
<p>1.4.4 Throughput in Computer Networks</p>
<p>bit per second</p>
<p>bottleneck link</p>
<p>1.5 Protocol Layers and Their Service Models 47</p>
<p>1.5.1 Layered Architecture 47</p>
<ul>
<li>5 application transport network link physical</li>
<li>5 message消息 segment报文段 datagram数据报 frame帧 bit</li>
<li>7OSI Application presentation session transport network link physical</li>
</ul>
<p>1.5.2 Encapsulation 53</p>
<p>1.6 Networks Under Attack 55</p>
<p>malware</p>
<p>viruses: malware requir user interaction</p>
<p>worms: malware without user interaction</p>
<p>DoS(denial of service)</p>
<p>DDoS(distributed denial of service)</p>
<p>IP spoofing</p>
<p>1.7 History of Computer Networking and the Internet</p>
<p>1.7.1 The Development of Packet Switching: 1961–1972</p>
<p>1.7.2 Proprietary Networks and Internetworking: 1972–1980</p>
<p>1.7.3 A Proliferation of Networks: 1980–1990</p>
<p>1.7.4 The Internet Explosion: The 1990s</p>
<p>1.7.5 The New Millennium</p>
<p>1.8 Summary 66</p>
<h2 id="application-layer">2 Application Layer</h2>
<p>2.1 Principles of Network Applications</p>
<p>2.1.1 Network Application Architectures</p>
<ul>
<li>C/S p2p</li>
<li>客户端是发起连接的, 服务端是等待被连接的</li>
</ul>
<p>2.1.2 Processes Communicating</p>
<ul>
<li><p>socket 是应用层和传输层的接口</p>
<p>a socket is the interface between <strong>the application layer and the transport layer within a host</strong>. It is also referred to as the Application Programming Inter- face <strong>(API) between the application and the network</strong>.</p></li>
</ul>
<p>2.1.3 Transport Services Available to Applications</p>
<p>internet 不提供 throughput 和 timing 保障</p>
<p>2.1.4 Transport Services Provided by the Internet</p>
<ul>
<li>UDP TCP SSL(<em>?</em>), ssl 是 tcp 在应用层的加强(but instead is an enhancement of TCP, with the enhancements being implemented in the application layer)</li>
</ul>
<p>2.1.5 Application-Layer Protocols</p>
<p>2.1.6 Network Applications Covered in This Book</p>
<p>2.2 The Web and HTTP</p>
<p>2.2.1 Overview of HTTP</p>
<p>TCP</p>
<p>Because an HTTP server maintains no information about the clients, HTTP is said to be a stateless protocol</p>
<p>2.2.2 Non-Persistent and Persistent(closed when timeout) Connections</p>
<ul>
<li><p>每一个请求是开一个新的 tcp 连接还是可继续使用之前的 tcp 连接</p></li>
<li><p>RTT round trip time</p></li>
<li><p>three way handshake</p></li>
</ul>
<h3 id="http-message-format">2.2.3 HTTP Message Format</h3>
<p>ASCII</p>
<p>1 request line get post head put delete</p>
<p><strong>head</strong></p>
<p>The HTTP HEAD method requests <a href="https://reqbin.com/Article/HttpHeaders">HTTP headers</a> from the server as if the document was requested using the <a href="https://reqbin.com/Article/HttpGet">HTTP GET</a> method. The only difference between HTTP HEAD and GET requests is that for HTTP HEAD, the server only returns headers without body.</p>
<p><strong>Both PUT and POST can be used for creating.</strong></p>
<p>You have to ask, "what are you performing the action upon?", to distinguish what you should be using. Let's assume you're designing an API for asking questions. If you want to use POST, then you would do that to a list of questions. If you want to use PUT, then you would do that to a particular question.</p>
<p><strong>Great, both can be used, so which one should I use in my RESTful design:</strong></p>
<p>Some considerations:</p>
<ul>
<li>Do you name the URL objects you create explicitly, or let the server decide? If you name them then use PUT. If you let the server decide then use POST.</li>
<li>PUT is defined to assume idempotency, so if you PUT <strong>an object twice, it should have no additional effect</strong>. This is a nice property, so I would use PUT when possible. Just make sure that the PUT-idempotency actually is implemented correctly in the server.</li>
<li>You can update or create a resource with PUT with the same object URL</li>
<li>With POST you can have 2 requests coming in at the same time making modifications to a URL, and they may update different parts of the object.</li>
</ul>
<p><strong>An example:</strong></p>
<p><strong>POST:</strong></p>
<p>Used to modify and update a resource</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /questions/&lt;existing_question&gt; HTTP/1.1</span><br><span class="line">Host: www.example.com/</span><br></pre></td></tr></table></figure>
<p>Note that the following is an error:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /questions/&lt;new_question&gt; HTTP/1.1</span><br><span class="line">Host: www.example.com/</span><br></pre></td></tr></table></figure>
<p>If the URL is not yet created, you should not be using POST to create it while specifying the name. This should result in a 'resource not found' error because <code>&lt;new_question&gt;</code> does not exist yet. You should PUT the <code>&lt;new_question&gt;</code> resource on the server first.</p>
<p>You could though do something like this to create a resources using POST:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /questions HTTP/1.1</span><br><span class="line">Host: www.example.com/</span><br></pre></td></tr></table></figure>
<p>Note that in this case the resource name is not specified, the new objects URL path would be returned to you.</p>
<p><strong>PUT:</strong></p>
<p>Used to create a resource, or overwrite it. While you specify the resources new URL.</p>
<p>For a new resource:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PUT /questions/&lt;new_question&gt; HTTP/1.1</span><br><span class="line">Host: www.example.com/</span><br></pre></td></tr></table></figure>
<p>To overwrite an existing resource:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PUT /questions/&lt;existing_question&gt; HTTP/1.1</span><br><span class="line">Host: www.example.com/</span><br></pre></td></tr></table></figure>
<p><strong>4.3.4. PUT</strong></p>
<p>The PUT method requests that the state of the target resource be <code>created</code> or <code>replaced</code> with the state defined by the representation enclosed in the request message payload.</p>
<p>2-5 header lines</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/dir/page.html</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>xxx </span><br><span class="line"><span class="attribute">connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">user-agent</span><span class="punctuation">: </span>mozilla/5.0</span><br><span class="line"><span class="attribute">accept-language</span><span class="punctuation">: </span>fr</span><br><span class="line"></span><br><span class="line"><span class="language-vhdl">(<span class="keyword">entity</span> <span class="keyword">body</span>)</span></span><br></pre></td></tr></table></figure>
<ol type="1">
<li>post 只能对已经存在url使用</li>
</ol>
<p>response</p>
<p>status code</p>
<p>101 switching protocols</p>
<p>200 ok</p>
<p>301 Moved Permanently</p>
<p>302 move temperory</p>
<p>304 not modified 不返回资源</p>
<p>305 use proxy</p>
<p>308 Permanent Redirect</p>
<p>400 bad request</p>
<p>401 unauthorized</p>
<p>403 forbidden 状态码意为服务器成功解析请求但是客户端没有访问该资源的权限</p>
<p>404 not found</p>
<p>405 method no allowed</p>
<p>408 request timeout</p>
<p><strong><code>500 Internal Server Error</code></strong></p>
<p>501 not implement</p>
<p>502 bad gateway</p>
<p>504 gateway timeout</p>
<p>505 http version ot supported</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">date</span><span class="punctuation">: </span>xxx</span><br><span class="line"><span class="attribute">server</span><span class="punctuation">: </span>Apache/2.2.3 (centos)</span><br><span class="line"><span class="attribute">last-modified</span><span class="punctuation">: </span>xxx</span><br><span class="line"><span class="attribute">content-length</span><span class="punctuation">: </span>2000</span><br><span class="line"><span class="attribute">content-type</span><span class="punctuation">: </span>text/html</span><br><span class="line"></span><br><span class="line"><span class="language-vhdl">(<span class="keyword">entity</span> <span class="keyword">body</span>)</span></span><br></pre></td></tr></table></figure>
<h3 id="user-server-interaction-cookies">2.2.4 User-Server Interaction: Cookies</h3>
<ul>
<li>cookie 组成
<ul>
<li>Cookie: from user to server</li>
<li>Set-Cookie: from server to user</li>
<li>cookie 文件 in user</li>
<li>cookie db in server</li>
</ul></li>
<li>cookie 过程
<ol type="1">
<li>c: request</li>
<li>s: set-cookie, entry in db</li>
<li>c: cookie</li>
<li>s: identify in db, response</li>
</ol></li>
</ul>
<p>2.2.5 Web Caching</p>
<p>also called proxy server</p>
<p>2.2.6 The Conditional GET 114</p>
<ul>
<li>If-Modified-Since: from web cache to server</li>
</ul>
<p>2.3 File Transfer: FTP</p>
<p>TCP, maintain state, 7-bit ASCII</p>
<p>2.3.1 FTP Commands and Replies</p>
<p>(first) control connection persistent</p>
<p>(then) data connection not persistent</p>
<p>??????这里请继续</p>
<p>2.4 Electronic Mail in the Internet</p>
<p>2.4.1 SMTP 121</p>
<p>2.4.2 Comparison with HTTP 124</p>
<ul>
<li>http pull, smtp push</li>
</ul>
<p>2.4.3 Mail Message Format 125</p>
<p>2.4.4 Mail Access Protocols 125</p>
<ul>
<li>pop3, imap, http</li>
</ul>
<p>2.5 DNS—The Internet’s Directory Service</p>
<p>2.5.1 Services Provided by DNS</p>
<p>distributed databas, UDP, port 53</p>
<p>2.5.2 Overview of How DNS Works</p>
<ul>
<li>root server, TLD dns server(top-level domain), authoritative dns server, local dns server</li>
<li>cache</li>
</ul>
<p>2.5.3 DNS Records and Messages</p>
<ul>
<li>(name, value, type, ttl)</li>
<li>type
<ul>
<li>A hostname - ip</li>
<li>NS domain(com) - authoritative dns server</li>
<li>CNAME alias hostname - canonical hostname</li>
<li>MX alias hostname - mail server canonical hostname</li>
</ul></li>
</ul>
<p>??????请继续</p>
<p>2.6 Peer-to-Peer Applications</p>
<p>2.6.1 P2P File Distribution</p>
<ul>
<li>bittorrent, tracker --&gt; torrent</li>
<li>principle: tit for tat
<ol type="1">
<li>rarest first, request the rarest chunk first</li>
<li>highest rate, response the neighbors who supplying data at the highest rate</li>
</ol></li>
</ul>
<p>2.6.2 Distributed Hash Tables (DHTs) 151</p>
<p>2.7 Socket Programming: Creating Network Applications</p>
<p>2.7.1 Socket Programming with UDP</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line">serverName = <span class="string">&#x27;hostname&#x27;</span></span><br><span class="line">serverPort = <span class="number">12000</span></span><br><span class="line">clientSocket = socket(AF_INET, SOCK_DGRAM)</span><br><span class="line">message = <span class="string">&quot;?&quot;</span></span><br><span class="line">clientSocket.sendto(message, (serverName, serverPort))</span><br><span class="line">response, serverAddress = clientSocket.recvfrom(<span class="number">2048</span>)</span><br><span class="line"><span class="comment">#2048buffer</span></span><br><span class="line">clientSocket.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line">serverPort = <span class="number">12000</span></span><br><span class="line">serverSocket = socket(AF_INET, SOCK_DGRAM)</span><br><span class="line">serverSocket.bind((<span class="string">&#x27;&#x27;</span>, serverPort))</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    message, clientAddress = serverSocket.recvfrom(<span class="number">2048</span>)</span><br><span class="line">    serverSocket.sendto(<span class="string">&quot;!&quot;</span>, clientAddress)</span><br></pre></td></tr></table></figure>
<p>2.7.2 Socket Programming with TCP</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line">serverName = <span class="string">&#x27;hostname&#x27;</span></span><br><span class="line">serverPort = <span class="number">12000</span></span><br><span class="line">clientSocket = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">clientSocket.connect((serverName, serverPort))</span><br><span class="line">message = <span class="string">&quot;?&quot;</span></span><br><span class="line">clientSocket.send(message)</span><br><span class="line">response = clientSocket.recv(<span class="number">2048</span>)</span><br><span class="line">clientSocket.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line">serverPort = <span class="number">12000</span></span><br><span class="line">serverSocket = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">serverSocket.bind((<span class="string">&#x27;&#x27;</span>, serverPort))</span><br><span class="line">serverSocket.listen(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 1 代表队列中的连接数(连接数最小为 1)</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    connectionSocket, addr = serverSocket.accept()</span><br><span class="line">    message = connectionSocket.recv(<span class="number">2048</span>)</span><br><span class="line">    connectionSocket.send(<span class="string">&quot;!&quot;</span>)</span><br><span class="line">    connectionSocket.close()</span><br></pre></td></tr></table></figure>
<p>2.8 Summary</p>
<h2 id="transport-layer">3 Transport Layer</h2>
<p>3.1 Introduction and Transport-Layer Services</p>
<p>3.1.1 Relationship Between Transport and Network Layers</p>
<p>transport layer: logical communication between processes</p>
<p>network layer: provide communication between hosts</p>
<p>3.1.2 Overview of the Transport Layer in the Internet</p>
<p>segment</p>
<p>3.2 Multiplexing and Demultiplexing 191</p>
<ul>
<li>port</li>
<li>udp socket is identified by dest-IP and dest-port tcp socket is identified by dest-IP, dest-port, source-IP and source-port</li>
</ul>
<p>3.3 Connectionless Transport: UDP 198</p>
<p>UDP 使用场景: 语音视频通话, dns, 流媒体</p>
<p>3.3.1 UDP Segment Structure 202</p>
<p>3.3.2 UDP Checksum 202</p>
<ul>
<li>16 位循环累加, 进位循环到最低位, 最后取反 = checksum</li>
</ul>
<p>3.4 Principles of Reliable Data Transfer 204</p>
<p>3.4.1 Building a Reliable Data Transfer Protocol 206</p>
<table>
<colgroup>
<col style="width: 8%" />
<col style="width: 30%" />
<col style="width: 61%" />
</colgroup>
<thead>
<tr class="header">
<th>version</th>
<th>problem</th>
<th>enhancement</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1.0</td>
<td>underlying completely reliable</td>
<td>nothing</td>
</tr>
<tr class="even">
<td>2.0</td>
<td>bit errors</td>
<td>ARQ(automatic repeat request)<br />stop and wait</td>
</tr>
<tr class="odd">
<td>2.1</td>
<td>corrupted ACK, NAK</td>
<td>sequence number</td>
</tr>
<tr class="even">
<td>2.2</td>
<td>two acknowledge</td>
<td>duplicate ACKs</td>
</tr>
<tr class="odd">
<td>3.0</td>
<td>lose packet</td>
<td>timers</td>
</tr>
<tr class="even">
<td>pipeline</td>
<td>stop and wait</td>
<td>pipeline</td>
</tr>
<tr class="odd">
<td>GBN</td>
<td>pipeline</td>
<td>more sequence number<br />sliding window protocol<br />only one timer<br />receiver no buffer</td>
</tr>
<tr class="even">
<td>SR</td>
<td>GBN resend all</td>
<td>each packet own a timer<br /></td>
</tr>
</tbody>
</table>
<p>3.4.2 Pipelined Reliable Data Transfer Protocols 215</p>
<h3 id="go-back-n-gbn">3.4.3 Go-Back-N (GBN)</h3>
<figure>
<img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h6da6fbs00j20nc07o0t5.jpg" alt="截屏2022-09-20 19.11.05" /><figcaption aria-hidden="true">截屏2022-09-20 19.11.05</figcaption>
</figure>
<figure>
<img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h6da4rjxabj20u00zntc5.jpg" alt="截屏2022-09-20 19.09.28" /><figcaption aria-hidden="true">截屏2022-09-20 19.09.28</figcaption>
</figure>
<h3 id="selective-repeat-sr-223">3.4.4 Selective Repeat (SR) 223</h3>
<table>
<colgroup>
<col style="width: 18%" />
<col style="width: 34%" />
<col style="width: 44%" />
<col style="width: 4%" />
</colgroup>
<thead>
<tr class="header">
<th>属性</th>
<th>GBN</th>
<th>SR</th>
<th>TCP</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>timer</td>
<td>only one in sender</td>
<td>each packet own a timer</td>
<td>1</td>
</tr>
<tr class="even">
<td>receiver buffer</td>
<td>no</td>
<td>yes</td>
<td></td>
</tr>
<tr class="odd">
<td>sender attribute</td>
<td>next sequence, base, window size N</td>
<td>next sequence, base, window size N, ACK list</td>
<td></td>
</tr>
<tr class="even">
<td>receiver attribute</td>
<td>expect sequence</td>
<td>next sequence, base, window size N</td>
<td></td>
</tr>
</tbody>
</table>
<p>TCP: sender: 如果 timeout, 只发送最小未被 ack 的包, 不继续</p>
<p>3.5 Connection-Oriented Transport: TCP 230</p>
<p>3.5.1 The TCP Connection 231</p>
<ul>
<li>three way handshake</li>
</ul>
<p>3.5.2 TCP Segment Structure 233</p>
<figure>
<img src="../../../../../Library/Application%20Support/typora-user-images/截屏2022-09-29%2013.42.52.png" alt="截屏2022-09-29 13.42.52" /><figcaption aria-hidden="true">截屏2022-09-29 13.42.52</figcaption>
</figure>
<p>3.5.3 Round-Trip Time Estimation and Timeout</p>
<ul>
<li>sample RTT The way it takes RTT samples is by using a timer to meassure the time it takes for a packet to be sent and the acknowledgment for that particular packet to be received again. This means it can take a new sample every RTT. By using the timestamp TCP option, it is also possible to use every ack as a sample.</li>
<li>estimatedRTT = (1-α) * estimatedRTT + α * sampleRTT α = 0.125</li>
<li>deviationRTT = (1-β) * deviationRTT + β * |sampleRTT - estimatedRTT| β = 0.25</li>
<li>TimeoutInterval = estimatedRTT + 4 * deviationRTT</li>
</ul>
<h3 id="reliable-data-transfer">3.5.4 Reliable Data Transfer</h3>
<ul>
<li><p>a single retransmission timer</p></li>
<li><p>each time retransmite, double timeout</p></li>
<li><p>sender 收到三次冗余 ack, 马上重传</p>
<p>冗余 ACK, 快速重传: When a TCP receiver receives a segment with a <strong>sequence number that is larger than the next, expected</strong>, in-order sequence number, it detects a gap in the data stream—that is, a missing segment. it simply reacknowledges (that is, generates a duplicate ACK for) the last in-order byte of data it has received.</p></li>
</ul>
<h3 id="flow-control">3.5.5 Flow Control</h3>
<ul>
<li><p>将 sender 发送数据的速度和 receiver 应用读取的速度匹配</p>
<p><strong>sender's receive window</strong></p>
<p><strong>receiver's last_byte_received, last_byte_read</strong></p>
<ul>
<li><strong>receive_window = receive_buffer - (last_byte_received - last_byte_read)</strong>,</li>
<li>receiver tells sender the receive_window every segment,</li>
<li>sender keeps tracking last_byte_sent and last_byte_acked, keeping <strong>(last_byte_sent - last_byte_acked) &lt; receive_window</strong></li>
</ul></li>
</ul>
<h3 id="tcp-connection-management">3.5.6 TCP Connection Management</h3>
<ul>
<li>three-way-handshake
<ol type="1">
<li>c: SYN, random initial sequnce number = x, SYN = 1</li>
<li>s: SYNACK, allocate TCP variables and buffer, initial sequence number = y, SYN = 1, ACK = x+1</li>
<li>c: SYN = 0, allocate variables and buffer, carry payload, sequence number = x + 1, ACK = y+1</li>
</ol></li>
<li>四次挥手
<ol type="1">
<li>c: FIN = 1, c-&gt;FIN_WAIT_1</li>
<li>s: ACK, c-&gt;FIN_WAIT_2, s-&gt;CLOSE_WAIT, 可能是半关闭状态</li>
<li>s: FIN = 1, c-&gt;TIME_WAIT, s-&gt;LAST_ACK</li>
<li>c: ACK, wait 30s(2MSL), release resourses</li>
</ol></li>
<li>SYN cookie: server 的 initial seqnum 是 SYN segment 的 sourse dest ip port 做的 hash function(即 cookie) 当 client 发回 SYNACK 时, 用 hash function 再次计算, 如果得到的值和 ack 一样, 那么说明之前已经有过半连接</li>
</ul>
<p>3.6 Principles of Congestion Control</p>
<p>3.6.1 The Causes and the Costs of Congestion 259</p>
<p>3.6.2 Approaches to Congestion Control</p>
<p>3.6.3 Network-Assisted Congestion-Control Example: ATM ABR Congestion Control 266</p>
<h3 id="tcp-congestion-control">3.7 TCP Congestion Control</h3>
<ul>
<li><p>sender how to limit rate</p>
<p>change congestion window(cwnd)</p>
<p>lastbytesent - lastbyteacked &lt;= min(cwnd, rwnd)</p></li>
<li><p>how sender perceives congestion</p>
<p>快速重传(3acks)</p></li>
<li><p>algorithm</p>
<ul>
<li><p>slow start</p>
<p>cwnd initialized small 每当收到正确 ack 就增长(宏观指数增长) 1 mss per ack</p>
<p>ssthresh(slow start threshold)</p></li>
<li><p>congestion avoidance</p>
<p>超过 ssthresh 后线性增长</p>
<p>1 mss/cwnd per ack</p>
<p>当快速重传时, ssthresh = cwnd/2, cwnd = cwnd/2</p>
<p>when cwnd == ssthresh, 进入 congestion avoidance 阶段</p>
<p>cwnd 减半 increase cwnd 1 MSS every RTT</p></li>
<li><p>fast recovery: TCP Reno cwnd减半 而不是变为 1 然后指数增长</p></li>
</ul></li>
</ul>
<figure>
<img src="https://pic4.zhimg.com/80/v2-5f4034bc11c3a48a1d1a115f9ee0259b_1440w.jpg" alt="img" /><figcaption aria-hidden="true">img</figcaption>
</figure>
<p>3.7.1 Fairness 279</p>
<p>3.8 Summary 283</p>
<h2 id="the-network-layer">4 The Network Layer</h2>
<p>host to host</p>
<p>4.1 Introduction</p>
<p>4.1.1 Forwarding and Routing</p>
<p>4.1.2 Network Service Models</p>
<p>4.2 Virtual Circuit and Datagram Networks</p>
<p>4.2.1 Virtual-Circuit Networks</p>
<p>4.2.2 Datagram Networks</p>
<p>4.2.3 Origins of VC and Datagram Networks</p>
<p>4.3 What’s Inside a Router?</p>
<p>input port, switch fabric, output port, routing forward</p>
<p>4.3.1 Input Processing 322</p>
<p>4.3.2 Switching 324</p>
<p>4.3.3 Output Processing 326</p>
<p>4.3.4 Where Does Queuing Occur? 327</p>
<p>4.3.5 The Routing Control Plane 331</p>
<p>4.4 The Internet Protocol (IP): Forwarding and Addressing in the Internet</p>
<p>4.4.1 Datagram Format</p>
<figure>
<img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h6nbym7o2zj20kw0gqt9v.jpg" alt="截屏2022-09-28 22.27.41" /><figcaption aria-hidden="true">截屏2022-09-28 22.27.41</figcaption>
</figure>
<p>IP Datagram Fragmentation(in end system)</p>
<p>The maximum amount of data that a <strong>link-layer frame</strong> can carry is called the <strong>maximum transmission unit (MTU)</strong>.</p>
<h3 id="ipv4-addressing">4.4.2 IPv4 Addressing</h3>
<p>32=8*4</p>
<p>233.1.1.0/24 /24 is subnet mask, 意味着左边 24 位定义了子网的地址</p>
<p>To determine the subnets, detach each interface from its host or router, creating islands of isolated networks, with interfaces terminating the end points of the isolated networks. Each of these isolated networks is called a subnet.</p>
<p>CIDR(classless interdomain routing)</p>
<p>a.b.c.d/x 外界路由只需要记录前缀</p>
<h4 id="dhcpdynamic-host-configuration-protocol">DHCP(dynamic host configuration protocol)</h4>
<ol type="1">
<li>DHCP discover message, udp packet at port 67 broadcast source:0.0.0.0</li>
<li>DHCP offer message broadcast</li>
<li>DHCP request choose an offer</li>
<li>DHCP ACK</li>
</ol>
<h4 id="natnetwork-address-translation">NAT(network address translation)</h4>
<p>公用 ip+port -&gt; 私有 ip+port 的映射</p>
<p>NAT translation table</p>
<p>NAT 内的 host 可以主动向外连接, 但外界无法主动连接到 NAT内部</p>
<h3 id="internet-control-message-protocol-icmp">4.4.3 Internet Control Message Protocol (ICMP)</h3>
<p>lies above ip, icmp message carried inside ip datagram</p>
<p>ICMP messages have a type and a code field, and contain the header and the first 8 bytes of the IP datagram that caused the ICMP message to be generated in the first place</p>
<p>ping: icmp type 8 code 0</p>
<p>traceroute</p>
<h3 id="ipv6">4.4.4 IPv6</h3>
<figure>
<img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h6ncqo5fjyj20t40iswfu.jpg" alt="截屏2022-09-29 12.15.24" /><figcaption aria-hidden="true">截屏2022-09-29 12.15.24</figcaption>
</figure>
<p>4.4.5 A Brief Foray into IP Security 362</p>
<p>4.5 Routing Algorithms 363</p>
<p>4.5.1 The Link-State (LS) Routing Algorithm 366</p>
<p>4.5.2 The Distance-Vector (DV) Routing Algorithm 371</p>
<p>4.5.3 Hierarchical Routing 379</p>
<p>4.6 Routing in the Internet 383</p>
<p>4.6.1 Intra-AS Routing in the Internet: RIP 384</p>
<p>4.6.2 Intra-AS Routing in the Internet: OSPF 388</p>
<p>4.6.3 Inter-AS Routing: BGP 390</p>
<p>4.7 Broadcast and Multicast Routing 399</p>
<p>4.7.1 Broadcast Routing Algorithms 400 4.7.2 Multicast 405</p>
<p>4.8 Summary 412</p>
<p>Chapter 5 The Link Layer: Links, Access Networks, and LANs</p>
<p>5.1 Introduction to the Link Layer</p>
<p>5.1.1 The Services Provided by the Link Layer</p>
<p>5.1.2 Where Is the Link Layer Implemented? 5.2 Error-Detection and -Correction Techniques 5.2.1 Parity Checks 5.2.2 Checksumming Methods 5.2.3 Cyelic Redundancy Check (CRC) 5.3 Multiple Access Links and Protocols 5.3.1 Channel Partitioning Protocols 5.3.2 Random Access Protocols 5.3.3 Taking-Turns Protocols 5.3.4 DOCSIS: The Link-Layer Protocol for Cable Internet Access</p>
<p>5.4 Switched Local Area Networks</p>
<p>5.4.1 Link-Layer Addressing and ARP</p>
<p>5.4.2 Ethernet 5.4.3 Link-Layer Switches 5.4.4 Virtual Local Area Networks (VLANs) 5.5 Link Virtualization: A Network as 2 Link Layer 5.5.1 Multiprotocol Label Switching (MPLS) 5.6 Data Center Networking 5.7 Retrospective: A Day in the Life of a Web Page Request 5.7.1 Getting Started: DHCP, UDP, IP, and Etheret 5.7.2 Still Getting Started: DNS and ARP 5.7.3 Still Getting Started: Intra-Domain Routing to the DNS Server 5.7.4 Web Client-Server Interaction: TCP and HTTP 5.8 Summary</p>
<p>Chapter 6 Wireless and Mobile Networks 6.1 Introduction 6.2 Wireless Links and Network Characteristics 6.2.1 CDMA 6.3 WiFi: 802.11 Wireless LANs 6.3.1 The 802.11 Architecture 6.3.2 The 802.11 MAC Protocol 6.3.3 The IEEE 802.11 Frame 6.3.4 Mobility in the Same IP Subnet 6.3.5 Advanced Features in 802.11 6.3.6 Personal Area Networks: Bluetooth and Zigbee 6.4 Cellular Internet Access 6.4.1 An Overview of Cellular Network Architecture 6.4.2 3G Cellular Data Networks: Extending the Internet to Cellular Subscribers 6.4.3 On to 4G: LTE 6.5 Mobility Management: Principles 6.5.1 Addressing 6.5.2 Routing to a Mobile Node 6.6 Mobile IP 6.7 Managing Mobility in Cellular Networks 6.7.1 Routing Calls to a Mobile User 6.7.2 Handoffs in GSM</p>
<p>6.8 Wireless and Mobility: Impact on Higher-Layer Protocols 6.9 Summary</p>
<h2 id="security-in-computer-networks">8 Security in Computer Networks</h2>
<p>8.1 What Is Network Security?</p>
<ol type="1">
<li>encryped</li>
<li>integrity</li>
<li>end-point authentation</li>
</ol>
<p>8.2 Principles of Cryptography</p>
<p>8.2.1 Symmetric Key Cryptography</p>
<h3 id="public-key-encryption">8.2.2 Public Key Encryption</h3>
<p>public key to encrypt from sender to rcver</p>
<p>private key to decrypt</p>
<p>用公钥系统加密对称秘钥</p>
<p>8.3 Message Integrity and Digital Signatures</p>
<p>8.3.1 Cryptographic Hash Functions</p>
<p>MD5 127bits</p>
<p>SHA-1 160bits</p>
<h3 id="message-authentication-code-mac">8.3.2 Message Authentication Code (MAC)</h3>
<p>sender and rcver noth have a shared secret key s(authentication key)</p>
<p>sender has message m</p>
<p>hash func H()</p>
<ol type="1">
<li>sender create H(m+s) (which is called MAC)</li>
<li>sender send m+H(m+s)</li>
<li>rcver rcv m'+H(m+s), calculate h' = H(m'+s), compare h h'</li>
</ol>
<h3 id="digital-signatures">8.3.3 Digital Signatures</h3>
<p>sender want to sign a message s, sender has private key K<sup>-</sup></p>
<p>sender rcver both know sender's public key K<sup>+</sup></p>
<ol type="1">
<li>sender create K<sup>-</sup>(H(m)), send m+K<sup>-</sup>(H(m))</li>
<li>rcver rcv, decrypt K<sup>+</sup> [ K<sup>-</sup>(H(m)) ] get h</li>
<li>rcver calculate h' = H(m') compare h' h</li>
</ol>
<p>certification authority: A CA verifies that an entity (a person, a router, and so on) is who it says it is.</p>
<p>Once the CA verifies the identity of the entity, the CA creates <strong>a certificate that binds the public key of the entity to the identity.</strong> The certificate contains the public key and globally unique identifying information about the owner of the public key (for example, a human name or an IP address).</p>
<p>certification contains CA private key(bob'name bob's public key)</p>
<h3 id="end-point-authentication">8.4 End-Point Authentication</h3>
<p>8.4.1 Authentication Protocol ap1.0</p>
<p>8.4.2 Authentication Protocol ap2.0</p>
<p>8.4.3 Authentication Protocol ap3.0</p>
<p>8.4.4 Authentication Protocol ap3.1</p>
<p>8.4.5 Authentication Protocol ap4.0</p>
<p>alice sender bob rcver</p>
<p>nonce is a number that a protocol will use only once in a lifetime</p>
<ol type="1">
<li>Alice sends the message “I am Alice” to Bob.</li>
<li>Bob chooses a <strong>nonce, R</strong>, and sends it to Alice.</li>
<li>Alice encrypts the nonce using Alice and Bob’s symmetric secret key, K<sub>A-B</sub>, and sends the encrypted nonce, <strong>K<sub>A-B</sub> (R)</strong>, back to Bob. As in protocol ap3.1, it is the fact that Alice knows KA - B and uses it to encrypt a value that <strong>lets Bob know that the message he receives was generated by Alice. The nonce</strong> <strong>is used to ensure that Alice is live.</strong></li>
<li>Bob <strong>decrypts the received message</strong>. If the decrypted nonce equals the nonce he sent Alice, then Alice is authenticated.</li>
</ol>
<p>8.5 Securing E-Mail</p>
<p>8.5.1 Secure E-Mail</p>
<p>8.5.2 PGP</p>
<h3 id="securing-tcp-connections-ssl">8.6 Securing TCP Connections: SSL</h3>
<p>8.6.1 The Big Picture</p>
<p>secure socket layer</p>
<p>transport layer security</p>
<p>server has a public-private key-pair and a certification with public key</p>
<ul>
<li><p>handshake</p>
<ol type="1">
<li>tcp three shake</li>
<li>c: SSL hello(list of 加密算法, client nonce)</li>
<li>s: certification with public key (+选择的算法)</li>
<li>c: create MS(master secret), EMS = K<sup>+</sup>(MS), send EMS</li>
<li>both client and server has MS</li>
<li>The client sends a MAC of all the handshake messages.</li>
<li>The server sends a MAC of all the handshake messages.</li>
</ol>
<p>6, 7 是为了确保加密前的信息没有被篡改</p></li>
<li><p>key derivation: 4keys: 两个加密两个 MAC</p></li>
<li><p>传输</p>
<ul>
<li>把 stream 分成 record</li>
<li>维持一个 sequence number, 每个 record 递增</li>
<li>每个 record + MAC(H(m+K+sequence number)) (用四个钥匙其中之一)</li>
<li>加密 message+MAC, send</li>
<li>record 只有 message+mac 是加密的, 其余字段是明文</li>
</ul></li>
<li><p>结束: record 字段结束, 不能单纯依靠 TCP 断开</p></li>
</ul>
<p>8.6.2 A More Complete Picture</p>
<p>8.7 Network-Layer Security: IPsec and Virtual Private Networks 8.7.1 IPsec and Virtual Private Networks (VPNs) 8.7.2 The AH and ESP Protocols 8.7.3 Security Associations 8.7.4 The IPsec Datagram 8.7.5 IKE: Key Management in IPsec 8.8 Securing Wireless LANs 8.8.1 Wired Equivalent Privacy (WEP) 8.8.2 IEEE 802.11i 8.9 Operational Security: Firewalls and Intrusion Detection Systems 8.9.1 Firewalls 8.9.2 Intrusion Detection Systems 8.10 Summary</p>
<h1 id="计算机网络自顶向下-英文对照表">计算机网络自顶向下 英文对照表</h1>
<h2 id="第一章-计算机网络和-internet">第一章 计算机网络和 Internet</h2>
<p>switch 交换机</p>
<p>router 路由器</p>
<p>coaxial cable 同轴电缆</p>
<p>optical fiber 光纤</p>
<p>radio spectrum 无线电</p>
<p>ISP(Internet Service Provider) 网络服务提供商</p>
<p>modem(modulator and demodulator) 调制解调器</p>
<p>IETF(Internet engineering task force) 互联网工程任务组</p>
<p>RFCs(requests for comments) IETF standards documents</p>
<p>API(application programming interface)</p>
<p>host 主机, end system</p>
<p>access network 接入网络</p>
<p>CO(central office)</p>
<p>DSL(digital subscriber line) 数字用户线路</p>
<p>​ DSLAM(DSL access multiplexer)</p>
<p>HFC(hybrid fiber coax) cable Internet access</p>
<p>​ CMTS(cable modem termination system)约等于 DLS 里的 DSLAM</p>
<p>FTTH(fiber to the home)</p>
<p>LAN(local area network)</p>
<p>​ Ethernet 以太网</p>
<p>​ 3G(third-generation wireless)</p>
<p>twisted-pair copper wire 双绞线</p>
<p>coaxial cable 同轴电缆</p>
<p>fiber optics 光纤</p>
<p>terrestrial radio channels 地面广播频道</p>
<p>satellite radio channels 卫星广播频道</p>
<p>​ geostationary satellite 地球同步卫星</p>
<p>​ LEO(low-earth orbiting) 近地轨道卫星</p>
<p>packet switching 分组交换</p>
<p>circuit switching 电路交换</p>
<p>​ FDM(frequency-division multiplexing)</p>
<p>​ TDM(time-division multiplexing)</p>
<p>​ bandwidth 带宽</p>
<p>network structure 1-5</p>
<p>​ PoPs(points of presence) 网络入网点</p>
<p>​ IXPs(Internet exchange points) 互联网交换节点</p>
<p>​ peer 同级交换</p>
<p>throughput 吞吐量</p>
<p>layer</p>
<p>​ application</p>
<p>​ transport</p>
<p>​ network</p>
<p>​ link</p>
<p>​ physic</p>
<p>ISO(International Organization for Standardization) 国际标准化组织</p>
<p>OSI 开放系统互连(模型)</p>
<p>DoS denial of service attack 拒绝服务攻击</p>
<p>DDoS distributed DoS 分布式 DoS</p>
<h2 id="第二章-应用层">第二章 应用层</h2>
<p>CS client-server architecture 客户-服务器</p>
<p>P2P 对等体系架构</p>
<p>process 进程</p>
<p>message 报文</p>
<p>socket 套接字</p>
<p>API application programming interface 应用程序编程接口</p>
<p>RDT reliable data transfer可靠数据传输</p>
<p>SSL secure socket layer 安全套接字层</p>
<p>HTTP hypertext transfer protocol 超文本传输协议</p>
<p>RTT round-trip time 往返时间</p>
<p>web cache web 缓存器 也叫代理服务器(proxy server)</p>
<p>CDN content distribution network 内容分发网络</p>
<p>SMTP simple mail transfer protocol 简单邮件传输协议</p>
<p>user agent 用户代理</p>
<p>mail server 邮件服务器</p>
<p>POP3 post office protocol-version3 第三版邮局协议</p>
<p>IMAP internet mail access protocol 因特网邮件访问协议</p>
<p>DNS domain name system 域名系统</p>
<p>BIND (Berkeley internet name domain) BIND 软件</p>
<p>TLD top-level domain</p>
<p>torrent 洪流</p>
<p>DASH dynamic adaptive streaming over HTTP 经 http 的动态适应性流</p>
<h2 id="第三章-运输层">第三章 运输层</h2>
<p>UDP user datagram protocol</p>
<p>TCP transfer control protocol</p>
<p>segment 报文段(运输层)</p>
<p>transport-layer multiplexing 多路复用</p>
<p>demultiplexing 多路分解</p>
<p>FSM finite-state machine 有限状态机</p>
<p>ARQ automatic repeat reQuest 自动重传请求协议</p>
<p>stop-and-wait 停等协议</p>
<p>alter-nating-bit protocol 比特交替协议</p>
<p>GBN go-back N 回退 N 步(又叫sliding-window protocol 滑动窗口协议)</p>
<p>SR selective repeat 选择重传</p>
<p>MSS maximum segment size 最大报文段长度(应用层数据的最大长度)</p>
<p>MTU maximum transmission unit 最大传输单元 (最大链路层帧长度)</p>
<p>cumulative acknowledgment 累计确认</p>
<p>SampleRTT 样本 RTT</p>
<p>​ EstimateRTT DevRTT</p>
<p>fast retransmit 快速重传</p>
<h2 id="第四章-网络层数据平面">第四章 网络层:数据平面</h2>
<p>forwarding 转发</p>
<p>routing 路由选择</p>
<p>SDN software defined networking 软件定义网络</p>
<p>head-of-the-line HOL 线路前部(阻塞)</p>
<p>FIFO FCFS 先进先出, 先来先服务</p>
<p>priority queueing 优先权排队</p>
<p>WFQ weighted fair queueing 加权公平排队</p>
<p>TTL time-to-live 寿命</p>
<p>MTU</p>
<p>network mask 子网掩码</p>
<p>CIDR classless interdomain routing 无类别域间路由选择</p>
<p>ICANN internet corporation for assigned names and numbers 英特网名字和编号分配机构</p>
<p>DHCP dynamic host configuration 动态主机配置协议</p>
<p>WAN wide area network 广域网</p>
<p>LAN local area network 局域网</p>
<p>WLAN wireless LAN 无线局域网</p>
<p>VLAN virtual LAN 虚拟局域网</p>
<p>wifi wireless fidelity</p>
<p>NAT network address translation 网络地址转换</p>
<h2 id="第五章-网络层-控制平面">第五章 网络层: 控制平面</h2>
<p>LS link state 链路状态算法</p>
<p>decentralized routing algorithm 分散式路由选择算法</p>
<p>dijkstra 狄利克雷算法</p>
<p>DV distance-vector 距离向量算法</p>
<p>bellman-ford 方程</p>
<p>OSPF open shortest path first 开放式最短路径有限</p>
<p>AS autonomous system 自治系统</p>
<p>ASN AS号</p>
<p>BGP broder gateway protocol 边界网关协议</p>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>internet</tag>
        <tag>networks</tag>
        <tag>server</tag>
        <tag>layer</tag>
        <tag>routing</tag>
      </tags>
  </entry>
  <entry>
    <title>每个内存_自翻</title>
    <url>/2021/04/7aa96f6293b7.html</url>
    <content><![CDATA[<blockquote>
<p>每个程序员都应该了解的内存知识--自翻</p>
</blockquote>
<span id="more"></span>
<blockquote>
<p>摘要:</p>
<p>随着cpu核心变得越来越快越来越多, 访存限制了程序运行速度. 硬件开发者开始研究更精密的内存控制和加速技术(比如 cache), 但是这些没有软件开发者的协调是没法发挥到极致的. 但不幸的是, 大多数软件开发者都不了解内存的结构和消耗. 这篇文章讲述了在现代商品硬件上内存系统的结构, 阐明了为什么 cache 被发明出来, 他们是怎么工作的, 和程序应该怎么使用内存才能达到商品级需求</p>
<p><em>斜体</em>是自己加的注释, ()里的英文是翻译不明确的地方</p>
<p>希望高中英语老师饶我一命, 翻译过程中觉得自己的水平实在有限</p>
<p>原文下载链接: https://pan.baidu.com/s/1NL2LkExFEFDpl8Sh7xBjpQ</p>
<p>密码: lshc</p>
<p>--来自百度网盘超级会员V5的分享</p>
</blockquote>
<h1 id="简介">1 简介</h1>
<p>早期电脑的结构很简单, cpu, memory, 外存<em>(mass storage 应该不是特指外存)</em>, 网口(/network interface?/), 都一起发展, 因此他们的性能很均衡, 比如 memory 和网络在提供数据上没有 cpu 快.</p>
<p>当计算机的基本结构稳定下来而且硬件开发者准注意优化单个的子系统时, 情况改变了. 一些组件的性能落后并成为了瓶颈. 特别是对于外存和memory系统, 由于经济原因比其他组件发展的慢得多</p>
<p>外存的速度问题主要通过软件来解决: 操作系统把最经常使用(或者将要被使用)的数据存储在主存中, 可以做到比访问硬盘快几个数量级, 存储设备加上了高速缓存而且操作系统不需要做出太大改变. 在这篇文章中我们会研究外存软件组织的更多细节.</p>
<p>不像存储系统, 解决主存的瓶颈问题是十分困难的并且几乎所有的方案都要求改变硬件, 如今这些改变主要包括以下形式</p>
<ul>
<li>ram 硬件设计(速度和并行)</li>
<li>memory 控制设计</li>
<li>cpu 高速缓存</li>
<li>设备的直接内存控制(<em>direct memory access</em>)</li>
</ul>
<p>这篇文章的大部分都会和 cpu cache 和memory 控制有关. 我们会探索 DMA. 作为开始, 我们会看一看现代计算机硬件的概况, 这是我们理解存储系统效率和限制的先决条件, 我们还会接触到不同种类的 RAM 并且阐述为什么他们之间仍存在差异</p>
<p>这篇文章不能涵盖一切, 它受限于硬件产品, 并且很多只会浅尝辄止, 推荐读者们去看更细节的文档.</p>
<p>当遇到操作系统的细节和方法时, 本文只针对 linux, 不涉及到其他操作系统, 作者没兴趣讨论其他操作系统, 如果读者需要使用别的操作系统就应该要求他们vendor?提供类似的文档.</p>
<p>最后一点, 本文包括一大堆 usually 和类似的词, 现实情况要复杂得多, 本文只讨论最常见, 最主流的版本. 绝对的陈述很少出现在这个领域, 所以需要这些形容词.</p>
<h2 id="文章结构">文章结构</h2>
<p>这篇文章主要针对软件开发者, 对于硬件导向的读者本文深度不足. 在我们实践之前需要一些准备工作</p>
<p>为此, 第二部分描述了 RAM 技术. 这部分容易理解但对后面的内容不是绝对重要的. 在后面需要的地方会有对这一部分的参考, 急切的读者可以跳过这一部分</p>
<p>第三部分主要是关于 cpu cache. 其中有很多图片防止枯燥, 这部分对于理解之后的内容至关重要, 第四部分是干预虚拟内存是如何实施的, 也是后面的必要准备工作</p>
<p>第五部分是关于非统一内存访问(non uniform memory access)</p>
<p>第六部分是本文的中心. 它整合了前面的所有内容并为软件开发者提供了如何在不同情况下写出合适代码的建议. 非常没耐心的读者可以从这里开始, 如果有必要的话会看之前的章节来回顾.</p>
<p>第七部分介绍了帮助程序员的工具, 即使是完全理解了这些技术也不能一眼看出软件的问题在哪, 一些工具是很有必要的</p>
<p>第八部分我们展望可以期待的技术.</p>
<h2 id="报告问题">报告问题</h2>
<p>作者想要对该文档做一段时间的更新, 这包括技术进步相关的更新和更正. 欢迎读者通过邮件汇报问题, 注意要标明文章的版本号, 这个版本信息可以再文章最后一页找到</p>
<h2 id="致谢">致谢</h2>
<p>感谢Johnray Fuller and the crew at LWN(特别是Jonathan Corbet 把作者的英文修改的更为正规, Markus Armbruster 为本文提供了很多有效的问题和疏漏)</p>
<h2 id="关于这篇文章">关于这篇文章</h2>
<p>这篇文章的标题是对David Goldberg的经典论文/What Every Computer Scientist Should Know About Floating-Point Arithmetic/的致敬, 这篇文章仍未广为流传, 尽管对于任何想要进行精确变成的程序员来说都应该是必须的准备</p>
<p>对于 pdf: xpdf 对于一些图像显示不佳, 建议使用 evince 或者 adobe. 如果你使用 evince 那么注意本文中超链接被广泛使用, 尽管查看器不像其他软件那样显示他们</p>
<h1 id="现代商品硬件">2 现代商品硬件</h1>
<p>由于特质化硬件正在减少, 了解商品硬件是很重要的. 现在规模的扩展更多是水平的而不是纵向的, 这意味着 使用更多小的互连的电脑 比 很大的但是特别快的电脑 更划算. 这是因为快且便宜的网络硬件广泛普及. 这些大的特质化系统仍然有使用空间并且仍然提供着商业价值, 但是市场比起商用硬件相形见绌(is dwarfed by). redhat 2007 期望对于未来的产品, 大多数数据中心的标准配置会是一个带有 4 个插槽的电脑, 每一个都有4 个 cpu 核(对于 intel cpu 会是多线程的). 这意味着数据中心的标准系统会有至多 64 个虚拟处理器. 更大的机器将会被支持, 但是 4 插槽 4 核的情况在现在被认为是最佳选择(sweet spot).</p>
<p>商品零件计算机的结构存在很大差异。因此对于超过 90%的硬件, 我们将专注于最重要的差别. 注意到这些技术细节正在快速变化, 所以建议读者考虑到本文的创作时间.</p>
<p>在过去的几年里, 个人电脑和小的服务器在一个芯片上被标准化为两部分, 北桥和南桥.图 2.1</p>
<figure>
<img src="https://tva1.sinaimg.cn/large/008i3skNgy1gt4qfbs6x3j30ug0hadhb.jpg" alt="截屏2021-08-04 下午2.18.41" /><figcaption aria-hidden="true">截屏2021-08-04 下午2.18.41</figcaption>
</figure>
<p>所有的 cpu(图中的两个, 还可以有更多)共用一条总线<em>fsb</em>(<em>the front site bus</em>前端总线)连接到北桥, 北桥包括, 除了别的之外, 决定了 ram 是哪种类型的内存控制器, 不同种类的 ram, 比如 dram, rambus, 和 sdram, 需要不同的内存控制器.</p>
<p>为了连接到其他所有的系统设备, 北桥必须和南桥沟通, 南桥经常被称作 i/o 桥, 通过一系列总线处理和不同设备进行的沟通. 现在的 pci, pcie, sata, 和 usb 总线都很重要, 但是 pata, ieee1394, 串口和并行端口(parallel port)也都被南桥支持, 更老一点的系统有连接北桥的 AGP （Accelerated Graphics Port 图形加速接口）插槽. 这是处于性能考虑因为北桥和南桥之间的沟通太慢, 而今天 pcie 插槽全部和南桥相连</p>
<p>这样一个系统结构有很多重要的结果:</p>
<ul>
<li>从 cpu 到其他cpu的数据连接 必须走 和北桥连接的同一总线</li>
<li>所有和 ram 的连接必须通过北桥</li>
<li>ram 只有一个端口(port)</li>
<li>cpu 和与南桥相连的设备的连接 会经由北桥</li>
</ul>
<p>在这个模式下许多的瓶颈出现了, 其中一个瓶颈就和 ram 与设备的连接有关. 在早期电脑中, <strong>所有南北桥和设备的连接都必须经过 cpu</strong>, 降低整个系统的性能. 为了解决这个问题, 一些设备开始具备 DMA（直接内存访问 Direct memory access）, dma 允许设备借助北桥直接存储和接收来自 ram 的数据而不需要 cpu 的参与(以及他固有的性能损失). 今天所有的和任意总线连接的高性能设备都可以利用 dma. 尽管它极大的减少了 cpu 的负载, 但是他也造成了北桥的带宽竞争, 因为 dma 请求会与 ram 与 cpu 之间的交流产生竞争, 这个问题也必须被考虑</p>
<p>第二个瓶颈和<strong>北桥到 ram 的总线</strong>有关. 总线的细节取决于部署的内存种类, 在老的系统只有一条总线连接到所有的 ram 芯片, 所以并行访问时不可能的, 最近 ram 的种类要求两个分开的总线(ddr2), 加倍了可用的带宽, 北桥跨通道交叉存取memory，更先进的内存及时(FB-DRAM)添加了更多的通道(channel)</p>
<p>由于只有有限的可用带宽, 最小化延迟去组织内存访问对应性能来说是很重要的. 我们将会看到, 处理器比内存快得多而且必须等待访问内存, 尽管已经使用了cpu cache. 如果多个超线程, 核, 或者处理器同时访问内存, 访存的等待时间会更长, 这对于 dma 操作也是如此</p>
<p>然而, 访存比并发更加重要, 访问模式本身也会极大的影响存储系统的性能, 特别是有多个内存通道的时候, 在 2.2 章节我们会讨论关于 ram 访问模式的细节</p>
<p>在一些其他更贵的系统中, 北桥实际上不包括存储控制器(<em>memory controller</em>), <strong>相反北桥会被连接到许多外部存储控制器,</strong> 图 2.2 四个 MC</p>
<figure>
<img src="https://tva1.sinaimg.cn/large/008i3skNgy1gt4tujbmodj30s20gi40d.jpg" alt="截屏2021-08-04 下午4.17.12" /><figcaption aria-hidden="true">截屏2021-08-04 下午4.17.12</figcaption>
</figure>
<p>这种结构的好处是存在不止一个内存总线而且总的可用带宽增加了, 这种设计也支持更多的内存. 并发内存访问模式通过同时访问不同的内存库(memory bank?)来减少延迟, 当许多进程直接连接到北桥时尤为明显, 如图 2.2. 对于这样的设计, 最基本的限制是北桥内部的带宽, 这对于这种结构是惊人的.</p>
<p>使用多个外部 mc 不是唯一增加内存带宽的途径, 另一个流行的方式是<strong>把 mc 融入 cpu 中并且为每个 cpu 增加memory</strong>, 这个结构由基于 amd opteron 处理器的 SMP 系统推广. 图 2.3 展示了这个系统. intel 会从 nehalem 处理器开始支持通用系统接口(common system interface), 他也基本使用了同样的方法, 为每一个处理器添加一个融入进去的 mc 和本地 memory.</p>
<figure>
<img src="https://tva1.sinaimg.cn/large/008i3skNgy1gt4tze1vjoj30n60gg3zx.jpg" alt="截屏2021-08-04 下午4.21.49" /><figcaption aria-hidden="true">截屏2021-08-04 下午4.21.49</figcaption>
</figure>
<p>有了这样一个结构, 由于有很多处理器, 就会有很多内存库(<em>memory bank</em>). 在一个 4cpu 的机器上, memory 带宽翻了四倍而不需要有着很大带宽的复杂北桥. 将 mc 融入 cpu 有一些额外的优势, 这里我们不深究。</p>
<p>这个结构也有很多劣势. 首先因为机器仍然需要系统的所有的memory 可以与处理器连通, memory 不再是统一的了(由于名字的原因Non-Uniform Memory Architecture). 本地 memory(融入 cpu 的 memory)可以以正常速度访问, 当 memory 连通到其他 cpu 时情况就不一样了, 这种情况下必须使用处理器之间的通讯方式, 为了从 cpu1 连到 cpu2 的 memory, 需要经过一次相互连接(interconnect). 当 cpu1 需要连接到 cpu4 的时候需要两次</p>
<p>每个这种连接都有一定的cost, 我们把连接到其他 cpu 需要花费的额外时间称为 numa 因子. 图 2.3 中的结构中, 每个 cpu 有两层: 直接相联的 cpu 和需要跨越两次连接的 cpu(/对角线/). 随着机器变得复杂, 层级会增长的很快, 也有一些结构(比如 ibm 的x445 和 sgi 的 altix 系列)有不止一种连接. cpu 被组织成节点, 在一个节点中, 访问 memory 的次数可能被统一或者有少量的 numa 因子. 节点之间的连接代价会非常大, numa 因子会很高</p>
<p>商品级 numa 机器今天仍然存在并且在将来会处于很重要的位置, 在 2008 年末, 每个 smp 机器都会使用 numa. numa 的 cost 使得认识到机器在使用 numa是很重要的. 在第 5 部分我们会讨论更多的机器结果和 linux 内核中关于这些内容的技术</p>
<p>除了接下来讨论的技术细节, 还有其他的影响 ram 性能的因素. 他们不是软件控制的, 因此本章不提及. 有兴趣的读者可以在 2.1 部分学习, 只有当需要进一步连接 ram 技术才需要学习这些部分, 而且可能会使你在买电脑的时候做出更好的抉择</p>
<p>接下来的两部分讨论了入门级别的硬件细节, 还有 mc 和 dram 芯片之间的连通协议程序员会发现这些信息很有用因为这些细节揭示了ram 是如何工作的. 尽管这些是可选的知识, 那些急切想要学习和日常生产相关知识的程序员可以跳到 2.2.5 部分</p>
<h2 id="ram-种类">2.1 RAM 种类</h2>
<p>这些年来有很多种 ram 而且之间都有差距, 有时差距很大. 老的款式今天只会使历史研究者感兴趣了. 我们不会深究这些. 我们会专注于现代 ram 种类, 我们只会浅尝辄止, 探索一些对内核可见的细节或者程序开发者对性能研究需要的细节</p>
<p>第一个有趣的细节围绕着为什么在同一个机器中有不同的 ram. 更具体的, 为什么同时有 sram 和 dram. 前者(sram)更快而且有相同的功能性, 为什么机器中不是所有的 ram 都是 sram? 是因为价钱, sram比 dram 贵得多. 两个因素都很重要, 但是第二个越来与重要. 为了明白他们的不同, 我们来看一下 sram 和 dram 的实现.</p>
<p>在剩下的部分我们会讨论 ram 实现的一些低级细节, 我们会把细节的等级降到最低, 为此我们会在"数字逻辑"级别讨论, 而不是在硬件设计者会使用的级别. 那个级别与我们的目的无关</p>
<h3 id="static-ram">2.1.1 Static RAM</h3>
<p>图 2.4 展示了有六个晶体管 sram 的单元(cell)的结构. 这个单元的内核是由 M1-M4 4 个晶体管构成两个交叉耦合(cross-coupled)逆变器(inverter). 他们有两个稳态, 各自为 0 和 1. 只要 V<sub>dd</sub>上有能量就是稳定的. 如果需要访问单元的状态，则字访问线WL升高. 这使得单元的状态逻辑立即在 BL 和 BL上划线 可读如果单元状态必须被覆盖, BL 和 BL上划线会第一个被置于需要的值然后 WL 升高. 由于外面的驱动的 4 个晶体管更强, 这使得旧的状态会被覆盖</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gt4u2rtg6kj30je0ge3z5.jpg" alt="截屏2021-08-04 下午4.25.04" style="zoom:50%;" /></p>
<p>看[20]来了解更详细的单元工作原理, 为了接下来的描述, 下面这些很重要</p>
<ul>
<li>一个单元需要 6 个晶体管, 有 4 个的变种但是他们有缺点</li>
<li>维持状态需要持续的电源</li>
<li>当字访问线升高时, 单元的状态立即就是可读的. 该信号和其他晶体管控制信号一样是矩形的(在两个二进制状态之间快速变换)</li>
<li>单元状态是稳定的, 不需要刷新循环</li>
</ul>
<p>还有其他的慢的但是耗能少的 sram 变种, 但是我们不关注因为我们在了解快的 ram. 他们比起 dram 在系统中更容易被使用因为有简单的接口, 这时他们会被注意到</p>
<h3 id="dynamic-ram">2.1.2 Dynamic RAM</h3>
<p>dram 结构比 sram 简单的多. 图 2.5 显示了通常的 dram 单元设计. 它包括的只有一个晶体管和一个电容, 这个复杂度上的差别意味着他的实现和 sram 差的很大</p>
<figure>
<img src="https://tva1.sinaimg.cn/large/008i3skNgy1gt4u5d8jimj30i00b6mxc.jpg" alt="截屏2021-08-04 下午4.27.36" /><figcaption aria-hidden="true">截屏2021-08-04 下午4.27.36</figcaption>
</figure>
<p>一个 dram 单元把他的状态存储在电容器 C 里, 晶体管 M 被用来守卫(guard)对状态的访问. 为了读单元的状态, <em>访问线 AL</em> 被升高, 这产生了<em>数据线 DL</em> 上的流, 有或没有取决于电容器的电压. 为了写入单元DL数据线被置于合适的位置, 然后 AL 被升高一段时间足以充满或者放干电容</p>
<p>dram 这种设计带来了许多的问题, 使用电容意味着读取单元会把电容放电, 这个过程不可以无限的重复, 电容必须在某一时刻再充电. 更糟的是, 为了容纳如此大量的单元(现在普通的一个芯片有 10<sup>9</sup>个单元), 电容的容量必须很低(在毫微微级别或者更低). 一个完全充电的电容容纳着数以千计的电子, 尽管电容的电阻很高(几兆兆欧姆), 失效只需要很短的时间. 这个问题称为"leakage"(泄露)</p>
<p>泄露就是 dram 单元必须持续刷新的原因, 对于大多数 dram 芯片, 这个刷新必须每 <em>64ms</em> 发生一次, 在刷新周期中没有访问是被允许的因为一次刷新就是一次简单的结果被丢弃的读操作。对于一些工作, 这个开销可能会使 50%的 memory 操作等待</p>
<p>第二个由小量的充电引起的问题是从单元读取的信息不是直接可用的. 数据线必须连接到读出放大器，该读出放大器可以在仍然必须算作1的整个电荷范围内区分存储的0或1。</p>
<p>第三个问题是读取单元造成电容电荷的耗尽, 这意味着每次读取操作都必须紧跟一个重新给电容充电的操作, 这个通过把读出放大器的输出反馈给电容来自动实现. 它意味着读取操作需要额外的能量和时间。</p>
<p>第四个问题是给电容充放电不是瞬时的, 读出放大器收到的信号不是矩形的, 所以必须使用保守的估计来确定何时可以使用单元的输出。电容充放电的公式为:</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gq3k2omb9nj30dm04a0sw.jpg" alt="截屏2021-05-02 上午3.52.29" style="zoom:50%;" /></p>
<p>这意味着电容充放电需要花费一点时间(由电容的 C 和 R 决定). 这也意味着被读出放大器探测到的情况不是立即就可以使用的, 图 2.6 展示了充放电的曲线. x 轴的单位是 RC, 是时间的单位.</p>
<figure>
<img src="https://tva1.sinaimg.cn/large/008i3skNgy1gt4u70cy44j30vo0m6q5i.jpg" alt="截屏2021-08-04 下午4.29.12" /><figcaption aria-hidden="true">截屏2021-08-04 下午4.29.12</figcaption>
</figure>
<p>不像 sram，当字访问线被升高时结果可以立即被使用, dram 总需要花费一点时间直到电容充分的放电, 这个延迟严重的限制了 dram 能有多快.</p>
<p>这个简单的结构也有他的好处, 主要的好处就是尺寸, dram 在芯片上需要的空间比 sram 小的多, sram单元也需要独立的保持晶体管状态的能量. dram 单元的结构更简单而且更规则, 这意味着把他们紧密的打包在一个 die 上更简单.</p>
<p>总的来说, 还是在价格上胜出了. 除了在特制的硬件比如网络路由器, 我们必须使用基于 dram 的主存, 这对我们接下来要讨论的编程有很大意义, 但是首先我们先看一下实际中 dram 单元使用的细节</p>
<h3 id="dram-访问">2.1.3 DRAM 访问</h3>
<p>一个程序通过虚拟地址找到一个 memory 位置, 处理器把它翻译成物理地址并且最终 mc 找到和这个地址相对应的 ram 芯片. 为了选择到 ram 芯片上独立的 memory 单元, 一部分物理地址以多个地址线(address lines?)的形式传送.</p>
<p>从 mc 独立的找到 memory 地址是不切实际的: 4GB（2<sup>32</sup>） ram 需要2<sup>32</sup>地址线. 地址是以二进制编码传送的, 这样会使用少一些的地址线. 通过这种方式传递到 dram 芯片的地址必须首先被解码, 一个具有 N 个地址线的解复用器会有 2<sup>N</sup>个输出线, 这些输出线可以被用来选择 memory 单元. 使用这种直接映射对于小规模芯片不是大问题.</p>
<p>但是如果芯片的数量增长了, 这个方式就不再适合了. 一个拥有 1Gbit 容量的芯片会需要 30 个地址线和 2<sup>30</sup>个选择线(/输出/), 当不牺牲速度时，解复用器的大小会随着输入线的数量呈指数增加. 除了解复用器的复杂性（大小和时间）外，30个地址线的解复用器还需要大量的芯片实际空间. 更重要的是, 在地址线上同步传输 30 个脉冲比传送 15 个脉冲要难得多. 更少的线路必须以完全相同的长度或适当的时间布局.(7 现代 dram 种类比如 DDR3 可以自动适应时间, 但是容忍度是有限制的)</p>
<p>图 2.7 显示了高级的 dram 芯片, dram 单元被以行和列的方式组织起来, 他们可以被排列在一行但是那样 dram 芯片就需要一个巨大的解复用器. 通过数组访问, 这种设计可以使用一般大小的解复用器和多路选择器. 这是各方面巨大节省. 在例子中, 地址行 a<sub>0</sub> 和 a<sub>1</sub> 通过行地址选择(row address selection)解复用器从所有行中选择地址线, 当读取的时候, 所有单元的内容都对列地址选择多路选择器开放, 通过地址线 a<sub>2</sub> a<sub>3</sub> , 一列中的内容向dram 芯片的数据引脚开放. 这在很多 dram 芯片上并行的发生很多次来产生一堆 bit 和数据总选的宽度相对应.</p>
<figure>
<img src="https://tva1.sinaimg.cn/large/008i3skNgy1gt4u8lipl6j30rc0ui76g.jpg" alt="截屏2021-08-04 下午4.30.43" /><figcaption aria-hidden="true">截屏2021-08-04 下午4.30.43</figcaption>
</figure>
<p>在写的时候, 新的单元值被放在数据总线上, 然后当单元被用 <em>ras(row address selection)</em> 和 <em>cas(column address selection)</em> 选择时, 值会被存到单元中. 是一个很直接的设计呢. 在现实中显然有更多的复杂细节. 必须要明确在数据总线可以被读取的信号发出后会有多少的延迟. 正如前面所说, 电容不会立即放电. 单元中的信号是那么小以至于他需要被放大. 对于写来说必须明确在总线上通过 ras 和 cas 成功存储新的值在多长时间需要保持有效(又一次, 电容不会立即的充电和放电). 这些时间常数对于 dram 芯片的性能是很重要的, 我们会在接下来的章节讨论.</p>
<p>第二个扩展上的问题是, 有 30 个地址线连接每个 ram芯片也是不可行的. 芯片的引脚是很珍贵的资源, 数据必须被尽可能的并行传输已经足够坏了. mc 必须可以在每个 ram 模块(ram 芯片的集合)上寻址. 如果因为性能要求需要并行访问多个 ram 模块而且每个 ram 模块需要自己拥有 30 个以上的地址线, 那么 mc 就必须有, 对于8 个 ram 模块, 240+引脚仅仅用来应付地址.</p>
<p>为了解决这些次要的可扩展问题, 很长一段时间, dram都在自己进行地址的多路选择. 这意味着地址被传送到两部分: 第一部分包括行地址(图 2.7 a<sub>0</sub> 和 a<sub>1</sub> ), 这个选择保持活跃直到取消, 然后第二部分(a<sub>2</sub> a<sub>3</sub>)选择列. 主要的不同在于只需要两个额外的地址线, 当 ras 和 cas 可用时会减少很多线路来指示地址, 但也有一点小代价来把地址分为两部分. 这个地址多路选择带来了他自己的问题, 我们会在 2.2 讨论.</p>
<h3 id="结论">2.1.4 结论</h3>
<p>不要担心这部分的细节是不是有一点过载了, 这部分重要的内容有:</p>
<ul>
<li><p>不全用 sram 是有原因的</p></li>
<li><p>地址线的数量和 mc, 主板, dram 模块, dram 芯片 的 cost 有直接联系</p></li>
<li><p>在读写操作之前有一段时间间隔</p></li>
</ul>
<p>接下来的部分会接触更多访问 dram memory 的细节. 我们不会深入访问 sram 的细节, 因为它通常是直接寻址的. 这是因为速度问题而且 sram 的大小有限, sram 现在在 cpu 的 cache 和 on-die ?上使用, 这里连接是很小的而且在 cpu 设计者的控制之下. cpu cache 是一个我们之后会讨论的内容但是我们需要知道的是 sram 单元有一个最大速度, 这个速度取决于花在 sram 上的 efforts(?). 速度可以仅比CPU core稍慢一两个数量级。</p>
<h2 id="dram-访问的技术细节">2.2 DRAM 访问的技术细节</h2>
<p>在介绍 dram 的章节中我们看到了 dram 芯片多路复用地址来以地址引脚的形式保存资源. 我们也看到了访问 dram 单元会花费时间, 因为这些单元的容量不会立即的放电来产生一个稳定的信号. 我们也看到 dram 单元必须被刷新, 现在我们该把这些和到一起看看这些因子是怎么共同决定 dram 访问的了.</p>
<p>我们会专注于现代科技, 不去讨论异步 dram 和他的特点因为他们不再和此相关了. 对这些感兴趣的读者可以看看注释 3 和 19. 我们也不会讨论Rambus dram(RDRAM)即使这项技术并不老旧. 只是它不再系统 memory 中广泛使用. 我们会主要专注于同步 dram(<em>SDRAM synchronous dram</em>)和他的继承者<em>DDR(double data rate dram)</em>.</p>
<p>sdram 正如名字所示, 根据一个时间源工作. mc 提供一个时钟, 他的频率决定了前端总线(front side bus FSB)的速度 - dram 芯片使用的 mc 的接口(/解释/ /fsb/). 截至撰写本文时, 频率有 800MHz, 1066MHz 1333MHz, 下一代声称还会有更高的频率(1600MHz). 这并不意味着这个总线上使用的频率有这么高, 相反, 现在的总线是双泵或者四泵的(double- or quad-pumped /ddr?/), 这意味着数据在每个循环中传送 2或者 4 次. 数量越高买的越好, 所以厂商喜欢把一个 4 泵 200MHz 的总线宣传为"有效的"800MHz</p>
<p>对于现在的 sdram, 每个数据传输包括 64 位(8bytes). fsb 的传输速率就是 8B 乘上有效总线频率(6.4GB/s 等于 4 泵 200MHz 总线). 这听起来很多但这是峰值，永远不会超过这个速度. 正如我们现在将看到的，与 RAM 模块对话的协议在无法传输数据时有很多停机时间. 这个停机时间是我们必须考虑的而且要缩短来达到最好的性能.</p>
<h3 id="读访问协议">2.2.1 读访问协议</h3>
<p>图 2.8 展示了 dram 模块上一些连接的活动, 他们发生在三个不同颜色的阶段. 通常时间从左往右进行. 我们这里只讨论总线时钟, <span class="math inline">\(\overline{\text{RAS}}\)</span> <span class="math inline">\(\overline{\text{CAS}}\)</span> 信号和地址总线数据总线. 一个读循环以 mc 在地址总线上使得行地址可访问并降低<span class="math inline">\(\overline{\text{RAS}}\)</span>开始. 所有的信号都在时钟的上升沿被读取. 所以时钟是否是完全方形的并不重要, 只要她在被读取的时候是稳定的就行. 放置行地址使得 ram 芯片开始锁住被寻址的行.</p>
<figure>
<img src="https://tva1.sinaimg.cn/large/008i3skNgy1gt4uigdp7sj30r20lmzm0.jpg" alt="截屏2021-08-04 下午4.40.09" /><figcaption aria-hidden="true">截屏2021-08-04 下午4.40.09</figcaption>
</figure>
<p><span class="math inline">\(\overline{\text{CAS}}\)</span> 信号可以在 t<sub>RCD</sub>(<span class="math inline">\(\overline{\text{RAS}}\)</span> -to-<span class="math inline">\(\overline{\text{CAS}}\)</span>)时钟周期后被发送. 然后列地址被传送, 表现为在地址总线上可以访问并且降低<span class="math inline">\(\overline{\text{CAS}}\)</span>线. 这样我们就能看清这两部分地址是怎么被通过相同的总线传输了.</p>
<p>现在寻址结束了数据可以被传递了, ram 芯片需要一些时间来准备这些. 这个延迟通常被叫做<span class="math inline">\(\overline{\text{CAS}}\)</span>延迟(CL). 在图2.8 中cas延迟是2, 它可高可低, 取决于mc, 主板, dram模块的质量. 延迟也可以有半值(0.5). 如果CL=2.5 第一个数据就会在蓝区的第一个下降沿可以被访问.</p>
<p>有了这些去获得数据的准备, 只传送一个数据字会是很浪费的. 这就是为什么dram模块允许mc明确到底多少数据会被传输. 通常是2, 4, 8 个字. 这允许填满cache中的整行而不需要一个新的ras/cas序列. 这也使得 mc传送一个新的cas信号而不用重新选择行 成为可能. 这样, 连续的memory地址就可以被很快的读写因为ras信号不用被发送，行也不需要被失活(deactivate, 见下面). 保持行“打开”是mc需要去决定的. 投机的让他一直开着在现实中是有缺点的(见[3]). 发送新的cas信号只取决于ram模块的频率(通常特指为Tx, x是一个值比如1, 2; 1代表着是一个高性能dram每个周期都会接受新的命令)/(<a href="dic://be%20subject%20to">be subject to</a>受支配)/</p>
<p>在这个例子中sdram每个循环吐出一个字. 这是第一代做的事情, DDR可以每个循环传输两个字. 这削减了传输时间但是没有改变延迟. 原则上ddr2以同样的原理工作但实际上会有不同. 这里没必要深究, 要注意ddr2可以被做的更快, 更便宜, 更可靠, 更节能(见[6]).</p>
<h3 id="预充电与激活">2.2.2 预充电与激活</h3>
<p>图2.8 没有涵盖整个周期, 它只展现了整个周期中访问dram的部分, 在一个新的ras信号可以发送之前, 当前被锁住的行必须被失活而去新的行必须被预充电. 我们可以专注于这样一种情景: 这是通过一条明确的指令完成的. 对于这个协议在某些情况下也有提升, 它允许这个额外的步骤被丢弃. 这个由预充电造成的延迟仍然会影响操作.</p>
<p>图2.9展示了从cas信号开始到下一行的cas信号的过程. 使用第一个cas信号的数据像之前一样在CL循环之后可以使用. 这个例子中带了两个字, 这在简单的sdram中会花费两个周期传输. 可以思考四个字在一个ddr芯片上的样子.</p>
<figure>
<img src="https://tva1.sinaimg.cn/large/008i3skNgy1gt4umcwm7jj30s00netar.jpg" alt="截屏2021-08-04 下午4.43.55" /><figcaption aria-hidden="true">截屏2021-08-04 下午4.43.55</figcaption>
</figure>
<p>即使在频率只有 1 的dram模块上与充电指令也不能被立即发出. 它必须要等待数据传输. 在这个例子中它话费了两个时钟周期. CL也是如此但是这只是个巧合. 预充电信号没有专门的数据线. 取而代之, 一些设施通过降低WE和RAS线来同步的发送这个信号. 这个组合自己没有实际意义.</p>
<p>只要充电指令发出了, 它需要花费<strong>t<sub>RP</sub>(row precharge time)</strong>个循环知道这个行可以被选择. 在图2.9 中许多时间(由紫色标识)与memory传输(亮蓝色)重合, 这很好! 但是t<sub>RP</sub> 比传输时间更长所以下一个ras信号被暂停了一个周期.</p>
<p>如果我们继续图中的时间线我们会发现下一个数据传输在前一个停止的5个周期之后. 这意味着数据总线在7个周期中只有2个在使用. 乘以FSB速度和理论6.4GB/s的800MHz总线成为1.8GB/s. 这不好而且必须被避免. 这个技术在第6部分会被讨论来提高利用率. 但是程序员必须尽一份自己的努力.</p>
<p>在sdram模块中还有一个时间值我们未讨论, 在图2.9预充电指令植被数据传输时间限制, 另一个约束是一个sdram模块在一个ras信号之后需要一些时间才能预充电另一个行(记为t<sub>RAS</sub>). 这个时间通常很长, 大概是t<sub>RP</sub>的两到三倍. 如果在一个ras信号之后只有一个cas信号, 这个传输几个周期就会结束, 这将成为一个问题. 假设在图2.9 中初始的cas信号是由ras信号直接预先传递的而且t<sub>RAS</sub>是8个周期. 那么预充电指令就会被额外延迟一个周期, 因为t<sub>RCD</sub>, CL, t<sub>RP</sub>的总和是7个周期.</p>
<p>DDR模块通常决定使用一个特殊的记号w-x-y-z-T. 比如2-3-2-8-T1, 这意味着</p>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">标记</th>
<th style="text-align: left;">值</th>
<th style="text-align: left;">意义</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">w</td>
<td style="text-align: left;">2</td>
<td style="text-align: left;">cas 延迟 CL</td>
</tr>
<tr class="even">
<td style="text-align: left;">x</td>
<td style="text-align: left;">3</td>
<td style="text-align: left;">ras-to-cas 延迟 t<sub>RCD</sub></td>
</tr>
<tr class="odd">
<td style="text-align: left;">y</td>
<td style="text-align: left;">2</td>
<td style="text-align: left;">ras 预充电 t<sub>RP</sub></td>
</tr>
<tr class="even">
<td style="text-align: left;">z</td>
<td style="text-align: left;">8</td>
<td style="text-align: left;">从预充电延迟中恢复 t<sub>RAS</sub></td>
</tr>
<tr class="odd">
<td style="text-align: left;">T</td>
<td style="text-align: left;">T1</td>
<td style="text-align: left;">指令频率</td>
</tr>
</tbody>
</table>
<p>有许多其他的时间限制影响指令的发出和处理. 这五个限制是现实中最主要的决定模块性能的部分.</p>
<p>有时, 了解这些信息对于使用的计算机能够解释某些测量结果是有用的. 当买电脑的时候知道这些肯定是游泳的因为他们和FSB, sdram模块速度一样, 是决定电脑速度最重要的因素.</p>
<p>特别大胆的读者也可尝试去调整系统, 有时 bios 允许改变一些或者所有的值, sdram模块有可编程寄存器, 这些值可以放在这里. 如果ram模块的质量很高, 他肯呢个会减少一个或者奇特的延迟而不影响电脑的稳定性. 很多的超频(overclocking)网站提供做这件事的丰富的文档. 自己承担风险, 别说没被警告过.</p>
<h3 id="再充电">2.2.3 再充电</h3>
<p>在谈到dram的时候, 一个最容易被忽视的主题就是再充电. 正如2.1.2中解释的, dram单元必须被持续的刷新, 在剩下的系统中这个过程不是完全显式的发生. 有时候当一个行被再充电时是不可访问的, [3]的研究表明, 令人惊讶的是, dram的刷新机制可以戏剧性的影响性能.</p>
<p>JEDEC(Joint Electron Device Engineering Council)表明, 每一个dram单元都必须每<em>64ms</em>被刷新一次. 如果一个dram数组有8192个行, 这意味着mc必须平均每7.8125微秒发送一个刷新指令(刷新指令可以被排队所有现实中两个请求的最大间隔可以更长), mc负责安排刷新指令, dram模块跟踪最后被刷新的行的地址并且每个请求都自动增加地址的计数.</p>
<p>程序员对刷新和指令什么时候会发出无能为力, 但是在解释性能测量时记住dram的这一部分是很重要的. 如果要找回一个字, 但是这个字正在被刷新, 那么处理器就会暂停很长一段时间, 每一次刷新持续多久由dram模块决定.</p>
<h3 id="memory-类型">2.2.4 memory 类型</h3>
<p>值的花费一些时间在当前和即将被使用的memory类型上, 我们会从<em>SDR(single data rate) sdram</em> 开始因为他们是DDR(double data rate) sdram的基础, sdr是很简单的, memory单元和数据传输速率是统一的.</p>
<p>如图2.10 dram单元数组可以以相同的速度 输出memory信息 和 传送到memory 总线上. 如果dram单元数组可以以100MHz的方式操作, 那么总线的一个单一单元的数据传输速度就是100Mb/s. 所有组件的频率f都是相同的, 提高dram芯片的吞吐量是很昂贵的因为能量消耗随着频率的增加上升. 由于单元数组很大会变得非常昂贵. 现实中甚至不止一个问题因为升高频率通常也要求升高维持系统稳定的电压. ddr sdram(追溯的称为ddr1)可以用来提升吞吐量而不需要增加任何频率.</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gt4usxevs5j30sc0b4wf2.jpg" /></p>
<p>sdr和ddr1之间的区别是, 如图2.11所示而且从名字也可以猜到, ddr1每个周期传输两倍的数据. 也就是(i.e.)ddr1芯片在上升沿和下降沿都传输数据. 这个有时候被称作<strong>“双泵”总线(double pumped bus)</strong>为了达到这个目的而去不增加单元数组的频率, 就需要引入一个缓冲. 这个缓冲每个数据线保存两位, 这就要求图2.7中的单元数组中, 数据总线要包括两条线. 实现起来很简单: 只需为两个 DRAM 单元使用相同的列地址, 并并行访问它们. 为了实现这个, 单元数组需要作出的改变也很少.</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gt4utd2ad9j30qk0au3z6.jpg" /></p>
<p>sdr dram 以他们的频率为标识(比如PC100 就是100MHz的sdr). 为了使ddr1 dram更好听, 销售者必须想出一个新策略因为频率没有改变. 他们想到了一个名字, 包括以byte为单位一个ddr模块(他们有64-bit总线)可以传输的速率: 100MHz * 64bit * 2 = 1600MB/s 由于一个100MHz的ddr模块被称作PC1600. 1600 &gt; 100一切市场需求都被满足了, 它听起来很好尽管提升仅仅是两倍.</p>
<p>为了更充分的利用memory技术, ddr2包括了一些新的创新. 最明显的改变是如图2.12所示就是翻倍了总线的频率. 频率翻倍意味着带宽翻倍, 由于频率翻倍对于单元数组不经济, 限制需要i/o缓冲每个周期取4bits, 然后再送给总线. 这意味着 DDR2 模块的更改仅使 <em>DIMM(/Dual-Inline-Memory-Modules/)</em> 的 I/O 缓冲组件能够以更高的速度运行. 这当然是可能的而且不会需要太多的能耗, 这只是一个小的组件而不是整个模块. 销售者想出的ddr2的名字和ddr1相似, 只是乘2换成了乘4(现在我们有了“四泵”总线). 表2.1展示了现在使用的模块的名字.</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gt4uwupquxj30s00bi3zd.jpg" /></p>
<p>命名还有一点变化, cpu, 主板, dram 模块使用的 fsb 速度通过使用有效频率而被指明了, 也就是, 他在传输的时钟周期的两个沿都起了作用从而使得数字膨胀. 因此, 一个有着 266MHz 总线的 133MHz 模块有着 533MHz 的 fsb 频率.</p>
<p>DDR3 的规范(真的那个, 不是在显卡中用的假的 GDDR3) 在从 DDR2 的演变过程中需要更多的改变, 电压会从 ddr2 的 1.8v 降到 ddr3 的 1.5v. 由于能耗和电压的平方成正比, 这个改变带来了 30%的提升. 由于这个原因die 的大小和其他电气特性 ddr3 都可以做的更好, 比如在相同频率下能耗减半, 二选一的, 使用更高的频率也可以达到同样的功率. 或者加倍容量可以实现相同的热耗散.</p>
<p>ddr3 模块的单元序列以外部总线四分之一的速度运行, 这需要一个 8bit 的 i/o 缓冲, 相比之下 ddr2 需要 4bit, 如图 2.13</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gt4v2odv31j30s40b4t9j.jpg" /></p>
<p>最初，DDR3 模块可能会有略高的 CAS 延迟，只是因为 DDR2 技术更加成熟, 这会导致 ddr3 只有在频率上更有效, 比那些可以达到 ddr2 的更高, 特别是当带宽比延迟更重要的时候. 之前已经谈到 1.3v 模块会和 ddr2 有一样的 cas 延迟, 不论如何, 由于更快的总线而达到更快素的的可能性比增长的延迟更有价值.</p>
<p>ddr3 可能的问题是, 对于 1600Mb/s 或者更高的传输速率, 每个通道的模块数量会被减少到只有一个, 在更早的版本这个要求应用于所有的频率, 所以有人希望在将来可以接触对所有频率的限制.</p>
<p>表 2.2 展示了 ddr3 模块常见的名字. JEDEC 认可前四种. 考虑到 intel 的 45nm 处理器有 1600Mb/s 的 fsb 速度, 1866Mb/s 是超频市场需要的, 我们会在对ddr3 发展的后期看到更多这种类型.</p>
<p>所有的 ddr memory 都有一个问题: 增长的总线频率使得制造并行的数据总线很困难, 一个 ddr2 模块有 240 个引脚, 所有连接到数据和地址的引脚都必须被路由所以他们有几乎相近的长度, 除此之外, 如果不止一个 ddr 模块被连接到同一个总线, 对于每一个新增的模块信号都会变得易损坏, ddr2 的说明允许最多每个总线连接两个模块, ddr3 的说明允许在高频时最多连接一个模块, 每个通道有着 240 个引脚的北桥不能驱使超过两个通道, 可以选择另外的 mc 但是这会是昂贵的.</p>
<p>这意味着商用的主板被限制最多只能拥有 4 个 ddr2 或 ddr3 模块, 这个限制严格的阻碍了系统可拥有的 memory 数量, 即使老的 32-bit 的 IA-32 处理器也可以控制 64GB 的 ram, 而且家用的 memory 需求也在增长, 所以必须做点什么.</p>
<p>一种做法是为每一个处理器添加 mc 如第二部分所说, amd在 Opteron 上这么做的, intel 在 CSI 技术上是这么做的, 只要处理器能够使用的内存量可以连接到单个处理器就会有所帮助, 在某些情况下并不是这样, 并且会带来 numa 结构及其负面影响, 对于一些情况需要其他的解决方案.</p>
<p><a href="https://www.techbang.com/posts/18381-from-the-channel-to-address-computer-main-memory-structures-to-understand">memory 层次</a></p>
<figure>
<img src="https://cdn1.techbang.com/system/images/164600/original/9db89369284749feaa291ef48931618d.jpg?1401477760" alt="图解RAM结构与原理，系统记忆体的Channel、Chip与Bank" /><figcaption aria-hidden="true">图解RAM结构与原理，系统记忆体的Channel、Chip与Bank</figcaption>
</figure>
<p>intel 当前在大型服务器上的处理方式是FB-DRAM(fully buffered dram), fb-dram 模块使用和 ddr2 一样的 memory 芯片, 这很便宜. 区别在于 mc 之间的连接, fb-dram 没有使用平行数据总线而是使用一系列总线(Rambus DRAM had this back when, too, and SATA is the successor of PATA, as is PCI Express for PCI/AGP). 串行总线可以再一个更高的频率工作, 解决了串行总线的劣势甚至增加了带宽, 使用一系列总线的主要作用在于</p>
<ol type="1">
<li>一个channel可以使用更多的模块</li>
<li>每个 mc 可以控制更多 channel</li>
<li>串行总线设计为全双工</li>
<li>部署其他的总线和提高速度是很便宜的</li>
</ol>
<p>和 ddr2 的 240 个针脚相比, 一个 fb-dram 模块只有 69 个针脚. 分清连接的 fb-dram 模块是很容易的因为总线的电效应可以被更好的处理, fb-dram 允许每个 channel 连接至多 8 个 dram 模块</p>
<p>和双通道的北桥的连接要求相比, 现在可以用更少的针脚驱动 6 个 fb-dram channel: 2<em>240 针脚 vs 6</em>69针脚, 每个 channel 的路由都更简单, 这可以减少主板的成本</p>
<p>完全双工的并行总线对于传统的 dram 特别的昂贵, 重复这些线路太昂贵了. 使用串行总线(即使他们之间是不同的, 正如 fb-dram 要求的那样)这就不是问题而且串行总线就是被设计成全双工的, 这意味着在一些情况下, 理论上带宽是可以加倍的. 但这并不是并行被用来增加带宽的唯一地方, 由于 fb-dram 控制器可以同时控制最多 6 个 channel, 带宽可以使用 fb-dram 来使用更少的 ram 增加. 在有四个模块两个 channel 的 ddr2 系统的地方, 可以使用 4channel 的 fb-dram 控制器实现相同的性能, 实际的串行总线带宽取决于使用 fb-dram 的 ddr2(或 ddr3)芯片.</p>
<p>可以归纳为如下表格:</p>
<figure>
<img src="https://tva1.sinaimg.cn/large/008i3skNgy1gtakzswzclj30t00cqt9y.jpg" alt="截屏2021-08-09 下午3.44.14" /><figcaption aria-hidden="true">截屏2021-08-09 下午3.44.14</figcaption>
</figure>
<p>如果多个 dimm 使用在一个 channel 上, fb-dram 也有一些缺点, 信号在链中的每个 DIMM 处延迟（尽管是最低限度的），从而增加了延迟. 第二个问题是驱使着串行总线的芯片需要大量的能量因为有很高的频率而且要驱使总线, 但是对于使用相同频率和相同数量的 memory, fb-dram 总是比 ddr2 和ddr3 要快因为至多四个 dimm 可以各自拥有自己的 channel, 对于大的 memory 系统 ddr 无法使用商用组件.</p>
<h3 id="结论-1">2.2.5 结论</h3>
<p>这一部分展示了连接 dram不是可以任意快的过程, 至少不能和运行的处理器还有访问寄存器和缓存一样快, 要记住 cpu 频率和 memory 频率的区别, intel core2 处理器以 2.933GHz 频率运行, 而一个 1.066GHz 的 fsb 有一个 11:1 的时钟比(1.066GHz 的总线是四倍频的), memory 总线上的每一个时钟停止都意味着处理器上的 11 个时钟周期停止, 对于大多数机器, 实际的 dram 使用是更缓慢的因此更加增加了延迟 , 在我们接下来谈到暂停的时候请记住这些数据.</p>
<p>读指令的时间表展示了 dram 能保持高数据速率. 整个 dram 行可以在一个stall被传送, 数据总线可以保持一致被占用, 对 ddr 来说这意味着每个周期可以传送两个 64bit 字, 使用 ddr2-800 和两个 channel 意味着 12.8GB/s 的速率.</p>
<p>但是除非这样设计, 连接 dram不会一直是连续的, 不连续的 memory 区域会被使用, 这意味着需要预充电和新的 ras 信号, 这是速度会下降而且 dram 需要帮助, 行被实际使用时, 预充电和ras 信号越快代价就越小.</p>
<p>硬件和软件预提取可以创造更多的重叠减少stall, 预提取也会及时帮助改变memory 操作, 所以在数据被真正需要之前就会有更少的连接, 这是一个频率问题, 一轮中产生出来的数据必须被存储, 下一轮需要的数据必须被读取, 通过改变读的时间, 写操作和读操作不需要基本同时发出.</p>
<h2 id="其他主要-memory-用户">2.3 其他主要 memory 用户</h2>
<p>除了 cpu 还有其他系统组件可以连接主memory, 高性能 card 比如网卡和大存储控制器不能承担起运输所有他们需要或者提供给 cpu的数据, 因此, 他们直接从主 memory读写数据(direct memory access DMA), 在图 2.1 我们可以看到 card 可以使用 memory 直接可南北桥沟通, 其他总线, 比如 usb 也需要 fsb 带宽, 虽然他们不使用 dma, 因为南桥通过北桥使用 fsb 连接到处理器.</p>
<p>尽管 dma 很有用, 但它意味着 fsb 带宽有了更多的竞争, 在 DMA 流量高的时候，CPU 可能会在等待来自主memory的数据时比平时stall 更久. 使用合适的硬件就能解决这个问题, 有图 2.3 的结构, 可以确保计算使用没有被 dma 影响的节点, 也可以连接南桥到达节点, 均等的把 fsb 的负载分布到所有节点上, 这有无数种可能, 在第六部分我们会介绍帮助达到这种提升的软件技术和变成接口.</p>
<p>最后应该提到一些便宜的系统有非独立的图像系统, 专用图像 ram, 这些系统使用部分主 memory 当做图像ram, 由于访问图像 ram 是很经常的(对于一个 1024*768 显示屏有 16bpp 60Hz 我们是再说 94MB/s)并且系统 memory 不像显卡上的 ram, 没有两个 port这会本质上的影响系统性能特别是延迟, 他们利大于弊, 人们知道不会得到最好的性能买那些机器.</p>
<h1 id="cpu-缓存">3 cpu 缓存</h1>
<p>今天的 cpu 比 25 年前的精密很多, 那个时候, cpu core 的频率和 memory 总线在一个数量级, memory 访问只比寄存器访问慢一点, 但是这些在 90s 早期戏剧性的转变了, cpu 设计师们增加了 cpu core 的频率但是 memory 总线的频率和 ram 芯片的性能并没有成比例的增加, 这不是因为前面提到的更快的 ram 无法被造出来, 这是可以的但不经济, 和现代 cpu core一样快的 ram比任何 dram 都要贵几个数量级</p>
<p>如果要在有一个很小很快 ram 的机器 和 有一堆相对比较快的ram的机器 之间做选择, 给定的工作集大小超过小 RAM 大小 和 访问二级存储介质如硬盘驱动器的成本, 后者肯定没错, 问题是二级存储介质的速度, 通常是硬盘, 一定是常驻工作区的交换分区的, 访问这些硬盘比访问 dram 还要慢好几个数量级.</p>
<p>幸运的是不必做 0或1 的选择, 电脑可以有一个小的高速sram和一个大的 dram. 一种组合是分配一个特定的处理器地址空间专用于包含 sram , 剩下的为dram, 操作系统的任务是最优的分配数据来充分利用 sram, 基本上 sram 在这种情境下以处理器寄存器的扩展来使用.</p>
<p>尽管这是一种可能的方案但却不是可行的, 忽略这种 从 支持 sram 的硬件资源memory 映射到 进程虚拟地址空间的问题(本身就很困难)这种方法会要求每个进程在软件中管理这个 memory 区域的分配, 处理器之间这个 memory 区域的大小会差的很大(比如: 处理器们有不同数量的昂贵的 支持sram的memory), 每个组成程序的模块都会声明自己拥有的高速 memory, 这在同步上会引入新的损耗, 简而言之, 拥有高速 memory 的收益会被管理他们带来的损耗完全抵消掉.</p>
<p>所以, 不去把 sram 安置到操作系统或者用户的控制下, 而是把它变成由处理器直接使用和管理的资源. 这种模式下, sram 被用来制作main memory 中数据的临时副本(即缓存), 他们很快就会被处理器用到. 这是可行的因为程序代码和数据有时间和空间局部性, 这意味着在短时间内很有可能相同的代码和数据被使用. 对代码这意味着有循环因此相同的代码被反复执行(很好的空间局部性例子). 数据访问也恰好局限于一个小的区域. 即使短时间内使用的 memory 不是很近, 也有很高的概率相同的数据会被再次使用(时间局部性). 对于代码这意味着, 举个例子, 在一个循环中一个函数被调用而且这个函数位于地址空间的其他位置, 这个函数可能在 memory 中距离很远, 但是对函数的调用在时间上会很近， 对于数据这意味着同一时间使用的memory总量被理想的限制住了， 但是被使用的memory由于ram随意访问的特性不会相邻很近， 认识到局部性的存在是我们今天理解cpu缓存概念的关键。</p>
<p>一个简单的计算就能展示缓存在理论上是多有效， 假设访问主存花费200时钟周期，访问缓存memory花费15时钟周期， 那么代码使用100个数据每个一百次， 在访存上不使用缓存会花费2000000时钟周期，如果所有数据都在缓存中只需要168500时钟周期， 性能提升了91.5%。</p>
<p>sram缓存比主存小好几倍，在作者的经验里，有cpu缓存的工作站缓存大小通常是主存大小的1/1000（4MB缓存4GB主存）。这本身不构成问题，如果工作集（正在操作的数据集）比缓存小不会有什么问题， 但是电脑不会无缘无故有很大的缓存， 工作集势必比缓存要大，特别是对于运行多个进程的系统，工作集的大小是所有单独进程和内核的大小之和</p>
<p>处理有限的缓存大小需要一套好的策略来确定在任何给定时间应该缓存什么。由于并非工作集中的所有数据都在完全相同的时间使用，我们可以使用技术将缓存中的一些数据临时替换为其他数据。也许这可以在实际需要数据之前完成。这种预取将消除访问主存的一些成本，因为它相对于程序的执行是异步发生的。所有这些技术以及更多都可用于使缓存看起来比实际更大。我们将在 3.3 节中讨论它们。一旦利用了所有这些技术，就需要程序员来帮助处理器了。如何做到这一点将在第 6 节中讨论。</p>
<h2 id="cpu缓存概述">3.1 cpu缓存概述</h2>
<p>在深入研究 CPU 缓存实现的技术细节之前，一些读者可能会发现首先了解缓存如何融入现代计算机系统的“大图”的更多细节很有用。</p>
<p>图 3.1：最低缓存配置</p>
<p>图 3.1 显示了最低缓存配置。它对应于可以部署 CPU 缓存的早期系统的架构。 CPU 内核不再直接连接到主内存。所有的加载和存储都必须通过缓存。 CPU核心和缓存之间的连接是一种特殊的、快速的连接。在简化的表示中，主存储器和高速缓存连接到系统总线，系统总线也可用于与系统的其他组件通信。我们将系统总线称为“FSB”（front-side-bus），这是今天使用的名称；见第 2.2 节。在本节中，我们忽略北桥；假定它的存在是为了促进 CPU们与主存储器的通信。</p>
<p>尽管过去几十年的大多数计算机都使用冯诺依曼架构，但经验表明，将用于代码和数据的缓存分开是有利的。自 1993 年以来，英特尔一直使用单独的代码和数据缓存，并且从未回头。代码和数据所需的内存区域几乎是相互独立的，这就是独立缓存更好地工作的原因。近年来出现了另一个优势：大多数常见处理器的指令解码步骤很慢；缓存解码的指令可以加快执行速度，尤其是当流水线由于错误预测或无法预测的分支而为空时。</p>
<p>引入缓存后不久，系统变得更加复杂。缓存和主存之间的速度差距再次拉大，以至于增加了另一级缓存，比一级缓存更大更慢。出于经济原因，仅增加一级缓存的大小不是一种选择。今天，甚至有正常使用的具有三级缓存的机器。具有这种处理器的系统如图 3.2 所示。随着单个 CPU 中core数量的增加，未来缓存层级的数量可能会增加更多。</p>
<p>图 3.2 显示了三个缓存级别，并介绍了我们将在文档的其余部分中使用的命名法。 L1d 是一级数据缓存，L1i 是一级指令缓存，等等。注意这是示意图；实际上，数据流在从核心到主存的过程中不需要通过任何更高级别的高速缓存。cpu设计者在缓存的接口上有很大的设计自由。对于程序员这些设计选择是可见的。</p>
<p>此外，我们有具有多个内核的处理器，每个内核可以有多个“线程”。内核和线程之间的区别在于，不同的内核拥有（几乎）所有硬件资源的独立副本。核心可以完全独立运行，除非它们同时使用相同的资源——例如与外部的连接。另一方面，线程共享处理器的几乎所有资源。英特尔的线程实现只有单独的线程寄存器，即使是有限的，一些寄存器也是共享的。因此，现代 CPU 的完整图如图 3.3 所示。</p>
<p>图 3.3：多处理器、多核、多线程</p>
<p>在此图中，我们有两个处理器，每个处理器有两个内核，每个处理器有两个线程。线程共享一级缓存。core（深灰色阴影）具有单独的 1 级缓存。 CPU 的所有内核共享更高级别的缓存。两个处理器（浅灰色阴影的两个大框）当然不共享任何缓存。所有这些都很重要，特别是当我们讨论缓存对多进程和多线程应用程序的影响时。</p>
<h2 id="高级别的缓存操作">3.2 高级别的缓存操作</h2>
<p>要了解使用缓存的成本和节省，我们必须将第 2 节中有关机器架构和 RAM 技术的知识与上一节中描述的缓存结构相结合。</p>
<p>默认情况下，CPU 内核读取或写入的所有数据都存储在缓存中。有些内存区域不能被缓存，但这只是操作系统实现者必须关心的事情；它对应用程序程序员是不可见的。还有一些指令允许程序员故意绕过某些缓存。这将在第 6 节中讨论。</p>
<p>如果 CPU 需要一个数据字，则首先搜索缓存。显然，缓存不能包含整个主存的内容（否则我们将不需要缓存），但由于所有内存地址都是可缓存的，因此每个缓存条目都使用<strong>主存中数据字的地址进行标记</strong>。这样，读取或写入地址的请求可以在缓存中搜索匹配的标签。此上下文中的地址可以是虚拟地址或物理地址，具体取决于缓存实现。</p>
<p>由于对于标签，除了实际内存之外，还需要额外的空间，因此选择一个字作为缓存的粒度是低效的。对于 x86 机器上的 32 位字，标签本身可能需要 32 位或更多。此外，由于空间局部性是缓存所基于的原则之一，不考虑这一点是很糟糕的。由于相邻的memory很可能一起使用，它也应该一起加载到缓存中。还记得我们在第 2.2.1 节中学到的内容：如果 RAM 模块可以在没有新的 CAS 甚至 RAS 的情况下连续传输许多数据字，那么它们的效率会更高。因此，存储在缓存中的条目不是单个字，而是几个连续字的“lines（行）”。在早期的缓存中，这些行是 32 字节长；现在的标准是 64 字节。如果内存总线是 64 位宽，这意味着每个高速缓存行需要 8 次传输。 DDR 有效地支持这种传输模式。</p>
<p>当处理器需要memory内容时，整个缓存行被加载到 L1d 中。每个缓存行的内存地址是通过根据高速缓存行大小屏蔽（mask）地址值来计算的。对于 64 字节缓存行，这意味着低 6 位为零。丢弃的位用作缓存行的偏移量（offset）。其余位在某些情况下用于定位缓存行并用作标记（tag）。在实践中，地址值被分成三个部分。对于 32 位地址，它可能如下所示：</p>
<p>cache line 示意图</p>
<p>对于大小为 2<sup>O</sup> 的缓存行，<strong>低O位被用作缓存行的offset</strong>，接下来的 S 位选择“缓存集（cache set）”。我们将很快详细介绍为什么将集合而不是单个插槽（slot）用于缓存行。<strong>现在了解有 2<sup>S</sup> 组缓存行就足够了。这留下了形成标签的前 32−S−O = T 位</strong>。T 位是与每个缓存行关联的值，用于区分缓存在同一缓存集中的所有别名（alias，All cache lines with the same S part of the address are known by the same alias.）。不必存储用于寻址缓存集的 S 位，因为它们对于同一集中的所有缓存行都是相同的。</p>
<p>当一条指令修改内存时，处理器仍然必须首先加载一个缓存行，因为没有指令一次修改整个缓存行（例外：写组合，如第 6.1 节所述）。因此，必须加载写入操作之前的缓存行内容。缓存不可能保存部分缓存行。已写入但尚未写回主存的高速缓存行被称为“脏（dirty）”。一旦写入，脏标志就会被清除。</p>
<p>为了能够在缓存中加载新数据，几乎总是首先需要在缓存中腾出空间。来自 L1d 的收回（eviction）将缓存行向下推到 L2（使用相同的缓存行大小）。这当然意味着必须在 L2 中腾出空间。这反过来可能会将内容推入 L3 并最终推入主内存。每次回收的成本都越来越高。这里描述的是现代 AMD 和 VIA 处理器首选的独占缓存（exclusive cache）模型。英特尔实现了包容性缓存（inclusive cache），其中 L1d 中的每个缓存行也存在于 L2 中。因此，从 L1d 驱逐要快得多。有了足够的二级缓存，在两个地方保存内容而浪费内存的缺点是最小的，并且在回收时得到了回报。独占缓存的一个可能优势是加载新的缓存行只需要触及 L1d 而不是 L2，这可能会更快。</p>
<p>只要不更改为处理器架构定义的内存模型，CPU 就可以随意管理缓存。例如，处理器利用很少或不使用内存总线活动并主动将脏缓存行写回主内存是可以的。 x86 和 x86-64 处理器之间、制造商之间甚至同一制造商的模型中的各种缓存架构都证明了内存模型抽象的力量。</p>
<p>在对称多处理器 (SMP symmetric multi-processor) 系统中，CPU 的高速缓存不能彼此独立工作。所有处理器都应该始终看到相同的内存内容。保持这种统一的内存视图称为“缓存一致性（cache coherency）”。<strong>如果一个处理器只看它自己的缓存和主存，它不会看到其他处理器中脏缓存行的内容</strong>。提供从另一个处理器直接访问一个处理器的缓存将非常昂贵并且是一个巨大的瓶颈。相反，处理器会检测另一个处理器何时想要读取或写入某个高速缓存行。</p>
<p>如果检测到写访问并且处理器在其缓存中具有缓存行的干净副本，则该高速缓存行被标记为无效（invalid）。未来的引用将需要重新加载缓存行。请注意，另一个 CPU 上的读取访问不需要失效，可以很好地保留多个干净的副本。</p>
<p>更复杂的缓存实现允许发生另一种可能性。假设一个处理器的缓存中的缓存行是脏的，而第二个处理器想要读取或写入该缓存行。在这种情况下，主内存已过期，请求处理器必须从第一个处理器获取缓存行内容。通过窥探（snooping），第一个处理器注意到这种情况并自动向请求处理器发送数据。这个动作绕过了主存，尽管在某些实现中，MC应该注意到这种直接传输并将更新的高速缓存行内容存储在主存中，如果访问是为了写入第一个处理器，则使其本地缓存行的副本无效。</p>
<p>随着时间的推移，已经开发了许多缓存一致性协议。最重要的是MESI，我们将在3.3.4节中介绍。所有这些的结果可以总结为几个简单的规则： • 任何其他处理器的缓存中都不呈现脏缓存行。 • 同一高速缓存行的干净副本可以驻留在任意多个高速缓存中。 如果可以维护这些规则，即使在多处理器系统中，处理器也可以有效地使用它们的缓存。所有处理器需要做的就是监视彼此的<strong>写访问</strong>并将地址与本地缓存中的地址进行比较。在下一节中，我们将详细介绍有关实施的一些细节，尤其是成本。</p>
<p>最后，我们至少应该对与缓存命中和未命中相关的成本有一个印象。以下是 Intel 列出的 Pentium M 数据：</p>
<p>表格</p>
<p>这些是以 CPU 周期测量的实际访问时间。有趣的是，对于on-die L2 缓存访问时间的很大一部分（甚至可能是主要部分）是由线路延迟引起的。这是一个物理限制，它只会随着缓存大小的增加而变得更糟。只有缩小工艺（例如，在英特尔的产品阵​​容中，从 Merom 的 60nm 到 Penryn 的 45nm）才能改善这些数字。</p>
<p>表中的数字看起来很高，但幸运的是，不必为每次出现的缓存加载和未命中支付全部成本。部分成本是可以隐藏的。今天的处理器都使用不同长度的内部流水线，在这里指令被解码并准备执行。准备工作的一部分是从内存（或缓存）中加载值，如果它们被传输到寄存器。如果内存加载操作可以在流水线中足够早地启动，它可能会与其他操作并行发生，并且加载的整个成本可能会被隐藏。对于 L1d，这通常是可能的；对于一些具有长流水线的 L2 处理器也是如此。</p>
<p>提前启动内存读取有很多障碍。这可能就像没有足够的内存访问资源一样简单，也可能是由于加载的最终地址是另一条指令的结果。在这些情况下，负载成本不能（完全）隐藏。</p>
<p>对于写操作，CPU 不必等到值安全地存储在内存中。只要执行接下来的指令看起来与将值存储在内存中具有相同的效果，就没有什么可以阻止 CPU 走捷径。它可以提前开始执行下一条指令。借助可以保存常规寄存器中不再可用的值的影子寄存器（shadow register），甚至可以更改要存储的不完整写操作中的值。</p>
<p>图3.4</p>
<p>有关缓存行为影响的说明，请参见图 3.4。稍后我们将讨论生成数据的程序；它是一个程序的简单模拟，它以随机方式重复访问可配置数量的内存。每个数据项都有固定的大小。元素的数量取决于所选的工作集。Y 轴显示处理一个元素所需的平均 CPU 周期数；请注意，Y 轴的刻度是对数。这同样适用于 X 轴的所有此类图表。工作集的大小总是以 2 的幂表示。</p>
<p>该图显示了三个不同的平台。这并不奇怪：特定的处理器有 L1d 和 L2 缓存，但没有 L3。根据一些经验，我们可以推断出 L1d 的大小为 2<sup>13</sup> 字节，而 L2 的大小为 2<sup>20</sup> 字节。如果整个工作集适合 L1d，则每个元素的每次操作周期低于 1​​0。一旦超过 L1d 大小，处理器必须从 L2 加载数据，平均时间会上升到 28 左右。一旦 L2 不够时间再跳到 480 个周期甚至更多。这是许多或大多数操作必须从主存储器加载数据的时候。更糟糕的是：由于数据正在被修改，脏缓存行也必须被写回。</p>
<p>该图应该为研究有助于提高缓存使用率的编码改进提供足够的动力。我们在这里谈论的不是微不足道的百分之几的差异。我们谈论的是数量级的改进，这些改进有时是可能的。在第 6 节中，我们将讨论允许编写更高效代码的技术。下一节将详细介绍 CPU 缓存设计。这些知识是很好的，但对于论文的其余部分来说不是必需的。所以本节可以跳过。</p>
<h2 id="cpu缓存实现细节">3.3 CPU缓存实现细节</h2>
<p>缓存实现者的问题是，巨大的主存中的每个单元都可能需要被缓存。如果程序的工作集足够大，这意味着有许多主存位置在争夺缓存中的位置。以前有人指出，高速缓存与主内存大小的比率为 1 比 1000 并不少见。</p>
<h3 id="关联性">3.3.1 关联性</h3>
<p>可以实现一个缓存，其中每个缓存行都可以保存任何内存位置的副本（参见图 3.5）。这称为<strong>完全关联缓存</strong>。为了访问高速缓存行，处理器内核必须将每个高速缓存行的标签与请求地址的标签进行比较。标签将由地址的整个部分组成，而不是缓存行的偏移量（这意味着，第 15 页上的图中的 S 为零）。</p>
<p>有一些缓存是这样实现的，但是通过查看当今使用的 L2 的数据，将表明这是不切实际的。给定一个 4MB 缓存和 64B 缓存行，该高速缓存将有 65,536 个条目。为了获得足够的性能，缓存逻辑必须能够在短短几个周期内从所有这些条目中挑选出与给定标签匹配的条目。为了实现这个需要需要花费很大的努力。</p>
<p>图3.5</p>
<p>对于每个高速缓存行，需要一个比较器来比较标签（注意，S 为零）。每个连接旁边的字母表示宽度（以位为单位）。如果没有给出，则大小为1位。每个比较器必须比较两个 T 位宽的值。然后，根据结果，选择适当的缓存行内容并使其可用。这需要合并与缓存桶（cache bucket）一样多的O数据行集。实现单个比较器所需的晶体管数量很大，特别是因为它必须工作得非常快。没有迭代比较器是可用的。节省比较器数量的唯一方法是通过迭代比较标签来减少它们的数量。因为相同的原因这不适合迭代比较器：它需要太长时间。</p>
<p>全关联高速缓存对于小型高速缓存很实用（例如，某些英特尔处理器上的 TLB（translation lookaside buffer） 高速缓存是全关联高速缓存），但这些高速缓存很小，非常小。我们最多谈论几十个条目。</p>
<p>图3.6</p>
<p>对于 L1i、L1d 和更高级别的缓存，需要不同的方法。可以做的是限制搜索。在最极端的限制下，每个标签都映射到一个缓存条目。计算很简单：给定具有 65,536 个条目的 4MB/64B 缓存，我们可以使用地址的第 6 位到第 21 位（16 位）直接寻址每个条目。低 6 位是缓存行的索引。</p>
<p>这样一个<strong>直接映射缓存</strong>很快而且比较容易实现如图3.6所示。他只需要一个比较器，一个多路复用器（图中的两个，标签和数据是分开的，但这不是设计的硬性要求），以及一些仅选择有效缓存行内容的逻辑。由于速度要求，比较器很复杂，但现在只有一个；因此，可以花费更多的精力来加快速度。这种方法的真正复杂性在于多路复用器。简单多路复用器中的晶体管数量随 O(log N) 增长，其中 N 是高速缓存行的数量。这是可以容忍的，但可能会变慢，在这种情况下，可以通过在多路复用器中的晶体管上花费更多的空间来并行化一些工作和提高速度，从而提高速度。随着高速缓存大小的增加，晶体管的总数会缓慢增长，这使得该解决方案非常有吸引力。但它有一个缺点：只有当程序使用的地址相对于用于直接映射的位均匀分布时，它才能正常工作。如果它们不是，通常是这种情况，一些缓存条目被大量使用并因此被重复驱逐，而另一些则几乎不被使用或保持为空。</p>
<p>图 3.7：组关联缓存原理图</p>
<p>这个问题可以通过使缓存集关联来解决。<strong>组相联缓存</strong>结合了全相联缓存和直接映射缓存的优点，在很大程度上避免了这些设计的弱点。图 3.7 显示了组相 联缓存的设计。标记和数据存储分为一组，其中一组由高速缓存行的地址选择。这类似于直接映射缓存。但是，缓存中的每个设置值不是只有一个元素，而是为相同的设置值缓存了少量值。并行比较所有集合成员的标签，这类似于完全关联缓存的功能。结果是一个缓存不容易被不幸或故意选择具有相同组号的地址所破坏，同时缓存的大小不受比较器数量的限制，可以经济地实现。如果缓存增长，（在此图中）只是增加的列数，而不是行数。只有当缓存的关联性增加时，行数（因此比较器）才会增加。今天的处理器对 L2 高速缓存或更高的缓存使用了高达 24 的关联级别。 L1 缓存通常使用 8 组。</p>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>memory</tag>
        <tag>dram</tag>
        <tag>cpu</tag>
        <tag>sram</tag>
        <tag>cas</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式读书笔记</title>
    <url>/2022/11/c7cdc8607a22.html</url>
    <content><![CDATA[<blockquote>
<p>设计模式读书笔记, 内含大量设计模式</p>
</blockquote>
<span id="more"></span>
<h1 id="引言">引言</h1>
<h2 id="smalltalk-中的-mvc">smalltalk 中的 MVC</h2>
<p>MVC通过建立一个“订购/通知”协议来分离视图和模型。视图必须保证它的显示正确地 反映了模型的状态。一旦模型的数据发生变化，<strong>模型将通知有关的视图</strong>，每个视图相应地得 到刷新自己的机会。这种方法可以让你为一个模型提供不同的多个视图表现形式，也能够为 一个模型创建新的视图而无须重写模型。</p>
<p>MVC允许你在不改变视图外观的情况下改变视图对用户输入的响应方式。例如，你可能 希望改变视图对健盘的响应方式，或希望使用弹出菜单而不是原来的命令键方式。<strong>Mvc将响应机制封装在Controller对象中</strong>。存在着一个Controller的类层次结构，使得可以方便地对原有 Controller做适当改变而创建新的Controller。</p>
<p>View使用Controller子类的实例来实现一个特定的响应策略。要实现不同的响应策略只要 用不同种类的Controller实例替换即可。甚至可以在运行时刻通过改变View的Controller来改变 View对用户输人的响应方式。</p>
<h2 id="设计模式概述">设计模式概述</h2>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8asyp10d7j30u00uen05.jpg" alt="截屏2022-11-19 22.24.51" />第一是目的准则，即模式是用来完成什么工作的。模式依据其目的可分为创建型(Creational）、结构型(Structural)、或行为型 (Behavioral)三种。创建型模式与对象的创建有关；结构型模式处理类或对象的组合；行为型 模式对类或对象怎样交互和怎样分配职贲进行描述。</p>
<p>第二是范围准则，指定模式主要是用于类还是用于对象。类模式处理类和子类之间的关系，这些关系通过继承建立，是静态的，在编译时刻便确定下来了。对象模式处理对象间的 关系，这些关系在运行时刻是可以变化的，更具动态性。从某种意义上来说，几乎所有模式 都使用继承机制，所以“类模式〞只指那些集中于处理类间关系的模式，而大部分模式都属 于对象模式的范時。</p>
<ul>
<li>动态绑定: 发送给对象的请求和他的相应操作在运行时刻的链接就称之为动态绑定</li>
<li>多态: 动态绑定允许在运行时刻彼此替换油腻相同接口的对象, 这种可替换性就叫做多态</li>
<li>OMT是Object Modeling Technique</li>
<li>类继承: 白箱复用, 会破坏封装性</li>
<li>对象组合: 黑箱复用, 相比于继承应该优先使用</li>
<li>委托: 接受请求的对象将操作委托给代理者(has-a), 是对象组合的特例</li>
<li>参数化类型</li>
<li>区分聚合和相识(?关联)</li>
</ul>
<h1 id="实例研究文档编辑器">实例研究文档编辑器</h1>
<ul>
<li>递归组合, 由简单元素建立复杂元素</li>
</ul>
<h1 id="创建型模式">创建型模式</h1>
<h2 id="abstract-factory">abstract factory</h2>
<p>用抽象工厂构建不同系列的部件</p>
<p>提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">classDiagram</span><br><span class="line">direction TB</span><br><span class="line"></span><br><span class="line">   class AbstractFactory&#123;</span><br><span class="line">     CreateA()</span><br><span class="line">     CreateB()</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">   class ConcreteFactory1&#123;</span><br><span class="line">   	 CreateA()</span><br><span class="line">     CreateB()</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   class ConcreteFactory2&#123;</span><br><span class="line">   	 CreateA()</span><br><span class="line">     CreateB()</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   ConcreteFactory1--|&gt;AbstractFactory</span><br><span class="line">   ConcreteFactory2--|&gt;AbstractFactory</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">		class AbstractA</span><br><span class="line">     </span><br><span class="line">     class A2</span><br><span class="line">     A1--AbstractA</span><br><span class="line">     A2--AbstractA</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">	 </span><br><span class="line">     class AbstractB</span><br><span class="line">     class B1</span><br><span class="line">     class B2 </span><br><span class="line">     B1--|&gt;AbstractB</span><br><span class="line">     B2--|&gt;AbstractB</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     ConcreteFactory1..&gt;A1</span><br><span class="line">     ConcreteFactory1..&gt;B1</span><br><span class="line"></span><br><span class="line">     ConcreteFactory2..&gt;A2</span><br><span class="line">     ConcreteFactory2..&gt;B2</span><br><span class="line">   </span><br><span class="line">   </span><br></pre></td></tr></table></figure>
<ul>
<li>Decide if "platform independence" and creation services are the current source of pain.</li>
<li>Map out a matrix of "platforms" versus "products".</li>
<li>Define a factory interface that consists of a factory method per product.</li>
<li>Define a factory derived class for each platform that encapsulates all references to the <code>new</code> operator.</li>
<li>The client should retire all references to <code>new</code>, and use the factory methods to create the product objects.</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Purpose.  Abstract Factory design pattern demo.</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Discussion.  &quot;Think of constructors as factories that churn out objects&quot;.</span></span><br><span class="line"><span class="comment">// Here we are allocating the constructor responsibility to a factory object,</span></span><br><span class="line"><span class="comment">// and then using inheritance and virtual member functions to provide a</span></span><br><span class="line"><span class="comment">// &quot;virtual constructor&quot; capability.  So there are two dimensions of</span></span><br><span class="line"><span class="comment">// decoupling occurring.  The client uses the factory object instead of &quot;new&quot;</span></span><br><span class="line"><span class="comment">// to request instances; and, the client &quot;hard-wires&quot; the family, or class, of</span></span><br><span class="line"><span class="comment">// that factory only once, and throughout the remainder of the application</span></span><br><span class="line"><span class="comment">// only relies on the abstract base class.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">   <span class="built_in">Shape</span>()              &#123; id_ = total_++; &#125;</span><br><span class="line">   <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">draw</span><span class="params">()</span>  </span>= <span class="number">0</span>;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">   <span class="type">int</span>         id_;</span><br><span class="line">   <span class="type">static</span> <span class="type">int</span>  total_;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> Shape::total_ = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> : <span class="keyword">public</span> Shape &#123; <span class="keyword">public</span>:</span><br><span class="line">   <span class="function"><span class="type">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;circle &quot;</span> &lt;&lt; id_ &lt;&lt; <span class="string">&quot;: draw&quot;</span> &lt;&lt; endl; &#125; &#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Square</span> : <span class="keyword">public</span> Shape &#123; <span class="keyword">public</span>:</span><br><span class="line">   <span class="function"><span class="type">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;square &quot;</span> &lt;&lt; id_ &lt;&lt; <span class="string">&quot;: draw&quot;</span> &lt;&lt; endl; &#125; &#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Ellipse</span> : <span class="keyword">public</span> Shape &#123; <span class="keyword">public</span>:</span><br><span class="line">   <span class="function"><span class="type">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;ellipse &quot;</span> &lt;&lt; id_ &lt;&lt; <span class="string">&quot;: draw&quot;</span> &lt;&lt; endl; &#125; &#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span> : <span class="keyword">public</span> Shape &#123; <span class="keyword">public</span>:</span><br><span class="line">   <span class="function"><span class="type">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;rectangle &quot;</span> &lt;&lt; id_ &lt;&lt; <span class="string">&quot;: draw&quot;</span> &lt;&lt; endl; &#125; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Factory</span> &#123; <span class="keyword">public</span>:</span><br><span class="line">   <span class="function"><span class="keyword">virtual</span> Shape* <span class="title">createCurvedInstance</span><span class="params">()</span>   </span>= <span class="number">0</span>;</span><br><span class="line">   <span class="function"><span class="keyword">virtual</span> Shape* <span class="title">createStraightInstance</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SimpleShapeFactory</span> : <span class="keyword">public</span> Factory &#123; <span class="keyword">public</span>:</span><br><span class="line">   <span class="function">Shape* <span class="title">createCurvedInstance</span><span class="params">()</span>   </span>&#123; <span class="keyword">return</span> <span class="keyword">new</span> Circle; &#125;</span><br><span class="line">   <span class="function">Shape* <span class="title">createStraightInstance</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">new</span> Square; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RobustShapeFactory</span> : <span class="keyword">public</span> Factory &#123; <span class="keyword">public</span>:</span><br><span class="line">   <span class="function">Shape* <span class="title">createCurvedInstance</span><span class="params">()</span>   </span>&#123; <span class="keyword">return</span> <span class="keyword">new</span> Ellipse; &#125;</span><br><span class="line">   <span class="function">Shape* <span class="title">createStraightInstance</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">new</span> Rectangle; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> SIMPLE</span></span><br><span class="line">   Factory*  factory = <span class="keyword">new</span> SimpleShapeFactory;</span><br><span class="line"><span class="meta">#<span class="keyword">elif</span> ROBUST</span></span><br><span class="line">   Factory*  factory = <span class="keyword">new</span> RobustShapeFactory;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">   Shape*    shapes[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">   shapes[<span class="number">0</span>] = factory-&gt;<span class="built_in">createCurvedInstance</span>();   <span class="comment">// shapes[0] = new Ellipse;</span></span><br><span class="line">   shapes[<span class="number">1</span>] = factory-&gt;<span class="built_in">createStraightInstance</span>(); <span class="comment">// shapes[1] = new Rectangle;</span></span><br><span class="line">   shapes[<span class="number">2</span>] = factory-&gt;<span class="built_in">createCurvedInstance</span>();   <span class="comment">// shapes[2] = new Ellipse;</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">      shapes[i]-&gt;<span class="built_in">draw</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ellipse 0: draw</span></span><br><span class="line"><span class="comment">// rectangle 1: draw</span></span><br></pre></td></tr></table></figure>
<h2 id="builder">builder</h2>
<p>将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。</p>
<p>使用向导指导 builder 构建部件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">classDiagram</span><br><span class="line">direction BT</span><br><span class="line"></span><br><span class="line">   class Director&#123;</span><br><span class="line">     Construct()</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">   class Builder&#123;</span><br><span class="line">   	 BuildPart()</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   class ConcreteBuilder&#123;</span><br><span class="line">   	 BuildPart()</span><br><span class="line">     GetResult()</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">   Director o--&gt; Builder</span><br><span class="line">   ConcreteBuilder --|&gt; Builder</span><br><span class="line">   ConcreteBuilder ..&gt; Product</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Director::Construct()</span><br><span class="line">for all objects in structure&#123;</span><br><span class="line">	builder-&gt;BuildPart</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>将一个复杂对象的构建(director)与它的表示(builder)分离</li>
<li>不同的Director可以复用它以在相同部件集合的基础上构作不同的 Product</li>
<li>它使你可对构造过程进行更精细的控制, Builder模式与一下子就生成产品的创建型模式不同，它是在导向者的控制下一步一步构造产品的</li>
</ul>
<h2 id="factory-method">factory method</h2>
<p>定义一个用于创建对象的接口, 让子类决定实例化哪一个类, FactoryMethod使一个类的实例化延迟到其子类。</p>
<p>框架使用抽象类定义和维护对象之间的关系。这些对象的创建通常也由框架负责</p>
<p>当一个类希望由它的子类来指定它所创建的对象的时候</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">classDiagram</span><br><span class="line">direction BT</span><br><span class="line"></span><br><span class="line">   class Creator&#123;</span><br><span class="line">     FactoryMethod()</span><br><span class="line">     AnOperation()</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">   class ConcreteCreator&#123;</span><br><span class="line">   	 FactoryMethod()</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">   ConcreteCreator ..|&gt; ConcreteProduct</span><br><span class="line">   ConcreteCreator --|&gt; Creator</span><br><span class="line">   ConcreteProduct --|&gt; Product</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Creator:</span><br><span class="line">product = FactoryMethod()</span><br><span class="line"></span><br><span class="line">ConcreteCreator:</span><br><span class="line">return new ConcreteProduct</span><br></pre></td></tr></table></figure>
<ul>
<li>工厂方法不再将与特定应用有关的类绑定到你的代码中。代码仅处理Prodact 因此它可以与用户定义的任何 ConcreteProduct 类一起使用</li>
<li>工厂方法的一个潜在缺点在于客户可能仅仅为了创建一个特定的ConcreteProduct对象， 就不得不创建Creator的子类</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//lazy init</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Creator</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function">Product *<span class="title">GetProduct</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> Product *<span class="title">CreateProduct</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    Product *_product;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">Product *<span class="title">Creator::GetProduct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (_product = <span class="number">0</span>) &#123;</span><br><span class="line">        _product = <span class="built_in">CreateProduct</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _product;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="prototype">prototype</h2>
<p>用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">classDiagram</span><br><span class="line">direction LR</span><br><span class="line"></span><br><span class="line">   class Client&#123;</span><br><span class="line">     Operation()</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">   class Prototype&#123;</span><br><span class="line">   	 Clone()</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   class ConcretePrototype1&#123;</span><br><span class="line">   	 Clone()</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   class ConcretePrototype2&#123;</span><br><span class="line">   	 Clone()</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">   ConcretePrototype1 --|&gt; Prototype</span><br><span class="line">   ConcretePrototype2 --|&gt; Prototype</span><br><span class="line">   Client o--&gt; Prototype</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Client:</span><br><span class="line">p = prototype-&gt;Clone()</span><br></pre></td></tr></table></figure>
<ul>
<li>因为客户可以在运行时刻建立和删除原型。</li>
<li>减少子类的构造</li>
</ul>
<h2 id="singleton">singleton</h2>
<p>保证一个类仅有一个实例，并提供一个访问它的全局访问点。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">classDiagram</span><br><span class="line">direction LR</span><br><span class="line"></span><br><span class="line">   class Singleton&#123;</span><br><span class="line">     static Instance()</span><br><span class="line">     SingletonOperation()</span><br><span class="line">     GetSingletonData()</span><br><span class="line">     static uniqueInstance</span><br><span class="line">     singletonData</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">static Instance()&#123;</span><br><span class="line">	return uniqueInstance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>类封装唯一实例</li>
</ul>
<h1 id="结构型模式">结构型模式</h1>
<h2 id="adapterwrapper">adapter/wrapper</h2>
<p>将一个类的接口转换成客户希望的另外一个接口。Adapter模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">classDiagram</span><br><span class="line">direction BT</span><br><span class="line"></span><br><span class="line">   class Client&#123;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">   class Target&#123;</span><br><span class="line">   	 Request()</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   class Adaptee&#123;</span><br><span class="line">   	 SpecificRequest()</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   class Adapter&#123;</span><br><span class="line">   	 Rquest()</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">   Client --&gt; Target</span><br><span class="line">   Adapter --|&gt; Target</span><br><span class="line">   Adapter --|&gt; Adaptee</span><br><span class="line">   %% or</span><br><span class="line">   Adapter --&gt; Adaptee</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>使用C++实现适配器类 在使用C++实现适配器类时，Adapter类应该采用公共方式继 承Target 类，并且用私有方式继承Adapiee类</li>
</ul>
<h2 id="bridge">bridge</h2>
<p>将抽象部分与它的实现部分分离，使它们都可以独立地变化。</p>
<p>Abstraction将client 的请求转发给它的Implementor对象</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">classDiagram</span><br><span class="line">direction BT</span><br><span class="line"></span><br><span class="line">   class Abstraction&#123;</span><br><span class="line">   Operation()</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">   class RefinedAbstraction&#123;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   class Implementor&#123;</span><br><span class="line">   	 OperationImp()</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   class ConcreteImplementorB&#123;</span><br><span class="line">   	 OperationImp()</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   class ConcreteImplementorA&#123;</span><br><span class="line">   	 OperationImp()</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">	 Abstraction o--&gt; Implementor</span><br><span class="line">   RefinedAbstraction --|&gt; Abstraction</span><br><span class="line">   ConcreteImplementorA --|&gt; Implementor</span><br><span class="line">   ConcreteImplementorB --|&gt; Implementor</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>分离接口及其实现部分 一个实现未必不变地绑定在一个接又上。抽象类的实现可以 在运行时刻进行配置， 一个对象甚至可以在运行时刻改变它的实现</li>
<li></li>
</ul>
<h2 id="composite">composite</h2>
<p>将对象组合成树形结构以表示〝部分-整体” 的层次结构。Composite使得用户对单个对象 和组合对象的使用具有一致性。</p>
<p>用户使用Component类接口与组合结构中的对象进行交互。如果接收者是一个叶节点,则直接处理请求。如果接收者是Composite，它通常将请求发送给它的子部件，在转发请求 之前与/或之后可能执行一些辅助操作。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">classDiagram</span><br><span class="line">direction BT</span><br><span class="line"></span><br><span class="line">   class Client&#123;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">   class Component&#123;</span><br><span class="line">   Operation()</span><br><span class="line">   Add(Component)</span><br><span class="line">   Remove(Component)</span><br><span class="line">   GetChild(int)</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   class Leaf&#123;</span><br><span class="line">   	 Operation()</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   class Composite&#123;</span><br><span class="line">   Operation()</span><br><span class="line">   Add(Component)</span><br><span class="line">   Remove(Component)</span><br><span class="line">   GetChild(int)</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">	 Client --&gt; Component</span><br><span class="line">   Leaf --|&gt; Component</span><br><span class="line">   Composite --|&gt; Component</span><br><span class="line">   Composite o--&gt; Component</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Composite Operation:</span><br><span class="line">for all g in children:</span><br><span class="line">	g.Operation()</span><br></pre></td></tr></table></figure>
<h2 id="decoratorwrapper">decorator/wrapper</h2>
<p>动态地给一个对象添加 一些额外的职责。就增加功能来说，Decorator 模式相比生成子类 更为灵活。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">classDiagram</span><br><span class="line">direction BT</span><br><span class="line">   </span><br><span class="line">   class Component&#123;</span><br><span class="line">   Operation()</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   class ConcreteComponent&#123;</span><br><span class="line">   	 Operation()</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   class Decorator&#123;</span><br><span class="line">   Operation()</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   class ConcreteDecoratorA&#123;</span><br><span class="line">   addedState</span><br><span class="line">   	 Operation()</span><br><span class="line">   &#125;</span><br><span class="line">   class ConcreteDecoratorB&#123;</span><br><span class="line">   	 Operation()</span><br><span class="line">   	 AddedBehavior()</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">	 ConcreteDecoratorA --|&gt; Decorator</span><br><span class="line">   ConcreteDecoratorB --|&gt; Decorator</span><br><span class="line">    ConcreteComponent --|&gt; Component</span><br><span class="line">   Decorator --|&gt; Component</span><br><span class="line">   Decorator o--&gt; Component</span><br><span class="line">  </span><br><span class="line">   </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ConcreteDecoratorB Operation():</span><br><span class="line">Decorator::Operation()</span><br><span class="line">AddedBehavior()</span><br><span class="line"></span><br><span class="line">Decorator Operation():</span><br><span class="line">component-&gt;Operation()</span><br></pre></td></tr></table></figure>
<h2 id="facade">facade</h2>
<p>为子系统中的 一组接口提供 一个 一致的界面</p>
<h2 id="flyweight">flyweight</h2>
<p>运用共享技术有效地支持大量细粒度的对象。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">classDiagram</span><br><span class="line">direction BT</span><br><span class="line">   </span><br><span class="line">   class FlyweightFactory&#123;</span><br><span class="line">   GetFlyweight(key)</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   class Flyweight&#123;</span><br><span class="line">   Operation(extrinsicState)</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   class ConcreteFlyweight&#123;</span><br><span class="line">   	 Operation(extrinsicState)</span><br><span class="line">   	 intrinsicState</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   class UnsharedConcreteFlyweight&#123;</span><br><span class="line">   Operation(extrinsicState)</span><br><span class="line">   allState</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">	 FlyweightFactory o--&gt; Flyweight</span><br><span class="line">   ConcreteFlyweight --|&gt; Flyweight</span><br><span class="line">   UnsharedConcreteFlyweight --|&gt; Flyweight</span><br><span class="line">   Client --&gt; FlyweightFactory</span><br><span class="line">   Client --&gt; ConcreteFlyweight</span><br><span class="line">   Client --&gt; UnsharedConcreteFlyweight</span><br><span class="line">  </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FlyweightFactory GetFlyweight(key):</span><br><span class="line">if(flyweight[key] exists)&#123;</span><br><span class="line">	return existing flyweight;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">	create new flyweight;</span><br><span class="line">	add it to pool of flyweights;</span><br><span class="line">	return the new flyweight;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="proxy">proxy</h2>
<p>为其他对象提供 一种代理以控制对这个对象的访问。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">classDiagram</span><br><span class="line">direction BT</span><br><span class="line">   </span><br><span class="line">   class Subject&#123;</span><br><span class="line">   Request()</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   class RealSubject&#123;</span><br><span class="line">   Request()</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   class Proxy&#123;</span><br><span class="line">   	 Request()</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   Client --&gt; Subject</span><br><span class="line">   RealSubject --|&gt; Subject</span><br><span class="line">   Proxy --|&gt; Subject</span><br><span class="line">  Proxy --&gt; RealSubject:realSubject</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="行为模式">行为模式</h1>
<h2 id="chainof-responsibility">CHAINOF RESPONSIBILITY</h2>
<p>使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。将这 些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">classDiagram</span><br><span class="line">direction BT</span><br><span class="line">   </span><br><span class="line">   class Handler&#123;</span><br><span class="line">   HandlerRequest()</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   class ConcreteHandler1&#123;</span><br><span class="line">   HandlerRequest()</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   class ConcreteHandler2&#123;</span><br><span class="line">   HandlerRequest()</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   Client --&gt; Handler</span><br><span class="line">   Handler --&gt; Handler:successor</span><br><span class="line">   ConcreteHandler1 --|&gt; Handler</span><br><span class="line">  ConcreteHandler2 --|&gt; Handler</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="commandactiontransaction">command/action/transaction</h2>
<p>将1个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化; 对请求排队或记录请求日志，以及支持可撤消的操作</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">classDiagram</span><br><span class="line">direction BT</span><br><span class="line">   </span><br><span class="line">   class Command&#123;</span><br><span class="line">   Execute()</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   class ConcreteCommmand&#123;</span><br><span class="line">   Execute()</span><br><span class="line">   state</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   class Receiver&#123;</span><br><span class="line">   Action()</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   Client --&gt; Receiver</span><br><span class="line">   Client ..&gt; ConcreteCommmand</span><br><span class="line">   </span><br><span class="line">  ConcreteCommmand --|&gt; Receiver</span><br><span class="line">  ConcreteCommmand --|&gt; Command</span><br><span class="line">  Invoker o--|&gt; Command</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="interpreter">INTERPRETER</h2>
<p>给定 一个语言，定义它的文法的 一种表示，并定义 一个解释器，这个解释器使用该表示 来解释语言中的句子。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">classDiagram</span><br><span class="line">direction BT</span><br><span class="line">   </span><br><span class="line">   class AbstractExpression&#123;</span><br><span class="line">   Interpret(Context)</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   class TerminalExpression&#123;</span><br><span class="line">   Interpret(Context)</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   class NonterminalExpression&#123;</span><br><span class="line">   Interpret(Context)</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">  </span><br><span class="line">   TerminalExpression --|&gt; AbstractExpression</span><br><span class="line">  NonterminalExpression --|&gt; AbstractExpression</span><br><span class="line">  NonterminalExpression o--&gt; AbstractExpression</span><br><span class="line"> Client --&gt; Context</span><br><span class="line">   Client --&gt; AbstractExpression</span><br></pre></td></tr></table></figure>
<h2 id="iterator">iterator</h2>
<h2 id="mediator">mediator</h2>
<p>用一 个中介对象来封装一系列的对象交互。中介者使各对象不需要显式地相互引用，从 而使其耦合松散，而且可以独立地改变它们之间的交互。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">classDiagram</span><br><span class="line">direction RL</span><br><span class="line">   </span><br><span class="line">   ConcreteMediator --|&gt; Mediator</span><br><span class="line">   Colleague --&gt; Mediator:mediator</span><br><span class="line">   ConcreteMediator --&gt; ConcreteColleague1</span><br><span class="line">   ConcreteMediator --&gt; ConcreteColleague2</span><br><span class="line">   ConcreteColleague1 --|&gt; Colleague</span><br><span class="line">   ConcreteColleague2 --|&gt; Colleague</span><br></pre></td></tr></table></figure>
<h2 id="memento">memento</h2>
<p>在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。 这样以后就可将该对象恢复到原先保存的状态。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">classDiagram</span><br><span class="line">direction BT</span><br><span class="line">class Originator&#123;</span><br><span class="line">SetMemento(Memento m)</span><br><span class="line">CreateMemento()</span><br><span class="line">state</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Memento&#123;</span><br><span class="line">GetState()</span><br><span class="line">SetState()</span><br><span class="line">state</span><br><span class="line">&#125;</span><br><span class="line">Originator ..&gt; Memento</span><br><span class="line">Caretaker o--&gt; Memento</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="observer">observer</h2>
<p>定义对象间的一种一对多的依赖关系, 当一个对象的状态发生改变时，所有依赖于它的对象 都得到通知并被自动更新。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">classDiagram</span><br><span class="line">direction RL</span><br><span class="line">class Subject&#123;</span><br><span class="line">  Attach(Observer)</span><br><span class="line">  Detach(Observer)</span><br><span class="line">  Notify()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class ConcreteSubject&#123;</span><br><span class="line">  GetState()</span><br><span class="line">  SetState()</span><br><span class="line">  subjectState</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Observer&#123;</span><br><span class="line">	Update()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class ConcreteObserver&#123;</span><br><span class="line">	Update()</span><br><span class="line">	observerState</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Subject --&gt; Observer :observers</span><br><span class="line">ConcreteSubject --|&gt; Subject</span><br><span class="line">ConcreteObserver --|&gt; Observer</span><br><span class="line">ConcreteObserver --&gt; ConcreteSubject:subject</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="state">state</h2>
<p>允许一个对象在其内部状态改变时改变它的行为。对象看起来似乎修改了它的类</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">classDiagram</span><br><span class="line">direction RL</span><br><span class="line">class Context&#123;</span><br><span class="line">  Request()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class State&#123;</span><br><span class="line">  Handle()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class ConcreteStateA&#123;</span><br><span class="line">	Handle()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class ConcreteStateB&#123;</span><br><span class="line">	Handle()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Context o--&gt; State :state</span><br><span class="line">ConcreteStateA --|&gt; State</span><br><span class="line">ConcreteStateB --|&gt; State</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="strategy">strategy</h2>
<p>定义一系列的算法, 把它们一个个封装起来，并且使它们可相互替换。本模式使得算法可独 立 于使用它的 客户而变化。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">classDiagram</span><br><span class="line">direction BT</span><br><span class="line">class Context&#123;</span><br><span class="line">  ContextInterface()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Strategy&#123;</span><br><span class="line">  AlgorithmInterface()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class ConcreteStrategyA&#123;</span><br><span class="line">  AlgorithmInterface()</span><br><span class="line">&#125;</span><br><span class="line">class ConcreteStrategyB&#123;</span><br><span class="line">  AlgorithmInterface()</span><br><span class="line">&#125;</span><br><span class="line">class ConcreteStrategyC&#123;</span><br><span class="line">  AlgorithmInterface()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Context o--&gt; Strategy :strategy</span><br><span class="line">ConcreteStrategyA --|&gt; Strategy</span><br><span class="line">ConcreteStrategyB --|&gt; Strategy</span><br><span class="line">ConcreteStrategyC --|&gt; Strategy</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="template">template</h2>
<p>定义 一个操作中的算法的骨架，而将一些步骤延迟到子类中。TemplateMethod使得子类 可以不改变 一个算法的结构即可重定义该算法的某些特定步骤。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">classDiagram</span><br><span class="line">direction BT</span><br><span class="line">class AbstractClass&#123;</span><br><span class="line">  TemplateMethod()</span><br><span class="line">  PrimitiveOperation1()</span><br><span class="line">    PrimitiveOperation2()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class ConcreteClass&#123;</span><br><span class="line">  PrimitiveOperation1()</span><br><span class="line">    PrimitiveOperation2()</span><br><span class="line">&#125;</span><br><span class="line">ConcreteClass --|&gt; AbstractClass</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="visitor">visitor</h2>
<p>表示一个作用于某对象结构中的各元素的操作。它使你可以在不改变各元素的类的前提 下定义作用于这些元素的新操作。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">classDiagram</span><br><span class="line">direction BT</span><br><span class="line">class Visitor&#123;</span><br><span class="line">  VisitConcreteElementA(ConcreteElementA)</span><br><span class="line">  VisitConcreteElementB(ConcreteElementB)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class ConcreteVisitor1&#123;</span><br><span class="line">  VisitConcreteElementA(ConcreteElementA)</span><br><span class="line">  VisitConcreteElementB(ConcreteElementB)</span><br><span class="line">&#125;</span><br><span class="line">class ConcreteVisitor2&#123;</span><br><span class="line">  VisitConcreteElementA(ConcreteElementA)</span><br><span class="line">  VisitConcreteElementB(ConcreteElementB)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ConcreteVisitor1 --|&gt; Visitor</span><br><span class="line">ConcreteVisitor2 --|&gt; Visitor</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Element&#123;</span><br><span class="line">  Accept(Visitor)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class ConcreteElementA&#123;</span><br><span class="line">  Accept(Visitor)</span><br><span class="line">  OperationA()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class ConcreteElementB&#123;</span><br><span class="line">  Accept(Visitor)</span><br><span class="line">  OperationB()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ConcreteElementA --|&gt; Element</span><br><span class="line">ConcreteElementB --|&gt; Element</span><br><span class="line"></span><br><span class="line">Client --&gt; Visitor</span><br><span class="line">Client --&gt; ObjectStructure</span><br><span class="line">ObjectStructure --&gt; Element</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="结论">结论</h1>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>class</tag>
        <tag>classdiagram</tag>
        <tag>direction</tag>
        <tag>mermaid</tag>
        <tag>factory</tag>
      </tags>
  </entry>
  <entry>
    <title>books</title>
    <url>/2023/03/185a66bd9e39.html</url>
    <content><![CDATA[<blockquote>

</blockquote>
<span id="more"></span>
<h1 id="准备看的杂书">准备看的杂书</h1>
<ul>
<li>尼采
<ul>
<li>瞧这个人</li>
<li>悲剧的诞生</li>
<li>查理图斯特拉如是说</li>
</ul></li>
<li>福柯
<ul>
<li>疯癫与文明</li>
</ul></li>
<li>百年孤独</li>
<li>美丽新世界</li>
<li>局外人(短)</li>
<li>心灵自我与社会</li>
<li>原型与集体无意识</li>
</ul>
]]></content>
      <categories>
        <category>私密</category>
      </categories>
  </entry>
  <entry>
    <title>408</title>
    <url>/2021/10/1f458dc835e1.html</url>
    <content><![CDATA[<blockquote>

</blockquote>
<span id="more"></span>
<h1 id="英文表">英文表</h1>
<table>
<thead>
<tr class="header">
<th>缩写</th>
<th>全拼</th>
<th>中文</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>mar</td>
<td>memory address register</td>
<td>地址寄存器</td>
<td></td>
</tr>
<tr class="even">
<td>mdr</td>
<td>memory data register</td>
<td>数据寄存器</td>
<td></td>
</tr>
<tr class="odd">
<td>alu</td>
<td>arithmetic and logic unit</td>
<td>运算器</td>
<td></td>
</tr>
<tr class="even">
<td>psw</td>
<td>program status word</td>
<td>程序状态寄存器</td>
<td></td>
</tr>
<tr class="odd">
<td>ir</td>
<td>instruction register</td>
<td>指令寄存器</td>
<td></td>
</tr>
<tr class="even">
<td>pc</td>
<td>program counter</td>
<td>程序寄存器</td>
<td></td>
</tr>
<tr class="odd">
<td>cu</td>
<td>control unit</td>
<td>控制单元</td>
<td></td>
</tr>
<tr class="even">
<td>cpi</td>
<td>clock cycle per instruction</td>
<td></td>
<td></td>
</tr>
<tr class="odd">
<td>bcd</td>
<td>Binary coded decimal</td>
<td>bcd 码</td>
<td>decimal 十进制</td>
</tr>
<tr class="even">
<td>cf</td>
<td>carry flag</td>
<td>进位标志位</td>
<td></td>
</tr>
<tr class="odd">
<td>ea</td>
<td>effective address</td>
<td>有效地址</td>
<td></td>
</tr>
</tbody>
</table>
<p>机器数计算</p>
<h1 id="定义概念">定义概念</h1>
<p>平衡二叉树: 任意节点的左右子树高度差&lt;=1</p>
<p>完全二叉树: 完全二叉树比满二叉树只是在最下面一层的右边缺少了部分叶结点，而最后一层之上是个满二叉树，并且只有最后两层有叶结点</p>
<p><strong>---</strong></p>
<p>b 树(+-):</p>
<p>小根堆:</p>
<p>时钟频率:</p>
<h1 id="问题">问题</h1>
<p>跳转指令: EA = (PC) + A, PC 为取指令后的值</p>
<p><strong>---</strong></p>
<p>森林转二叉树:</p>
<p>排序算法:</p>
<p>cpu 执行指令流程</p>
<p>浮点数加减流程</p>
<p>cache相联方式</p>
<p>字位扩展</p>
<p>RISC CISC</p>
<p>流水线时钟周期</p>
<p>中断分类</p>
<p>进程, 处理机, 设备, 通道 的并行</p>
<p>进程调度算法</p>
]]></content>
      <categories>
        <category>私密</category>
      </categories>
  </entry>
</search>
