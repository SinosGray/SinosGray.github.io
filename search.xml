<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Xcode</title>
    <url>/2020/02/10/Xcode/</url>
    <content><![CDATA[<blockquote>
<p>简介</p>
<p>xcode开发笔记</p>
</blockquote>
<span id="more"></span>

<h1 id="Xcode"><a href="#Xcode" class="headerlink" title="Xcode"></a>Xcode</h1><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><ul>
<li>editor-&gt;canvas: 实时预览</li>
</ul>
<h2 id="swift"><a href="#swift" class="headerlink" title="swift"></a>swift</h2><ul>
<li><p>Swift语言并不是像C/C++，Java那样完全忽视空格，Swift对空格的使用有一定的要求，但是又不像Python对缩进的要求那么严格。</p>
<p>在Swift中，运算符不能直接跟在变量或常量的后面。</p>
</li>
<li><p>let 用于定义常量，定义完后不能修改。</p>
<p>var 用于定义变量，可以修改。</p>
<p>swift可以自动识别属性类别。</p>
</li>
<li><p>可选类型    ?与!</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> optionalInteger: <span class="type">Int</span>?</span><br><span class="line"><span class="keyword">var</span> optionalInteger: <span class="type">Optional</span>&lt;<span class="type">Int</span>&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>字符串插值</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Cocoa</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> varA   <span class="operator">=</span> <span class="number">20</span></span><br><span class="line"><span class="keyword">let</span> constA <span class="operator">=</span> <span class="number">100</span></span><br><span class="line"><span class="keyword">var</span> varC:<span class="type">Float</span> <span class="operator">=</span> <span class="number">20.0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> stringA <span class="operator">=</span> <span class="string">&quot;<span class="subst">\(varA)</span> 乘于 <span class="subst">\(constA)</span> 等于 <span class="subst">\(varC <span class="operator">*</span> <span class="number">100</span>)</span>&quot;</span></span><br><span class="line"><span class="built_in">print</span>( stringA )</span><br><span class="line"></span><br><span class="line"><span class="number">20</span> 乘于 <span class="number">100</span> 等于 <span class="number">2000.0</span></span><br></pre></td></tr></table></figure></li>
<li><p>数组</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> someArray <span class="operator">=</span> [<span class="type">SomeType</span>](repeating: <span class="type">InitialValue</span>, count: <span class="type">NumbeOfElements</span>)</span><br></pre></td></tr></table></figure></li>
<li><p>函数</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">//example1</span></span><br><span class="line"><span class="keyword">import</span> Cocoa</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">runoob</span>(<span class="params">site</span>: <span class="type">String</span>)</span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (site)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(runoob(site: <span class="string">&quot;www.runoob.com&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">//example2</span></span><br><span class="line"><span class="keyword">import</span> Cocoa</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">minMax</span>(<span class="params">array</span>: [<span class="type">Int</span>])</span> -&gt; (min: <span class="type">Int</span>, max: <span class="type">Int</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> currentMin <span class="operator">=</span> array[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">var</span> currentMax <span class="operator">=</span> array[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> array[<span class="number">1</span><span class="operator">..&lt;</span>array.count] &#123;</span><br><span class="line">        <span class="keyword">if</span> value <span class="operator">&lt;</span> currentMin &#123;</span><br><span class="line">            currentMin <span class="operator">=</span> value</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> value <span class="operator">&gt;</span> currentMax &#123;</span><br><span class="line">            currentMax <span class="operator">=</span> value</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (currentMin, currentMax)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> bounds <span class="operator">=</span> minMax(array: [<span class="number">8</span>, <span class="operator">-</span><span class="number">6</span>, <span class="number">2</span>, <span class="number">109</span>, <span class="number">3</span>, <span class="number">71</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;最小值为 <span class="subst">\(bounds.min)</span> ，最大值为 <span class="subst">\(bounds.max)</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//example3</span></span><br><span class="line"><span class="keyword">import</span> Cocoa</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">pow</span>(<span class="params">firstArg</span> <span class="params">a</span>: <span class="type">Int</span>, <span class="params">secondArg</span> <span class="params">b</span>: <span class="type">Int</span>)</span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">   <span class="keyword">var</span> res <span class="operator">=</span> a</span><br><span class="line">   <span class="keyword">for</span> <span class="keyword">_</span> <span class="keyword">in</span> <span class="number">1</span><span class="operator">..&lt;</span>b &#123;</span><br><span class="line">      res <span class="operator">=</span> res <span class="operator">*</span> a</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">print</span>(res)</span><br><span class="line">   <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line">pow(firstArg:<span class="number">5</span>, secondArg:<span class="number">3</span>)</span><br></pre></td></tr></table></figure></li>
<li><p>guard return/throw 判断先决条件</p>
</li>
<li><p>try </p>
<ul>
<li>do catch</li>
<li>try? 返回一个可选类型（some or nil）</li>
<li>try! 遇到异常立刻crash</li>
</ul>
</li>
<li><p>？！</p>
<ul>
<li><p>声明变量</p>
<ul>
<li><p>！</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a : <span class="type">String</span>!</span><br><span class="line"> <span class="comment">//操作变量时会隐式的加！</span></span><br></pre></td></tr></table></figure></li>
<li><p>?</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var a : String?</span><br><span class="line">&#x2F;&#x2F;操作变量时需要加！和？</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>操作变量</p>
<ul>
<li><p>?</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="operator">=</span> data<span class="operator">?</span>.count</span><br><span class="line"><span class="comment">//如果data是nil，a是nil</span></span><br><span class="line"><span class="comment">//如果data有值，就调用count</span></span><br></pre></td></tr></table></figure></li>
<li><p>!</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="operator">=</span> data<span class="operator">!</span>.count</span><br><span class="line"><span class="comment">//确信data不是nil，如果是nil就会crash</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li><p><a href="https://www.jianshu.com/p/013a1d82cad5">sorted by 用法</a></p>
</li>
<li><p>extension 为特定的class struct 添加新特性</p>
</li>
</ul>
<h2 id="swiftUI"><a href="#swiftUI" class="headerlink" title="swiftUI"></a>swiftUI</h2><blockquote>
<p>emoji</p>
</blockquote>
<ul>
<li>$符号将变量转换为binding</li>
<li></li>
</ul>
<blockquote>
<p>TodoList实例</p>
</blockquote>
<h3 id="ContentView"><a href="#ContentView" class="headerlink" title="ContentView"></a>ContentView</h3><h3 id="TodoItem"><a href="#TodoItem" class="headerlink" title="TodoItem"></a>TodoItem</h3><blockquote>
<p>class Todo</p>
</blockquote>
<p>集成NSObject, NSCoding</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">self</span>.title <span class="operator">=</span> coder.decodeObject(forkey: <span class="string">&quot;title&quot;</span>) <span class="keyword">as?</span> <span class="type">String</span> <span class="operator">??</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="comment">//</span></span><br></pre></td></tr></table></figure>

<p>emptyTodo</p>
<p>init()</p>
<ul>
<li>TodoItem：@ObservedObject main : Main @Binding @State checked</li>
</ul>
<h3 id="Home"><a href="#Home" class="headerlink" title="Home"></a>Home</h3><blockquote>
<p>全局变量：editingMode editingTodo editingIndex detailsShouldUpdateTitle </p>
<p>Main: ObservableObject</p>
</blockquote>
<ul>
<li><p>@Published</p>
<blockquote>
<p>属性包装器 property wrapper</p>
</blockquote>
<p><a href="https://juejin.im/post/5df05060518825122030809e">参考</a></p>
</li>
</ul>
<h2 id="Cocoa"><a href="#Cocoa" class="headerlink" title="Cocoa"></a>Cocoa</h2><ul>
<li>UIApplicationDelegate 管理应用程序的生命周期</li>
</ul>
]]></content>
      <categories>
        <category>program</category>
      </categories>
      <tags>
        <tag>xcode</tag>
        <tag>apple</tag>
      </tags>
  </entry>
  <entry>
    <title>20210114凯卓公司</title>
    <url>/2021/01/15/20210114%E5%87%AF%E5%8D%93%E5%85%AC%E5%8F%B8/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="f2223c648a08141be31fb22256fb508de559eb801b1dfa16c1d5919d96dfb130"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>program</category>
      </categories>
      <tags>
        <tag>kenzo</tag>
      </tags>
  </entry>
  <entry>
    <title>ai</title>
    <url>/2019/11/18/ai/</url>
    <content><![CDATA[<h2 id="tensorflow"><a href="#tensorflow" class="headerlink" title="tensorflow"></a>tensorflow</h2><p>pip install –index-url <a href="https://pypi.douban.com/simple">https://pypi.douban.com/simple</a> tensorflow快速安装库（国内源）</p>
<span id="more"></span>

<h2 id="ai导论"><a href="#ai导论" class="headerlink" title="ai导论"></a>ai导论</h2>]]></content>
      <categories>
        <category>program</category>
      </categories>
      <tags>
        <tag>ai</tag>
      </tags>
  </entry>
  <entry>
    <title>blog_making</title>
    <url>/2019/11/11/blog-making/</url>
    <content><![CDATA[<h1 id="hexo-Blog解决问题"><a href="#hexo-Blog解决问题" class="headerlink" title="hexo Blog解决问题"></a>hexo Blog解决问题</h1><p><a href="https://theme-next.iissnan.com/theme-settings.html">next官网</a></p>
<p><a href="https://io-oi.me/tech/hexo-next-optimization/">参考博客从0开始</a></p>
<p><a href="http://www.cduyzh.com/hexo-settings-3/">网页样式设置</a></p>
<span id="more"></span>

<h2 id="rss是啥"><a href="#rss是啥" class="headerlink" title="rss是啥"></a>rss是啥</h2><p>RSS 是一种简单的订阅方式。就像订报纸、杂志一样，您可以订阅任何喜欢的内容。 RSS服务由一系列栏目组成，每个栏目包括标题，介绍和网址链接。欲获取FT中文网的RSS服务，浏览最新FT中文网的新闻评论、分析及专栏作家文章等精彩内容，请看本页的详情。</p>
<p>如何使用RSS<br>您只需要下载和安装一个RSS新闻阅读器，然后从网站提供的RSS内容目录中订阅您感兴趣的栏目。订阅后，您将会自动获得所有FT中文网的最新报道，并在每次新内容发布后自动更新，FT中文网将帮助您第一时间获取全球最新商业资讯。</p>
<h2 id="超链接url-20问题"><a href="#超链接url-20问题" class="headerlink" title="超链接url%20问题"></a>超链接url%20问题</h2><p>主页到archieve页面的超链接的url多了一个%20</p>
<ul>
<li><p>Internet上的每个网页都有一个统一的资源定位器或URL，例如“ <a href="http://www.example.com/products.html">http://www.example.com/products.html</a> ”。URL不能包含空格，如果HTML文件名为“ products and services.html”，则会出现问题。URL中不允许使用的空格和其他字符必须使用百分号编码，并将十六进制值分配给ISO-Latin字符集中的字符。分配给空格的数字为32，十六进制为20。当您看到“％20”时，它表示编码的URL中的空格，例如[<a href="http://www.example.com/products%20and%20services.html%E3%80%82]">http://www.example.com/products%20and%20services.html。]</a>(<a href="http://www.example.com/products">http://www.example.com/products</a> and services.html.)</p>
</li>
<li><p>解决：在next theme的config文件里修改menu：archives: /archives/ || archive =&gt; archives: /archives/|| archive（删掉一个空格）  </p>
</li>
</ul>
<h2 id="github-pages与本地预览-hexo-s-不一样"><a href="#github-pages与本地预览-hexo-s-不一样" class="headerlink" title="github pages与本地预览(hexo s)不一样"></a>github pages与本地预览(hexo s)不一样</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo d -g</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>program</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>database</title>
    <url>/2019/11/18/database/</url>
    <content><![CDATA[<h2 id="Role"><a href="#Role" class="headerlink" title="Role"></a>Role</h2><p>在<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%BA%93/103728">数据库</a>中，为便于对用户及权限进行管理，可以将一组具有相同权限的用户组织在一起，这一组具有相同权限的用户就称为角色(Role)。</p>
<span id="more"></span>

<h2 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">格式：mysqladmin -u用户名 -p旧密码 password 新密码 </span><br><span class="line">例子：mysqladmin -uroot -p123456 password 123</span><br></pre></td></tr></table></figure>

<h2 id="登入数据库-pyuser-localhost-pw-pyuser"><a href="#登入数据库-pyuser-localhost-pw-pyuser" class="headerlink" title="登入数据库(pyuser@localhost pw:pyuser)"></a>登入数据库(pyuser@localhost pw:pyuser)</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -u $username -p</span><br></pre></td></tr></table></figure>

<h2 id="权限设置"><a href="#权限设置" class="headerlink" title="权限设置"></a>权限设置</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GRANT privileges ON databasename.tablename TO &#39;username&#39;@&#39;host&#39;</span><br></pre></td></tr></table></figure>

<h2 id="基本操作样例"><a href="#基本操作样例" class="headerlink" title="基本操作样例"></a>基本操作样例</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table user (id varchar(20) primary key, name varchar(20))</span><br><span class="line">insert into user (id, name) values (%s, %s)&#39;, [&#39;1&#39;, &#39;Michael&#39;]</span><br></pre></td></tr></table></figure>

<h2 id="select操作顺序（可以加逻辑）"><a href="#select操作顺序（可以加逻辑）" class="headerlink" title="select操作顺序（可以加逻辑）"></a>select操作顺序（可以加逻辑）</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select栏位	from表格	where查询条件	group by分组设定	having分组条件	order by排序设定	limit限制设定</span><br><span class="line">字符串匹配：% _</span><br><span class="line">order: ASC升序DESC降序</span><br><span class="line">limit: 传回记录数量</span><br><span class="line">各种函式</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="mac-mysql"><a href="#mac-mysql" class="headerlink" title="mac mysql"></a>mac mysql</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">启动MySQL服务</span><br><span class="line">sudo &#x2F;usr&#x2F;local&#x2F;MySQL&#x2F;support-files&#x2F;mysql.server start</span><br><span class="line"></span><br><span class="line">停止MySQL服务</span><br><span class="line">sudo &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;support-files&#x2F;mysql.server stop</span><br><span class="line"></span><br><span class="line">重启MySQL服务</span><br><span class="line">sudo &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;support-files&#x2F;mysql.server restart</span><br></pre></td></tr></table></figure>

<ul>
<li><p>Cashing_sha2_password error</p>
<p><a href="https://stackoverflow.com/questions/50469587/django-db-utils-operationalerror-2059-authentication-plugin-caching-sha2-pas/53463299">my.cnf添加mysql_native_password</a></p>
</li>
<li><p>foreignkey 引用另一个表的主键</p>
</li>
</ul>
]]></content>
      <categories>
        <category>program</category>
      </categories>
      <tags>
        <tag>sxf</tag>
        <tag>database</tag>
      </tags>
  </entry>
  <entry>
    <title>git</title>
    <url>/2019/11/18/git/</url>
    <content><![CDATA[<blockquote>
<p>git 简介和使用</p>
</blockquote>
<span id="more"></span>

<h2 id="git-命令"><a href="#git-命令" class="headerlink" title="git 命令"></a>git 命令</h2><ul>
<li><p><code>git status (-s)</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vim CONTRIBUTING.md</span> </span><br><span class="line"><span class="meta">$</span><span class="bash"> git status</span> </span><br><span class="line">On branch master </span><br><span class="line">Changes to be committed:   </span><br><span class="line">		(use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</span><br><span class="line">    new file:   README     </span><br><span class="line">    modified:   CONTRIBUTING.md</span><br><span class="line">Changes not staged for commit:   </span><br><span class="line">(use &quot;git add &lt;file&gt;...&quot; to update what will be committed)   </span><br><span class="line">(use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line">    modified:   CONTRIBUTING.md</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p><code>git rm (--cached)</code></p>
</li>
<li><p><code>git config --global alias.last &#39;log -1 HEAD&#39;</code></p>
</li>
</ul>
<h2 id="git-分支"><a href="#git-分支" class="headerlink" title="git 分支"></a>git 分支</h2><ul>
<li><p>提交对象</p>
<p>首次提交</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gh2gnf7ccej31gg0rgn6i.jpg" alt="截屏2020-07-24 下午11.04.55"></p>
<p>以后的提交</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gh2go0zfo9j31cc0g0ai4.jpg" alt="截屏2020-07-24 下午11.05.31"></p>
</li>
<li><p>Git 的分支，其实本质上仅仅是指向提交对象的可变指针。</p>
</li>
<li><p> <strong>HEAD</strong> 的特殊指针。在 Git 中，它是一个指针，指向当前所在的本地分支（译注：将 HEAD 想象为当前分支的别名）。</p>
</li>
</ul>
<p>  <img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gh2h2mi8nrj31d20t278e.jpg" alt="截屏2020-07-24 下午11.19.33"></p>
<h3 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h3><ul>
<li><p>fast-forward</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gh2hg1iq2ej31f00mcwi3.jpg" alt="截屏2020-07-24 下午11.32.26"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git checkout master</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git merge hotfix</span> </span><br><span class="line">Updating f42c576..3a0874c</span><br><span class="line">Fast-forward </span><br><span class="line">index.html | 2 ++ </span><br><span class="line">1 file changed, 2 insertions(+)</span><br></pre></td></tr></table></figure>

<p>直接指针右移, 没有需要解决的冲突</p>
</li>
<li><p>分支之间的合并</p>
</li>
</ul>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gh2hi4e4pqj31dw0iugqd.jpg" alt="截屏2020-07-24 下午11.34.27"></p>
<p>和之间将分支指针向前推进所不同的是，Git 将此次三方合并的结果做了一个新的快照并且自动创建一个新的提 交指向它。这个被称作一次合并提交，它的特别之处在于他有不止一个父提交。</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gh2hlh6lc1j31c40ekjti.jpg" alt="截屏2020-07-24 下午11.37.40"></p>
<h3 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h3><p>如果你在两个不同的分支中，对<strong>同一个文件的同一个部分</strong>进行了不同的修 改，Git 就没法干净的合并它们。</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gh2hpueb36j30q20cmqid.jpg" alt="截屏2020-07-24 下午11.41.53"></p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gh2htn2dnqj306i04omxm.jpg" alt="截屏2020-07-24 下午11.45.31"></p>
<p>在你解决了所有文件里的冲突之后，对每个文件使用 git add 命令来将其标记为冲突已解决。一旦暂存这 些原本有冲突的文件，Git 就会将它们标记为冲突已解决。</p>
<h3 id="远程分支"><a href="#远程分支" class="headerlink" title="远程分支"></a>远程分支</h3><ul>
<li>git clone</li>
</ul>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gh2i5i6y9yj31650u0tgx.jpg" alt="截屏2020-07-24 下午11.56.55"></p>
<ul>
<li>git fetch</li>
</ul>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gh2i6jmqxmj315f0u07bt.jpg" alt="截屏2020-07-24 下午11.57.54"></p>
<ul>
<li><p>git pull = git fetch + git merge</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gh2lkjp3oqj31bk0s0wkh.jpg" alt="截屏2020-07-25 上午1.55.11"></p>
<p>git fetch, git merge</p>
</li>
</ul>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gh2ll5j1dhj31cw0km0xh.jpg" alt="截屏2020-07-25 上午1.55.46"></p>
<p>​        git push</p>
<p>​        <img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gh2lltvxjaj31aq0g4q7h.jpg" alt="截屏2020-07-25 上午1.56.21"></p>
<p>​        </p>
<ul>
<li><p>rebase</p>
<p>与 git merge 不同, 其实，还有一种方法：你可以提取在 C4 中引入的补丁和修改，然后在 C3 的基础上再应用一次。在 Git 中，这种 操作就叫做 变基。<strong>你可以使用 rebase 命令将提交到某一分支上的所有修改都移至另一分支上，就好像“重新 播放”一样。</strong></p>
<p>它的原理是首先找到这两个分支（即当前分支 experiment、变基操作的目标基底分支 master）的最近共同祖 先 C2，然后对比当前分支相对于该祖先的历次提交，提取相应的修改并存为临时文件，然后将当前分支指向目 标基底 C3, 最后以此将之前另存为临时文件的修改依序应用。</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gh2k75saijj31ds0e0jtx.jpg" alt="截屏2020-07-25 上午1.07.41"></p>
<p>变基使得提交历史更加整洁</p>
</li>
</ul>
<h2 id="git-工具"><a href="#git-工具" class="headerlink" title="git 工具"></a>git 工具</h2><ul>
<li>git show SHA-1 </li>
</ul>
<h2 id="git-内部原理"><a href="#git-内部原理" class="headerlink" title="git 内部原理"></a>git 内部原理</h2><h3 id="git-基础"><a href="#git-基础" class="headerlink" title="git 基础"></a>git 基础</h3><p><strong>工作区</strong></p>
<p>电脑里能看到的目录</p>
<p><strong>版本库</strong></p>
<p>.git</p>
<p>其中包含了 <strong>stage/index</strong> 暂存区, 即 git add 操作</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gha6tcriipj30rg0duaf6.jpg" alt="截屏2020-07-31 下午3.29.01"></p>
<h3 id="git-数据库"><a href="#git-数据库" class="headerlink" title="git 数据库"></a>git 数据库</h3><p><strong>.git 文件</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ls -F1</span><br><span class="line">HEAD</span><br><span class="line">config*</span><br><span class="line">description</span><br><span class="line">hooks&#x2F;</span><br><span class="line">info&#x2F;</span><br><span class="line">objects&#x2F;</span><br><span class="line">refs&#x2F;</span><br></pre></td></tr></table></figure>

<p>description gitweb 程序使用, 无需关心</p>
<p>config 配置</p>
<p>info 包含一个全局性排除文件</p>
<p>hooks 包含客户端或服务端的钩子脚本</p>
<p>objects 存储所有数据内容</p>
<p>refs 存储指向数据(分支)的提交对象的指针</p>
<p>HEAD 只是目前被检出的分支</p>
<p>index 保存暂存区信息</p>
<p><strong>objects</strong></p>
<h3 id="数据对象"><a href="#数据对象" class="headerlink" title="数据对象"></a>数据对象</h3><ul>
<li><p>git init 用于创建一个空的git仓库，或重置一个已存在的git仓库</p>
</li>
<li><p>git hash-object git底层命令，用于向Git数据库中写入数据</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;version 1&quot;</span> | git hash-object -w --stdin</span></span><br><span class="line"> 83baae61804e65cc73a7201a7252750c76066a30</span><br><span class="line"><span class="meta">$</span><span class="bash"> find .git/objects/ -<span class="built_in">type</span> f</span></span><br><span class="line">.git/objects/83/baae61804e65cc73a7201a7252750c76066a30</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;version 1&quot;</span> &gt; file.txt</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git hash-object -w file.txt</span></span><br><span class="line">83baae61804e65cc73a7201a7252750c76066a30</span><br></pre></td></tr></table></figure></li>
<li><p>git cat-file git底层命令，用于查看Git数据库中数据</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git cat-file -p 83baa</span></span><br><span class="line">version 1</span><br></pre></td></tr></table></figure></li>
<li><p>问题: </p>
<p>第一，无法记录文件名的变化；</p>
<p>第二，无法记录文件夹的变化；</p>
<p>第三，记忆每一个版本对应的hash值无聊且乏味且不可能；</p>
<p>第四，无法得知文件的变更时序；</p>
<p>第五，缺少对每一次版本变化的说明。</p>
</li>
</ul>
<h3 id="树对象"><a href="#树对象" class="headerlink" title="树对象"></a>树对象</h3><p>Git利用树对象（tree object）解决文件名保存的问题，树对象也能够将多个文件组织在一起。</p>
<ul>
<li>git update-index git底层命令，用于创建暂存区</li>
<li>git ls-files –stage git底层命令，用于查看暂存区内容</li>
<li>git write-tree git底层命令，用于将暂存区内容写入一个树对象</li>
</ul>
<p>前两个命令都是对暂存区操作, 第三个则会在 objects 里创建一个树对象</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> find .git/objects -<span class="built_in">type</span> f</span></span><br><span class="line">.git/objects/1f/7a7a472abf3dd9643fd615f6da379c4acb3e3a</span><br><span class="line">.git/objects/83/baae61804e65cc73a7201a7252750c76066a30</span><br><span class="line"><span class="meta">$</span><span class="bash"> git update-index --add file.txt</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> find .git/objects/ -<span class="built_in">type</span> f</span></span><br><span class="line">.git/objects/1f/7a7a472abf3dd9643fd615f6da379c4acb3e3a</span><br><span class="line">.git/objects/83/baae61804e65cc73a7201a7252750c76066a30</span><br><span class="line"><span class="meta">$</span><span class="bash"> git write-tree</span></span><br><span class="line">391a4e90ba882dbc9ea93855103f6b1fa6791cf6</span><br><span class="line"><span class="meta">$</span><span class="bash"> find .git/objects/ -<span class="built_in">type</span> f</span></span><br><span class="line">.git/objects/39/1a4e90ba882dbc9ea93855103f6b1fa6791cf6</span><br><span class="line">.git/objects/1f/7a7a472abf3dd9643fd615f6da379c4acb3e3a</span><br><span class="line">.git/objects/83/baae61804e65cc73a7201a7252750c76066a30</span><br></pre></td></tr></table></figure>

<p>查看内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git cat-file -t 391a4e <span class="comment"># -t 类型</span></span></span><br><span class="line">tree</span><br><span class="line"><span class="meta">$</span><span class="bash"> git cat-file -p 391a4e <span class="comment"># -p 内容</span></span></span><br><span class="line">100644 blob 83baa...    file.txt  </span><br></pre></td></tr></table></figure>

<h3 id="commit-对象"><a href="#commit-对象" class="headerlink" title="commit 对象"></a>commit 对象</h3><p>commit对象能够帮你记录什么时间，由什么人，因为什么原因提交了一个新的版本，这个新的版本的父版本又是谁。</p>
<ul>
<li>git commit-tree git 底层命令, 用来创建提交对象</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git write-tree</span></span><br><span class="line">cb0fbcc484a3376b3e70958a05be0299e57ab495</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit-tree cb0fbcc -m <span class="string">&quot;first commit&quot;</span></span></span><br><span class="line">7020a97c0e792f340e00e1bb8edcbafcc4dfb60f</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git cat-file 7020a97</span></span><br><span class="line">tree cb0fbcc484a3376b3e70958a05be0299e57ab495</span><br><span class="line">author john &lt;john@163.com&gt; 1537961478 +0800</span><br><span class="line">committer john &lt;john@163.com&gt; 1537961478 +0800</span><br><span class="line"></span><br><span class="line">first commit</span><br></pre></td></tr></table></figure>



<h2 id="git-工作原理"><a href="#git-工作原理" class="headerlink" title="git 工作原理"></a>git 工作原理</h2><p><img src="https://pic2.zhimg.com/80/v2-3bc9d5f2c49a713c776e69676d7d56c5_1440w.jpg" alt="img"></p>
<p>Workspace：工作区<br>Index / Stage：暂存区<br>Repository：仓库区（或本地仓库）<br>Remote：远程仓库</p>
<h2 id="初次使用-git"><a href="#初次使用-git" class="headerlink" title="初次使用 git"></a>初次使用 git</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name &quot;John Doe&quot;</span><br><span class="line">$ git config --global user.email johndoe@example.com</span><br></pre></td></tr></table></figure>

<p>git config 一个用来配置 git 的工具</p>
<p>–global 默认全局, 如果要针对特定 git 仓库修改, 不要使用 global</p>
<p>1.git 回退</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line"></span><br><span class="line">	modified:   readme.txt</span><br><span class="line"></span><br><span class="line">no changes added to commit (use &quot;git add&quot; and&#x2F;or &quot;git commit -a&quot;)</span><br></pre></td></tr></table></figure>



<p>你可以发现，Git会告诉你，<code>git checkout -- file</code>可以丢弃工作区的修改：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git checkout -- readme.txt</span><br></pre></td></tr></table></figure>

<p>总之，就是让这个文件回到最近一次<code>git commit</code>或<code>git add</code>时的状态。</p>
<ol start="2">
<li>Git同样告诉我们，用命令<code>git reset HEAD &lt;file&gt;</code>可以把暂存区的修改撤销掉（unstage），重新放回工作区：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git reset HEAD readme.txt</span><br><span class="line">Unstaged changes after reset:</span><br><span class="line">M	readme.txt</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>-u参数：关联本地分支和远程分支</p>
</li>
<li><p>git merge $branch_name 如果有冲突要手动解决(一般是两个分支有不同的提交内容)</p>
</li>
<li><p>git branch -d $branch_name 删除分支</p>
</li>
<li><p>git rm –cached $doc_name    删除文件（会影响到远程</p>
</li>
<li><p>git branch –set-upstream-to=origin/$name</p>
</li>
<li><p>git branch -vv     查看本地分支和远程分支的对应关系</p>
</li>
<li><p>git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</p>
</li>
<li><p>fatal: refusing to merge unrelated histories</p>
<p>–allow-unrelated-histories</p>
</li>
<li><p>CRLF和LF</p>
<p><a href="https://blog.csdn.net/ccfxue/article/details/52625806">参考网站</a></p>
<p>crlf：carriage return line feed回车换行</p>
<p>lf：line feed 换行</p>
<p>reason：</p>
<p>When you view changes in a file, Git handles line endings in its own way.Since you’re collaborating on projects with Git and GitHub, Git mightproduce unexpected results if, for example, you’re working on a Windows machine,and your collaborator has made a change in OS X.</p>
<p>CRLF-&gt;Windows-style</p>
<p>LF-&gt;Unix Style</p>
<p>CR-&gt;Mac Style</p>
<p>CRLF表示句尾使用回车换行两个字符(即我们常在Windows编程时使用”\r\n”换行)</p>
<p>LF表示表示句尾，只使用换行.</p>
<p>CR表示只使用回车.</p>
</li>
</ol>
<h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
      <categories>
        <category>program</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>java</title>
    <url>/2020/01/25/java/</url>
    <content><![CDATA[<h1 id="Java-基础"><a href="#Java-基础" class="headerlink" title="Java 基础"></a>Java 基础</h1><blockquote>
<p>简单介绍java的基础知识</p>
</blockquote>
<span id="more"></span>

<ul>
<li><p>Java SE(Java Platform,Standard Edition)，应该先说这个，因为这个是标准版本。<br>Java EE (Java Platform，Enterprise Edition)，java 的企业版本<br>Java ME(Java Platform，Micro Edition)，java的微型版本。</p>
<p>JavaSE 可以开发和部署在桌面、服务器、嵌入式环境和实时环境中使用的 Java 应用程序。是EE，和ME的基础。一般就是指JDK（Java Development Kit<strong>（</strong>JDK）是<a href="https://zh.wikipedia.org/wiki/%E6%98%87%E9%99%BD%E9%9B%BB%E8%85%A6">太阳微系统</a>针对<a href="https://zh.wikipedia.org/wiki/Java">Java</a>开发人员发布的免费<a href="https://zh.wikipedia.org/wiki/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E5%8C%85">软件开发工具包</a>（SDK，Software development kit））。就是Java的基础语法（变量、方法、类之间的调用、关系，继承、接口、线程之类的），工具包（java.util.*  ）,或者其他的一些封装</p>
<p>PS：</p>
<ol>
<li><p>java程序设计语言</p>
</li>
<li><p>JVM java虚拟机</p>
</li>
<li><p>java API类库</p>
</li>
<li><p>辅助工具如javac</p>
<p>1+2+3+4=jdk（java开发的环境），2+3=jre（java运行的环境）</p>
</li>
</ol>
<p>JavaEE，其实是一套规范，就是用java语言做企业开发（目前看来就是开发一些动态网站，或者对外提供调用服务的网站，或者其他没接触过的。。。）中的一整套规范，比如类怎么封装，网页的请求要用什么方法处理，语言编码一类的处理，拦截器啊什么的定义，请求返回得有什么信息。。。（具体看servlet的接口就知道了）<br>比如：tomcat就是按照这套规范开发的容器软件，还有什么weblogic，JBoss、Resin等等<br>正因为我们开发网站（使用JSP，Servelet。。或者封装了这些的框架：SSH。。。）可以放在tomcat，也可以放在JBoss。。。。，因为都是按照一个规范开发的东西，实际使用的还是JavaSE的那些东西，多出来的就是EE的一些规范类的封装代码。</p>
<p>JavaME 是微型版本，顾名思义，使用在手机啊，小设备啊上面的Java版本，特点就是小，相比JavaSE精简了很大一部分东西，（增加了一些小设备上的专有API，？？？这个不是很确定），<br>我在2009年培训的时候，这个还写过游戏，还用在移动啊什么的开发上，可是后来你们应该知道了。。。安卓时代来临了。</p>
<p>安卓中既然用的是Java，那么Java的语法应该都是适用的。所以SE是核心基础。其他的都是使用方法方式不同。</p>
</li>
<li></li>
</ul>
<h1 id="java基础"><a href="#java基础" class="headerlink" title="java基础"></a>java基础</h1><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ul>
<li>整数: byte, short, int, long</li>
</ul>
<h2 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h2><h2 id="spring-boot"><a href="#spring-boot" class="headerlink" title="spring boot"></a>spring boot</h2><p><a href="https://jimmysong.io/posts/spring-boot-quick-start-guide/">参考</a></p>
<h3 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h3><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      <categories>
        <category>language</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript_xjb学</title>
    <url>/2020/08/09/javascript-xjb%E5%AD%A6/</url>
    <content><![CDATA[<blockquote>
<p>简介</p>
<p>javascript 瞎 jb 学</p>
<p>1065</p>
</blockquote>
<span id="more"></span>

<h1 id="web基础"><a href="#web基础" class="headerlink" title="web基础"></a>web基础</h1><h2 id="google-font"><a href="#google-font" class="headerlink" title="google font"></a>google font</h2><h1 id="js简介"><a href="#js简介" class="headerlink" title="js简介"></a>js简介</h1><h2 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h2><ul>
<li>对事件响应</li>
<li>改变 html 内容</li>
<li>改变图像(src)</li>
<li>改变 html 样式</li>
<li>验证输入</li>
</ul>
<h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><ul>
<li>用<code>&lt;script&gt; &lt;/script&gt;</code>包含 js 代码</li>
<li>函数与响应</li>
<li>通常的做法是把函数放入 <head> 部分中，或者放在页面底部。这样就可以把它们安置到同一处位置，不会干扰页面的内容。</li>
<li>class 是类, id 是 id</li>
<li></li>
</ul>
]]></content>
      <categories>
        <category>language</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>markdown</title>
    <url>/2019/11/18/markdown/</url>
    <content><![CDATA[<p>链接格式：[显示文字](网址)</p>
<p>不要用base64！！！！</p>
<p>上标&lt;sup&gt;&lt;/sup&gt;</p>
<p>下标&lt;sub&gt;&lt;/sub&gt;</p>
<p>简单地 <sub> 格式化 </sub></p>
<span id="more"></span>

<p><img src="https://cdn.sspai.com/2019/05/24/89bba4dfdfb49b8d3c129ce1157a54b1.png" alt="img"></p>
<p>表格:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">| 左对齐 | 右对齐 | 居中对齐 |</span><br><span class="line">| :-----| ----: | :----: |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br></pre></td></tr></table></figure>

<p>流程图:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">st&#x3D;&gt;start: start</span><br><span class="line">op&#x3D;&gt;operation: operation</span><br><span class="line">cd&#x3D;&gt;condition: yes or no</span><br><span class="line">e&#x3D;&gt;end: end</span><br><span class="line">st-&gt;op-&gt;cd</span><br><span class="line">cd(yes)-&gt;e</span><br><span class="line">cd(no)-&gt;op</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">st&#x3D;&gt;start: start</span><br><span class="line">op&#x3D;&gt;operation: operation</span><br><span class="line">cd&#x3D;&gt;condition: yes or no</span><br><span class="line">e&#x3D;&gt;end: end</span><br><span class="line">st-&gt;op-&gt;cd</span><br><span class="line">cd(yes)-&gt;e</span><br><span class="line">cd(no)-&gt;op</span><br></pre></td></tr></table></figure>

<p><a href="https://www.jianshu.com/p/1ce5772560c1">语法1</a></p>
<p><a href="https://www.cnblogs.com/hongdada/p/9776547.html#%E4%B8%8B%E6%A0%87">语法 2</a></p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gjnxhtcc77j30i20b4mz9.jpg" alt="image-20201013192453713"></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">&quot;黑体&quot;</span>&gt;</span></span>我是黑体字<span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">&quot;微软雅黑&quot;</span>&gt;</span></span>我是微软雅黑<span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">&quot;STCAIYUN&quot;</span>&gt;</span></span>我是华文彩云<span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">red</span>&gt;</span></span>我是红色<span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">#008000</span>&gt;</span></span>我是绿色<span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">Blue</span>&gt;</span></span>我是蓝色<span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span>=<span class="string">5</span>&gt;</span></span>我是尺寸<span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">&quot;黑体&quot;</span> <span class="attr">color</span>=<span class="string">green</span> <span class="attr">size</span>=<span class="string">5</span>&gt;</span></span>我是黑体，绿色，尺寸为5<span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p><font face="黑体">我是黑体字</font><br><font face="微软雅黑">我是微软雅黑</font><br><font face="STCAIYUN">我是华文彩云</font><br><font color=red>我是红色</font><br><font color=#008000>我是绿色</font><br><font color=Blue>我是蓝色</font><br><font size=5>我是尺寸</font><br><font face="黑体" color=green size=5>我是黑体，绿色，尺寸为5</font></p>
]]></content>
      <categories>
        <category>language</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>mfc网页嵌入</title>
    <url>/2020/08/03/mfc%E7%BD%91%E9%A1%B5%E5%B5%8C%E5%85%A5/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="8d6b2cf4e99a558b615968f7f9a0ac5be0f4a3e5e69a0219e50533a3667a1eb5"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>program</category>
      </categories>
      <tags>
        <tag>kenzo</tag>
      </tags>
  </entry>
  <entry>
    <title>mytoolbar</title>
    <url>/2021/01/26/mytoolbar/</url>
    <content><![CDATA[<blockquote>
<p>简介</p>
</blockquote>
<span id="more"></span>

<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><ul>
<li>返回对象的函数如何处理失败</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">QAudioFormat fmt;</span><br><span class="line">fmt.<span class="built_in">setSampleRate</span>(sampleRate);<span class="comment">// 采样率， 一秒采集音频样本数量，常设置为44100</span></span><br><span class="line">fmt.<span class="built_in">setChannelCount</span>(channels);  <span class="comment">// 音频通道数</span></span><br><span class="line">fmt.<span class="built_in">setSampleSize</span>(<span class="number">16</span>); <span class="comment">//一个音频数据大小</span></span><br><span class="line">fmt.<span class="built_in">setCodec</span>(<span class="string">&quot;audio/pcm&quot;</span>); <span class="comment">//编码方式，大多声卡只支持pcm，也可以通过获取参数得到声卡支持参数</span></span><br><span class="line">fmt.<span class="built_in">setByteOrder</span>(QAudioFormat::LittleEndian); <span class="comment">// 小端 存储还是大端存储</span></span><br><span class="line">fmt.<span class="built_in">setSampleType</span>(QAudioFormat::UnSignedInt); <span class="comment">// 数据类型，对应的是16位</span></span><br></pre></td></tr></table></figure>

























]]></content>
      <categories>
        <category>program</category>
      </categories>
      <tags>
        <tag>toolbar</tag>
      </tags>
  </entry>
  <entry>
    <title>unix大法好</title>
    <url>/2019/11/13/unix%E5%A4%A7%E6%B3%95%E5%A5%BD/</url>
    <content><![CDATA[<p>unix基础知识，包括各种硬件软件、shell脚本、环境配置等等</p>
<span id="more"></span>

<h1 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h1><p><a href="https://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html">参考网站</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh user@host</span><br><span class="line"><span class="meta">#</span><span class="bash"> ssh默认端口22</span></span><br><span class="line">ssh -p 2222 user@host</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改端口</span></span><br></pre></td></tr></table></figure>

<ul>
<li><h2 id="机理"><a href="#机理" class="headerlink" title="机理"></a>机理</h2><p>SSH之所以能够保证安全，原因在于它采用了公钥加密。</p>
<p>整个过程是这样的：（1）远程主机收到用户的登录请求，把自己的公钥发给用户。（2）用户使用这个公钥，将登录密码加密后，发送回来。（3）远程主机用自己的私钥，解密登录密码，如果密码正确，就同意用户登录。</p>
<p>这个过程本身是安全的，但是实施的时候存在一个风险：如果有人截获了登录请求，然后冒充远程主机，将伪造的公钥发给用户，那么用户很难辨别真伪。因为不像https协议，SSH协议的公钥是没有证书中心（CA）公证的，也就是说，都是自己签发的。</p>
<p>可以设想，如果攻击者插在用户与远程主机之间（比如在公共的wifi区域），用伪造的公钥，获取用户的登录密码。再用这个密码登录远程主机，那么SSH的安全机制就荡然无存了。这种风险就是著名的<a href="http://en.wikipedia.org/wiki/Man-in-the-middle_attack">“中间人攻击”</a>（Man-in-the-middle attack）。</p>
<p><a href="https://blog.csdn.net/u012611878/article/details/54000607">什么是md5算法</a></p>
<p><a href="https://blog.csdn.net/wo541075754/article/details/81734770">什么是base64算法</a></p>
</li>
<li><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p>config：/etc/ssh/</p>
<p>公钥私钥，knownhost：$HOME/.ssh/</p>
</li>
</ul>
<h1 id="shell命令汇总"><a href="#shell命令汇总" class="headerlink" title="shell命令汇总"></a>shell命令汇总</h1><ul>
<li><p>循环</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">for varible1 in &#123;1..5&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="keyword">for</span> varible1 <span class="keyword">in</span> 1 2 3 4 5</span></span><br><span class="line">do</span><br><span class="line">     echo &quot;Hello, Welcome $varible1 times &quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<p>for i in {0..8}; do sh run.sh 1 $i;sleep 0.1;done</p>
</li>
<li><p>dkpg</p>
<p>Debian Packager</p>
</li>
<li><p>端口使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lsof -i tcp:8080</span><br></pre></td></tr></table></figure></li>
<li><p>关闭端口</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">netstat -anp | grep 6060</span><br></pre></td></tr></table></figure></li>
<li><p>批量更改文件后缀</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find ./ -name *.c  | while read i</span><br><span class="line">do</span><br><span class="line">        echo &quot;$i&quot;;</span><br><span class="line">        mv $i.c  $i.h</span><br><span class="line">done</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><p><a href="https://zhuanlan.zhihu.com/p/35361663">参考网站:知乎</a></p>
<p><a href="https://www.jianshu.com/p/e1e5564626b8">参考网站:简书</a></p>
<h2 id="区分接口与协议"><a href="#区分接口与协议" class="headerlink" title="区分接口与协议"></a><strong>区分接口与协议</strong></h2><h3 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h3><p><strong>USB 1.0</strong></p>
<p>USB规格第一次是于1995年，由Intel、IBM、Compaq、Microsoft、NEC、Digital、North Telecom等七家公司组成的USBIF(USB Implement Forum)共同提出，USBIF于1996年1月正式提出USB1.0规格，不过因为当时支持USB的周边装置少的可怜，所以主机板商不太把USB Port直接设计在主机板上，带宽1.5Mbps（192Kb/s）。</p>
<p><strong>USB 2.0</strong></p>
<p>USB2.0技术规范是有由Compaq、Hewlett Packard、Intel、Lucent、Microsoft、NEC、Philips共同制定、发布的，规范把外设数据传输速度提高到了480Mbps，是USB 1.1设备的40倍!2000年制定的USB 2.0标准是真正的USB 2.0，被称为USB 2.0的高速(High-speed)版本，理论传输速度为<strong>480 Mbps（60Mb/s）</strong>.</p>
<p><strong>USB 3.0</strong></p>
<p>USB 3.0规范由英特尔等公司发起,,USB3.0 引入全双工数据传输。5根线路中2根用来发送数据，另2根用来接收数据，还有1根是地线。也就是说，USB 3.0可以同步全速地进行读写操作，USB3.0的最大传输带宽**5.0Gbps(640MB/s)**。</p>
<p><strong>USB 3.1</strong></p>
<p>USB 3.1是最新的USB规范，该规范由英特尔等公司发起。与USB 3.0技术相比，新USB技术使用一个更高效的数据编码系统，并提供一倍以上的有效数据吞吐率。它完全向下兼容现有的USB连接器与线缆，数据传输速度**10Gbps(1280MB/s)**。</p>
<h3 id="接口（如下）"><a href="#接口（如下）" class="headerlink" title="接口（如下）"></a>接口（如下）</h3><p><a href="https://h5.china.com.cn/bjh/doc_1_1356316_6379285.html">参考网站</a></p>
<p><img src="https://images10.m.china.com.cn/newschina/oss/nimg/20190527/13/img_01035e438cd16038bbbaef77626198da.jpg" alt="img_01035e438cd16038bbbaef77626198da"></p>
<h2 id="多媒体接口"><a href="#多媒体接口" class="headerlink" title="多媒体接口"></a>多媒体接口</h2><h3 id="VGA-old"><a href="#VGA-old" class="headerlink" title="VGA(old)"></a>VGA(old)</h3><p><img src="https://pic4.zhimg.com/80/v2-61485282b4fab8f5b8578e9c0160b633_hd.jpg" alt="v2-61485282b4fab8f5b8578e9c0160b633_hd"></p>
<h3 id="S-Vedio-old"><a href="#S-Vedio-old" class="headerlink" title="S-Vedio(old)"></a>S-Vedio(old)</h3><p><img src="https://pic4.zhimg.com/80/v2-5785adafcbdaad8353cbe59d7e4dff37_hd.jpg" alt="v2-5785adafcbdaad8353cbe59d7e4dff37_hd"></p>
<h3 id="HDMI-now"><a href="#HDMI-now" class="headerlink" title="HDMI(now)"></a>HDMI(now)</h3><p><img src="https://pic4.zhimg.com/80/v2-5defc07aba78afe98ef28eed97d5ee3f_hd.jpg" alt="v2-5defc07aba78afe98ef28eed97d5ee3f_hd"></p>
<h3 id="DisplayPort-apple"><a href="#DisplayPort-apple" class="headerlink" title="DisplayPort(apple)"></a>DisplayPort(apple)</h3><p><img src="https://pic4.zhimg.com/80/v2-2aa8b2366fff8a147a453a8bc84a5367_hd.jpg" alt="v2-2aa8b2366fff8a147a453a8bc84a5367_hd"></p>
<h3 id="3-5mm音频接口-now"><a href="#3-5mm音频接口-now" class="headerlink" title="3.5mm音频接口(now)"></a>3.5mm音频接口(now)</h3><p><img src="https://pic4.zhimg.com/80/v2-90ccc47e2f028ea96bcbffa565634013_hd.jpg" alt="v2-90ccc47e2f028ea96bcbffa565634013_hd"></p>
<p>以前为两个口“耳机口和麦克风口分开”，现在逐渐往一个口“耳机话筒二合一”发展，是所有笔记本都普遍配置的接口，一般用于声音的输入和输出。</p>
<h2 id="笔记本有限数据传输"><a href="#笔记本有限数据传输" class="headerlink" title="笔记本有限数据传输"></a>笔记本有限数据传输</h2><h3 id="e-SATA-old"><a href="#e-SATA-old" class="headerlink" title="e-SATA(old)"></a>e-SATA(old)</h3><p><img src="https://pic4.zhimg.com/80/v2-2aa680862d4201c7179c1215a6fbbeb3_hd.jpg" alt="v2-2aa680862d4201c7179c1215a6fbbeb3_hd"></p>
<h3 id="Mini-IEEE-1394接口-old-apple"><a href="#Mini-IEEE-1394接口-old-apple" class="headerlink" title="Mini IEEE 1394接口(old apple)"></a>Mini IEEE 1394接口(old apple)</h3><p><img src="https://pic3.zhimg.com/80/v2-9c186f561aaee3b971e663dcd68e0f12_hd.jpg" alt="v2-9c186f561aaee3b971e663dcd68e0f12_hd"></p>
<h3 id="thunderbolt雷电接口-now-apple"><a href="#thunderbolt雷电接口-now-apple" class="headerlink" title="thunderbolt雷电接口(now apple)"></a>thunderbolt雷电接口(now apple)</h3><p>1,2代<img src="https://pic4.zhimg.com/80/v2-d6a3d34aa7d282e69897dddf2ce58fb3_hd.jpg" alt="v2-d6a3d34aa7d282e69897dddf2ce58fb3_hd"></p>
<p>3代</p>
<p><img src="https://pic2.zhimg.com/80/v2-54774742ca5ec164cb322ad10588ad3d_hd.jpg" alt="v2-54774742ca5ec164cb322ad10588ad3d_hd"></p>
<h3 id="USB与Type-C接口-now"><a href="#USB与Type-C接口-now" class="headerlink" title="USB与Type-C接口(now)"></a>USB与Type-C接口(now)</h3><p><img src="https://pic2.zhimg.com/80/v2-db1d7503e0743462466c25ce7c289b71_hd.jpg" alt="v2-db1d7503e0743462466c25ce7c289b71_hd"></p>
<p><img src="https://upload-images.jianshu.io/upload_images/755823-bb50e0deba1e5ad0.png" alt="esda"></p>
<p>苹果电脑上的Type-C接口均<strong>支持雷电3协议</strong></p>
<h3 id="RJ-45接口-now"><a href="#RJ-45接口-now" class="headerlink" title="RJ-45接口(now)"></a>RJ-45接口(now)</h3><p>主要作为网络连接</p>
<p><img src="https://pic4.zhimg.com/80/v2-c4a58bedd0e31cdceaf34278f899be87_hd.jpg" alt="v2-c4a58bedd0e31cdceaf34278f899be87_hd"></p>
<h3 id="多功能读卡器接口"><a href="#多功能读卡器接口" class="headerlink" title="多功能读卡器接口"></a>多功能读卡器接口</h3><p>一般笔记本都配有多功能读卡器，最常规的就是三合一读卡器。也就是可以读取三大种类的存储卡。一般为SD卡、MMC卡、MS卡。其中SD卡是最常用的。目前多功能读卡器一般部署在高端笔记本上，不过苹果笔记本现在取消了这个设计使用了全Type-C的方案</p>
<p><img src="https://pic3.zhimg.com/80/v2-87644619445c3fe4556bfa17b4d0a692_hd.jpg" alt="v2-87644619445c3fe4556bfa17b4d0a692_hd"></p>
<h3 id="SIM卡接口"><a href="#SIM卡接口" class="headerlink" title="SIM卡接口"></a>SIM卡接口</h3><h1 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h1><p>hdd hard disk drive 硬盘</p>
<p>ssd solid-state drive 固态硬盘</p>
<h1 id="mac加密压缩命令"><a href="#mac加密压缩命令" class="headerlink" title="mac加密压缩命令"></a>mac加密压缩命令</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zip -r -P passeword x.zip dir</span><br></pre></td></tr></table></figure>

<h1 id="强制退出"><a href="#强制退出" class="headerlink" title="强制退出"></a>强制退出</h1><p>尝试快捷键Command＋Q<br>选择当前处于界面最前端的应用，同时按住Command+Q退出程序，并不代表强制退出应用，主要用于一些假死的应用。</p>
<p>通过快捷键Command＋option＋Shift＋Ecs强制退出所有当前界面激活的应用<br>同时按住Command＋Option+Shift＋Ecs键组成的快捷键，按下2～3秒，你就会发现界面上的窗口一一关闭。</p>
<h1 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h1><ul>
<li><p><strong>窗口快速切换桌面</strong></p>
<p>defaults write com.apple.dock workspaces-edge-delay -float 0;killall Dock</p>
<p>defaults delete com.apple.dock workspaces-edge-delay;killall Dock</p>
</li>
<li><p>quick player可以录屏</p>
</li>
<li><p>source命令作用</p>
<p>在当前bash环境下读取并执行FileName中的命令。</p>
<p>比如您在一个脚本里export $KKK=111 ,假如您用./a.sh执行该脚本，执行完毕后，您运行 echo $KKK，发现没有值，假如您用source来执行 ，然后再echo，就会发现KKK=111。因为调用./a.sh来执行shell是在一个子shell里运行的，所以执行后，结构并没有反应到父shell里，但是source不同他就是在本shell中执行的，所以能够看到结果。</p>
<p><strong>sh是新起一个子shell运行    source和. 命令都是在父shell里直接运行，可以改变父shell参数</strong></p>
</li>
</ul>
<h1 id="修改mac默认python版本（附PATH变量使用说明）"><a href="#修改mac默认python版本（附PATH变量使用说明）" class="headerlink" title="修改mac默认python版本（附PATH变量使用说明）"></a>修改mac默认python版本（附PATH变量使用说明）</h1><ol>
<li><p>首先打开终端</p>
</li>
<li><p>打开配置文件，输入open ~/.bash_profile</p>
<ul>
<li><p><strong>bash_profile与.bashrc的区别</strong></p>
<h4 id="1-作为交互式登录shell或使用“-–login”调用"><a href="#1-作为交互式登录shell或使用“-–login”调用" class="headerlink" title="1. 作为交互式登录shell或使用“ –login”调用"></a>1. 作为交互式登录shell或使用“ –login”调用</h4><p>交互式意味着您可以输入命令。该外壳程序未运行，因为已激活了脚本。登录外壳程序意味着您在向系统进行身份验证后通常通过提供用户名和密码来获得外壳程序。</p>
<p>读取的文件：</p>
<ul>
<li><code>/ etc / profile</code></li>
<li><code>〜/ .bash_profile</code>，<code>〜/ .bash_login</code>或<code>〜/ .profile</code>：读取第一个现有的可读文件</li>
<li>``退出后<code>〜/ .bash_logout</code>。</li>
</ul>
<p>如果配置文件存在但不可读，则会显示错误消息。如果文件不存在，bash将搜索下一个文件。</p>
<h4 id="2-作为交互式非登录外壳程序调用"><a href="#2-作为交互式非登录外壳程序调用" class="headerlink" title="2. 作为交互式非登录外壳程序调用"></a>2. 作为交互式非登录外壳程序调用</h4><p>非登录外壳程序意味着您不必通过系统身份验证。例如，当您使用图标或菜单项打开终端时，即为非登录外壳。</p>
<p>读取的文件：</p>
<ul>
<li><code>〜/ .bashrc</code></li>
</ul>
<p>此文件通常在<code>〜/ .bash_profile中</code>引用：</p>
</li>
</ul>
</li>
<li><p>在配置文件中，写入python的外部环境变量（后面为python的位置，本人的版本是3.6） export PATH=${PATH}:/Applications/anaconda3/bin/python.app</p>
<ul>
<li><p><a href="https://www.jianshu.com/p/acb1f062a925">mac系统path指南</a></p>
</li>
<li><p>Mac系统的环境变量，加载顺序为：<br>/etc/profile /etc/paths ~/.bash_profile ~/.bash_login ~/.profile ~/.bashrc</p>
<p>/etc/profile和/etc/paths是系统级别的，系统启动就会加载，后面几个是当前用户级的环境变量。后面3个按照从前往后的顺序读取，如果/.bash_profile文件存在，则后面的几个文件就会被忽略不读了，如果/.bash_profile文件不存在，才会以此类推读取后面的文件。~/.bashrc没有上述规则，它是bash shell打开的时候载入的。</p>
<ul>
<li>/etc/paths （全局建议修改这个文件 ）<br> 编辑 paths，将环境变量添加到 paths文件中 ，一行一个路径<br> Hint：输入环境变量时，不用一个一个地输入，只要拖动文件夹到 Terminal 里就可以了。</li>
<li>/etc/profile （建议不修改这个文件 ）<br> 全局（公有）配置，不管是哪个用户，登录时都会读取该文件。</li>
<li>/etc/bashrc （一般在这个文件中添加系统级环境变量）<br> 全局（公有）配置，bash shell执行时，不管是何种方式，都会读取此文件</li>
<li>.profile 文件为系统的每个用户设置环境信息,当用户第一次登录时,该文件被执行.并从/etc/profile.d目录的配置文件中搜集shell的设置<br> <strong>使用注意</strong>：如果你有对/etc/profile有修改的话必须得重启你的修改才会生效，此修改对每个用户都生效。</li>
<li>./bashrc 每一个运行bash shell的用户执行此文件.当bash shell被打开时,该文件被读取.<br> <strong>使用注意</strong> 对所有的使用bash的用户修改某个配置并在以后打开的bash都生效的话可以修改这个文件，修改这个文件不用重启，重新打开一个bash即可生效。</li>
<li>./bash_profile 该文件包含专用于你的bash shell的bash信息,当登录时以及每次打开新的shell时,该文件被读取.（每个用户都有一个.bashrc文件，在用户目录下）<br> <strong>使用注意</strong> 需要需要重启才会生效，/etc/profile对所有用户生效，~/.bash_profile只对当前用户生效。</li>
</ul>
<p>source ./.bash_profile 或者 ./.profile 环境信息生效</p>
<p><font color=red>一句话：改~/bash_profile加export</font></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export PATH=$&#123;PATH&#125;:&lt;PATH 1&gt;</span><br><span class="line">export PATH=$&#123;PATH&#125;:&lt;PATH 2&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>重命名python</p>
</li>
</ol>
<p>alias python=”/Applications/anaconda3/bin/python3.6”</p>
<ol start="5">
<li><p>关闭文件后，在终端调用 source ~/.bash_profile</p>
</li>
<li><p>重启终端，调用 python，查看是否修改成功</p>
</li>
</ol>
<h1 id="brew"><a href="#brew" class="headerlink" title="brew"></a>brew</h1>]]></content>
      <categories>
        <category>program</category>
      </categories>
      <tags>
        <tag>apple</tag>
        <tag>hardware</tag>
      </tags>
  </entry>
  <entry>
    <title>web</title>
    <url>/2019/11/10/web/</url>
    <content><![CDATA[<p>参考：<a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017804782304672">廖雪峰</a></p>
<h1 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h1><h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><p>header 一个响应码，一个字典</p>
<p>body 内容</p>
<span id="more"></span>

<h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><p><a href="https://www.runoob.com/html/html-quicklist.html">html速查列表</a></p>
<ul>
<li><p>注释    &lt;!– blablabla –&gt; </p>
</li>
<li><p>属性</p>
<p>color(color: red), font-size(font-size: 16px), font-family, </p>
</li>
</ul>
<p>类选择器</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">h2</span> &#123;<span class="attribute">color</span>: blue;&#125;</span></span><br><span class="line"><span class="xml">  .red-text &#123;color: red;&#125;<span class="comment">&lt;!--注意.--&gt;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>常用属性：class, id, style, title</p>
<ul>
<li><p>导入链接，可以链接css样式表，rel=”stylesheet” type=”text/css”</p>
<link href="https://fonts.gdgdocs.org/css?family=Lobster" rel="stylesheet" type="text/css"></li>
<li><p>head标签：里面插入各种meta信息</p>
</li>
<li><p>img src width alt默认文字</p>
</li>
<li><p>格式化标签&lt;b&gt;&lt;i&gt;</p>
</li>
<li><p>边框</p>
</li>
<li><p>anchor nesting    target=”_blank”在新标签页打开</p>
</li>
<li><p>无序列表ul</p>
<p>有序列表ol</p>
</li>
<li><h4 id="input"><a href="#input" class="headerlink" title="input"></a>input</h4></li>
</ul>
<p>  Type: text, password, radio, checkbox</p>
<p>   placeholder   &lt;input type=”text” placeholder=”this is placeholder text”&gt;</p>
<p>  label 选择框</p>
<ul>
<li><p>&lt;form&gt;可以提交到表单服务器</p>
</li>
<li><p>button 点击提交</p>
</li>
<li><p>body 元素定义文档的主体。</p>
<p>body 元素包含文档的所有内容（比如文本、超链接、图像、表格和列表等等。）</p>
</li>
<li><h4 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h4><ul>
<li>table 表格由 &lt;table&gt; 标签来定义。每个表格均有若干行（由&lt;tr&gt; 标签定义），每行被分割为若干单元格（由&lt;td&gt; 标签定义）。字母 td 指表格数据（table data），即数据单元格的内容。数据单元格可以包含文本、图片、列表、段落、表单、水平线、表格等等。</li>
</ul>
</li>
<li><p>rgb(0,0,0)</p>
</li>
<li><p>字符实体 #</p>
</li>
<li><p>href=“#”模板预览中的一个超链接占位符有意义的示例。在模板的单页演示中，我经常看到&lt;a href=”#”&gt;锚标记是一个超链接，但不会随处可见。为什么不将href属性留空？空白href属性实际上是指向当前页面的超链接。换句话说，它将导致页面刷新。正如我所讨论的，href=”#”它也是一个超链接，并导致滚动。因此，实际上是超链接占位符的最佳解决方案是href=”#!”这里的想法是希望页面上没有一个元素id=”!”（谁做到了！？），因此超链接什么也没指-因此什么也没发生。</p>
</li>
</ul>
<h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><ul>
<li>引入：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; href&#x3D;&quot;mystyle.css&quot;&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>id: #id</p>
<p>Class: .class</p>
</li>
<li><p><a href="https://www.runoob.com/cssref/css-websafe-fonts.html">web安全字体</a></p>
</li>
<li><p>单位长度</p>
</li>
</ul>
<h2 id="Django"><a href="#Django" class="headerlink" title="Django"></a>Django</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">django-admin startproject mysite</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><p>urls.py    指定域名与对应view的关系</p>
</li>
<li><p>views.py.   处理请求</p>
</li>
<li><p><strong>render</strong>    </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">render</span>(<span class="params">request, template_name, context=<span class="literal">None</span>, content_type=<span class="literal">None</span>, status=<span class="literal">None</span>, using=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Return a HttpResponse whose content is filled with the result of calling</span></span><br><span class="line"><span class="string">    django.template.loader.render_to_string() with the passed arguments.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    content = loader.render_to_string(template_name, context, request, using=using)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(content, content_type, status)</span><br></pre></td></tr></table></figure></li>
<li><p>运行manage.py时可能会遇到问题，需要跟踪修改一些文件，还要改一下__init__.py</p>
</li>
<li><p><strong>url&amp;path</strong>    path与url是两个不同的模块,效果都是响应返回页面, path调用的是python第三方模块或框架,而url则是自定义的模块,如Views下的def函数对应你url中的参数值.</p>
</li>
<li><p>遇到问题</p>
<p>ile “manage.py”, line 16</p>
<p>​    ) from exc</p>
<p>​         ^</p>
<p>SyntaxError: invalid syntax</p>
<p><strong>原因</strong>：未指定虚拟环境</p>
<p>使用工具pipenv</p>
<p>mac上特有的问题mysqlclient版本不符，按照提示修改文件</p>
</li>
<li><p>django数据库思想：</p>
<p>Python 代码翻译成数据库语言时其规则就是一个 Python 类对应一个数据库表格，类名即表名，类的属性对应着表格的列，属性名即列名。</p>
</li>
<li><p>TypeError: <strong>init</strong>() missing 1 required positional argument: ‘on_delete’</p>
<p>django2之后要求定义外键和一对一关系时，on_delete初始化，防止两个表数据不一致</p>
<p>修改如下：user=models.OneToOneField(User,on_delete=models.CASCADE)</p>
</li>
</ul>
<h3 id="django要点"><a href="#django要点" class="headerlink" title="django要点"></a>django要点</h3><ol>
<li>安装pipenv（新建django工程）</li>
<li>Python3.7</li>
<li>manage.py(注意mac的bug)</li>
<li>修改语言settings</li>
<li>Settings.py 注册app，model，更改数据库引擎，templates模板（’DIRS’: [os.path.join(BASE_DIR, ‘templates’)],</li>
<li>models中建立数据库魔性，注意foreignkey 和manytomany field</li>
<li>db_model：foreign key &amp; manyToManyField；数据库操作django shell</li>
<li>urls.py 对应视路径与视图views.py</li>
<li>templates中新建html模板标签和模板变量</li>
<li>注意static路径（里面放css，js</li>
<li>admin superuser</li>
<li>admin后台汉化？verbose_name，注册，Meta类</li>
<li>path converters    &lt;int:pk&gt;</li>
<li></li>
</ol>
<h2 id="WSGI-py"><a href="#WSGI-py" class="headerlink" title="WSGI(py)"></a>WSGI(py)</h2><p>参考：<a href="https://www.letiantian.me/2015-09-10-understand-python-wsgi/">理解wsgi</a></p>
<ul>
<li><p>回调函数</p>
<p>你到一个商店买东西，刚好你要的东西没有货，于是你在店员那里留下了你的电话，过了几天店里有货了，店员就打了你的电话，然后你接到电话后就到店里去取了货。在这个例子里，你的电话号码就叫回调函数，你把电话留给店员就叫登记回tazsdeeeh调函数，店里后来有货了叫做触发了回调关联的事件，店员给你打电话叫做调用回调函数，你到店里去取货叫做响应回调事件。回答完毕。</p>
</li>
<li><p>FLASK(web 框架)</p>
</li>
</ul>
<p>需要下载（用pycharm自带的下载就行，不用conda或者console（命令行））</p>
<h2 id="网络知识"><a href="#网络知识" class="headerlink" title="网络知识"></a>网络知识</h2><ul>
<li><p>有线网，无线网，wifi：<br>wifi是wlan的一种实现形式</p>
</li>
<li><p>ip：</p>
<p>IP 地址是指互联网协议地址，是 IP 协议提供的一种统一的地址格式，它为互联网上的每一个网络和每一台主机分配一个逻辑地址，以此来屏蔽物理地址的差异。IP 地址编址方案将 IP 地址空间划分为 A、B、C、D、E 五类，其中 A、B、C 是基本类，D、E 类作为多播和保留使用，为特殊地址。</p>
<p>每个 IP 地址包括两个标识码（ID），即网络 ID 和主机 ID。同一个物理网络上的所有主机都使用同一个网络 ID，网络上的一个主机（包括网络上工作站，服务器和路由器等）有一个主机 ID 与其对应。A~E 类地址的特点如下：</p>
<p>A 类地址：以 0 开头，第一个字节范围：0~127；</p>
<p>B 类地址：以 10 开头，第一个字节范围：128~191；</p>
<p>C 类地址：以 110 开头，第一个字节范围：192~223；</p>
<p>D 类地址：以 1110 开头，第一个字节范围为 224~239；</p>
<p>E 类地址：以 1111 开头，保留地址</p>
</li>
<li><p>mac地址是身份证号, ip地址是邮编 你一生下来, 身份证号就已经定了, 你换个地方, 每个地方的邮编都不一样 这就是区别</p>
</li>
<li><p>tcp三次握手</p>
<p>最初客户端和服务端都处于 CLOSED(关闭) 状态。本例中 A（Client） 主动打开连接，B（Server） 被动打开连接。</p>
<p>一开始，B 的 TCP 服务器进程首先创建传输控制块TCB，准备接受客户端进程的连接请求。然后服务端进程就处于 LISTEN(监听) 状态，等待客户端的连接请求。如有，立即作出响应。</p>
<p>第一次握手：A 的 TCP 客户端进程也是首先创建传输控制块 TCB。然后，在打算建立 TCP 连接时，向 B 发出连接请求报文段，这时首部中的同步位 SYN=1，同时选择一个初始序号 seq = x。TCP 规定，SYN 报文段（即 SYN = 1 的报文段）不能携带数据，但要消耗掉一个序号。这时，TCP 客户进程进入 SYN-SENT（同步已发送）状态。</p>
<p>第二次握手：B 收到连接请求报文后，如果同意建立连接，则向 A 发送确认。在确认报文段中应把 SYN 位和 ACK 位都置 1，确认号是 ack = x + 1，同时也为自己选择一个初始序号 seq = y。请注意，这个报文段也不能携带数据，但同样要消耗掉一个序号。这时 TCP 服务端进程进入 SYN-RCVD（同步收到）状态。</p>
<p>第三次握手：TCP 客户进程收到 B 的确认后，还要向 B 给出确认。确认报文段的 ACK 置 1，确认号 ack = y + 1，而自己的序号 seq = x + 1。这时 ACK 报文段可以携带数据。但如果不携带数据则不消耗序号，这种情况下，下一个数据报文段的序号仍是 seq = x + 1。这时，TCP 连接已经建立，A 进入 ESTABLISHED（已建立连接）状态。</p>
</li>
<li><p>tcp四次挥手</p>
<p>第一次挥手：A 的应用进程先向其 TCP 发出连接释放报文段，并停止再发送数据，主动关闭 TCP 连接。A 把连接释放报文段首部的终止控制位 FIN 置 1，其序号 seq = u（等于前面已传送过的数据的最后一个字节的序号加 1），这时 A 进入 FIN-WAIT-1（终止等待1）状态，等待 B 的确认。请注意：TCP 规定，FIN 报文段即使不携带数据，也将消耗掉一个序号。</p>
<p>第二次挥手：B 收到连接释放报文段后立即发出确认，确认号是 ack = u + 1，而这个报文段自己的序号是 v（等于 B 前面已经传送过的数据的最后一个字节的序号加1），然后 B 就进入 CLOSE-WAIT（关闭等待）状态。TCP 服务端进程这时应通知高层应用进程，因而从 A 到 B 这个方向的连接就释放了，这时的 TCP 连接处于半关闭（half-close）状态，即 A 已经没有数据要发送了，但 B 若发送数据，A 仍要接收。也就是说，从 B 到 A 这个方向的连接并未关闭，这个状态可能会持续一段时间。A 收到来自 B 的确认后，就进入 FIN-WAIT-2(终止等待2)状态，等待 B 发出的连接释放报文段。</p>
<p>第三次挥手：若 B 已经没有要向 A 发送的数据，其应用进程就通知 TCP 释放连接。这时 B 发出的连接释放报文段必须使 FIN = 1。假定 B 的序号为 w（在半关闭状态，B 可能又发送了一些数据）。B 还必须重复上次已发送过的确认号 ack = u + 1。这时 B 就进入 LAST-ACK(最后确认)状态，等待 A 的确认。</p>
<p>第四次挥手：A 在收到 B 的连接释放报文后，必须对此发出确认。在确认报文段中把 ACK 置 1，确认号 ack = w + 1，而自己的序号 seq = u + 1（前面发送的 FIN 报文段要消耗一个序号）。然后进入 TIME-WAIT(时间等待) 状态。请注意，现在 TCP 连接还没有释放掉。必须经过时间等待计时器设置的时间 2MSL（MSL：最长报文段寿命）后，A 才能进入到 CLOSED 状态，然后撤销传输控制块，结束这次 TCP 连接。当然如果 B 一收到 A 的确认就进入 CLOSED 状态，然后撤销传输控制块。所以在释放连接时，B 结束 TCP 连接的时间要早于 A。</p>
</li>
<li><p>http状态码</p>
<ul>
<li><strong>1XX 信息</strong></li>
</ul>
<p>\1. 100 Continue ：表明到目前为止都很正常，客户端可以继续发送请求或者忽略这个响应。</p>
<ul>
<li><strong>2XX 成功</strong></li>
</ul>
<p>\1. 200 OK</p>
<p>\2. 204 No Content ：请求已经成功处理，但是返回的响应报文不包含实体的主体部分。一般在只需要从客户端往服务器发送信息，而不需要返回数据时使用。</p>
<p>\3. 206 Partial Content ：表示客户端进行了范围请求，响应报文包含由 Content-Range 指定范围的实体内容。</p>
<ul>
<li><strong>3XX 重定向</strong></li>
</ul>
<p>\1. 301 Moved Permanently ：永久性重定向；</p>
<p>\2. 302 Found ：临时性重定向；</p>
<p>\3. 303 See Other ：和 302 有着相同的功能，但是 303 明确要求客户端应该采用 GET 方法获取资源。</p>
<p>\4. 304 Not Modified ：如果请求报文首部包含一些条件，例如：If-Match，If-Modified-Since，If-None-Match，If-Range，If-Unmodified-Since，如果不满足条件，则服务器会返回 304 状态码。</p>
<p>\5. 307 Temporary Redirect ：临时重定向，与 302 的含义类似，但是 307 要求浏览器不会把重定向请求的 POST 方法改成 GET 方法。</p>
<ul>
<li><strong>4XX 客户端错误</strong></li>
</ul>
<p>\1. 400 Bad Request ：请求报文中存在语法错误。</p>
<p>\2. 401 Unauthorized ：该状态码表示发送的请求需要有认证信息（BASIC 认证、DIGEST 认证）。如果之前已进行过一次请求，则表示用户认证失败。</p>
<p>\3. 403 Forbidden ：请求被拒绝。</p>
<p>\4. 404 Not Found</p>
<ul>
<li><strong>5XX 服务器错误</strong></li>
</ul>
<p>\1. 500 Internal Server Error ：服务器正在执行请求时发生错误；</p>
<p>\2. 503 Service Unavailable ：服务器暂时处于超负载或正在进行停机维护，现在无法处理请求。</p>
</li>
<li><p>vpn ss ssr</p>
<p>socks5协议</p>
<p>NAT network address translation</p>
</li>
</ul>
<h2 id="神奇的bug"><a href="#神奇的bug" class="headerlink" title="神奇的bug"></a>神奇的bug</h2><ul>
<li><p>ssl/tls版本过低</p>
<p>curl <a href="https://bootstrap.pypa.io/get-pip.py">https://bootstrap.pypa.io/get-pip.py</a> | python3</p>
</li>
</ul>
]]></content>
      <categories>
        <category>program</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>xx主义</title>
    <url>/2020/05/07/xx%E4%B8%BB%E4%B9%89/</url>
    <content><![CDATA[<blockquote>
<p>大坑, 关于各种主义的一个汇总, 有错误的话请务必私戳下, 旨在避免望文生义</p>
<p><a href="https://zh.wikipedia.org/wiki/%E4%B8%BB%E4%B9%89">wiki</a>:</p>
<p><strong>主义</strong>（英语：(<a href="https://zh.wikipedia.org/wiki/Doctrine">doctrine</a>, or principle；常用<a href="https://zh.wikipedia.org/wiki/%E5%90%8E%E7%BC%80">后缀</a>“–ism”表示），代表理念或有完整体系的<a href="https://zh.wikipedia.org/wiki/%E6%80%9D%E6%83%B3">思想</a>和信念，也可视为实现不同目标的不同方法。若于政治理论中，冠以“主义”此一后缀，往往具有“思想、运动、体制”三种互为相关之内容。</p>
</blockquote>
<span id="more"></span>

<h1 id="各种主义"><a href="#各种主义" class="headerlink" title="各种主义"></a>各种主义</h1><h2 id="保守主义"><a href="#保守主义" class="headerlink" title="保守主义"></a><a href="https://zh.wikipedia.org/wiki/%E4%BF%9D%E5%AE%88%E4%B8%BB%E4%B9%89">保守主义</a></h2><p>是一种强调既有价值或现状的政治哲学。</p>
<p>保守主义一般是相对激进而言的，而不是相对进步而言的。保守主义并不反对进步，<strong>只是反对激进的进步和彻底的颠覆</strong>，宁愿采取比较稳妥的方式。其特色为重视已建立之体制并加以维护或者小修小补，并且<strong>尊重传统为不同时代所累积智慧结晶而非累赘</strong>。</p>
<ul>
<li><p><a href="https://zh.wikipedia.org/wiki/%E5%9F%83%E5%BE%B7%E8%92%99%C2%B7%E4%BC%AF%E5%85%8B">埃德蒙·伯克</a>: </p>
<p>伯克主张，<strong>一些人的理性必然少于其他人</strong>，因此如果这些人纯粹依靠理性行动，他们所运作的政府将会非常糟糕。对于伯克而言，政府的架构不该是由抽象的“理性”所组成，而是应该遵循国家长久以来的既定发展模式、以及如家庭和教会等重要的社会传统。</p>
<p>伯克主张，比起纯粹抽象（例如“理性”）的事物，传统更能作为立身处世的依据。<strong>因为传统经历了数个世代的智慧和考验，“理性”则可能只是一个人的偏见，不但未经时间的考验，最多也只能代表一个世代的智慧。</strong>任何既有的价值观或传统都是经历了过去的时光考验才流传下来的，因此都应该被尊重。</p>
</li>
</ul>
<h2 id="经验主义"><a href="#经验主义" class="headerlink" title="经验主义"></a><a href="https://zh.wikipedia.org/wiki/%E7%BB%8F%E9%AA%8C%E4%B8%BB%E4%B9%89">经验主义</a></h2><p><strong>经验主义</strong>（英语：Empiricism）又作<strong>经验论</strong>，通常指相信现代<a href="https://zh.wikipedia.org/wiki/%E7%A7%91%E5%AD%A6%E6%96%B9%E6%B3%95">科学方法</a>，相信证据，着重认为<a href="https://zh.wikipedia.org/wiki/%E7%90%86%E8%AE%BA">理论</a>应建立于对于事物的观察，而不是<a href="https://zh.wikipedia.org/wiki/%E7%9B%B4%E8%A7%89">直觉</a>或<a href="https://zh.wikipedia.org/wiki/%E8%BF%B7%E4%BF%A1">迷信</a>。意即通过实验研究而后进行理论归纳优于单纯的逻辑推理。它最重要的科学方法包括：<strong>所有理论和假设都必须被实验来检验</strong>，而不是单纯且唯一地依赖于先验推理，直觉和启示。</p>
<p>+</p>
<h2 id="悲观主义"><a href="#悲观主义" class="headerlink" title="悲观主义"></a><a href="https://zh.wikipedia.org/wiki/%E6%82%B2%E8%A7%82%E4%B8%BB%E4%B9%89">悲观主义</a></h2><p><strong>悲观主义</strong>是一种<a href="https://zh.wikipedia.org/wiki/%E5%93%B2%E5%AD%A6">哲学</a>思想。有几种意义：</p>
<ul>
<li>相信事情只会越来越糟糕，每况愈下。</li>
<li>不管我们所见为何，其实事件的本质是丑陋的、邪恶的。</li>
<li>认为人性是自私的、世界是丑恶的等等。</li>
</ul>
<p>值得注意的是，悲观主义<strong>未必</strong>会和积极的态度起冲突。</p>
<h2 id="表现主义-艺术"><a href="#表现主义-艺术" class="headerlink" title="表现主义(艺术)"></a><a href="https://zh.wikipedia.org/wiki/%E8%A1%A8%E7%8E%B0%E4%B8%BB%E4%B9%89">表现主义</a>(艺术)</h2><p>表现主义是艺术家通过作品着重表现内心的情感，而忽视对描写对象形式的摹写，因此往往表现为对现实扭曲和抽象化。这个做法尤其用来表达恐惧的情感——欢快的表现主义作品很少见。从这个定义上来说马蒂斯·格吕内瓦尔德与<a href="https://zh.wikipedia.org/wiki/%E6%A0%BC%E9%9B%B7%E8%80%83">格雷考</a>的作品也可以说是表现主义的，但是一般来说表现主义仅限于20世纪的作品。</p>
<h2 id="不可知主义"><a href="#不可知主义" class="headerlink" title="不可知主义"></a><a href="https://zh.wikipedia.org/wiki/%E4%B8%8D%E5%8F%AF%E7%9F%A5%E4%B8%BB%E7%BE%A9">不可知主义</a></h2><p><strong>不可知论</strong>（英语：Agnosticism），或称<strong>不可知主义</strong>，是一种<a href="https://zh.wikipedia.org/wiki/%E5%93%B2%E5%AD%B8">哲学</a>观点，认为<a href="https://zh.wikipedia.org/wiki/%E5%BD%A2%E8%80%8C%E4%B8%8A%E5%AD%B8">形而上学</a>的一些问题，例如是否有<a href="https://zh.wikipedia.org/wiki/%E8%BC%AA%E8%BF%B4">来世</a>、<a href="https://zh.wikipedia.org/wiki/%E9%AC%BC%E7%A5%9E">鬼神</a>、<a href="https://zh.wikipedia.org/wiki/%E5%A4%A9%E4%B8%BB">天主</a>是否存在等，是<strong>不为人知或者根本无法知道</strong>的想法或理论。不可知论者不像<a href="https://zh.wikipedia.org/wiki/%E6%97%A0%E7%A5%9E%E8%AE%BA%E8%80%85">无神论者</a>一样否认神的存在，只是认为人无法知道或无法确认其是否存在，因此不可知论包含着宗教的<a href="https://zh.wikipedia.org/wiki/%E6%80%80%E7%96%91%E4%B8%BB%E4%B9%89">怀疑主义</a>；不可知论者认为人类不可能得到<a href="https://zh.wikipedia.org/wiki/%E7%9C%9F%E7%90%86">真理</a>，他们通常被算作非宗教的、世俗的，但是不一定没有信仰。</p>
<h2 id="存在主义"><a href="#存在主义" class="headerlink" title="存在主义"></a><a href="https://zh.wikipedia.org/wiki/%E5%AD%98%E5%9C%A8%E4%B8%BB%E7%BE%A9">存在主义</a></h2><p><strong>存在主义</strong>（英语：existentialism），是一个<a href="https://zh.wikipedia.org/wiki/%E5%93%B2%E5%AD%A6">哲学</a>的非理性主义思潮，它认为<strong>人存在的意义是无法经由理性思考而得到答案的</strong>，以强调个人、独立自主和主观经验。<a href="https://zh.wikipedia.org/wiki/%E5%B0%BC%E9%87%87">尼采</a>和<a href="https://zh.wikipedia.org/wiki/%E7%A5%81%E5%85%8B%E6%9E%9C">克尔凯郭尔</a>可被看作其先驱。在20世纪中它流传非常广泛，其哲学思想还延续到了60年代兴起的<a href="https://zh.wikipedia.org/wiki/%E4%BA%BA%E6%9C%AC%E4%B8%BB%E7%BE%A9">人本主义</a>。<a href="https://zh.wikipedia.org/wiki/%E9%9B%85%E6%96%AF%E8%B4%9D%E5%B0%94%E6%96%AF">雅斯贝尔斯</a>和<a href="https://zh.wikipedia.org/wiki/%E6%B5%B7%E5%BE%B7%E6%A0%BC%E5%B0%94">海德格尔</a>、<a href="https://zh.wikipedia.org/wiki/%E8%AE%A9-%E4%BF%9D%E7%BD%97%C2%B7%E8%90%A8%E7%89%B9">保罗·萨特</a>和<a href="https://zh.wikipedia.org/wiki/%E5%8A%A0%E7%BC%AA">加缪</a>是其代表人物。</p>
<p>其最突出的命题是：世界没有终极的目标；人们发现自己处于一个隐隐约约而有敌意的世界中；世界让人痛苦；人们选择而且无法避免选择他们的品格、目标和观点；不选择就是一种选择，即是选择了“不选择”；世界和我们的处境的真相最清楚地反映在茫然的心理不安或恐惧的瞬间。</p>
<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>存在先于本质</p>
<p>+</p>
<h2 id="功利主义"><a href="#功利主义" class="headerlink" title="功利主义"></a>功利主义</h2><p>认为最正确的行为是将<a href="https://zh.wikipedia.org/w/index.php?title=%E6%95%88%E7%9B%8A&action=edit&redlink=1">效益</a>达到最大, “效益”就是快乐，倾向得到最大快乐，而倾向避免痛苦就是正确。功利主义是一种<a href="https://zh.wikipedia.org/wiki/%E7%B5%90%E6%9E%9C%E4%B8%BB%E7%BE%A9">结果主义</a></p>
<p>功利主义正式成为哲学系统是在18世纪末与19世纪初期，由英国哲学家兼经济学家<a href="https://zh.wikipedia.org/wiki/%E5%82%91%E7%91%9E%E7%B1%B3%C2%B7%E9%82%8A%E6%B2%81">边沁</a>和<a href="https://zh.wikipedia.org/wiki/%E7%B4%84%E7%BF%B0%C2%B7%E5%8F%B2%E9%83%BD%E8%8F%AF%C2%B7%E7%B1%B3%E7%88%BE">米尔</a>提出。其基本理论是：一种行为如有助于增进幸福，则为正确的；若导致产生和幸福相反的东西，则为错误的。幸福不仅涉及行为的当事人，也涉及受该行为影响的每一个人。</p>
<p>功利主义认为人应该做出能“达到最大善”（即“最大效益”）的行为，所谓最大善的计算则必须依靠此行为所涉及的每个个体之苦乐感觉的总和，其中每个个体都被视为具相同分量，且快乐与痛苦是能够换算的，痛苦仅是“负的快乐”。不同于一般的<a href="https://zh.wikipedia.org/wiki/%E5%80%AB%E7%90%86%E5%AD%B8">伦理学</a>说，功利主义不考虑一个人行为的动机与手段，仅考虑一个行为的结果对最大快乐值的影响。能增加最大快乐值的即是善；反之即为恶。边沁和米尔都认为：人类的行为以快乐和痛苦为动机。米尔认为：人类行为的唯一目的是求得幸福，所以对幸福的促进就成为判断人的一切行为的标准。</p>
<h2 id="享乐主义"><a href="#享乐主义" class="headerlink" title="享乐主义"></a>享乐主义</h2><p><strong>享乐主义</strong>（英语：Hedonism）是一个哲学思想，认为享乐是人类最重要的追求, 苏格拉底的学生，<a href="https://zh.wikipedia.org/wiki/%E6%98%94%E8%98%AD%E5%B0%BC%E7%9A%84%E9%98%BF%E7%91%9E%E6%96%AF%E6%8F%90%E6%99%AE%E6%96%AF">昔兰尼的阿瑞斯提普斯</a>被认为最早提出了享乐主义的思想</p>
<p>享乐主义是所有动作皆可被一个人会产生的享受与痛楚所决定，力求将享乐与痛苦的距差增至最大。19世纪<a href="https://zh.wikipedia.org/wiki/%E8%8B%B1%E5%9C%8B">英国</a><a href="https://zh.wikipedia.org/wiki/%E5%93%B2%E5%AD%B8%E5%AE%B6">哲学家</a><a href="https://zh.wikipedia.org/wiki/%E7%BA%A6%E7%BF%B0%C2%B7%E6%96%AF%E5%9B%BE%E5%B0%94%E7%89%B9%C2%B7%E5%AF%86%E5%B0%94">约翰·斯图尔特·密尔</a>与边沁由他们的<a href="https://zh.wikipedia.org/wiki/%E5%8A%9F%E5%88%A9%E4%B8%BB%E7%BE%A9">功利主义</a>的<a href="https://zh.wikipedia.org/wiki/%E5%80%AB%E7%90%86">伦理</a>理论提出了享乐主义的基本原理。享乐主义是功利主义的价值观之先驱：所有行为皆是基于要给最多的人数获得最大的快乐</p>
<p>希腊哲学家伊比鸠鲁认为，人生追根究底不过是为了享受快乐。不过，这里的快乐并不是指性爱跟毒品，而是没有痛苦的。他认为快乐有两种，一种是短暂的，另一种是持久的。短暂的快乐是从满足需求而来，口渴的人喝到水会感觉到快乐，疲倦的人躺下休息也会感到快乐。除了这种短暂的快乐之外，还有一种持久的快乐，而这才会带来真正幸福的生活。这种持久的快乐，指的是没有痛苦，也没有强烈匮乏的状态。</p>
<h2 id="虚无主义"><a href="#虚无主义" class="headerlink" title="虚无主义"></a>虚无主义</h2><h2 id="消费主义"><a href="#消费主义" class="headerlink" title="消费主义"></a>消费主义</h2><h3 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h3><p>18c 早期, 薪水突然上涨</p>
<p>18c 中期, 第一次消费革命</p>
<p>1723 &lt;蜜蜂的童话&gt; shoping for pleasure, 奢侈品</p>
<p>卢梭-&gt;简朴</p>
<h3 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h3><p><strong>富有且堕落———–贫穷且节制</strong></p>
<p>我们已经接受了消费主义</p>
<p>副作用: 广告, 与需求不相关的产品</p>
<p>积极作用: 高经济增长, 高就业</p>
<p>亚当史密斯-&gt;财富与美德共存? </p>
<p>商业体系在边缘化, 异化并纳入自己那些否定性.</p>
<h3 id="消费主义-改"><a href="#消费主义-改" class="headerlink" title="消费主义`改"></a>消费主义`改</h3><p>马尔库塞–单向度的人</p>
<p>单向度的人解读:</p>
<p>​    两个向度:1.对当下生活的肯定, 2. 否定和自我批判</p>
<p>​    只有肯定没有否定–&gt;单向度的人</p>
<h2 id="唯物主义"><a href="#唯物主义" class="headerlink" title="唯物主义"></a>唯物主义</h2><p>物质客观存在的</p>
<p>物质是世界的本源</p>
<p>运动–物质存在的方式</p>
<p>时空–运动存在的方式</p>
<p>静止–运动的特殊状态</p>
<p>运动是绝对的, 静止是相对的</p>
<p>时空既有限也无限, 既绝对又相对</p>
<p>物质是运动的物质, 运动是物质的运动</p>
<p>物质不依赖感觉存在</p>
<p>规律是客观的, 不以人的意志为转移</p>
<p>物质决定意识, 意识是物质的反映</p>
<p>意识对物质有能动作用</p>
<p>唯物辩证法: 客观辩证法+主观辩证法</p>
<p>有形的是物质, 无形的也是物质</p>
<h1 id="西方哲学史"><a href="#西方哲学史" class="headerlink" title="西方哲学史"></a>西方哲学史</h1><h2 id="1-智慧的痛苦–什么是哲学"><a href="#1-智慧的痛苦–什么是哲学" class="headerlink" title="1 智慧的痛苦–什么是哲学"></a>1 智慧的痛苦–什么是哲学</h2><p>哲学—-科学? 哲学 != 科学</p>
<p>哲学—画鬼</p>
<p>哲学—逻辑</p>
<h2 id="2-哲学的诞生"><a href="#2-哲学的诞生" class="headerlink" title="2 哲学的诞生"></a>2 哲学的诞生</h2><h3 id="希腊的历史背景"><a href="#希腊的历史背景" class="headerlink" title="希腊的历史背景"></a>希腊的历史背景</h3><p>希腊哲学: 公元前 6 世纪-公元 6 世纪</p>
<ul>
<li>为何哲学产生于希腊?</li>
</ul>
<p>也是以王宫为中心</p>
<p>传统中断 –&gt; 城邦制</p>
<p>繁荣于雅典</p>
<p>代表人: 苏格拉底, 柏拉图, 亚里士多德</p>
<p>民主 公民: 成年男子自由人</p>
<p>哲学的诞生: 人们开始关注最终关怀的问题, 人们有时间思考这些问题, 必须有思想的自由的条件</p>
<p>自由的政治空间: 语言</p>
<h3 id="哲学的诞生"><a href="#哲学的诞生" class="headerlink" title="哲学的诞生"></a>哲学的诞生</h3><p>哲学脱胎于神话</p>
<p>“命运”</p>
<p>希腊哲学: </p>
<ul>
<li>前苏格拉底哲学(早期希腊自然哲学, 宇宙生成论)</li>
<li>雅典哲学</li>
<li>晚期希腊哲学</li>
</ul>
<h3 id="早期希腊自然哲学"><a href="#早期希腊自然哲学" class="headerlink" title="早期希腊自然哲学"></a>早期希腊自然哲学</h3><p>希腊人四大元素: 水火土气</p>
<p>西方哲学的第一个概念: 本原(始基) arche, 不变的东西</p>
<p>泰勒斯 : 大地浮在水上, 宇宙充满了灵魂</p>
<p>赫拉克里克: 人不能两次踏入同一条河流  “ 一切都在变化”</p>
<p>​    logos 计算, 理性, 推理</p>
<p>早期自然哲学的局限: 缺乏自然科学的支持, 建立在经验观察的基础之上</p>
<p>毕达哥拉斯 数是万物的本源</p>
<p>存在 – being</p>
<p>本体论(存在) 形而上学</p>
<h3 id="本体论的转向"><a href="#本体论的转向" class="headerlink" title="本体论的转向"></a>本体论的转向</h3><p>宇宙大年</p>
<ul>
<li><p>毕达哥拉斯学派</p>
<p>毕达哥拉斯: 宇宙万物的本源是数</p>
<p>和谐, 万物万事数量的比例关系, 抽象普遍</p>
</li>
<li><p>爱丽亚学派</p>
<p>巴门尼德: 思维与存在的同一性</p>
<p>&lt;==&gt;感觉经验变动不居</p>
<p>确定了形而上学的研究对象</p>
<p>确定了思辨哲学的一个基本公式: 思维与存在的同一性</p>
<p>在哲学中开始了推理论证</p>
</li>
<li><p><strong>存在</strong> 西方哲学的核心概念</p>
<blockquote>
<p>语言学的根源: </p>
<p>哲学离不开语言</p>
<p>印欧语系: 系词 A is B</p>
<p>先是, 再是什么  存在 –&gt; being</p>
</blockquote>
<p>形而上学的基础</p>
<blockquote>
<p>形而上学 同义于 本体论, 是研究存在(being)的 (Ontologia)</p>
<p>与辩证法相对的一种思维方式</p>
<p>✨西方哲学的一个核心部门</p>
</blockquote>
</li>
</ul>
<h2 id="3-苏格拉底的问题"><a href="#3-苏格拉底的问题" class="headerlink" title="3 苏格拉底的问题"></a>3 苏格拉底的问题</h2><blockquote>
<p>是什么</p>
</blockquote>
<h3 id="智者学派"><a href="#智者学派" class="headerlink" title="智者学派"></a>智者学派</h3><p><strong>智者</strong> 事物没有对错, 这有论证方式(诡辩)</p>
<p>智者否定了知识的可能行, 认为一切都是意见, 每个人都是万物的尺度</p>
<p>普罗泰戈拉</p>
<ul>
<li>人是万物的尺度</li>
<li>一切理论都有其对立的说法</li>
</ul>
<h3 id="苏格拉底生平"><a href="#苏格拉底生平" class="headerlink" title="苏格拉底生平"></a>苏格拉底生平</h3><p>苏格拉底认为自然万物真正的主宰和原因并不是物质性的本源, 而是他的内在目的</p>
<p>座右铭: 认识你自己</p>
<h3 id="苏格拉底的思想"><a href="#苏格拉底的思想" class="headerlink" title="苏格拉底的思想"></a>苏格拉底的思想</h3><p>哲学的真正对象不是自然, 而是人自身: 德性 –&gt; 一个东西的本质</p>
<p>德性即只是</p>
<p>未经理性审慎的生活是不值得过的生活.</p>
<p>无知即罪恶, 德性即知识</p>
<p>要自觉!</p>
<ul>
<li><p>怎么获得德性的知识</p>
<p>–&gt; “是什么”的问题</p>
</li>
</ul>
<h3 id="苏格拉底的论辩方法和历史影响"><a href="#苏格拉底的论辩方法和历史影响" class="headerlink" title="苏格拉底的论辩方法和历史影响"></a>苏格拉底的论辩方法和历史影响</h3><p>希腊时期辩证法更多的是一种论证方式</p>
<p>苏格拉底则要得出一个真理</p>
<p>知识可教还是不可教?(苏格拉底 no, 人的知识是先天的, 学习就是回忆)</p>
<p>休谟问题(归纳问题)</p>
<h2 id="4-柏拉图的理念论"><a href="#4-柏拉图的理念论" class="headerlink" title="4 柏拉图的理念论"></a>4 柏拉图的理念论</h2><h3 id="柏拉图的生平和思想"><a href="#柏拉图的生平和思想" class="headerlink" title="柏拉图的生平和思想"></a>柏拉图的生平和思想</h3><p>苏格拉底的学生</p>
<p>&lt;&lt;理想国&gt;&gt; 理想中的国家</p>
<p>个人: 理性, 激情, 欲望</p>
<p>国家: 统治者, 保卫者, 生产者</p>
<p>四主德: 智慧勇敢节制正义</p>
<p><strong>哲学王</strong></p>
<h3 id="两个世界"><a href="#两个世界" class="headerlink" title="两个世界"></a>两个世界</h3><ul>
<li><p>早期中期</p>
<p>太阳之喻: 善</p>
<p>线的比喻</p>
<p>洞穴之喻: 哲学家带领人们转向理想的世界</p>
</li>
</ul>
<h3 id="柏拉图学说的影响"><a href="#柏拉图学说的影响" class="headerlink" title="柏拉图学说的影响"></a>柏拉图学说的影响</h3><h1 id="哲学入门课"><a href="#哲学入门课" class="headerlink" title="哲学入门课"></a>哲学入门课</h1><h2 id="一元论-vs二元论"><a href="#一元论-vs二元论" class="headerlink" title="一元论 vs二元论"></a>一元论 vs二元论</h2><ul>
<li><p>一元论: 人只有肉体</p>
<p>无形的东西只是身体的一种 function(smile, mind</p>
<p>死亡: 身体死亡, 无法实行 function</p>
</li>
<li><p>二元论: 人有肉体和灵魂</p>
<p>死亡是否应该是两者的同时死亡?</p>
</li>
</ul>
]]></content>
      <categories>
        <category>others</category>
      </categories>
      <tags>
        <tag>society</tag>
      </tags>
  </entry>
  <entry>
    <title>x 宗罪</title>
    <url>/2020/03/31/x%E5%AE%97%E7%BD%AA/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="dfed85b0d46733cabfee27a2abe0d634fa1f9beb44148d66d857760db556a1a8">3a5a033e128904461ecff31443a75b85773732e839f348154716694284a812f5cb8d494e3bfcf506f2cdce411c61a475b8e1a240b945f99ff512e9136f2cbd7f8621ecd3d508a376a5eebe2822557b97839c67aad7640a7afe8966bea2fee991b744908e44c543c485c8f5671a52bfbbc31c14921ca12eb613b7a354aec34c27708311c014feb95414f955c32cd7bbe36412cee67ccc76ec4453c7a116b8257d6e789664f25b7d67b3d59271831c1022ffae09ab10fa65136ceeac94232181c2b2452fa9f8cbf1c778f762a420ba1eea30b6e6d1b5d78bb5f99741b107902c2e02bba7d7fe2f4bdbaed7a2db5ef1d8f413c0a419059f82d9b2463bdf09a5b0ac21229f7a2dc6a676615925e1b08f4e0b946b9a06a2417121f476e0f5e9306f4dd030378492e9ef9af27fbe7c28be8fd7a74d9b86a0e11d4624bb2f0de9275a369f402fb33ea87648dd9b74b0337dda0cd317c472a1db2341e130da442158d834e2e9d6ce9801b523c964689b4167d0d0203420d9fdc6faacd80c551774aa80a959d62d24073208a39f6b8f8843a600a5cf3300da4b32b9dad195be1ec7b057b191585ae8ad49936e2d9294bc257b1583b8f805a6ef0071aaec00a4ff1da2df4f22b79c8af210fab335a695eba6f085c5648722cafb3c01ece727c9b99b51c9132403a17b281aa7e1ec141451a0af4578507eef4acc54c52540d64c1e2a45ae0da585bd4d953ca118692e872e2144c183473d9baeeacc8d2a2717eea1d41439fe700958e6f6132a7c9ffb0217b7cb2defcc292e4e94472181b7ab1577b310faefedbaa96a1266dac4fdecb83beefec85914d1c6ee0751b872e9c4d526648091d55d27783fbd675f0a9c6c8efbf19c0e5c506ceeacf444079dd7dffe1f5d5f76cc185ba60b6aa0334b11785649f0658e1181599cfb8585ed1c09c4eaedf607695cb50cf53b949123f9e24cf2e885f56e7ad43fc443979be786b1c9b3c781ca059c070506b48aa49c0abfc084ebbb1dbc9bc759f4b59b00d41510ad878a2be799271fc28f54ab0bcdea3f8c1e239b7a3bdea14e4030e174391fde529c09e5fa92686d7486874c01ed158c32ecbf66b83736c72686e34c6ac8018added1dc0bfc628200014027fc50844f2a0543aa6b6e57ed73f4d6d47dc2acba23ac12b04f40321311442c8837799648b5ed28c6fa011ed7674f9c2144e9738f60a79e3c3823000fe7eb73fbdb7b89a9d12db89296ba92e2432e0799680be4aa63be27e1eb873adec83d3c7e0bf124cf5f8384d910520a5f4a244354f216f70ccefbe30370e3a0fba4d7ff848c2be35fcf1ba26638328223a7a0101898cb1eafb402ea3dd40a3eb2f98eb3691d71e7537ad87c3d79342ce2d5b32188c28002a8b38c22853e0d35314e0f250ecf8f35ec25713845d31b15c531d4cfe373469166c0c7ee86313b71aea3458bc5b7627250237f45b650d57d1da91b103a4b58c9ebdb40822d2189fe0775c694cb969f66902f0a31d26572a2291dabccf2a7d6bc6c46946a680925d9d98e44b419ac33d771dabc12e21624aa584e587fc64b9b8aef242183e151679bcb9832c34205ab46872a603ba0d1ec0f001edeaa55593e1c27eafc9dbc106c1e62cad1128ff107d4830e30b38bdbbecc3d64e51090f6edece62d07b8c671c5e4e0cad33ecb8110eb2d95358c204e06fcc8dd11e80bb1a966fc3768755ab3480b83f58d78e7e58d3511eca93f035a9550fce5236a72c81bc19a6b2b5dcb64bd3af1ced895d135e4c836f0ebb4db9a84ce99e77519961dd95c5c4be1792a46dc544aab24e62957ccfc7f5a87a5f1748b24b0d9bac4b4701cdff426d6ccadde8f1288821774ec1d050ee0be327f71066fe5ce95eef14774733deb4f133019457884bc02ec4b7ad06e04286060fa2034097c624a1b0c59ddbbf0620a439c548094104975604da9f07bbd56f7ee997ee851176c451022526e7908429134da75d87de95bdc5461f9ddadb8facc1b66e7eb043068c923cede5818ac9ea45ae76f54a2638529601bc297915a0e5b5041c1b416826b06bf135bcff56ffcf2937d185286e27ca617ec9f938d0b25af05792b2bd33d04a615082e99584da50f9c702c1018724cb682bda3acab456727f90e4bb27cb3bc900e682feff19959e71b408a2d513326d54d3d03dfa1bc38b9d53ed666f68f4ab81941ecf68a8f5d061e463777d13be7a7d265609abdbbb197fc2f8bbd2bbf87a1ace8f32510af4fd4164ab8bed36817b081ca8761bea44a1489e4d2a2054b2651e71ef9a0b803bc961408e9e30b6cedc0bc4062040142504bd52a636792193e0b65a0c924ed74e4898bb8b2b44b1522918d5551887eb24815ac4ccae8cedf77337bfaee03e176787dbad0814a337828ba66c470dd4e2f5d75d6c51167c25a01a8907cd18440f5d36592c9bf4909dc236e1d7a06795e77379500b42a84ac539a748f1f5f969c3462fb6060311b06f1a574f91b5e1ad6e0a0ac780a09ab33f3a5cb342ed27e7a1b0cd8bc7463bf3fc0fd6994caa0525b59acca5ccea5b672ce8cb54394df336c87714ee44a14de5d0e246418355b8c405f8fbe6e99de23c2d0b6dabac0e36322c2b99b7bf74567b6f3aa6e31978fe156e02e93dcac70941e8af6ade35ed6c01ff3e9099299edc1c2b59203bb139beb55d16ed7c5cd58f337de31f7fc0ee91bc0cad4ace124006834242bf7d1afdbb320a5ca15c4df0a92feadf17f30398edb93c6332adf668a7d37335f6e2e005fd7fc954b18410334937143b3fd720961b3b6d48a0a98d2e2ca3237eb6448e5b8d437d3317bf3c96b8bf72c2a4198bef705038e884ce4cc8340f74d219ea5760f2481b660e57ab634570ce7b66d016cda17c12889723a8dd9e2e3682179b2b77462c1ec6568db2d800fab6b26380d67ab29e0338c961119398b80fa780e6d547ca9b22eab8ea1c2d358cad62d97a9a236bc92c6feade7679f26652ce448115a691db959daf815dfccc8d585e04130ae97c68375e9dd121a89d0f6802af5faf98e97402a4f3c3ed9dcecfdca8bf172c2e1ac1f2852c05d63730bac7c21ad8e901f090649d2a0075f738464d86ce569dcfde28ad3199c6107232b213164b4dc1099da37345b1a9bf18a877797e364b677847bb952d0001204a644ae94be0eb06736b6713e65c87777c2ded5b07dfd2a4c708e65de35acf9f5c1c1dc2f7fcf6e7dba9a24132e7945cde52ecda091c890bdb9e99f6f42fffd54fdeb412a1b2e95422684202f679c39cd3890a5db86d120d424fa5bbd4e2c3dc0074919b8c60c2e058efda552239e2c1722378780fe3508721d0f4f4d75a5fd745a93d45cfeac7d793567a583505fa00cda3e910e7a5f56f9afb8dc39469fce4aa62a9cd4c76bb4009e16dc23ad056edcbd9937c9c6962ab2dcfad03de2d6658751054dfd89ac2befb46b6eca4a7c9d2e73a7e2d39b168324c91c52ac4f7d1bdbc71556d021f695c17831eb0893f153dc8fc24f6fb2643e785fb0d89d631ac3bc7e3fe39125f88d1a8694114014a02b97a2dd093e9269ec7fea3077404c484543b1478ef11936b3416755811cc1e10c8267bd2decc96566a2e1de79f580383b397ec8c42d69e4b49e953426b707a61ac0ad7cb1393498094fcf2a43adcb23efefc47f596d09f09dcaa8ba78f2c0e7663884072279974c80cbf5b58792019aca62ba266c3dd9e3657906416f71730a63eec4e5162e7f17784b7bf1610a962de893d9d31103d8ffee9479aac4670e371a22ba84878f0dd930bf070f84768bebcd56c5f31c0c8f1f08480fe0a6b3081841963920d0ce1f29de7423ae3102e15346727bd6a22d044497bcd833126e31de64843b1fe824d17cc509cb753e7e64b28028468cfca2818c7845d9f6546533730e358eec50219032db0ba9558d151eb47dd57aeab8283fef111483920007ea6eb95a51173f349cbe7dc2d1eeda4ed8296e1c0c6f648defeb86b9e947b51b76317d62dd7a8531b79b2b67319c93e6222c84e076b0e60692fa42ab182d13564b3ce0e043fb033e82a18eae882e78c9555d34579b9dc748a1b637c88c6d4217cd3e4a8559da851f459cf11dafb81b97497e58ffde1e88862bce079fec185e12cb9eb714aba1df1457c6b35eab2639ac3cdfd1328f48699bc7b8bf829871605965b8076ca090b77aec2bdb4054ea087dfdb9c37e3e30681f422e6d769d28cb0fce8c9e0e057c2e819e98201e37845ffa9cfef21c8d7a0fe5ffdbd555e21e2da6b94244d59b46c550c9e2bafb7c41c43ca34c0028de426f9053b6ead13f1546af20812f429a52523882d44bedad729d4172841ebfc986d6479f434c6e24f4e374916eee753a6c1bb519ae7a0f594d0640fd7ef5b30798df609b95fe603c485c538a44e276405ec7d0f1ed78c104db93d1c2221ff9923dd13291eba29768112b22fbb6d0e960a345312c245a9e4b675a9c9d86e71d1ea492c82b1765204841f6ee31cf05011c1408e48770daba7af5178d35e57de02c67f40fb0cb238f02bad730871cb3afda0fd840bb5bc3aeebb6366d171c2c1ab6a7f280ebe86bef23163437ff9433e600583e7b79bf167069170836c80973d1ce0b9b998d455e64556d534321c9b63eb4c4bddc5ba4d8d1d0f625c116c170d8d0b50137c35b20b41023e0a4d292b9ef249ac4d4f32dcceb3a8a9be721a517a6553685522ccebeebc9a3a9435cd6442ae67ca587446f30ac74bb8ea2b97f1ed5766b417e20621b524ac88a70729c4c5aa915db52dc7700410c17b761984187eeb780f786e95bc88e3a01e5c84dbd74e15dd39a04eca59caef11fd1438e4d9b87a321bb51600cb67fef6fc837a5f8be0e2dc740392c7c43f4b9be947bd7f7849b099edf76228baee0ba345b93b837fdd20285cdd30a97ce735e4848fc2e79f0d842d9e34e9b61caaff04f98adceae0a921be9cb4e59ad137df6b673b838e45bf2a71207b33e6ad30e18f1e1e730c2c96cbf5e5f45183725b7bd333023b0ae654e4aae2e7867c2311a70d28535ee040723cf1c43c3f136de2b87f85c24ccdc15809bfde985f8940020da4d823a4bfade2487bf96c047586b595bf7320575feb2d6ad0b726575d467ce615ac7302bab7c205d9e0acd48845bad1427f93c4dc5c9f128fac7db8a54dee78354293f92e210d3d5b2b8930f42fe2d855bfed4480a3bdd0664884b10362ffc743af1e6f7cd224ab748cb0b809b40243f2ac9bee61e1b9245661db8aeae9652340f203d6ae486b3910b812ecaca87331ccf6421dcf64658223bec3abc8a4f17f010b314c1b280d9f72b62b6b1b0589c14156f232dd9f5b757fad9da87fa69e016ff7c882315be1ac11831b4adf666a98342df13f86cb681e74589fbebf4906e8415eec689c976a73da3fca2719261f36850378280a3db77d271b71541436218693ec00c50b96243bff486f1f8056d25f639a268d4a04035c088c191a6085f1bc47652dc36d5aa3782b78b07a4b102098f2b7ae00c36bdbb8fa2d170ad4849937b0ee76c5b60281d2c8aa44b55a63d5e95f0e39bdeb1bf495f962c6244f98bc53753354061d27445470a14e1d6ee4f3c7be3f63ca1f99093a5336a4346cea3c34e22eb41f8e2f522a912744ceb36d66bfb73e233ef02cca5eb0f0a201a0ce411a41415bc4d6873b50ecf403f3d15715efb8b1e46de96e59138c96d82e42f9193833ed209c095cccb0acc6b7ea7cbb178a557e96329a033c18fe791f8bae2fc851639cca237051ec2982062e90</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>others</category>
      </categories>
      <tags>
        <tag>dairy</tag>
      </tags>
  </entry>
  <entry>
    <title>code_format_py</title>
    <url>/2019/11/10/%E4%BB%A3kan%E7%A0%81bu%E8%A7%84dong%E8%8C%83_python/</url>
    <content><![CDATA[<h1 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h1><p><a href="https://www.iteye.com/blog/greybeard-1355216">参考网站</a></p>
<p>顶级定义之间空两行, 比如函数或者类定义. 方法定义, 类定义与第一个方法之间, 都应该空一行. 函数或方法中, 某些地方要是你觉得合适, 就空一行.</p>
<span id="more"></span>

<ol>
<li><p>空格</p>
<ol>
<li><p>括号内不要有空格.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Yes: spam(ham[1], &#123;eggs: 2&#125;, [])</span><br></pre></td></tr></table></figure></li>
<li><p>不要在逗号, 分号, 冒号前面加空格, 但应该在它们后面加(除了在行尾).</p>
</li>
<li><p>参数列表, 索引或切片的左括号前不应加空格.</p>
</li>
<li><p>在二元操作符两边都加上一个空格</p>
</li>
<li><p>当’=’用于指示关键字参数或默认参数值时, 不要在其两侧使用空格.</p>
</li>
<li></li>
</ol>
</li>
<li><p>函数文档实例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def fetch_bigtable_rows(big_table, keys, other_silly_variable&#x3D;None):</span><br><span class="line">    &quot;&quot;&quot;Fetches rows from a Bigtable.</span><br><span class="line"></span><br><span class="line">    Retrieves rows pertaining to the given keys from the Table instance</span><br><span class="line">    represented by big_table.  Silly things may happen if</span><br><span class="line">    other_silly_variable is not None.</span><br><span class="line"></span><br><span class="line">    Args:</span><br><span class="line">        big_table: An open Bigtable Table instance.</span><br><span class="line">        keys: A sequence of strings representing the key of each table row</span><br><span class="line">            to fetch.</span><br><span class="line">        other_silly_variable: Another optional variable, that has a much</span><br><span class="line">            longer name than the other args, and which does nothing.</span><br><span class="line"></span><br><span class="line">    Returns:</span><br><span class="line">        A dict mapping keys to the corresponding table row data</span><br><span class="line">        fetched. Each row is represented as a tuple of strings. For</span><br><span class="line">        example:</span><br><span class="line"></span><br><span class="line">        &#123;&#39;Serak&#39;: (&#39;Rigel VII&#39;, &#39;Preparer&#39;),</span><br><span class="line">         &#39;Zim&#39;: (&#39;Irk&#39;, &#39;Invader&#39;),</span><br><span class="line">         &#39;Lrrr&#39;: (&#39;Omicron Persei 8&#39;, &#39;Emperor&#39;)&#125;</span><br><span class="line"></span><br><span class="line">        If a key from the keys argument is missing from the dictionary,</span><br><span class="line">        then that row was not found in the table.</span><br><span class="line"></span><br><span class="line">    Raises:</span><br><span class="line">        IOError: An error occurred accessing the bigtable.Table object.</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure></li>
<li><p><em><strong>命名规范</strong></em></p>
<p>module_name, package_name, ClassName, method_name, ExceptionName, function_name, GLOBAL_VAR_NAME, instance_var_name, function_parameter_name, local_var_name.</p>
</li>
<li><p>函数传入的参数 _para_name</p>
</li>
</ol>
]]></content>
      <categories>
        <category>language</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>language</tag>
      </tags>
  </entry>
  <entry>
    <title>信号与线性系统</title>
    <url>/2020/09/04/%E4%BF%A1%E5%8F%B7%E4%B8%8E%E7%BA%BF%E6%80%A7%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<blockquote>
<p>简介</p>
</blockquote>
<span id="more"></span>

<h1 id="信号与线性系统"><a href="#信号与线性系统" class="headerlink" title="信号与线性系统"></a>信号与线性系统</h1><h2 id="第一章-信号系统基础"><a href="#第一章-信号系统基础" class="headerlink" title="第一章 信号系统基础"></a>第一章 信号系统基础</h2><p>信号分类, 简单处理</p>
<p>奇异信号</p>
<p>R(t), u(t), G(t), δ(t), <strong>冲激信号</strong>, </p>
<p>系统概念分类</p>
<p>线性时不变系统</p>
<h2 id="第二章-LTI-系统的时域分析方法"><a href="#第二章-LTI-系统的时域分析方法" class="headerlink" title="第二章 LTI 系统的时域分析方法"></a>第二章 LTI 系统的时域分析方法</h2><p>系统微分方程的建立求解</p>
<p>LTI 系统全响应的经典解法</p>
<p>系统零输入响应的求解</p>
<p>连续时间系统的单位冲激响应</p>
<p>卷积积分</p>
<h2 id="第三章-连续信号正交分解-CTFS"><a href="#第三章-连续信号正交分解-CTFS" class="headerlink" title="第三章 连续信号正交分解 CTFS"></a>第三章 连续信号正交分解 CTFS</h2><p>周期信号</p>
<p>傅里叶级数</p>
<p>周期信号的频谱</p>
<p>非周期信号的 CTFS</p>
<p>矩形脉冲信号的频谱分析</p>
<h2 id="第四章-连续时间系统的频域分析"><a href="#第四章-连续时间系统的频域分析" class="headerlink" title="第四章 连续时间系统的频域分析"></a>第四章 连续时间系统的频域分析</h2><p>信号通过系统的频域分析</p>
<p>理想低通滤波器的冲激响应与阶跃响应</p>
<p>系统无失真传输和有失真线性畸变</p>
<h2 id="第五章-连续时间系统的复频域分析"><a href="#第五章-连续时间系统的复频域分析" class="headerlink" title="第五章 连续时间系统的复频域分析"></a>第五章 连续时间系统的复频域分析</h2><p>拉普拉斯变换</p>
<h2 id="第六章-连续时间系统的系统函数"><a href="#第六章-连续时间系统的系统函数" class="headerlink" title="第六章 连续时间系统的系统函数"></a>第六章 连续时间系统的系统函数</h2><p>系统函数的定义, 极点零点分布</p>
<p>系统稳定性</p>
<p>系统函数-&gt;系统频响特性</p>
<p>字体的框图研究</p>
<h2 id="第七章"><a href="#第七章" class="headerlink" title="第七章"></a>第七章</h2><p>离散时间信号</p>
<p>抽样定理</p>
<p>离散线性移不变系统</p>
<p>离散时间系统的响应, 全响应, 卷积和法</p>
<h2 id="第八章-z-变换和性质"><a href="#第八章-z-变换和性质" class="headerlink" title="第八章 z 变换和性质"></a>第八章 z 变换和性质</h2><p>z 变换</p>
<p>z 变换求解差分方程, 分析系统响应</p>
<p>系统函数与系统稳定性分析</p>
<p>DTFT 离散时间傅里叶变换</p>
<p>离散时间系统的频率响应</p>
<p>离散系统的模拟</p>
<p>​    非递归式数字滤波器</p>
<p>​    递归式数字滤波器</p>
]]></content>
      <categories>
        <category>cs</category>
      </categories>
      <tags>
        <tag>signal</tag>
      </tags>
  </entry>
  <entry>
    <title>党章要点</title>
    <url>/2020/10/23/%E5%85%9A%E7%AB%A0%E8%A6%81%E7%82%B9/</url>
    <content><![CDATA[<blockquote>
<p>党章</p>
</blockquote>
<span id="more"></span>

<h1 id="党章"><a href="#党章" class="headerlink" title="党章"></a>党章</h1><p>中国共产党的性质</p>
<ul>
<li>先锋队, 先锋队, 领导核心, 发展要求, 文化, 根本利益</li>
</ul>
<p>党的行动指南</p>
<ul>
<li>马克思-&gt;习近平新时代中国特色社会主义思想</li>
</ul>
<p>各个思想的地位</p>
<p>四个中国特色社会主义, 四个自信</p>
<ul>
<li>道路, 理论体系, 制度, 文化</li>
</ul>
<p>三大历史任务</p>
<ul>
<li>推进现代化建设, 完成祖国统一, 维护世界和平与促进共同发展</li>
</ul>
<p>两个一百年奋斗目标</p>
<ul>
<li>建党一百年:全面建成小康社会, 新中国成立一百年: 全面建成社会主义现代化强国</li>
</ul>
<p>我国社会的主要矛盾</p>
<ul>
<li>人民日益增长的美好生活需要和不平衡不充分的发展之间的矛盾</li>
</ul>
<p>社会主义建设的根本任务</p>
<ul>
<li>生产力</li>
</ul>
<p>第一要务</p>
<ul>
<li>发展, 发展思想, 发展理念</li>
</ul>
<p>总的出发点和检验标准</p>
<ul>
<li>生产力, 综合国力, 人民生活水平</li>
</ul>
<p>四个尊重</p>
<ul>
<li>劳动, 知识, 人才, 创造</li>
</ul>
<p>三个发展与人民</p>
<p>五位一体</p>
<ul>
<li>统筹推进 经济建设, 政治建设, 文化建设, 社会建设, 生态文明建设</li>
</ul>
<p>四个全面</p>
<ul>
<li>协调 全面建成小康社会, 全面深化改革, 全面依法治国, 全面建成社会主义现代化强国</li>
</ul>
<p>社会主义初级阶段的基本路线</p>
<ul>
<li>人民, 经济建设, 四项基本原则, 改革开放</li>
</ul>
<p>经济建设为中心</p>
<ul>
<li>科教兴国, 人才强国, 创新驱动发展, 乡村振兴, 区域协调发展, 军民融合发展</li>
</ul>
<p>四项基本原则</p>
<ul>
<li>坚持社会主义道路, 坚持人民民主专政, 坚持中国共产党的领导, 坚持马克思列宁主义毛泽东思想</li>
</ul>
<p>党的建设实现以下五项基本要求</p>
<ul>
<li>坚持党的基本路线, 坚持解放思想实事求是与时俱进求真务实, 坚持全心全意为人民服务, 坚持民主集中制, 坚持从严管党治党</li>
</ul>
<p>中国共产党的领导是中国特色社会主义最本质的特征, 是中国特色社会主义的最大优势</p>
<p>中国共产党党员是中国工人阶级的有共产主义觉悟的先锋战士</p>
<p>党员的义务</p>
<ol>
<li>认真学习马毛邓三科习, 学习当的路线方针政策和决议, 学习党的基本知识, 学习科学文化法律和业务知识, 努力提高为人民服务的本领</li>
<li>贯彻执行党的基本路线和各项方针政策, 带头参加改革开放和社会主义现代化建设, 带动群众为经济发展和社会进步艰苦奋斗, 在生产工作学习社会生活中期先锋模范作用</li>
<li>坚持党和人民的利益高于一切, 个人利益服从党和人民的利益, 吃苦在前享受在后, 克己奉公多做贡献</li>
<li>自觉遵守党的纪律, 首先是党的政治纪律和政治规矩, 模范遵守国家的法律法规, 严格保守党和国家的秘密, 执行党的决定, 服从组织安排, 积极完成党的任务</li>
<li>维护党的团结和统一, 对党忠诚老实, 言行一致, 坚决反对一切派别组织和小集团活动, 反对阳奉阴违的两面派行为和一切阴谋诡计</li>
<li>切实开展批评和自我批评, 用于揭露和纠正违反党的原则的言行和工作中的缺点错误, 坚决同消极腐败现象作斗争</li>
<li>密切联系群众, 向群众宣传当的主张, 遇事同群众商量, 及时向党反应群众的意见和要求, 维护群众的正当利益</li>
<li>发扬社会主义新风尚, 带头实践社会主义核心价值观和社会主义荣辱观, 提倡共产主义道德, 弘扬中华民族传统美德, 为了保护国家和人民的利益, 在一切困难和危险的时刻挺身而出, 英勇斗争, 不怕牺牲</li>
</ol>
<p>党员的权利</p>
<ol>
<li>参加党的有关会议, 阅读党的有关文件, 接受党的教育和培训</li>
<li>在党的会议和党报党刊上参与关于党的政策问题的讨论</li>
<li>对党的工作提出建议和倡议</li>
<li>在党的会议上有根据的批评党的任何组织和任何党员, 向党负责的揭发检举党的任何组织和任何党员违法乱纪的试试, 要求出分违法乱纪的党员, 要求罢免或撤换不称职的干部</li>
<li>行使表决权选举权被选举权</li>
<li>在党组织讨论对党员的党纪处分或作出鉴定时, 本人有权参加和进行申辩, 并且可以把自己的意见向党的上级组织直至中央提出</li>
<li>对党的决议和政策如有不同意见, 在坚决执行的前提下, 可以声明保留, 并且可以把自己的意见向党的上级组织直至中央提出</li>
<li>向党的上级组织直至中央提出请求申诉和恐高, 并且要求有关组织给予负责的答复</li>
</ol>
<p>申请入党的人, 要填写入党志愿书, 要有两名正式党员作为介绍人, 要经过支部大会通过和上级党组织批准, 并且经过预备期的考察, 才能成为正式党员.</p>
<p>入党誓词</p>
<ul>
<li>我志愿加入中国共产党, 拥护党的纲领, 遵守党的章程, 旅行党员义务, 执行党的决定, 严守党的纪律, 保守党的秘密, 对党忠诚, 积极工作, 为共产主义奋斗终身, 随时准备为党和人民牺牲一切, 永不叛党. </li>
</ul>
<p>党的最高领导机关</p>
<ul>
<li>党的全国代表大会和它所产生的中央委员会</li>
</ul>
<p>党的地方各级领导机关</p>
<ul>
<li>党的地方各级代表大会和它们所产生的委员会</li>
</ul>
<p>党的全国代表大会的职权是</p>
<ul>
<li>听取和审查中央委员会的报告</li>
<li>审查中央纪律检查委员会的报告</li>
<li>讨论并决定党的重大问题</li>
<li>修改党的章程</li>
<li>选举中央委员会</li>
<li>选举中央纪律检查委员会</li>
</ul>
<p>中国共产主义青年团是中国共产党领导的先进青年的群团组织, 是党的助手和后备军</p>
<p>中国共产党党徽为镰刀和锤头</p>
<p>中国共产党党旗为旗面赘疣金黄色党徽团的红旗</p>
]]></content>
      <categories>
        <category>others</category>
      </categories>
      <tags>
        <tag>CPC</tag>
      </tags>
  </entry>
  <entry>
    <title>回调函数</title>
    <url>/2020/04/27/%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<blockquote>
<p>关于回调函数的一篇文章(内容不会特别多)</p>
</blockquote>
<span id="more"></span>

<h2 id="云代码-回调函数"><a href="#云代码-回调函数" class="headerlink" title="云代码-回调函数"></a>云代码-回调函数</h2><p><a href="https://www.zhihu.com/question/19801131">https://www.zhihu.com/question/19801131</a></p>
<h3 id="什么是回调函数"><a href="#什么是回调函数" class="headerlink" title="什么是回调函数"></a>什么是回调函数</h3><p>编程</p>
<ul>
<li>系统编程-&gt;库-&gt;留下API application programming interface</li>
<li>应用编程–利用库–&gt;写应用</li>
</ul>
<p>正常情况: 应用编程直接调用 API 调用库里的函数</p>
<p>非正常情况(用到回调函数): 库函数(library function)要求应用传给库函数一个函数A, 库函数会在合适的时候调用函数 A, 这个函数 A 就是<strong>回调函数</strong>. </p>
<p>例子: 旅馆叫醒客人</p>
<ul>
<li>叫醒服务由旅馆提供-&gt;api 由库函数提供</li>
<li>客人需要叫醒服务-&gt;应用需要调用api</li>
<li>客人决定叫醒的方式(电话, 冰桶挑战, 美少女服务)-&gt;应用传入(登记 register)回调函数</li>
</ul>
<p>总结: 回调就成了一个高层调用底层，底层再 <strong>回</strong> 过头来 <strong>调</strong> 用高层的过程。</p>
<h3 id="回调函数的分类"><a href="#回调函数的分类" class="headerlink" title="回调函数的分类"></a>回调函数的分类</h3><p>在讨论回调函数的时候, 涉及到三个部分: 主函数, 回调函数, 库函数. </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">A</span>() &#123;</span><br><span class="line">  <span class="comment">// output P</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">B</span>(fn) &#123;</span><br><span class="line">  <span class="built_in">fn</span>();  <span class="comment">// B knows only fn, not A</span></span><br><span class="line">         <span class="comment">// B treats fn as a variable</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">B</span>(A);  <span class="comment">// B called at T</span></span><br><span class="line">       <span class="comment">// B calling fn() (i.e. calling A())</span></span><br></pre></td></tr></table></figure>

<h4 id="阻塞式回调"><a href="#阻塞式回调" class="headerlink" title="阻塞式回调"></a>阻塞式回调</h4><p>阻塞式回调里，回调函数的调用一定发生在主函数返回之前</p>
<p>下面的代码展示了如何给一个数组从小到大排序的代码。代码调用了函数 <code>qsort</code> 进行排序，并通过指定 <code>compare</code> 为参数，实现元素大小的比较。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compare</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> * a, <span class="keyword">const</span> <span class="keyword">void</span> * b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (*(<span class="keyword">int</span>*) a - *(<span class="keyword">int</span>*) b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> values[] = &#123; <span class="number">20</span>, <span class="number">10</span>, <span class="number">50</span>, <span class="number">30</span>, <span class="number">60</span>, <span class="number">40</span> &#125;;</span><br><span class="line">qsort (values, <span class="keyword">sizeof</span> (values) / <span class="keyword">sizeof</span> (<span class="keyword">int</span>), <span class="keyword">sizeof</span>(<span class="keyword">int</span>), compare);</span><br></pre></td></tr></table></figure>

<p>代码对应了描述的五个要素：</p>
<ul>
<li><code>compare</code> 相当于是 函数 <code>A</code></li>
<li><code>qsort</code> 相当于是 函数 <code>B</code></li>
<li>对于 <code>qsort</code> 来说，<code>qsort</code> 的第四个参数 相当于是 参数 <code>fn</code></li>
<li>对于 <code>qsort</code> 来说，排序过程中，<strong>比较两个元素大小的时刻</strong> 相当于是 调用时刻 T</li>
<li><strong><code>compare</code> 返回两个元素比较大小的结果</strong> 相当于是 回调结果 <code>P</code></li>
</ul>
<p>由于调用 <code>compare</code> 的时刻 <code>T</code> 均是在 调用 <code>qsort</code> 结束之前（<code>qsort</code> 未返回），所以这样的回调被称为 <strong>同步回调</strong>。</p>
<h4 id="延迟式回调"><a href="#延迟式回调" class="headerlink" title="延迟式回调"></a>延迟式回调</h4><p>延迟式回调里，回调函数的调用有可能是在主函数返回之后</p>
<p>下面的代码展示了如何在 Linux 下，阻止用户使用 <code>Ctrl C</code> 退出程序，并打印 <code>Press ^C</code> 提示。代码调用了函数 <code>signal</code> 进行回调函数的 <strong>注册</strong>（和同步回调不同，这里仅是注册）。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">block_interrupt</span> <span class="params">(<span class="keyword">int</span> code)</span> </span>&#123; <span class="built_in">printf</span>(<span class="string">&quot;\rPress ^C\n&quot;</span>); &#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">signal (SIGINT, block_interrupt);</span><br></pre></td></tr></table></figure>

<p>代码对应了描述的五个要素：</p>
<ul>
<li><code>block_interrupt</code> 相当于是 函数 <code>A</code></li>
<li>Linux 终端（<code>Ctrl C</code> 信号的发送者） 相当于是 <del>函数</del> <code>B</code></li>
<li>调用 <code>signal</code> 函数注册 <code>SIGINT</code> 事件时的参数 相当于是 <del>参数</del> <code>fn</code></li>
<li>对于 Linux 终端来说，<strong>用户按下 <code>Ctrl C</code> 的时刻</strong> 相当于是 调用时刻 <code>T</code></li>
<li><strong><code>block_interrupt</code> 打印 <code>Press ^C</code> 提示</strong> 相当于是 回调结果 <code>P</code></li>
</ul>
<p>由于调用 <code>block_interrupt</code> 的时刻 <code>T</code> 是 <strong>用户按下 <code>Ctrl C</code> 的时刻</strong>，均是在 调用 <code>signal</code> 结束之后（<code>signal</code> 已返回），所以这样的回调被称为 <strong>异步回调</strong>。</p>
<h4 id="区分"><a href="#区分" class="headerlink" title="区分"></a>区分</h4><ul>
<li>同步方式 通过 <strong>参数传递</strong> 的方法（例如 <code>qsort</code>）传递回调函数；调用者 <strong>直接使用回调函数</strong>，从而完成回调（调用时刻在函数返回前）</li>
<li>异步方式 通过 <strong>注册</strong> 的方式（例如 <code>signal</code>）告知未来的调用者，并 <strong>存储回调函数</strong>；调用者在未来某个调用时刻 <code>T</code>，取出并调用回调函数，从而完成回调</li>
</ul>
<h3 id="回调函数在-c-中的使用"><a href="#回调函数在-c-中的使用" class="headerlink" title="回调函数在 c++ 中的使用"></a>回调函数在 c++ 中的使用</h3><p>不管怎么说，回调函数是继续自C语言的，因而，在C++中，应只在与C代码建立接口，或与已有的回调接口打交道时，才使用回调函数。<strong>除了上述情况，在C++中应使用虚拟方法或函数符（functor），而不是回调函数。</strong>????</p>
<h4 id="c-中的回调函数"><a href="#c-中的回调函数" class="headerlink" title="c++ 中的回调函数"></a>c++ 中的回调函数</h4><p><a href="https://blog.csdn.net/clirus/article/details/50350519">https://blog.csdn.net/clirus/article/details/50350519</a></p>
<p><strong><a href="https://zhuanlan.zhihu.com/p/88434924">https://zhuanlan.zhihu.com/p/88434924</a></strong> <strong>里面的链接也有参考</strong></p>
<p>存在问题: 如果要以类里的函数作为回调函数, 需要指定一个实例( fooClass::fooFun() ), (但是如果调用类的静态函数就不需要类实例)</p>
<h4 id="虚拟方法-虚函数"><a href="#虚拟方法-虚函数" class="headerlink" title="虚拟方法(虚函数)"></a>虚拟方法(虚函数)</h4><p><a href="http://blog.csdn.net/hackbuteer1/article/details/7558868">http://blog.csdn.net/hackbuteer1/article/details/7558868</a></p>
<p>核心理念就是通过基类访问派生类定义的函数。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;A::foo() is called&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span><span class="keyword">public</span> A</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;B::foo() is called&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    A *a = <span class="keyword">new</span> <span class="built_in">B</span>();</span><br><span class="line">    a-&gt;<span class="built_in">foo</span>();   <span class="comment">// 在这里，a虽然是指向A的指针，但是被调用的函数(foo)却是B的!</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一个类函数的调用并不是在编译时刻被确定的，而是在运行时刻被确定的。由于编写代码的时候并不能确定被调用的是基类的函数还是哪个派生类的函数，所以被成为“虚”函数。</p>
<h5 id="纯虚函数"><a href="#纯虚函数" class="headerlink" title="纯虚函数"></a>纯虚函数</h5><p>纯虚函数是在基类中声明的虚函数，它在基类中没有定义，但要求任何派生类都 <strong>必须</strong> 要定义自己的实现方法。在基类中实现纯虚函数的方法是在函数原型后加“=0”</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">funtion1</span><span class="params">()</span></span>=<span class="number">0</span></span><br></pre></td></tr></table></figure>

<h5 id="区分虚函数-纯虚函数-接口-cpp抽象类"><a href="#区分虚函数-纯虚函数-接口-cpp抽象类" class="headerlink" title="区分虚函数, 纯虚函数, 接口(cpp抽象类)"></a>区分虚函数, 纯虚函数, 接口(cpp抽象类)</h5><p><a href="https://blog.csdn.net/huangyimo/article/details/50480313">https://blog.csdn.net/huangyimo/article/details/50480313</a></p>
<p>通过虚函数，在调用不同的衍生类的时候，可以拥有不同的功能。同时，我们可以通过将每个继承类都重写命名一个函数来替代也可以，这么做完全可以，只要你自己能熟记或者找到这个重命名函数是干嘛用的；但是在大一点的项目中，由于类中的函数成百上千，恐怕你就会为此疯狂。</p>
<h4 id="函数符"><a href="#函数符" class="headerlink" title="函数符"></a>函数符</h4><p><a href="https://blog.csdn.net/u012507022/article/details/51942423">https://blog.csdn.net/u012507022/article/details/51942423</a></p>
<p><a href="https://www.cnblogs.com/Braveliu/p/12637130.html">https://www.cnblogs.com/Braveliu/p/12637130.html</a></p>
<p>函数对象也叫函数符，函数符是可以以函数方式与()结合使用的任意对象。这包括函数名、指向函数的指针和重载了()运算符的类对象。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//函数名</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (a + b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数指针</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span><span class="params">(*funcPtr)</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br><span class="line">funcPtr fpAdd = add;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">100</span>, b = <span class="number">200</span>;</span><br><span class="line"><span class="keyword">int</span> c = <span class="built_in">fpAdd</span>(a, b); </span><br><span class="line"></span><br><span class="line"><span class="comment">//重载()运算符, 简单来讲就是一个类重载了运算符(), 就可以当函数名用</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Linear</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">double</span> slope;</span><br><span class="line">    <span class="keyword">double</span> y0;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//构造函数</span></span><br><span class="line">    <span class="built_in">Linear</span>(<span class="keyword">double</span> sl_ = <span class="number">1</span>, <span class="keyword">double</span> y_ = <span class="number">0</span>) :<span class="built_in">slope</span>(sl_), <span class="built_in">y0</span>(y_) &#123;&#125;</span><br><span class="line">    <span class="comment">//重载()运算符!!!!!</span></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">double</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    	<span class="keyword">return</span> (y0 + slope * x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Linear f1;</span><br><span class="line">    <span class="function">Linear <span class="title">f2</span><span class="params">(<span class="number">2.5</span>, <span class="number">10.0</span>)</span></span>;</span><br><span class="line">    <span class="comment">//在此处Linear类的对象f1和f2利用重载的（）运算符以函数的方式实现了 y0 + slope * x 功能</span></span><br><span class="line">    <span class="comment">//因此f1和f2可以成为函数符（或函数对象）的另一种范畴</span></span><br><span class="line">    <span class="keyword">double</span> y1 = <span class="built_in">f1</span>(<span class="number">12.5</span>);</span><br><span class="line">    <span class="keyword">double</span> y2 = <span class="built_in">f2</span>(<span class="number">0.4</span>);</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;y1: &quot;</span> &lt;&lt; y1 &lt;&lt; std::endl; <span class="comment">// 0 + 12.5 * 1 = 12.5</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;y2: &quot;</span> &lt;&lt; y2 &lt;&lt; std::endl; <span class="comment">// 10.0 + 2.5 * 0.4 = 11</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="其他备注"><a href="#其他备注" class="headerlink" title="其他备注"></a>其他备注</h2><ul>
<li><p><a href="https://www.jianshu.com/p/c4c84b073413">std::function</a></p>
</li>
<li><p><code>using</code>相当于 typedef  eg:  <code>using ref = _Ty&amp;</code></p>
</li>
<li><p><a href="https://www.cnblogs.com/aion/p/3449756.html">闭包</a></p>
<ul>
<li><p>重载 operator()</p>
</li>
<li><p><a href="https://www.jianshu.com/p/d686ad9de817">lambda</a></p>
<p>完整格式:  <code>[capture list] (params list) mutable exception-&gt; return type &#123; function body &#125;</code></p>
<p>每当你定义一个<code>lambda</code>表达式后，编译器会自动生成一个匿名类（这个类当然重载了<code>()</code>运算符），我们称为闭包类型（closure type）</p>
<p>前面的方括号<code>[]</code>就是用来定义捕捉模式以及变量</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> round = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">auto</span> f = [=](<span class="keyword">int</span> f) -&gt; <span class="keyword">int</span> &#123; <span class="keyword">return</span> f + round; &#125; ;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;result = &quot;</span> &lt;&lt; <span class="built_in">f</span>(<span class="number">1</span>) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></li>
<li><p>boost::bind std::bind</p>
</li>
</ul>
</li>
<li><p><a href="https://www.ruanyifeng.com/blog/2013/10/event_loop.html">event loop</a>  <a href="https://github.com/guodongxiaren/Blog/issues/26">https://github.com/guodongxiaren/Blog/issues/26</a></p>
</li>
<li></li>
</ul>
<hr>
<p>彩蛋:</p>
<p>配合 tiger rhythm 的 keynote 开头</p>
<ul>
<li><p>tiger rhythm节奏</p>
<p>前奏</p>
<p>4*8 +4*8+4*8 </p>
<p>4*4+4*4</p>
<p>4+4+2+4+2*(3*8+6)+4</p>
</li>
</ul>
]]></content>
      <categories>
        <category>program</category>
      </categories>
      <tags>
        <tag>kenzo</tag>
      </tags>
  </entry>
  <entry>
    <title>服务器使用</title>
    <url>/2020/08/03/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<blockquote>
<p>简介</p>
</blockquote>
<span id="more"></span>

<h1 id="第一台服务器"><a href="#第一台服务器" class="headerlink" title="第一台服务器"></a>第一台服务器</h1><h2 id="买服务器"><a href="#买服务器" class="headerlink" title="买服务器"></a>买服务器</h2><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ghe1n7gw71j30fg0bawey.jpg" alt="截屏2020-08-03 下午11.32.12"></p>
<p>115 的腾讯云, 还重新设置了一下密码, 然后他这个webshell 还挺有意思</p>
<h2 id="安装服务"><a href="#安装服务" class="headerlink" title="安装服务"></a>安装服务</h2><h3 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a><a href="https://www.jianshu.com/p/6f7c01ce2b8c">nginx</a></h3><p>1.添加Nginx到YUM源</p>
<p>添加CentOS 7 Nginx yum资源库,打开终端,使用以下命令:</p>
<p>sudo rpm -Uvh <a href="http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm">http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm</a></p>
<p><a href="">2.安装Nginx</a></p>
<p>在你的CentOS 7 服务器中使用yum命令从Nginx源服务器中获取来安装Nginx：</p>
<p>sudo yum install -y nginx</p>
<p>Nginx将完成安装在你的CentOS 7 服务器中。</p>
<p><a href="">3.启动Nginx</a></p>
<p>刚安装的Nginx不会自行启动。运行Nginx:</p>
<p>sudo systemctl start nginx.service</p>
<p>如果一切进展顺利的话，现在你可以通过你的域名或IP来访问你的Web页面来预览一下Nginx的默认页面</p>
<h3 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a><a href="https://blog.csdn.net/a774630093/article/details/79270080">mysql</a></h3><p>下载mysql的repo源</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm11</span><br></pre></td></tr></table></figure>

<p>安装mysql-community-release-el7-5.noarch.rpm包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo rpm -ivh mysql-community-release-el7-5.noarch.rpm11</span><br></pre></td></tr></table></figure>

<p>安装这个包后，会获得两个mysql的yum repo源：/etc/yum.repos.d/mysql-community.repo，/etc/yum.repos.d/mysql-community-source.repo。</p>
<p>3、安装mysql</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum install mysql-server11</span><br></pre></td></tr></table></figure>

<p>根据步骤安装就可以了，不过安装完成后，没有密码，需要重置密码。</p>
<p>安装后再次查看mysql</p>
<h3 id="composer"><a href="#composer" class="headerlink" title="composer"></a><a href="https://blog.csdn.net/winter_liang/article/details/72263061">composer</a></h3><h4 id="安装-php7-1"><a href="#安装-php7-1" class="headerlink" title="安装 php7.1"></a><a href="https://www.cnblogs.com/ampl/p/9881660.html">安装 php7.1</a></h4><h3 id="flarum"><a href="#flarum" class="headerlink" title="flarum"></a><a href="https://ryanc.cc/archives/flarum-install-and-config.html">flarum</a></h3><p>居然还有</p>
<p><a href="https://oneinstack.com/">https://oneinstack.com/</a></p>
<p>这种东西, 绝了</p>
<h2 id="使用-flarum"><a href="#使用-flarum" class="headerlink" title="使用 flarum"></a>使用 flarum</h2><h3 id="数据库配置"><a href="#数据库配置" class="headerlink" title="数据库配置"></a>数据库配置</h3><p>老是说数据库找不到…然后发现是多了个空格????日</p>
<h3 id="邮箱配置"><a href="#邮箱配置" class="headerlink" title="邮箱配置"></a>邮箱配置</h3><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ghf1swimijj313l0u0jtm.jpg" alt="邮箱配置"></p>
<p>地址是我的 qq 邮箱, 用户名是 qq 号, 密码是 stmp 给的那个长字符串</p>
<h1 id="网页-学习"><a href="#网页-学习" class="headerlink" title="网页 学习"></a>网页 学习</h1><h2 id="平面设计xjer-看"><a href="#平面设计xjer-看" class="headerlink" title="平面设计xjer 看"></a>平面设计xjer 看</h2><blockquote>
<p>强调</p>
<ul>
<li>文字</li>
<li>图像</li>
</ul>
</blockquote>
<p><strong>视觉落点</strong> 视觉动线</p>
<p>段落清晰分明, 规律间距</p>
<p>构图逻辑</p>
<p>辨识度</p>
<p>段落与段落 </p>
<h2 id="html-入门"><a href="#html-入门" class="headerlink" title="html 入门"></a><a href="https://deerchao.cn/tutorials/html/html.htm">html 入门</a></h2><h3 id="html-综述"><a href="#html-综述" class="headerlink" title="html 综述"></a>html 综述</h3><p>所有的HTML文档都应该有一个<code>&lt;html&gt;</code>标签，<code>&lt;html&gt;</code>标签可以包含两个部分:<code>&lt;head&gt;</code>和<code>&lt;body&gt;</code>。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>标签用于包含整个文档的一般信息，比如文档的标题（<span class="tag">&lt;<span class="name">title</span>&gt;</span>标签用于包含标题），对整个文档的描述，文档的关键字等等。文档的具体内容就要放在<span class="tag">&lt;<span class="name">body</span>&gt;</span>标签里了。</span><br></pre></td></tr></table></figure>

<p><code>&lt;a&gt;</code>标签用于表示链接，在浏览器（如IE,Firefox等）中查看HTML文档时，点击<code>&lt;a&gt;</code>标签括起来的内容时，通常会跳转到另一个页面。这个要跳转到的页面的地址由<code>&lt;a&gt;</code>标签的href属性指定。上面的<code>&lt;a href=&quot;https://deerchao.cn&quot;&gt;</code>中，href属性的值就是<a href="https://deerchao.cn./">https://deerchao.cn。</a></p>
<h3 id="html-可以包含的内容"><a href="#html-可以包含的内容" class="headerlink" title="html 可以包含的内容"></a>html 可以包含的内容</h3><ul>
<li><p>文本</p>
<p>HTML对文本的支持是最丰富的，你可以设置不同级别的标题，分段和换行，可以指定文本的语义和外观，可以说明文本是引用自其它的地方，等等等等。</p>
</li>
<li><p>链接</p>
<p>链接用来指出内容与另一个页面或当前页面某个地方有关。</p>
</li>
<li><p>图片</p>
<p>图片用于使页面更加美观，或提供更多的信息。</p>
</li>
<li><p>列表</p>
<p>列表用于说明一系列条目是彼此相关的。</p>
</li>
<li><p>表格</p>
<p>表格是按行与列将数据组织在一起的形式。也有不少人使用表格进行页面布局。</p>
</li>
<li><p>表单</p>
<p>表单通常由文本输入框，按钮，多选框，单选框，下拉列表等组成，使HTML页面更有交互性。</p>
</li>
<li><p>框架</p>
<p>框架使页面里能包含其它的页面。</p>
</li>
</ul>
<h3 id="格式详细说明"><a href="#格式详细说明" class="headerlink" title="格式详细说明"></a>格式详细说明</h3><blockquote>
<p>如果想在正文里使用尖括号（或者大与号小与号，总之是同一个东西），必须使用<strong>字符转义</strong>，也就是说转换字符的原有意义。&lt;应该使用<code>&amp;lt;</code>代替，&gt;则使用<code>&amp;gt;</code>，至于&amp;符号本身,则应该使用&amp;amp替代</p>
<p>如果要显示连续的空格（比如为了缩进），应该用<code>&amp;nbsp;</code>来代表空格。</p>
</blockquote>
<h4 id="常用标签介绍"><a href="#常用标签介绍" class="headerlink" title="常用标签介绍"></a>常用标签介绍</h4><ul>
<li><p>font</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span>=<span class="string">&quot;6&quot;</span>&gt;</span>6<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span>=<span class="string">&quot;4&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;red&quot;</span> <span class="attr">size</span>=<span class="string">&quot;5&quot;</span>&gt;</span>红色的5<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">&quot;黑体&quot;</span>&gt;</span>黑体的字<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>加粗斜体下划线</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>Bold<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span>italic<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">u</span>&gt;</span>underline<span class="tag">&lt;/<span class="name">u</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>标题</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>HTML 30分钟教程<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>什么是HTML<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>HTML是什么样的<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>图片</p>
<p>横线</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hr</span> <span class="attr">width</span>=<span class="string">&quot;90%&quot;</span> <span class="attr">color</span>=<span class="string">&quot;red&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>图片</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;http://www.w3.org/Icons/valid-xhtml10&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;图片简介&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>链接</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://deerchao.cn&quot;</span>&gt;</span>deerchao的个人网站<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://validator.w3.org&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;http://www.w3.org/Icons/valid-xhtml10&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;验证HTML&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>分段与换行</p>
<p>由于HTML文档会忽略空白符，所以要想保证正常的分段换行的话，必须指出哪些文字是属于同一段落的，这就用到了标签<p>。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是第一段。<span class="tag">&lt;/<span class="name">p</span>&gt;</span> <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是第二段。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>也有人不用<code>&lt;p&gt;</code>，而用<code>&lt;br&gt;</code>。<code>&lt;br&gt;</code>只表示换行，不表示段落的开始或结束，所以通常没有结束标签。</p>
<p>点击查看效果</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">这是第一段。<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">这是第二段。<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">这是第三段。</span><br></pre></td></tr></table></figure>

<p>有时，要把文档看作不同的部分组合起来的，比如一个典型的页面可能包括三个部分：页头，主体，页脚。<div>标签专门用于标明不同的部分：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>页头内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>主体内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>页脚内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>表格</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>2000<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>悉尼<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>2004<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>雅典<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>2008<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<table>   <tr>     <td>2000</td><td>悉尼</td>   </tr>   <tr>     <td>2004</td><td>雅典</td>   </tr>   <tr>     <td>2008</td><td>北京</td>   </tr> </table>

<p>HTML文档在浏览器里通常是从左到右，从上到下地显示的，到了窗口右边就自动换行。为了实现分栏的效果，很多人使用表格（<code>&lt;table&gt;</code>）进行页面排版（虽然HTML里提供表格的本意不是为了排版）。</p>
<p><code>&lt;table&gt;</code>标签里通常会包含几个<code>&lt;tr&gt;</code>标签，<code>&lt;tr&gt;</code>代表表格里的一行。<code>&lt;tr&gt;</code>标签又会包含<code>&lt;td&gt;</code>标签，每个<code>&lt;td&gt;</code>代表一个单元格。</p>
<p><code>&lt;tr&gt;</code>标签还可以被<code>&lt;table&gt;</code>里的<code>&lt;thead&gt;</code>或<code>&lt;tbody&gt;</code>或<code>&lt;tfoot&gt;</code>包含。它们分别代表表头，表正文，表脚。在打印网页的时候，如果表格很大，一页打印不完，<code>&lt;thead&gt;</code>和<code>&lt;tfoot&gt;</code>将在每一页出现。</p>
<p><code>&lt;th&gt;</code>和<code>&lt;td&gt;</code>非常相似，也用在<code>&lt;tr&gt;</code>里边，不同的是<code>&lt;th&gt;</code>代表这个单元格是它所在的行或列的标题。</p>
<table>   <thead>     <tr><th>时间</th><th>地点</th></tr>   </thead>   <tbody>     <tr><td>2000</td><td>悉尼</td></tr>     <tr><td>2004</td><td>雅典</td></tr>     <tr><td>2000</td><td>北京</td></tr>   </tbody> </table></li>
<li><p>列表</p>
<p>表格用于表示二维数据（行，列），一维数据则用列表表示。列表可以分为无序列表（<code>&lt;ul&gt;</code>），有序列表（<code>&lt;ol&gt;</code>）和定义列表（<code>&lt;dl&gt;</code>）。前两种列表更常见一些，都用<code>&lt;li&gt;</code>标签包含列表项目。</p>
<p>无序列表表示一系列类似的项目，它们之间没有先后顺序。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>桔子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>桃<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>打开冰箱门<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>把大象赶进去<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>关上冰箱门<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
  <li>苹果</li>
  <li>桔子</li>
  <li>桃</li>
</ul>

<ol>
  <li>打开冰箱门</li>
  <li>把大象赶进去</li>
  <li>关上冰箱门</li>
</ol></li>
<li><p>框架</p>
<p>最后谈一下框架，曾经非常流行的技术，框架使一个窗口里能同时显示多个文档。主框架页里面没有<code>&lt;body&gt;</code>标签，取代它的是<code>&lt;frameset&gt;</code>。</p>
<p><code>&lt;frameset&gt;</code>标签的属性Rows和Cols用于指定框架集(frameset)里有多少行（列），以及每行（列）的高度（宽度）。</p>
<p><code>&lt;frameset&gt;</code>标签可以包含<code>&lt;frame&gt;</code>标签，每个<code>&lt;frame&gt;</code>标签代表一个文档（src属性指定文档的地址）。</p>
<p>如果觉得这样的页面还不够复杂的话，还可以在<code>&lt;frameset&gt;</code>标签里包含<code>&lt;frameset&gt;</code>标签。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">frameset</span> <span class="attr">rows</span>=<span class="string">&quot;15%,*&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">frame</span> <span class="attr">src</span>=<span class="string">&quot;top.html&quot;</span> <span class="attr">name</span>=<span class="string">title</span> <span class="attr">scrolling</span>=<span class="string">no</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">frameset</span> <span class="attr">cols</span>=<span class="string">&quot;20%,*&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">frame</span> <span class="attr">src</span>=<span class="string">&quot;left.html&quot;</span> <span class="attr">name</span>=<span class="string">sidebar</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">frame</span> <span class="attr">src</span>=<span class="string">&quot;right.html&quot;</span> <span class="attr">name</span>=<span class="string">recipes</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">frameset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">frameset</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h4 id="在HTML文档中嵌入CSS的几种方式"><a href="#在HTML文档中嵌入CSS的几种方式" class="headerlink" title="在HTML文档中嵌入CSS的几种方式"></a>在HTML文档中嵌入CSS的几种方式</h4><ul>
<li><p>嵌入式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">h1</span>&#123;<span class="attribute">color</span>:red&#125;<span class="selector-tag">p</span>&#123;<span class="attribute">color</span>:blue&#125;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>内联式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color:#FFF;font-weight:bold;&quot;</span>&gt;</span>内联样式<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>外部引用式</p>
</li>
</ul>
<h4 id="box-shadow"><a href="#box-shadow" class="headerlink" title="box-shadow"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/box-shadow">box-shadow</a></h4><h4 id="英文标题"><a href="#英文标题" class="headerlink" title="英文标题"></a>英文标题</h4><p>英文标题，他的首标题全部大写，然后副标题的话字号缩小起码五倍六倍，首字母大写，其他的字母全部小写。</p>
]]></content>
      <categories>
        <category>program</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>server</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习</title>
    <url>/2020/04/12/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<blockquote>
<p>简介</p>
</blockquote>
<span id="more"></span>

<h1 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h1><h2 id="第一章引言"><a href="#第一章引言" class="headerlink" title="第一章引言"></a>第一章引言</h2><h3 id="什么是机器学习"><a href="#什么是机器学习" class="headerlink" title="什么是机器学习"></a>什么是机器学习</h3><p>学习出-&gt;算法</p>
<h3 id="机器学习的历史"><a href="#机器学习的历史" class="headerlink" title="机器学习的历史"></a>机器学习的历史</h3><p>1952 逻辑理论家 逻辑符号主义</p>
<p>1957 感知机 连接主义</p>
<p>1969 AI winter</p>
<p>1970 知识期 专家系统</p>
<p>1994 </p>
<p>1997 deepblue</p>
<p>2012 神经网络 -&gt; 深度学习(深度学习是机器学习的子集)</p>
<h3 id="机器学习算法类型"><a href="#机器学习算法类型" class="headerlink" title="机器学习算法类型"></a>机器学习算法类型</h3><h4 id="监督学习算法"><a href="#监督学习算法" class="headerlink" title="监督学习算法"></a>监督学习算法</h4><ul>
<li>分类</li>
<li>回归</li>
</ul>
<h4 id="无监督学习算法-知识发现"><a href="#无监督学习算法-知识发现" class="headerlink" title="无监督学习算法/知识发现"></a>无监督学习算法/知识发现</h4><ul>
<li>聚类</li>
</ul>
<h4 id="强化学习算法-基于反馈"><a href="#强化学习算法-基于反馈" class="headerlink" title="强化学习算法(基于反馈"></a>强化学习算法(基于反馈</h4><ul>
<li>AlphaGo -&gt; alphazero</li>
</ul>
<h2 id="第二章监督学习"><a href="#第二章监督学习" class="headerlink" title="第二章监督学习"></a>第二章监督学习</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>D 标记数据集{(<strong>x</strong>,y), …}</p>
<h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><h4 id="标签空间实例"><a href="#标签空间实例" class="headerlink" title="标签空间实例"></a>标签空间实例</h4><h4 id="特征向量实例"><a href="#特征向量实例" class="headerlink" title="特征向量实例"></a>特征向量实例</h4><h3 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h3><ul>
<li>0/1 loss</li>
<li>square loss 线性回归</li>
<li>absolute loss </li>
</ul>
<h3 id="泛化"><a href="#泛化" class="headerlink" title="泛化"></a>泛化</h3><p>overfitting 过拟合</p>
<h3 id="训练集测试集的划分"><a href="#训练集测试集的划分" class="headerlink" title="训练集测试集的划分"></a>训练集测试集的划分</h3><p>纯随机划分</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h2 id="第三章-k-近邻"><a href="#第三章-k-近邻" class="headerlink" title="第三章 k 近邻"></a>第三章 k 近邻</h2><h3 id="k-近邻算法-k-nearest-neighbor-KNN"><a href="#k-近邻算法-k-nearest-neighbor-KNN" class="headerlink" title="k 近邻算法(k nearest neighbor KNN)"></a>k 近邻算法(k nearest neighbor KNN)</h3><h4 id="基本假设"><a href="#基本假设" class="headerlink" title="基本假设"></a>基本假设</h4><p>p=1 曼哈顿距离</p>
<p>p=2 欧几里得距离</p>
<p>p-&gt;无穷 最大</p>
<p>O(nd)</p>
<h4 id="分类原则"><a href="#分类原则" class="headerlink" title="分类原则"></a>分类原则</h4><h4 id="k-近邻的正式定义"><a href="#k-近邻的正式定义" class="headerlink" title="k 近邻的正式定义"></a>k 近邻的正式定义</h4><h4 id="k-值得选取"><a href="#k-值得选取" class="headerlink" title="k 值得选取"></a>k 值得选取</h4><h3 id="使用什么距离函数"><a href="#使用什么距离函数" class="headerlink" title="使用什么距离函数"></a>使用什么距离函数</h3><h3 id="贝叶斯最优分类器"><a href="#贝叶斯最优分类器" class="headerlink" title="贝叶斯最优分类器"></a>贝叶斯最优分类器</h3><p>贝叶斯优化</p>
<h3 id="1-NN-收敛性证明"><a href="#1-NN-收敛性证明" class="headerlink" title="1-NN 收敛性证明"></a>1-NN 收敛性证明</h3><p>ε<del>1NN</del> &lt; ε<del>BO</del></p>
<h4 id="k-means"><a href="#k-means" class="headerlink" title="k-means"></a>k-means</h4><h3 id="维数灾难"><a href="#维数灾难" class="headerlink" title="维数灾难"></a>维数灾难</h3><p>高维-&gt;所有点都是临近点</p>
<h4 id="点和点之间的距离"><a href="#点和点之间的距离" class="headerlink" title="点和点之间的距离"></a>点和点之间的距离</h4><h4 id="点和超平面之间的距离"><a href="#点和超平面之间的距离" class="headerlink" title="点和超平面之间的距离"></a>点和超平面之间的距离</h4><h3 id="低维结构的数据"><a href="#低维结构的数据" class="headerlink" title="低维结构的数据"></a>低维结构的数据</h3><h3 id="k-平均算法"><a href="#k-平均算法" class="headerlink" title="k-平均算法"></a>k-平均算法</h3><h2 id="第四章感知机"><a href="#第四章感知机" class="headerlink" title="第四章感知机"></a>第四章感知机</h2><h3 id="感知机分类模型"><a href="#感知机分类模型" class="headerlink" title="感知机分类模型"></a>感知机分类模型</h3><p>{ x| w^T^x + b = 0 }</p>
<p>w-&gt;(w, b)   x-&gt;(x, 1) 方便得到过原点的超平面</p>
<h3 id="感知机算法"><a href="#感知机算法" class="headerlink" title="感知机算法"></a>感知机算法</h3><p><strong>w</strong> = <strong>0</strong></p>
<p>for</p>
<p>​    if yw^T^x&lt;=0</p>
<p>​        w=w+yx</p>
<h3 id="感知机收敛性"><a href="#感知机收敛性" class="headerlink" title="感知机收敛性"></a>感知机收敛性</h3><h2 id="第五章贝叶斯与概率估计"><a href="#第五章贝叶斯与概率估计" class="headerlink" title="第五章贝叶斯与概率估计"></a>第五章贝叶斯与概率估计</h2><h3 id="联合概率分布"><a href="#联合概率分布" class="headerlink" title="联合概率分布"></a>联合概率分布</h3><h3 id="MLE"><a href="#MLE" class="headerlink" title="MLE"></a>MLE</h3><h3 id="MAP"><a href="#MAP" class="headerlink" title="MAP"></a>MAP</h3><h2 id="朴素贝叶斯法"><a href="#朴素贝叶斯法" class="headerlink" title="朴素贝叶斯法"></a>朴素贝叶斯法</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">P(x y)&#x3D;P(x|y)*P(y)&#x3D;P(y|x)*P(x)</span><br></pre></td></tr></table></figure>

<p>MLE 最大似然</p>
<h3 id="贝叶斯分类器"><a href="#贝叶斯分类器" class="headerlink" title="贝叶斯分类器"></a>贝叶斯分类器</h3><h3 id="朴素贝叶斯法-1"><a href="#朴素贝叶斯法-1" class="headerlink" title="朴素贝叶斯法"></a>朴素贝叶斯法</h3><h3 id="P-x-y-参数估计"><a href="#P-x-y-参数估计" class="headerlink" title="P([x] y)参数估计"></a>P([x] y)参数估计</h3><h4 id="离散特征"><a href="#离散特征" class="headerlink" title="离散特征"></a>离散特征</h4><h4 id="多项式特征"><a href="#多项式特征" class="headerlink" title="多项式特征"></a>多项式特征</h4><h4 id="连续特征"><a href="#连续特征" class="headerlink" title="连续特征"></a>连续特征</h4><h3 id="朴素贝叶斯法是一种线性分类器"><a href="#朴素贝叶斯法是一种线性分类器" class="headerlink" title="朴素贝叶斯法是一种线性分类器"></a>朴素贝叶斯法是一种线性分类器</h3><h3 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h3><h2 id="线性回归"><a href="#线性回归" class="headerlink" title="线性回归"></a>线性回归</h2><ul>
<li><p><code>h(x)</code>hypothesis 假设, 模型</p>
</li>
<li><p><code>J(θ)</code>代价函数</p>
</li>
<li><p>梯度下降, 对 J(θ)求偏导</p>
<p>θ<del>j</del>:=θ<del>j</del> - α*偏导</p>
<ul>
<li>学习率α</li>
</ul>
</li>
</ul>
<h2 id="逻辑斯蒂回归"><a href="#逻辑斯蒂回归" class="headerlink" title="逻辑斯蒂回归"></a>逻辑斯蒂回归</h2><ul>
<li><p>Sigmoid函数</p>
<p><img src="https://www.zhihu.com/equation?tex=g(z)=+%5Cfrac%7B1%7D%7B1+e%5E%7B-z%7D%7D" alt="[公式]"></p>
</li>
<li><p>代价函数: 常用交叉熵</p>
</li>
</ul>
]]></content>
      <categories>
        <category>cs</category>
      </categories>
      <tags>
        <tag>ai</tag>
      </tags>
  </entry>
  <entry>
    <title>汇编</title>
    <url>/2020/04/01/%E6%B1%87%E7%BC%96/</url>
    <content><![CDATA[<blockquote>
<p>关于汇编语言的总结, 原则是只记录要点</p>
</blockquote>
<span id="more"></span>

<h2 id="汇编要点总结"><a href="#汇编要点总结" class="headerlink" title="汇编要点总结"></a>汇编要点总结</h2><h3 id="基础"><a href="#基础" class="headerlink" title="基础:"></a>基础:</h3><p><a href="https://tool.oschina.net/hexconvert">数制转换</a></p>
<ul>
<li><p>使用汇编语言编写的源代码，然后通过相应的汇编程序将它们转换成可执行的机器代码。这一过程被称为<strong>汇编过程</strong>。</p>
</li>
<li><p>普遍地说，每一种特定的汇编语言和其特定的机器语言指令集是一一对应的。</p>
</li>
<li><p>DB, DW, DD, DQ, DT 依次为 1, 2, 4, 8, 10</p>
</li>
<li><p><a href="https://zh.wikipedia.org/wiki/X86">x86</a>/<a href="https://zh.wikipedia.org/wiki/Amd64">amd64</a>汇编指令的两大风格分别是<a href="https://zh.wikipedia.org/wiki/Intel">Intel</a>汇编与<a href="https://zh.wikipedia.org/wiki/AT%26T">AT&amp;T</a>汇编，分别被<a href="https://zh.wikipedia.org/wiki/Microsoft_Windows">Microsoft Windows</a>/<a href="https://zh.wikipedia.org/wiki/Visual_C%2B%2B">Visual C++</a>与<a href="https://zh.wikipedia.org/wiki/GNU">GNU</a>/<a href="https://zh.wikipedia.org/wiki/GNU%E6%B1%87%E7%BC%96%E5%99%A8">Gas</a>采用（Gas也可使用Intel汇编风格）</p>
</li>
<li><table>
<thead>
<tr>
<th align="left">项目</th>
<th align="left">Intel风格(dosbox使用的是这种)</th>
<th align="left">AT&amp;T风格</th>
</tr>
</thead>
<tbody><tr>
<td align="left">操作数顺序</td>
<td align="left">目标操作数在前</td>
<td align="left">源操作数在前</td>
</tr>
<tr>
<td align="left">寄存器</td>
<td align="left"><strong>原样</strong></td>
<td align="left">加%前缀</td>
</tr>
<tr>
<td align="left">立即数</td>
<td align="left"><strong>原样</strong></td>
<td align="left">加$前缀</td>
</tr>
<tr>
<td align="left">16进制立即数</td>
<td align="left">用后缀B与H分别表示二进制与十六进制 对于16进制字母开头的要加前缀0</td>
<td align="left">加前缀0x</td>
</tr>
<tr>
<td align="left">访问内存长度的表示</td>
<td align="left">前缀BYTE PTR, WORD PTR, DWORD PTR和QWORD PTR表示字节,字,双字和四字</td>
<td align="left">后缀b,w,l,q表示字节,字,双字和四字</td>
</tr>
<tr>
<td align="left">引用全局或静态变量var的值</td>
<td align="left">[<strong>var</strong>]</td>
<td align="left">var</td>
</tr>
<tr>
<td align="left">引用全局或静态变量var的地址</td>
<td align="left"><strong>var</strong></td>
<td align="left">$var</td>
</tr>
<tr>
<td align="left">引用局部变量</td>
<td align="left">需要基于栈指针（rsp）</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">绝对寻址</td>
<td align="left">[imm]</td>
<td align="left">imm</td>
</tr>
<tr>
<td align="left">间接寻址</td>
<td align="left">[reg]</td>
<td align="left">(%reg)</td>
</tr>
<tr>
<td align="left">基址相对寻址</td>
<td align="left">[reg +imm]</td>
<td align="left">imm(%reg)</td>
</tr>
<tr>
<td align="left">变址寻址</td>
<td align="left">[base+index]</td>
<td align="left">(base,index)</td>
</tr>
<tr>
<td align="left">变址寻址</td>
<td align="left">imm[base+index]</td>
<td align="left">imm(base,index)</td>
</tr>
<tr>
<td align="left">比例变址寻址</td>
<td align="left">imm[base + index * scale ]</td>
<td align="left">imm(base, index, scale)</td>
</tr>
<tr>
<td align="left">scale只能是1,2,4,8其中的一个数字(1省略不写就是普通变址寻址)</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left">代码注释</td>
<td align="left">单行注释用;+注释内容。例如:mov   rax, rdx ;这里是注释</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">注意</td>
<td align="left">这里imm为立即数,base和index为寄存器,scale为伸缩量</td>
<td align="left"></td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="区分-地址-和-数"><a href="#区分-地址-和-数" class="headerlink" title="区分 地址 和 数"></a>区分 地址 和 数</h3><ul>
<li><p>举例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DS: [1000h]; 这是一个地址, 位置是 1000h</span><br><span class="line">3000h; 这是一个数, 大小是 3000h</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>助记符—&gt;机器指令</li>
<li>变量—&gt;操作数存放地址</li>
<li>指令前的标号—&gt;该指令的存放地址</li>
</ul>
</li>
</ul>
<h3 id="为什么要分段-内存-虚拟内存-分段部件-分页部件"><a href="#为什么要分段-内存-虚拟内存-分段部件-分页部件" class="headerlink" title="为什么要分段(内存, 虚拟内存, 分段部件, 分页部件)"></a>为什么要分段(内存, 虚拟内存, 分段部件, 分页部件)</h3><ul>
<li><p>历史</p>
<ul>
<li>1978年 推出 16 位 cpu8086, 内外数据线为 16 位, 地址总线为 20 位, 主存寻址 1MB</li>
<li>1982年 推出         cpu80286, 内外数据线为 16 位, 地址总线为 24 位, 主存寻址 16MB</li>
<li>1985年 推出32位 cpu80386, 内外数据线为 32 位, 地址总线为 32 位, 主存寻址 4GB(1MB*2^12)</li>
</ul>
</li>
<li><p>物理原因</p>
<ul>
<li><p>总线 20 位 —&gt; 寻址 1MB</p>
</li>
<li><p>总线 32 位 —&gt; 寻址 4G</p>
</li>
<li><p>段寄存器为 16 位 —&gt; 段的大小为 64K </p>
</li>
<li><p><strong>最低端 80X86 16 位虚拟机中, 内部结构是 16 位, 主线是 20 位, 为了解决这一问题:</strong></p>
<ul>
<li>将 1MB(20 位)的主存按 64KB(16 位)分段</li>
<li>设置四个段寄存器 CS, DS, SS, ES 保存段首址(20 位的高 16 位), 将这个 16 位(左移四位再变成 20 位)加上数据的偏移地址就得到了物理地址</li>
<li>其中 CS—&gt;IP, SS—&gt;SP, 一般情况下不需要定义附加数据段, 如果必须定义, 最简单的方法是让附加数据段与数据段重合. </li>
</ul>
</li>
<li><p>32 位暂时没看😬</p>
</li>
</ul>
</li>
</ul>
<h3 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h3><ul>
<li>数据寄存器组(可以用作 16, 8 位, 但是此时不能用作指示器, 变址寄存器?)<ul>
<li>EAX 累加器</li>
<li>EBX 基址寄存器</li>
<li>ECX 计数寄存器</li>
<li>EDX 数据寄存器</li>
</ul>
</li>
<li>指示器变址寄存器组(存放偏移地址, 用作指示器或者变址寄存器, 可用作 16, 不能用作 8)<ul>
<li>ESI 源操作数指示器</li>
<li>EDI 目的操作数指示器</li>
<li>EBP 基址寄存器</li>
<li>ESP 专用堆栈指示器, 一般不做数据寄存器</li>
</ul>
</li>
<li>段寄存器<ul>
<li>CS 代码段寄存器</li>
<li>SS </li>
<li>DS </li>
<li>ES, FS, GS </li>
</ul>
</li>
</ul>
<h3 id="标志寄存器"><a href="#标志寄存器" class="headerlink" title="标志寄存器"></a>标志寄存器</h3><ul>
<li>zf: 零标志位, 相关指令执行后结果为 0 则 zf=1, 否则 0<br>mov ax,1<br>sub ax,1</li>
<li>pf: 奇偶标志位, 结果中 1 为偶数 pf=1, 否则 0</li>
<li>sf: 符号标志位, 结果为负, sf=1, 否则为 0</li>
<li>cf: 进位标志位, 在进行无符号数运算的时候，CF记录了运算结果的最高有效位向更高有效位向更高位的进位值/借位值,产生进位或向更高位借位都会使CF=1</li>
<li>of: 溢出标志位, 超出机器所能表示的范围 of=1, 否则 0</li>
</ul>
<h3 id="内存中的数据存放"><a href="#内存中的数据存放" class="headerlink" title="内存中的数据存放"></a>内存中的数据存放</h3><ul>
<li>高八位在在高地址, 低八位在低地址</li>
</ul>
<h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><p><img src="https://img-blog.csdn.net/20180214135628549?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYWJjXzEyMzY2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p>
<h3 id="寄存器寻址"><a href="#寄存器寻址" class="headerlink" title="寄存器寻址"></a>寄存器寻址</h3><ul>
<li>寄存器寻址 MOV AX, BX</li>
<li>寄存器间接寻址 MOV AX, [SI] ; AX=地址为 SI 的值 的值</li>
<li>变址寻址 MOV AL, [R*F] + V; 其中 F 应该是为了应对字节, 字, 双字的</li>
<li>基址加变址寻址 MOV AX, [BR+IR*F+V]; 默认段寄存器由 BR 决定,  为了表示矩阵</li>
<li>立即寻址 MOV AX, 036H</li>
<li>直接寻址 MOV DS:[20H], CL</li>
</ul>
<h3 id="子程序"><a href="#子程序" class="headerlink" title="子程序"></a>子程序</h3><ul>
<li>NEAR FAR<ul>
<li>NEAR 可省略</li>
<li>FAR </li>
<li>区别主要在于 NEAR 只是把 ip 入栈, 把 ea 赋值给 ip, FAR 在 NEAR 的基础上还要把 CS 入栈(最先入 cs, 再入 ip)</li>
</ul>
</li>
<li>RET 根据 NEAR 还是 FAR 出栈</li>
<li>传递参数<ul>
<li>寄存器法</li>
<li>约定单元法</li>
<li>堆栈法</li>
</ul>
</li>
</ul>
<h3 id="模块化处理"><a href="#模块化处理" class="headerlink" title="模块化处理"></a>模块化处理</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">F2T10.ASM</span><br><span class="line">NAME F2T10</span><br><span class="line">PUBLIC F2T10; 这里的 public 指明了 F2T10 是可以被其他模块调用的, 该语句可以放在任何地方</span><br><span class="line">DATA  SEGMENT  USE16 PARA    PUBLIC &#39;DATA&#39;</span><br><span class="line">;段名 segment 使用类型 定位方式 组合方式 &#39;类别&#39;</span><br><span class="line">;定位方式中para为默认, 定义段在什么样的起始边界开始</span><br><span class="line">;类别的作用是生成 exe 的时候进行分组(分配空间)</span><br><span class="line">;组合方式连在一起, public 同类别段会放在一起</span><br><span class="line">...</span><br><span class="line">DATA ENDS</span><br><span class="line"></span><br><span class="line">CODE SEGMENT USE16 PARA PUBLIC &#39;CODE&#39;</span><br><span class="line">ASSUME CS:CODE, DS:DATA</span><br><span class="line">F2T10 PROC</span><br><span class="line">...</span><br><span class="line">F2T10 ENDP</span><br><span class="line">CODE ENDS</span><br><span class="line">END</span><br><span class="line">-----------------------------------------</span><br><span class="line">MAIN.ASM</span><br><span class="line">;以上是一个子模块, 下面的是主模块</span><br><span class="line">NAME MAIN</span><br><span class="line">EXTRN F2T10:NEAR; 这里指明 F2T10 是外部模块的, 例如子程序, 如果两个代码块的类别名相同, 相当于在一个段里, 用 EXTRN F2R10:NEAR, 否则用 far</span><br><span class="line">IF1 </span><br><span class="line">;IF XXX ... ELSE ... ENDIF 如果条件成立就执行块中的语句, 其中if 有几个固定搭配</span><br><span class="line">	INCLUDE MACRO.LIB</span><br><span class="line">ENDIF</span><br><span class="line">.386</span><br><span class="line">DATA SEGMENT USE16 PARA PUBLIC &#39;DATA&#39;</span><br><span class="line">...</span><br><span class="line">DATA ENDS</span><br><span class="line"></span><br><span class="line">CODE SEGMENT USE16 PARA PUBLIC &#39;CODE&#39;</span><br><span class="line">ASSUME CS:CODE, DS:DATA</span><br><span class="line">START:...</span><br><span class="line">CODE ENDS</span><br><span class="line">START END</span><br><span class="line"></span><br><span class="line">masm main.asm</span><br><span class="line">masm F2T10.asm</span><br><span class="line">然后执行:LINK MAIN+F2T10;生成 main.exe</span><br></pre></td></tr></table></figure>



<h3 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h3><ul>
<li>默认:<ul>
<li>源串指示器 SI</li>
<li>目的串指示器 DI</li>
<li>重复次数 CX</li>
<li>SCAS 搜索值 AX</li>
<li>LODS 目的地址 AX</li>
<li>STOS 源地址</li>
</ul>
</li>
<li>MOVS</li>
<li>CMPS<ul>
<li>REPE CMPS 未比较完且相等时继续</li>
<li>REPNE CMPS 未比较完且不相等时继续</li>
</ul>
</li>
<li>SCAS 在 DI 中搜索 AL</li>
<li>LODS </li>
<li>STOS </li>
</ul>
<h3 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h3><p>I/O 空间</p>
<ul>
<li>IN<ul>
<li>IN AL/AX/EAX, 立即数</li>
<li>IN AL/AX/EAX, DX</li>
</ul>
</li>
<li>OUT 同上</li>
</ul>
<h3 id="中断"><a href="#中断" class="headerlink" title="中断"></a>中断</h3><h3 id="win32"><a href="#win32" class="headerlink" title="win32"></a>win32</h3><ul>
<li>32 位</li>
<li>输入输出退出等需要调用 api<ul>
<li>动态链接</li>
</ul>
</li>
<li>库<ul>
<li>user32.lib</li>
<li>kernel32.lib</li>
</ul>
</li>
</ul>
<h3 id="指令合集"><a href="#指令合集" class="headerlink" title="指令合集"></a>指令合集</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MOV OPD, OPS; MOVE DEST SRC</span><br><span class="line"></span><br><span class="line">XLAT; TRANSLATE ([BX+AL])-&gt;AL </span><br><span class="line"></span><br><span class="line">LEA OPD, OPS; LOAD EFFECTIVE ADDRESS 立即寻址 等价于 MOV OPD, OFFSET OPS, 其中 OPD 必须是 16&#x2F;32 位寄存器</span><br><span class="line"></span><br><span class="line">;标志位?</span><br><span class="line"></span><br><span class="line">NEG OPD; NEGTIVE 将 OPD 的每一位取反最后加一, 包括符号位, 得到结论: 负数&quot;取补码&quot;得到绝对值</span><br><span class="line"></span><br><span class="line">IMUL OPD, OPS;INTEGER MULTIPLICATION (OPD)*(OPS)-&gt;OPD</span><br><span class="line">IMUL OPD, OPS, N; (OPS)*N-&gt;OPD</span><br><span class="line">IMUL OPS; </span><br><span class="line">(AL)*(OPS)-&gt;AX</span><br><span class="line">(AX)*(OPS)-&gt;DX, AX</span><br><span class="line">(EAX)*(OPS)-&gt;EDX, EAX</span><br><span class="line">MUL</span><br><span class="line"></span><br><span class="line">DIV OPS;</span><br><span class="line">(AX)&#x2F;(OPS)-&gt;AL 商, AH 余数</span><br><span class="line">(DX, AX)&#x2F;(OPS)-&gt;AX 商, AH 余数</span><br><span class="line">(EDX, EAX)&#x2F;(OPS)-&gt;EAX商, EDX余数</span><br><span class="line">IDIV</span><br><span class="line"></span><br><span class="line">NOT OPD; 取反</span><br><span class="line">AND OPD, OPS; 逻辑与</span><br><span class="line">TEST OPD, OPS</span><br><span class="line">常见用法: TEST ECX, ECX 判断 ecx 是否为空, 如果为空则 zf&#x3D;1</span><br><span class="line">总结: test 是逻辑与运算, cmp 是 sub 运算, cmp a1, a2 执行操作 a1-a2</span><br><span class="line">XOR OPD, OPS; 异或</span><br><span class="line"></span><br><span class="line">SAL OPD, N 或者 SHL OPD, N; ARITHMATIC SHIFT LEFT, SHIFT LEFT 左移, 逻辑算数都一样</span><br><span class="line">SHR OPD, N; 逻辑右移, 加 0</span><br><span class="line">SAR OPD, N; 算数右移, 加符号位</span><br><span class="line"></span><br><span class="line">ROL OPD, N; 循环左移</span><br><span class="line">ROR OPD, N</span><br><span class="line">RCL OPD, N; ROTATE LEFT WITH CARRY 带进位循环左移</span><br><span class="line">RCR OPD, N</span><br><span class="line"></span><br><span class="line">ABOVE, BELOW 无符号, GREATER LESS 有符号</span><br><span class="line">JA; JUMP WHEN ABOVE</span><br><span class="line">JNA; JUMP WHEN NOT ABOVE</span><br><span class="line">JAE; JUMP WHEN ABOVE OR EQUAL</span><br><span class="line">JNAE; JUMP WHEN NOT ABOVE OR EQUAL 不大于, 且不等于</span><br><span class="line"></span><br><span class="line">JB; JUMP WHEN BELOW</span><br><span class="line">JNB; JUMP WHEN NOT BELOW</span><br><span class="line">JBE; JUMP WHEN BELOW OR EQUAL</span><br><span class="line">JNBE; </span><br><span class="line"></span><br><span class="line">JG; JUMP WHEN GREATER</span><br><span class="line">JNG</span><br><span class="line">JGE; JUMP WHEN GREATER OR EQUAL</span><br><span class="line">JNGE; JUMP WHEN NOT GREATER OR EQUAL </span><br><span class="line"></span><br><span class="line">JL; JUMP WHEN LESS</span><br><span class="line">JNL; JUMP WHEN NOT LESS</span><br><span class="line">JLE</span><br><span class="line">JNLE; JUMP WHEN NOT LESS OR EQUAL</span><br><span class="line"></span><br><span class="line">JE; JUMP WHEN EQUAL</span><br><span class="line">JZ; JUMP WHEN HAS ZERO FLAG JZ&#x3D;JE</span><br><span class="line">JNE</span><br><span class="line">JNZ</span><br><span class="line">JO; JUMP WHEN HAS OVERFLOW FLAG</span><br><span class="line">JC; JUMP WHEN HAS CARRY FLAG</span><br><span class="line"></span><br><span class="line">;pf: 奇偶标志位, 结果中 1 为偶数 pf&#x3D;1, 否则 0</span><br><span class="line">JP; JUMP WHEN HAS PARITY(奇偶) FLAG</span><br><span class="line">JPO; JUMP WHEN PARITY FLAG IS ODD, JP &#x3D; JPE</span><br><span class="line">JPE; JUMP WHEN PARITY FLAG IS EVEN, JNP &#x3D; JPO</span><br><span class="line">JS; JUMP WHEN HAS SIGN FLAG</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">INT; INTERRUPT</span><br><span class="line"></span><br><span class="line">DW; DEFINE WORD</span><br><span class="line"></span><br><span class="line">PROC; PROCEDURE</span><br><span class="line"></span><br><span class="line">ENDS; END SEGMENT</span><br><span class="line"></span><br><span class="line">PTR; POINTER</span><br><span class="line"></span><br><span class="line">MOVSX; EXTENDED MOVE WITH SIGN DATA</span><br><span class="line">MOVZX; EXTENDED MOVE WITH ZERO DATA</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">***********************</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PUSH OPS; SP&#x3D;SP-1</span><br><span class="line"></span><br><span class="line">POP OPD; SP&#x3D;SP+1</span><br><span class="line"></span><br><span class="line">DIV;https:&#x2F;&#x2F;blog.csdn.net&#x2F;loovejava&#x2F;article&#x2F;details&#x2F;7044242</span><br><span class="line"></span><br><span class="line">IMUL OPD, OPS; 有符号数乘法</span><br><span class="line">IMUL OPD, OPS, N; OPS*N-&gt;OPD</span><br><span class="line">IMUL OPS; AL*OPS-&gt;AX 字节</span><br><span class="line">					AX*OPS-&gt;DX,AX 字</span><br><span class="line">					EAX*OPS-&gt;EDX,EAX 双字</span><br><span class="line">MUL;无符号乘法,用法同上</span><br><span class="line"></span><br><span class="line">ADD AX,10;把 ax 加上 10 再存到 ax 里</span><br><span class="line"></span><br><span class="line">SUB</span><br><span class="line"></span><br><span class="line">LOOP 标号</span><br><span class="line"></span><br><span class="line">逻辑移位, 总是用 0 补充</span><br><span class="line">SHL EDX, 7;EDX 左移 7 位</span><br><span class="line">shr ;右移</span><br><span class="line"></span><br><span class="line">算数移位, 用符号位补充</span><br><span class="line">sar;右移</span><br><span class="line"></span><br><span class="line">CBW ;将 AL 中的符号扩展到 AH 里</span><br><span class="line"></span><br><span class="line">;意义    无符号比较     有符号比较</span><br><span class="line">&gt;        JA, JNBE     JG, JNLE</span><br><span class="line">&gt;&#x3D;			 JAE, JNB			JNC, JGE, JNL</span><br><span class="line">&lt;				 JB, JNAE			JC, JL, JN, JNGE</span><br><span class="line">&lt;				 JBE, JNA			JLE, JNG</span><br><span class="line"></span><br><span class="line">CMP BYTE PTR[SI],&quot;#&quot; ;ptr前面的类型有byte（字节）、word（字）、dword（双字）、qword（四字）、tbyte（十字节）、far（远类型）和near（近类型）</span><br><span class="line"></span><br><span class="line">LEA </span><br><span class="line">lea指令</span><br><span class="line">load effective address, 加载有效地址，可以将有效地址传送到指定的的寄存器。指令形式是从存储器读数据到寄存器, 效果是将存储器的有效地址写入到目的操作数, 简单说, 就是C语言中的”&amp;”.</span><br><span class="line">mov指令</span><br><span class="line">在CPU内或CPU和存储器之间传送字或字节，它传送的信息可以从寄存器到寄存器，立即数到寄存器，立即数到存储单元，从存储单元到寄存器，从寄存器到存储单元，从寄存器或存储单元到除CS外的段寄存器(注意立即数不能直接送段寄存器)，从段寄存器到寄存器或存储单元。</span><br><span class="line">但是注意</span><br><span class="line">（1） MOV指令中的源操作数绝对不能是立即数和代码段CS寄存器；</span><br><span class="line">（2） MOV指令中绝对不允许在两个存储单元之间直接传送数据；</span><br><span class="line">（3） MOV指令中绝对不允许在两个段寄存器之间直接传送数据；</span><br><span class="line">（4） MOV指令不会影响标志位</span><br><span class="line">使用[]区别</span><br><span class="line">第二操作数加不加中括号[]的区别就是:</span><br><span class="line">lea对变量没有影响是取地址,对寄存器来说加[]时取值,第二操作数不加[]非法</span><br><span class="line">mov对变量来说没有影响是取值,对寄存器来说是加[]时取地址,第二操作数不加[]是取值</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>language</category>
      </categories>
      <tags>
        <tag>assembly</tag>
      </tags>
  </entry>
  <entry>
    <title>沟通的艺术</title>
    <url>/2020/05/30/%E6%B2%9F%E9%80%9A%E7%9A%84%E8%89%BA%E6%9C%AF/</url>
    <content><![CDATA[<blockquote>
<p>沟通的艺术.jpg</p>
</blockquote>
<span id="more"></span>

<h2 id="有效的沟通"><a href="#有效的沟通" class="headerlink" title="有效的沟通"></a>有效的沟通</h2><ul>
<li>信息发送者清晰地表达信息的内涵, 信息接收者能确切理解。</li>
<li>信息发送者重视信息接收者的反应并根据其反应及时修正信息的传递, 免除不必要的误会</li>
</ul>
<ol>
<li><p>消除语言含混性</p>
<ul>
<li><p>确定对方完全明白你说的每一句话和确定自己完全明白对方说的每一句话</p>
</li>
<li><p>eg.</p>
<p><img src="https://pic2.zhimg.com/80/76d2e62d329b41cc9902ab6acca0986b_1440w.jpg" alt="img"></p>
<p>How many points are in the star?</p>
</li>
<li><p>解决方法: 问+复述</p>
<p>eg. </p>
<p>你刚才说的 XXX 指的是/包含哪些/在哪些情况下适用?</p>
<p>那我可不可以理解为 XXXX ?</p>
</li>
</ul>
</li>
<li><p>沟通双方的价值观, 立场, 及沟通的最终目的</p>
<p>明确一下两个事实</p>
<ul>
<li>对方的价值观和立场是什么</li>
<li>对方的价值观和立场是不能在短期内改变的</li>
</ul>
<p>eg.</p>
<p>咸豆花, 甜豆花</p>
<p>关于前途</p>
<p>男女朋友</p>
</li>
<li><p>消除敌对感</p>
</li>
<li><p>冷却决策</p>
</li>
</ol>
<h2 id="沟通要素"><a href="#沟通要素" class="headerlink" title="沟通要素"></a>沟通要素</h2><ol>
<li>清晰: 明确意图</li>
<li>准确: 不要有歧义</li>
<li>简洁</li>
<li>具体</li>
<li>连贯: 逻辑性</li>
<li>谦恭: 理解 yes, 侮辱 no, listen</li>
</ol>
<h2 id="沟通技巧"><a href="#沟通技巧" class="headerlink" title="沟通技巧"></a>沟通技巧</h2><ol>
<li><p>不以自我为中心, 学会倾听</p>
<p>纽约电话公司，曾经做过一个有趣的调查：在电话中，哪个词出现的频率最多？</p>
<p>结果，他们吃惊地发现，在500个电话谈话中，使用了3950次的词，竟是第一人称的“我”。</p>
<p>在人际交往中，人们总有一种“<strong>想要别人对我感兴趣</strong>”的心理趋向。</p>
<p>但就像蔡康永所说：</p>
<p>聊天的时候，每个人都是朕，每个人都只想聊自己。</p>
</li>
<li><p>回答让人接得住话</p>
<p>❌:</p>
<p>男: “每次在网络上下注，只要有湖人队，我就一定赌湖人队赢。”</p>
<p>女: “哦。我觉得篮球最无聊了。”</p>
<p>?</p>
<p>✔️:</p>
<p>男: “每次在网络上下注，只要有湖人队，我就一定赌湖人队赢。”</p>
<p>女 1: “那你一定常常熬夜看球赛咯？”——接下来就可以进一步聊他的<strong>生活作息</strong>了。</p>
<p>女 2: “那你都下多大的注？”——接下来就可以进一步聊他的<strong>金钱观</strong>了。</p>
<p>女 3: “那你看球赛的时候，你<strong>以前的女朋友</strong>都不会抱怨吗？”——接下来就可以进一步聊他的<strong>感情史</strong>了。</p>
</li>
<li><p>好事以坏事收尾，坏事以好事收尾</p>
<p>A：“我今天在百货公司的活动中抽到了一等奖！”（好事）</p>
<p>如果话题在此结束，会有点炫耀的意味，于是A就接着说：</p>
<p>“可是一等奖是10公斤的大米，我扛着它坐地铁回家，重死了。”（坏事）</p>
<p>同理，如果要跟别人分享不好的事情，可以用好事结尾。</p>
<p>A：“昨天坐公交车回家，突然车子出了故障，停下不走了。”（坏事）</p>
<p>如果你此时继续抱怨个不停，听话人想必也会觉得心很累。于是，A继续说：</p>
<p>“因为车子一直没有发动，我想算了，直接下车找个地方喝酒，结果去到一间超棒的店。下次一起去吧？”（好事）</p>
</li>
</ol>
<h2 id="如何有效的报告-bug"><a href="#如何有效的报告-bug" class="headerlink" title="如何有效的报告 bug"></a>如何有效的报告 bug</h2><blockquote>
<p><a href="https://www.chiark.greenend.org.uk/~sgtatham/bugs-cn.html">https://www.chiark.greenend.org.uk/~sgtatham/bugs-cn.html</a></p>
</blockquote>
<h3 id="掉头发的汇报方法"><a href="#掉头发的汇报方法" class="headerlink" title="掉头发的汇报方法"></a>掉头发的汇报方法</h3><ul>
<li><p>在报告中说“不好用”；</p>
</li>
<li><p>所报告内容毫无意义；</p>
</li>
<li><p>在报告中用户没有提供足够的信息；</p>
</li>
<li><p>在报告中提供了<em>错误</em>信息；</p>
</li>
<li><p>所报告的问题是由于用户的过失而产生的；</p>
</li>
<li><p>所报告的问题是由于其他程序的错误而产生的；</p>
</li>
<li><p>所报告的问题是由于网络错误而产生的；</p>
</li>
</ul>
<p><strong>在bug报告里，要设法搞清什么是事实（例如：“我在电脑旁”和“XX出现了”）什么是推测（例如：“我<em>想</em>问题可能是出在……”）。如果愿意的话，您可以省去推测，但是千万别省略事实。</strong></p>
<h4 id="eg-如果电脑死机了"><a href="#eg-如果电脑死机了" class="headerlink" title="eg.如果电脑死机了"></a>eg.如果电脑死机了</h4><p>大哥我家电脑死机了, 你能帮帮我嘛</p>
<p><strong>那我家车打不着火了你能帮帮我嘛</strong></p>
<p>你家车打不着火我哪知道啥毛病啊</p>
<p><strong>那你电脑死机我就能一眼看出来啥毛病了嘛</strong></p>
<p>他就坏了嘛, 圆明园不是我烧的</p>
<p><strong>那坏了是什么表现呢</strong></p>
<p>那就坏了呗, 能有啥表现啊? 死机了呗</p>
<p><strong>那你电脑啥配置啊?</strong></p>
<p>我 8g 内存</p>
<p><strong>你就整个一台电脑就是由一根内存构成的?内存是电脑嘛?你这内存你就含在嘴里脑补画面玩的吗</strong></p>
<h3 id="正确汇报-bug-的方法"><a href="#正确汇报-bug-的方法" class="headerlink" title="正确汇报 bug 的方法"></a>正确汇报 bug 的方法</h3><ul>
<li><p>已知 bug</p>
</li>
<li><p>许多程序，特别是自由软件，会公布一个“已知bug列表”。如果您找到的bug在列表里已经有了，那就不必再报告了，但是如果您认为自己掌握的信息比列表中的丰富，那无论如何也要与程序员联系。您提供的信息可能会使他们更简单地修复bug。</p>
</li>
<li><p>演示给我看</p>
<ul>
<li>最好的方法之一, 因为这样能提供所有的细节</li>
</ul>
</li>
<li><p>越详细越好</p>
<ul>
<li><p>在这种情况下，程序员只要修正错误，而不用去找错误。</p>
<p>特殊情况下，如果有错误消息号，一定要把这些号码告诉程序员。给错误消息编号是因为用语言描述计算机错误常常令人费解。用这种方式告诉您错误的所在是一个最好的办法。</p>
</li>
<li><p>学会看日志</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sf_websphere_stop [8&#x2F;9&#x2F;19 19:16:06:675 CST] 00000001 WsServerStop  E   ADMU3007E: Exception com.ibm.websphere.management.exception.ConnectorException: com.ibm.websphere.management.exception.ConnectorException: ADMC0016E: The system cannot create a SOAP connector to connect to host ubuntu at port 8880.</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>遇事不慌</p>
<ul>
<li><p>我的一个朋友在学校里误删了她所有的Word文件，在找人帮忙之前她重装了Word，又运行了一遍碎片整理程序，这些操作对于恢复文件是毫无益处的，因为这些操作搞乱了磁盘的文件区块。如果她不做任何操作，或许还有一线希望。</p>
<p>他们认为做点什么总比什么都不做强。然而这些在处理计算机软件问题时并不适用。</p>
<p>当程序出毛病的时候，立刻停止正在做的<em>任何操作</em>。学着养成一种条件反射——一旦电脑出了问题，<strong>先不要动</strong>。要想摆脱这个问题，关掉受影响的程序或者重新启动计算机都不好，一个解决问题的好办法是让问题再次产生。程序员们喜欢可以被<strong>重现</strong>的问题，快乐的程序员可以更快而且更有效率的修复bug。</p>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>others</category>
      </categories>
  </entry>
  <entry>
    <title>消息映射</title>
    <url>/2020/06/13/%E6%B6%88%E6%81%AF%E6%98%A0%E5%B0%84/</url>
    <content><![CDATA[<blockquote>
<p>mfc 消息机制概述</p>
</blockquote>
<span id="more"></span>

<h1 id="MFC消息机制"><a href="#MFC消息机制" class="headerlink" title="MFC消息机制"></a>MFC消息机制</h1><h2 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h2><p>在SDK中消息其实非常容易理解，当窗口建立后便会有一个函数（窗口处理函数）开始执行一个消息循环，我们还可以清楚的看到消息处理的脉络。一个<strong>switch case</strong>语句就可以搞定，消息循环直到遇到WM_QUIT消息才会结束，其余的消息均被拦截后调用相应的处理函数。</p>
<p>但在封装了API的MFC中，消息似乎变的有些复杂了，我们看不到熟悉的switch case语句了，取而代之的是一个叫<strong>消息映射</strong>的东西。</p>
<p>为什么MFC要引入消息映射机制，你可以想象一下，在现在的程序开发活动中，你的一个程序是否拥有多个窗体，主窗口就算只有一个，那菜单、工具条、控件这些都是子窗口，那我们需要写多少个switch case，并且还要为每个消息分配一个消息处理函数，这样做是多么的复杂呀。</p>
<p>因此MFC采用了一种新的机制。利用一个<strong>数组</strong>，将窗口消息和相对应的消息处理函数进行映射，你可以理解成这是一个表。这种机制就是消息映射。这张表在窗口基类CWnd定义，派生类的消息映射表如果你没有动作它是空的，也就是说如果你不手工的增加消息处理函数，则当派生窗口接受一个消息时会执行父类的消息处理函数。这样做显然是高效的。</p>
<p>Windows中，消息使用统一的结构体（MSG）来存放信息.</p>
<ul>
<li><p>  hwnd   接收消息的32位窗口句柄。窗口可以是任何类型的屏幕对象, 因为Win32能够维护大多数可视对象的句柄(窗口、对话框、按钮、编辑框等)。 </p>
<pre><code>message   用于区别其他消息的常量值，这些常量可以是Windows单元中预定义的常量，也可以是自定义的常量。 

      wParam   通常是一个与消息有关的常量值，也可能是窗口或控件的句柄。通常用于存储小段信息，如标志 
      lParam   通常是一个指向内存中数据的指针，通常用于存储消息所需的对象。 

      由于wParam,lParam和指针都是32位的，需要时可以强制类型转换。具体表示什么，与message相关，
</code></pre>
</li>
</ul>
<p>  而wParam，lParam是其最灵活的两个变量，为不同的消息类型时，存放数据的含义也不一样。</p>
<pre><code>  time表示产生消息的时间，pt表示产生消息时鼠标的位置。

![img](https://images0.cnblogs.com/blog/78946/201307/24143620-b97541c154d04b2b9d308466f20f93fb.png)
</code></pre>
  <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> uint wparam;<span class="comment">//就是无符号整形</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> lparam;<span class="comment">//就是长整形</span></span><br></pre></td></tr></table></figure>

<h2 id="消息种类"><a href="#消息种类" class="headerlink" title="消息种类"></a>消息种类</h2><h3 id="消息分类"><a href="#消息分类" class="headerlink" title="消息分类"></a>消息分类</h3><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ges7snighkj30f804rjrb.jpg" alt="img"></p>
<ul>
<li><p>1、标准WINDOWS消息：这类消息是以WM_为前缀，不过WM_COMMAND例外。 </p>
<p>窗口消息：即与窗口的内部运作有关的消息，如创建窗口，绘制窗口，销毁窗口等。可以是一般的窗口，也可以是MainFrame,Dialog,控件等。 如：WM_CREATE, WM_PAINT, WM_MOUSEMOVE, WM_CTLCOLOR, WM_HSCROLL等</p>
</li>
<li><p>2、命令消息：命令消息以WM_COMMAND为消息名。在消息中含有命令的标志符ID，以区分具体的命令。由菜单，工具栏等命令接口对象产生。当用户从菜单选中一个命令项目、按下一个快捷键或者点击工具栏上的一个按钮，都将发送WM_COMMAND命令消息。</p>
<p>   LOWORD(wParam)表示菜单项，工具栏按钮或控件的ID；如果是控件, HIWORD(wParam)表示控件消息类型。</p>
<blockquote>
<p><a href="https://stackoverflow.com/questions/28625729/i-cant-understand-why-hiword-macro-uses-0xffff-mask">对于下列宏的解释</a></p>
<p>#define LOWORD(l) ((WORD)(l))</p>
<p>#define HIWORD(l) ((WORD)(((DWORD)(l) &gt;&gt; 16) &amp; 0xFFFF))</p>
</blockquote>
</li>
<li><p><strong>3、控件通知消息</strong></p>
<p>控件通知消息是指这样一种消息，一个窗口内的子控件发生了一些事情，需要通知父窗口。</p>
<p>通知消息只适用于标准的窗口控件如按钮、列表框、组合框、编辑框，以及Windows公共控件如树状视图、列表视图等。例如，单击或双击一个控件、在控件中选择部分文本、操作控件的滚动条都会产生通知消息。她类似于命令消息，当用户与控件窗口交互时，那么控件通知消息就会从控件窗口发送到它的主窗口。但是这种消息的存在并不是为了处理用户命令，而是为了让主窗口能够改变控件，例如加载、显示数据。例如按下一个按钮，他向父窗口发送的消息也可以看作是一个控件通知消息；单击鼠标所产生的消息可以由主窗口直接处理，然后交给控件窗口处理。</p>
<ul>
<li><p>NMHDR</p>
<p>随着控件的种类越来越多，越来越复杂（如列表控件、树控件等），仅仅将wParam，lParam将视为一个32位无符号整数，已经装不下太多信息了。</p>
<p>  为了给父窗口发送更多的信息，微软定义了一个新的WM_NOTIFY消息来扩展WM_COMMAND消息。</p>
<p>  WM_NOTIFY消息仍然使用MSG消息结构，只是此时wParam为控件ID，lParam为一个NMHDR指针，</p>
<p>  不同的控件可以按照规则对NMHDR进行扩充，因此WM_NOTIFY消息传送的信息量可以相当的大。<img src="https://tva1.sinaimg.cn/large/007S8ZIlly1geoq24akk7j30su05ogm5.jpg" alt="截屏2020-05-11 下午7.12.19"></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">NMHDR</span><br><span class="line">&#123;</span><br><span class="line">HWnd hWndFrom ; <span class="comment">//相当于原WM_COMMAND传递方式的lParam</span></span><br><span class="line">UINT idFrom ; <span class="comment">//相当于原WM_COMMAND传递方式的wParam（low-order）</span></span><br><span class="line">UINT code ; <span class="comment">//相当于原WM_COMMAND传递方式的Notify Code(wParam&quot;s high-order)</span></span><br><span class="line">&#125;；</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>4、windwos也允许程序员定义自己的消息，使用SendMessage或PostMessage来发送消息。</p>
</li>
</ul>
<p><strong>或者, windows 消息还可以按以下分类</strong></p>
<ul>
<li><p>(1) 队列消息(Queued Messages)<br>消息会先保存在消息队列中，消息循环会从此队列中取出消息并分发到各窗口处理<br>如：WM_PAINT，WM_TIMER，WM_CREATE，WM_QUIT，以及鼠标，键盘消息等。<br>其中，WM_PAINT，WM_TIMER只有在队列中没有其他消息的时候才会被处理，<br>WM_PAINT消息还会被合并以提高效率。其他所有消息以先进先出（FIFO）的方式被处理。</p>
</li>
<li><p>(2) 非队列消息(NonQueued Messages)<br>消息会绕过系统消息队列和线程消息队列，直接发送到窗口过程进行处理<br>如：WM_ACTIVATE, WM_SETFOCUS, WM_SETCURSOR，WM_WINDOWPOSCHANGED</p>
</li>
</ul>
<h3 id="消息-id"><a href="#消息-id" class="headerlink" title="消息 id"></a>消息 id</h3><ul>
<li><p>系统定义消息ID范围：</p>
<p>[0x0000, 0x03ff]   例：WM_NULL（0x0000）表示空消息  WM_CLOSE（0x0010）表示窗口关闭消息</p>
</li>
<li><p>用户自定义的消息ID范围：</p>
<p>WM_USER: 0x0400-0x7FFF (例：WM_USER+10)<br>WM_APP(winver&gt; 4.0)：0x8000-0xBFFF (例：WM_APP+4)<br>RegisterWindowMessage：0xC000-0xFFFF【用来和其他应用程序通信，为了ID的唯一性，使用::RegisterWindowMessage来得到该范围的消息ID 】</p>
</li>
</ul>
<h2 id="消息处理基本流程"><a href="#消息处理基本流程" class="headerlink" title="消息处理基本流程"></a>消息处理基本流程</h2><h3 id="win32-消息处理流程"><a href="#win32-消息处理流程" class="headerlink" title="win32 消息处理流程"></a>win32 消息处理流程</h3><p>每一个线程都对应有一个消息队列，利用API函数GetMessage从消息队列中获取消息，然后利用TranslateMessage翻译消息（主要是一些键盘消息），再利用DispatchMessage将消息分发给对应的窗口过程函数处理。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="built_in">GetMessage</span>(&amp;msg, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">TranslateMessage</span>(&amp;msg);</span><br><span class="line">    <span class="built_in">DispatchMessage</span>(&amp;msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="mfc-消息处理流程"><a href="#mfc-消息处理流程" class="headerlink" title="mfc 消息处理流程"></a>mfc 消息处理流程</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">BOOL AFXAPI <span class="title">AfxInternalPumpMessage</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        MSG msg;</span><br><span class="line">        ::<span class="built_in">GetMessage</span>(&amp;msg, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">AfxPreTranslateMessage</span>(&amp;msg))</span><br><span class="line">        &#123;</span><br><span class="line">            ::<span class="built_in">TranslateMessage</span>(&amp;msg);</span><br><span class="line">	    ::<span class="built_in">DispatchMessage</span>(&amp;msg);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>增加了类似过滤的函数AfxPreTranslateMessage。该函数会调用CWnd类的PreTranslateMessage函数，函数返回True则消息将不会被处理。我们经常会通过重载CWnd类的PreTranslateMessage来改变MFC的消息控制流程。</p>
<p>AfxWndProc-&gt;WindowProc-&gt;OnWndMsg</p>
<h2 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h2><h3 id="基本方法"><a href="#基本方法" class="headerlink" title="基本方法"></a>基本方法</h3><p>除了一些没有基类的类或CObject的直接派生类外，其他的类都可以自动生成消息映射表。下面的讲解都以CMainFrame为例。消息映射表如下：</p>
<p><strong>C++代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">BEGIN_MESSAGE_MAP</span>(CMainFrame, CFrameWndEx)</span><br><span class="line"></span><br><span class="line"><span class="built_in">ON_WM_CREATE</span>()</span><br><span class="line"></span><br><span class="line"><span class="built_in">ON_COMMAND</span>(ID_VIEW_CUSTOMIZE, &amp;CMainFrame::OnViewCustomize)</span><br><span class="line"></span><br><span class="line"><span class="built_in">ON_REGISTERED_MESSAGE</span>(AFX_WM_CREATETOOLBAR, &amp;CMainFrame:OnToolbarCreateNew)</span><br><span class="line"></span><br><span class="line"><span class="built_in">ON_COMMAND_RANGE</span>(ID_VIEW_APPLOOK_WIN_2000, ID_VIEW_APPLOOK_WINDOWS_7, &amp;CMainFrame::OnApplicationLook)</span><br><span class="line"></span><br><span class="line"><span class="built_in">ON_UPDATE_COMMAND_UI_RANGE</span>(ID_VIEW_APPLOOK_WIN_2000, ID_VIEW_APPLOOK_WINDOWS_7, &amp;CMainFrame::OnUpdateApplicationLook)</span><br><span class="line"></span><br><span class="line"><span class="built_in">ON_WM_SETTINGCHANGE</span>()</span><br><span class="line"></span><br><span class="line"><span class="built_in">END_MESSAGE_MAP</span>()</span><br></pre></td></tr></table></figure>

<p><strong>在BEGIN_MESSAGE_MAG和END_MESSAGE_MAP之间的内容成为消息映射入口项。</strong>消息映射除了在CMainFrame的实线文件中添加消息映射表外，在类的定义文件MainFrame.h中还会添加一个宏调用:</p>
<p>DECLARE_MESSAGE_MAP()</p>
<p>一般这个宏调用写在类定义的结尾处。</p>
<p>不管是自动添加还是手动添加都有三个步骤：</p>
<p><strong>★1、</strong>在类定义中加入消息处理函数的函数声明，注意要以afx_msg打头。</p>
<p>例如MainFrame.h中WM_CREATE的消息处理函数</p>
<p>**声明:**afx_msg int OnCreate(LPCREATESTRUCT lpCreateStruct);</p>
<p><strong>★2、</strong>在类的消息映射表中添加该消息的消息映射入口项。</p>
<p>例如WM_CREATE的消息映射入口项：ON_WM_CREATE()。</p>
<p><strong>★3、</strong>在类的实现中添加消息处理函数的函数实现。</p>
<p>例如，MainFrm.cpp中WM_CREATE的消息处理函数的实现：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">CMainFrame::OnCreate</span><span class="params">(LPCREATESTRUCT lpCreateStruct)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//TODO</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过以上三个步骤以后，WM_CREATE等消息就可以在窗口类中被消息处理函数处理了。</p>
<h3 id="进一步解释"><a href="#进一步解释" class="headerlink" title="进一步解释"></a>进一步解释</h3><ul>
<li><p>在MFC的框架结构下，可以进行消息处理的类的头文件里面都会含有DECLARE_MESSAGE_MAP()宏,这里主要进行消息映射和消息处理函数的声明。可以进行消息处理的类的实现文件里一般都含有如下的结构。 </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">BEGIN_MESSAGE_MAP</span>(CInheritClass, CBaseClass)</span><br><span class="line"><span class="comment">//&#123;&#123;AFX_MSG_MAP(CInheritClass)</span></span><br><span class="line"><span class="comment">//&#125;&#125;AFX_MSG_MAP</span></span><br><span class="line"><span class="built_in">END_MESSAGE_MAP</span>()</span><br></pre></td></tr></table></figure>

<p>DECLARE_MESSAGE_MAP()宏的定义如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DECLARE_MESSAGE_MAP() \</span></span><br><span class="line">　　<span class="keyword">private</span>: \</span><br><span class="line">　　<span class="keyword">static</span> <span class="keyword">const</span> AFX_MSGMAP_ENTRY _messageEntries[]; \</span><br><span class="line">　　<span class="keyword">protected</span>: \</span><br><span class="line">　　<span class="keyword">static</span> AFX_DATA <span class="keyword">const</span> AFX_MSGMAP messageMap; \</span><br><span class="line">　　<span class="function"><span class="keyword">virtual</span> <span class="keyword">const</span> AFX_MSGMAP* <span class="title">GetMessageMap</span><span class="params">()</span> <span class="keyword">const</span></span>; \</span><br></pre></td></tr></table></figure>

<p>其中AFX_MSGMAP_ENTRY和AFX_MSGMAP的定义如下:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">AFX_MSGMAP_ENTRY</span></span></span><br><span class="line"><span class="class">　　&#123;</span></span><br><span class="line">　　　UINT nMessage; <span class="comment">// windows message</span></span><br><span class="line">　　　UINT nCode; <span class="comment">// control code or WM_NOTIFY code</span></span><br><span class="line">　　　UINT nID; <span class="comment">// control ID (or 0 for windows messages)</span></span><br><span class="line">　　　UINT nLastID; <span class="comment">// used for entries specifying a range of control id&#x27;s</span></span><br><span class="line">　　　UINT nSig; <span class="comment">// signature type (action) or pointer to message #</span></span><br><span class="line">　　　AFX_PMSG pfn; <span class="comment">// routine to call (or special value)</span></span><br><span class="line">　　&#125;;</span><br><span class="line">　　<span class="comment">//因此静态数组变量_messageEntries[]实际上定义了一张表，表中的每一项指定了相应的对象所要处理的消息和处理此消息的函数的对应关系，因而这张表也称为消息映射表</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">AFX_MSGMAP</span></span></span><br><span class="line"><span class="class">　　&#123;</span></span><br><span class="line">　　　<span class="keyword">const</span> AFX_MSGMAP* pBaseMap;</span><br><span class="line">　　　<span class="keyword">const</span> AFX_MSGMAP_ENTRY* lpEntries;</span><br><span class="line">　　&#125;;</span><br><span class="line">   <span class="comment">//通过这个链表，使得在某个类中调用基类的的消息处理函数很容易，因此，“父类的消息处理函数是子类的缺省消息处理函数”就顺理成章了。</span></span><br></pre></td></tr></table></figure></li>
<li><p>BEGIN_MESSAGE_MAP()和END_MESSAGE_MAP()它们的定义如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BEGIN_MESSAGE_MAP(theClass, baseClass) \</span></span><br><span class="line">	PTM_WARNING_DISABLE \</span><br><span class="line">	const AFX_MSGMAP* theClass::GetMessageMap() const \</span><br><span class="line">		&#123; <span class="keyword">return</span> <span class="built_in">GetThisMessageMap</span>(); &#125; \</span><br><span class="line">	const AFX_MSGMAP* PASCAL theClass::GetThisMessageMap() \</span><br><span class="line">	&#123; \</span><br><span class="line">		<span class="keyword">typedef</span> theClass ThisClass;						   \</span><br><span class="line">		<span class="keyword">typedef</span> baseClass TheBaseClass;					   \</span><br><span class="line">		<span class="keyword">static</span> <span class="keyword">const</span> AFX_MSGMAP_ENTRY _messageEntries[] =  \</span><br><span class="line">		&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> END_MESSAGE_MAP() \</span></span><br><span class="line">		&#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, AfxSig_end, (AFX_PMSG)<span class="number">0</span> &#125; \</span><br><span class="line">	&#125;; \</span><br><span class="line">		<span class="keyword">static</span> <span class="keyword">const</span> AFX_MSGMAP messageMap = \</span><br><span class="line">		&#123; &amp;TheBaseClass::GetThisMessageMap, &amp;_messageEntries[<span class="number">0</span>] &#125;; \</span><br><span class="line">		<span class="keyword">return</span> &amp;messageMap; \</span><br><span class="line">	&#125;								  \</span><br><span class="line">	PTM_WARNING_RESTORE</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="如何定义自己的消息"><a href="#如何定义自己的消息" class="headerlink" title="如何定义自己的消息"></a>如何定义自己的消息</h2><p>若要重写基类中定义的处理程序，只需在派生类中定义一个具有相同原型的函数，并创建此处理程序的消息映射项。我们通过ClassWizard可以建立大多数窗口消息或自定义的消息，通过ClassWizard可以自动建立消息映射，和消息处理函数的框架，我们只需要把我们要做的事情填空,添加你要做的事情到处理函数。这个非常简单，就不细说了。但是也许我们需要添加一些ClassWizard不支持的窗口消息或自定义消息，那么就需要我们亲自动手建立消息映射和消息处理的框架，通常步骤如下：</p>
<ul>
<li><p>第一步：定义消息。Microsoft推荐用户自定义消息至少是WM_USER+100，因为很多新控件也要使用WM_USER消息。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> WM_MYMESSAGE (WM_USER + 100)</span></span><br></pre></td></tr></table></figure></li>
<li><p>第二步：实现消息处理函数。该函数使用WPRAM和LPARAM参数并返回LPESULT。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">LPESULT <span class="title">CMainFrame::OnMyMessage</span><span class="params">(WPARAM wParam, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 处理用户自定义消息，填空就是要填到这里。</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>第三步：在类头文件的AFX_MSG块中说明消息处理函数：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// &#123;&#123;AFX_MSG(CMainFrame)</span></span><br><span class="line"><span class="function">afx_msg LRESULT <span class="title">OnMyMessage</span><span class="params">(WPARAM wParam, LPARAM lParam)</span></span>;</span><br><span class="line"><span class="comment">//&#125;&#125;AFX_MSG</span></span><br><span class="line"><span class="built_in">DECLARE_MESSAGE_MAP</span>()</span><br></pre></td></tr></table></figure></li>
<li><p>第四步：在用户类的消息块中，使用ON_MESSAGE宏指令将消息映射到消息处理函数中。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ON_MESSAGE</span>( WM_MYMESSAGE, OnMyMessage )</span><br></pre></td></tr></table></figure></li>
</ul>
<p>参考</p>
<p><a href="https://www.cnblogs.com/kekec/p/3210696.html">https://www.cnblogs.com/kekec/p/3210696.html</a></p>
<p><a href="https://www.cnblogs.com/greatverve/archive/2012/11/04/mfc-message.html">https://www.cnblogs.com/greatverve/archive/2012/11/04/mfc-message.html</a></p>
<p><a href="https://blog.csdn.net/zz709196484/article/details/76033033">https://blog.csdn.net/zz709196484/article/details/76033033</a></p>
<p><a href="https://blog.csdn.net/ljd_1986413/article/details/6258604">https://blog.csdn.net/ljd_1986413/article/details/6258604</a></p>
<p><a href="https://blog.csdn.net/lijie45655/article/details/6358779">https://blog.csdn.net/lijie45655/article/details/6358779</a></p>
<p><a href="https://blog.csdn.net/hisinwang/article/details/8045017?utm_medium=distribute.pc_relevant.none-task-blog-OPENSEARCH-2&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-OPENSEARCH-2">https://blog.csdn.net/hisinwang/article/details/8045017?utm_medium=distribute.pc_relevant.none-task-blog-OPENSEARCH-2&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-OPENSEARCH-2</a></p>
<p><a href="https://blog.csdn.net/bcbobo21cn/article/details/69666539">https://blog.csdn.net/bcbobo21cn/article/details/69666539</a></p>
<p><a href="https://blog.csdn.net/gongxifacai_believe/article/details/50988139">https://blog.csdn.net/gongxifacai_believe/article/details/50988139</a></p>
]]></content>
      <categories>
        <category>program</category>
      </categories>
      <tags>
        <tag>kenzo</tag>
      </tags>
  </entry>
  <entry>
    <title>消费主义陷阱</title>
    <url>/2020/10/06/%E6%B6%88%E8%B4%B9%E4%B8%BB%E4%B9%89%E9%99%B7%E9%98%B1/</url>
    <content><![CDATA[<blockquote>
<p>简介</p>
<p>b 站&lt;&lt;无节制消费的元凶&gt;&gt;笔记和观后感</p>
</blockquote>
<span id="more"></span>

<h1 id="第一集"><a href="#第一集" class="headerlink" title="第一集"></a>第一集</h1><blockquote>
<p>谁在诱导我们消费?</p>
</blockquote>
<p>good market 我想买, 但我不知道为何要买</p>
<p>商人希望: 消费者不要想太多, 要和孩子一样</p>
<h2 id="消费与报废的循环"><a href="#消费与报废的循环" class="headerlink" title="消费与报废的循环"></a>消费与报废的循环</h2><p>加州垃圾场: 崭新的电子产品</p>
<h3 id="计划报废"><a href="#计划报废" class="headerlink" title="计划报废"></a>计划报废</h3><blockquote>
<p>20 世纪 20 年代  灯泡 2500h –&gt; 1000h</p>
</blockquote>
<p>故意将产品涉及的更容易被损坏</p>
<p>计划报废: 众所周知的秘密</p>
<p>打印机的墨盒计数器</p>
<p><strong>消费的义务</strong></p>
<blockquote>
<p>冷战</p>
</blockquote>
<p>消费主义: 总有一天市场会饱和–&gt;改变人们的消费心理(斯隆)–&gt;<strong>有序制造不满情绪</strong></p>
<p>斯隆让人们忘记了什么才是重要的, 重新定义了淘汰的概念–&gt;让人感觉新的更好, 买了新的会更好</p>
<blockquote>
<p>六七十年代</p>
</blockquote>
<p>第一阶段消费主义热潮退去</p>
<p>养鸡场主: 费什</p>
<p>公司和个人有消费的权利, 自由市场–&gt;赋予消费者至高无上的权利</p>
<p>worker -&gt; consumer</p>
<blockquote>
<p>八十年代</p>
</blockquote>
<p>邻里比较-&gt;肥皂剧-&gt;信用卡</p>
<p>throw away culture</p>
<p>宜家: 家具–&gt;时尚</p>
<p><strong>apple</strong> : 完美的更新换代</p>
<p>防止用户拆开手机, 维修更难</p>
<h1 id="第二集"><a href="#第二集" class="headerlink" title="第二集"></a>第二集</h1><h2 id="诱导消费–恐惧"><a href="#诱导消费–恐惧" class="headerlink" title="诱导消费–恐惧"></a>诱导消费–恐惧</h2><p>商家: 将消费欲植入潜意识</p>
<p>慢性病, 司他汀药物</p>
<p>利用人们渴望健康的心理</p>
<h1 id="第三集"><a href="#第三集" class="headerlink" title="第三集"></a>第三集</h1><p>动画动漫周边 –&gt; 儿童</p>
]]></content>
      <categories>
        <category>others</category>
      </categories>
      <tags>
        <tag>diary</tag>
      </tags>
  </entry>
  <entry>
    <title>电影</title>
    <url>/2020/04/07/%E7%94%B5%E5%BD%B1/</url>
    <content><![CDATA[<blockquote>
<p>电影!</p>
</blockquote>
<span id="more"></span>

<h2 id="电影"><a href="#电影" class="headerlink" title="电影!"></a>电影!</h2><h3 id="即将要看"><a href="#即将要看" class="headerlink" title="即将要看"></a>即将要看</h3><ul>
<li>1917</li>
<li>美国往事</li>
<li>教父 1 2 3</li>
<li>公民凯恩</li>
<li>提凡尼的早餐</li>
</ul>
<h3 id="电影安利"><a href="#电影安利" class="headerlink" title="电影安利!!!"></a>电影安利!!!</h3><h4 id="经典电影"><a href="#经典电影" class="headerlink" title="经典电影"></a>经典电影</h4><p>超级英雄电影除了守望者和 V 字仇杀队, 其他都是没有内涵的爆米花(可能有遗漏以后会补充</p>
<ul>
<li>肖申克的救赎</li>
<li><strong>霸王别姬</strong>(小哥哥锤爆</li>
<li>阿甘正传(经典, 和霸王别姬异曲同工之妙</li>
<li>这个杀手不太冷(一般</li>
<li>美丽人生(云看电影, 只看过解析</li>
<li><strong>辛德勒的名单</strong>(震撼, whoever saves one life, saves the world entire</li>
<li>盗梦空间(商业化严重</li>
<li>海上钢琴师(云看</li>
<li>三傻大闹宝莱坞(一般, 太闹</li>
<li>楚门的世界(get 不到里面传播学的一些内涵, 不过也不错</li>
<li>熔炉(男主帅</li>
<li>教父1(确实好看)</li>
<li>怦然心动(一般, 适合休闲, 应该和女朋友一起看</li>
<li>蝙蝠侠黑暗骑士(joker 入门</li>
<li><strong>小丑</strong>(joker 进阶</li>
<li><strong>活着</strong>(同霸王别姬</li>
<li>十二怒汉(看的中国翻拍版, 也很好看, 原版也看了, 绝对的经典</li>
<li>鬼子来了(姜文锤爆</li>
<li><strong>让子弹飞</strong>(优秀商业还有内涵</li>
<li><strong>阳光灿烂的日子</strong></li>
<li>罗马假日(云看, 赫本</li>
<li>搏击俱乐部(精分代表</li>
<li>致命 id(精分多样性</li>
<li><strong>禁闭岛</strong>(精分</li>
<li>我不是药神(优秀商业片, 但是抄袭达拉斯</li>
<li>两杆大烟枪(风格独特</li>
<li>飞跃疯人院(思想优秀</li>
<li><strong>v 字仇杀队</strong>(反乌托邦, 当过一阵头像</li>
<li>钢琴家(艺术战争片</li>
<li><strong>拯救大兵瑞恩</strong>(战争片</li>
<li>敦刻尔克(侧面战争片</li>
<li>血战钢锯岭(真正的战争片</li>
<li>本杰明巴顿奇事(没看完</li>
<li><strong>绿皮书</strong>(看的很舒服</li>
<li>致命魔术(一般</li>
<li>七宗罪(云看</li>
<li><strong>沉默的羔羊</strong>(汉尼拔入门, 红龙, 汉尼拔 2 也不错吧, 但是前传太没意思</li>
<li>蝴蝶效应(印象不深, 但还不错</li>
<li>摩登时代(卓别林 nb</li>
<li>城市之光</li>
<li><strong>超脱</strong>(文艺气厚, 但能接受, 很好看</li>
<li>功夫(星爷最好的电影</li>
<li>电锯惊魂 1</li>
<li>记忆碎片(叙事方式独特, 但是观赏性不强</li>
<li>爆裂鼓手(有点忘了, 不过不错</li>
<li>釜山行(男主帅</li>
<li>撞车(命运无常</li>
<li>白头神探1 2 3(经典屎尿屁喜剧</li>
<li>粉红豹(比白头神探略差)</li>
<li>我是传奇(故事讲得不错</li>
<li>甲方乙方(看得舒服</li>
<li>天下无贼(故事讲得好</li>
<li>非诚勿扰</li>
<li>达拉斯买家俱乐部(想讨论的很多但是没走到极致</li>
<li>星际穿越(配乐印象最深</li>
<li>悲惨世界(第一次接触类似歌剧的这种形式, 感觉还不错</li>
<li>帝国的毁灭(元首出处, 有一说一电影拍得还是不错的</li>
</ul>
<h4 id="动画片-单独分区"><a href="#动画片-单独分区" class="headerlink" title="动画片!(单独分区"></a>动画片!(单独分区</h4><ul>
<li>千与千寻(无敌</li>
<li><strong>WALLE</strong>(欧美风的无敌, 最强动画不要争</li>
<li>所有<strong>宫崎骏</strong>电影, 不列举了, 看就完事了</li>
<li>萤火虫之墓(看的很很很难受</li>
<li>你的名字(一般</li>
<li>疯狂动物城</li>
<li>神偷奶爸</li>
<li>疯狂原始人</li>
<li>迪士尼(忘记启蒙是啥了</li>
<li>梦工厂(启蒙是 shrek</li>
<li>猫和老鼠系列锤爆(童年</li>
<li>鬼妈妈(挺有意思的电影</li>
<li>僵尸新娘(画风独特, 故事不错</li>
<li>日漫剧场版, 看个乐就是, 没有特别高的观赏价值</li>
<li>fate 樱线单独拿出来</li>
<li>哪吒(国产最高水平也就这样了, 还行</li>
<li>没了</li>
</ul>
<h4 id="小众电影"><a href="#小众电影" class="headerlink" title="小众电影"></a>小众电影</h4><ul>
<li>恐怖游轮(经典轮回</li>
<li><strong>彗星来的那一夜</strong>(烧脑巅峰</li>
<li>穆赫兰道(对不起我看不懂, 看liu了lan梦的解析我也看不懂</li>
<li><strong>梦之安魂曲</strong>(从头压抑到尾</li>
<li>伊甸湖(别看)</li>
<li>活埋(给点希望然后浇灭</li>
<li>狗镇(没看完, 风格接受不能</li>
<li><strong>迷雾</strong>(克苏鲁风的及其优秀的致郁电影</li>
<li><strong>她</strong>(菲尼克斯主演, 好看</li>
<li><strong>爱</strong>(法国电影, 致郁, 阐明爱情含义</li>
<li>午夜巴黎(文艺气息浓重</li>
<li><strong>守望者</strong>(dc 最佳, 超级英雄天花板</li>
<li>我唾弃你的坟墓(烂片, 别看, 恶心</li>
<li>死亡实验(还行</li>
<li>被嫌弃的松子的一生(云看, 手法很好, 主旨很好, 但是没动力去看</li>
<li>大卫戈尔的一生(一般, 我没有特别大的感触</li>
<li>老无所依(命运无常, 反派优秀</li>
<li>杀生(黄渤, 立意有意思, 可以多看几遍</li>
<li>万能钥匙(云看</li>
<li>发条橙(感触不深, 但是应该感触深, 应该是当时看的不用心</li>
<li>大逃杀(一般, 算是烂片</li>
<li>天生杀人狂(烂片, 无聊</li>
<li>杀死比尔(爽就完了</li>
<li>狩猎(云看</li>
<li>趣味游戏(烂片, 我反正没找到代入感</li>
<li>人类清除计划(思想很好, 电影血烂, 不要看</li>
<li>隔离(一般, 比彗星来的那一夜差很多, 比迷雾也差很多</li>
<li>传染病(蹭热度看的, 一般</li>
<li>我能说 索多玛的120天 我也看过吗…跳着看的, 也就那样</li>
<li>美国精神病人</li>
<li>暗网(黑客和暗网是真的 nb</li>
<li>至爱梵高(形式大于内容</li>
</ul>
]]></content>
      <categories>
        <category>others</category>
      </categories>
      <tags>
        <tag>movie</tag>
      </tags>
  </entry>
  <entry>
    <title>硬件茶谈</title>
    <url>/2021/02/15/%E7%A1%AC%E4%BB%B6%E8%8C%B6%E8%B0%88/</url>
    <content><![CDATA[<blockquote>
<p>简介</p>
</blockquote>
<span id="more"></span>

<h1 id="装机"><a href="#装机" class="headerlink" title="装机"></a>装机</h1><h1 id="windows-系统安装"><a href="#windows-系统安装" class="headerlink" title="windows 系统安装"></a>windows 系统安装</h1><h2 id="iso镜像写入"><a href="#iso镜像写入" class="headerlink" title="iso镜像写入"></a>iso镜像写入</h2><ul>
<li>U盘格式化方式: FAT32, exFAT, NTFS<ul>
<li>exFAT, NTFS 识别有问题</li>
<li>FAT32 单个分区不能超过 32G, 单个文件不能超过 4G</li>
</ul>
</li>
</ul>
<h2 id="PE-便携式操作系统辅助安装"><a href="#PE-便携式操作系统辅助安装" class="headerlink" title="PE 便携式操作系统辅助安装"></a>PE 便携式操作系统辅助安装</h2>]]></content>
      <categories>
        <category>cs</category>
      </categories>
      <tags>
        <tag>hardware</tag>
      </tags>
  </entry>
  <entry>
    <title>算法</title>
    <url>/2020/10/12/%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<blockquote>
<p>算法哈工大 mooc</p>
</blockquote>
<span id="more"></span>

<h1 id="1-枚举"><a href="#1-枚举" class="headerlink" title="1. 枚举"></a>1. 枚举</h1><h2 id="eg完美立方"><a href="#eg完美立方" class="headerlink" title="eg完美立方"></a>eg完美立方</h2><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gjmf40qbg0j30zw0k2tjo.jpg" alt="截屏2020-10-12 下午12.07.08" style="zoom:50%;" />

<p> 四层循环嵌套</p>
<h2 id="eg-生理周期"><a href="#eg-生理周期" class="headerlink" title="eg 生理周期"></a>eg 生理周期</h2><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gjmf8dcke3j311y0fwk53.jpg" alt="截屏2020-10-12 下午12.07.08" style="zoom:50%;" />

<p>d+1 到 21252</p>
<p>(k-p)%23 == 0 &amp;&amp; (k-e)%28 &amp;&amp; (k-i)%33 == 0</p>
<p><strong>跳着试</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 21252</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (cin&gt;&gt;p&gt;&gt;e&gt;&gt;i&gt;&gt;d &amp;&amp; p!=<span class="number">-1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    ++caseNo;</span><br><span class="line">    <span class="keyword">int</span> k;</span><br><span class="line">    <span class="keyword">for</span> (k+d+<span class="number">1</span>; (k-p)%<span class="number">23</span>; ++k);</span><br><span class="line">    <span class="keyword">for</span> (; (k-e)%<span class="number">28</span>; k+=<span class="number">23</span>);</span><br><span class="line">    <span class="keyword">for</span> (; (k-i)%<span class="number">33</span>; k+=<span class="number">23</span>*<span class="number">28</span>);</span><br><span class="line">    cout &lt;&lt; caseNo &lt;&lt; k-d;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="eg-称硬币"><a href="#eg-称硬币" class="headerlink" title="eg 称硬币"></a>eg 称硬币</h2><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gjmfiqxiwlj316g0b6n9g.jpg" alt="截屏2020-10-12 下午12.17.25"></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">char</span> Left[<span class="number">3</span>][<span class="number">7</span>]; <span class="comment">//左天平</span></span><br><span class="line"><span class="keyword">char</span> Right[<span class="number">3</span>][<span class="number">7</span>]; <span class="comment">//右天平</span></span><br><span class="line"><span class="keyword">char</span> result[<span class="number">3</span>][<span class="number">7</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsFake</span><span class="params">(<span class="keyword">char</span> c, <span class="keyword">bool</span> light)</span></span>; <span class="comment">//假设是否正确</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> t;</span><br><span class="line">  cin&gt;&gt;t;</span><br><span class="line">  <span class="keyword">while</span>(t--)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++)</span><br><span class="line">      cin&gt;&gt; Left[i]&gt;&gt;Right[i]&gt;&gt;result[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">char</span> c=<span class="string">&#x27;A&#x27;</span>; c&lt;=<span class="string">&quot;L&quot;</span>; c++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">IsFake</span>(c, <span class="literal">true</span>))</span><br><span class="line">      &#123;</span><br><span class="line">        cout &lt;&lt; c &lt;&lt; <span class="string">&quot;light&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">IsFake</span>(c, <span class="literal">false</span>))</span><br><span class="line">      &#123;</span><br><span class="line">        cout &lt;&lt; c &lt;&lt; <span class="string">&quot;heavy&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsFake</span><span class="params">(<span class="keyword">char</span> c, <span class="keyword">bool</span> light)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i0; i&lt;<span class="number">3</span>; ++i)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">char</span> * pLeft, *pRight;</span><br><span class="line">    <span class="keyword">if</span>(light)</span><br><span class="line">    &#123;</span><br><span class="line">      pLeft = Left[i];</span><br><span class="line">      pRight = Right[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      pLeft = Right[i];</span><br><span class="line">      pRight = Left[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in"><span class="keyword">switch</span></span>(result[i][<span class="number">0</span>])</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;u&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">strchr</span>(pRight, c) == null)</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;e&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">strchr</span>(pLeft, c)||<span class="built_in">strchr</span>(pRight, c))</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;d&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">strchr</span>(pLeft, c) == null)</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="eg-熄灯问题"><a href="#eg-熄灯问题" class="headerlink" title="eg 熄灯问题"></a>eg 熄灯问题</h2><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gjmoyhoig0j316c0k816x.jpg" alt="截屏2020-10-12 下午5.43.53"></p>
<p>给定一种初始状态, 求让灯全灭的方案</p>
<h1 id="2-递归"><a href="#2-递归" class="headerlink" title="2. 递归"></a>2. 递归</h1><h2 id="eg-求阶乘"><a href="#eg-求阶乘" class="headerlink" title="eg 求阶乘"></a>eg 求阶乘</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n == <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> n * <span class="built_in">f</span>(n<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gjrgyap57hj30me0l6agd.jpg" alt="截屏2020-10-16 下午8.54.49"></p>
<h2 id="eg-汉诺塔问题"><a href="#eg-汉诺塔问题" class="headerlink" title="eg 汉诺塔问题"></a>eg 汉诺塔问题</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Hanoi</span><span class="params">(<span class="keyword">int</span> n, cha src, <span class="keyword">char</span> mid, <span class="keyword">char</span> dest)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n==<span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    cout&lt;&lt;src&lt;&lt;<span class="string">&quot;-&gt;&quot;</span>&lt;&lt;dest&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">Hanoi</span>(n<span class="number">-1</span>, src, dest, mid);</span><br><span class="line">  cout&lt;&lt;src&lt;&lt;<span class="string">&quot;-&gt;&quot;</span>&lt;&lt;dest&lt;&lt;endl;</span><br><span class="line">  <span class="built_in">Hanoi</span>(n<span class="number">-1</span>, mid, src, dest);</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="eg-n皇后问题"><a href="#eg-n皇后问题" class="headerlink" title="eg n皇后问题"></a>eg n皇后问题</h2><p>递归替代多重循环</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gjrh7cu3tlj30z00kqk2b.jpg" alt="截屏2020-10-16 下午9.03.31"></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">queePos[<span class="number">100</span>];</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">NQueen</span><span class="params">(<span class="keyword">int</span> k)</span><span class="comment">// 0 - k 行都已经摆好了</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line">  <span class="keyword">if</span>(k == n)</span><br><span class="line">  &#123;<span class="comment">//输出方案</span></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;N; i++)</span><br><span class="line">      cout&lt;&lt;queenPos[i]+<span class="number">1</span>&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;N; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;k; j++)</span><br><span class="line">    	<span class="keyword">if</span>(queenPos[j]==i || <span class="built_in">abs</span>(queenPos[j]-i == <span class="built_in">abs</span>(k-j)))</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span>(j==k)</span><br><span class="line">    &#123;</span><br><span class="line">      queenPos[k] = i;</span><br><span class="line">      <span class="built_in">NQueen</span>(k+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="eg-逆波兰表达式"><a href="#eg-逆波兰表达式" class="headerlink" title="eg 逆波兰表达式"></a>eg 逆波兰表达式</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">exp</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s[<span class="number">20</span>];</span><br><span class="line">  cin &gt;&gt; s;</span><br><span class="line">  <span class="built_in"><span class="keyword">switch</span></span>(s[<span class="number">0</span>])&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>: <span class="keyword">return</span> <span class="built_in">exp</span>()+<span class="built_in">exp</span>();</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>: <span class="keyword">return</span> <span class="built_in">exp</span>()-<span class="built_in">exp</span>();</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>: <span class="keyword">return</span> <span class="built_in">exp</span>()*<span class="built_in">exp</span>();</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>: <span class="keyword">return</span> <span class="built_in">exp</span>()/<span class="built_in">exp</span>();</span><br><span class="line">    <span class="keyword">default</span>: <span class="keyword">return</span> <span class="built_in">atof</span>(s);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="eg-表达式计算"><a href="#eg-表达式计算" class="headerlink" title="eg 表达式计算"></a>eg 表达式计算</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">factor_value</span><span class="params">()</span></span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



































]]></content>
      <categories>
        <category>cs</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>紫勋 rp</title>
    <url>/2020/08/03/%E7%B4%AB%E5%8B%8B%20rp/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="46092594a5aa051ad8584f720784af911c001dd48fc894372249c412573218f1"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>others</category>
      </categories>
      <tags>
        <tag>rp</tag>
      </tags>
  </entry>
  <entry>
    <title>线程问题</title>
    <url>/2020/03/20/%E7%BA%BF%E7%A8%8B%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="线程问题"><a href="#线程问题" class="headerlink" title="线程问题"></a>线程问题</h1><h2 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h2><blockquote>
<p>在每个进程的内存空间中都会有一块特殊的<strong>公共区域</strong>，通常称为堆（内存）。进程内的所有线程都可以访问到该区域，这就是造成问题的潜在原因。</p>
</blockquote>
<span id="more"></span>

<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法:"></a>解决方法:</h3><ul>
<li>局部变量, 分配到线程栈内存中</li>
<li>每个线程各自备份</li>
<li>只读变量</li>
<li><strong>(互斥)锁</strong></li>
<li><a href="%5Bhttps://zh.wikipedia.org/wiki/%E6%AF%94%E8%BE%83%E5%B9%B6%E4%BA%A4%E6%8D%A2%5D(https://zh.wikipedia.org/wiki/%E6%AF%94%E8%BE%83%E5%B9%B6%E4%BA%A4%E6%8D%A2)">CAS compare and swap</a> -&gt; 应对地广人稀 <strong>记录下当前数据的状态</strong> 无锁</li>
</ul>
<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul>
<li><p><a href="https://blog.csdn.net/maomao171314/article/details/41894071">临界区:</a> </p>
<p>临界区是一种轻量级机制，在某一时间内只允许一个线程执行某个给定<strong>代码段</strong>。通常在修改全局数据（如集合类）时会使用临界区。</p>
<p><a href="%5Bhttps://zh.wikipedia.org/wiki/%E8%87%A8%E7%95%8C%E5%8D%80%E6%AE%B5%5D(https://zh.wikipedia.org/wiki/%E8%87%A8%E7%95%8C%E5%8D%80%E6%AE%B5)">没啥用的wiki</a></p>
<p><a href="https://docs.microsoft.com/en-us/windows/win32/sync/critical-section-objects">看不懂的官方文档</a></p>
</li>
</ul>
<h2 id="项目源码"><a href="#项目源码" class="headerlink" title="项目源码"></a>项目源码</h2><h3 id="lock"><a href="#lock" class="headerlink" title="lock"></a>lock</h3><ul>
<li><p>头文件</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//临界区，匹配 Create，Destory，Acquire，Relase接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FWK_EXP</span> <span class="title">CriticalSectionLock</span>//应该是来自 <span class="title">dll</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">CriticalSectionLock</span>(<span class="keyword">void</span>);</span><br><span class="line">	~<span class="built_in">CriticalSectionLock</span>(<span class="keyword">void</span>);</span><br><span class="line">	<span class="comment">//创建临界区</span></span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">Create</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="comment">//销毁临界区</span></span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">Destory</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="comment">//锁定临界区</span></span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">Acquire</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="comment">//解锁临界区</span></span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">Release</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	CRITICAL_SECTION m_lock;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
<li><p>源文件</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;StdAfx.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;framework/CriticalSectionLock.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">CriticalSectionLock::<span class="built_in">CriticalSectionLock</span>(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">	::<span class="built_in">memset</span>(&amp;m_lock,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(CRITICAL_SECTION));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CriticalSectionLock::~<span class="built_in">CriticalSectionLock</span>(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">CriticalSectionLock::Create</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	::<span class="built_in">InitializeCriticalSection</span>(&amp;m_lock);</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">CriticalSectionLock::Destory</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	::<span class="built_in">DeleteCriticalSection</span>(&amp;m_lock);</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">CriticalSectionLock::Acquire</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	::<span class="built_in">EnterCriticalSection</span>(&amp;m_lock);</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">CriticalSectionLock::Release</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	::<span class="built_in">LeaveCriticalSection</span>(&amp;m_lock);</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="guard"><a href="#guard" class="headerlink" title="guard"></a>guard</h3><ul>
<li><p>头文件</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自动加锁 解锁 操作，对所有匹配 Acquire，Release接口的锁，事件有效</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">LOCK</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LockGuard</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">LockGuard</span>(LOCK&amp; lock):_refLock(lock)</span><br><span class="line">	&#123;</span><br><span class="line">		_refLock.<span class="built_in">Acquire</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	~<span class="built_in">LockGuard</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		_refLock.<span class="built_in">Release</span>();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	LOCK&amp; _refLock;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="项目实例"><a href="#项目实例" class="headerlink" title="项目实例"></a>项目实例</h2><ul>
<li>```cpp<br>//VideoPreviewModel.h<br>public:<pre><code>AutoCreateLock&lt;CriticalSectionLock&gt; m_modelLock;
</code></pre>
//AutoCreateLock 是个类模板<br>template<class LOCK><br>class AutoCreateLock: public LOCK<br>{<br>public:<pre><code>AutoCreateLock()
&#123;
    LOCK::Create();
&#125;
~AutoCreateLock()
&#123;
    LOCK::Destory();
&#125;
</code></pre>
};<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- &#96;&#96;&#96;cpp</span><br><span class="line">  &#x2F;&#x2F;VideoPreviewModel.cpp</span><br><span class="line">  bool CVideoPreviewModel::CaptureImageNoTip(UINT index,CString&amp; picPath)</span><br><span class="line">  &#123;</span><br><span class="line">  	if (index)</span><br><span class="line">  	&#123;</span><br><span class="line">  		UINT MaxItems&#x3D;GetScreenItemCount(m_eMaxScrenType);</span><br><span class="line">  		if (index&gt;MaxItems)</span><br><span class="line">  		&#123;</span><br><span class="line">  			return false;</span><br><span class="line">  		&#125;</span><br><span class="line">  	&#125;</span><br><span class="line">    &#x2F;&#x2F;锁定临界区</span><br><span class="line">  	m_modelLock.Acquire();</span><br><span class="line">  	if (m_ItemBuf[index].valid&#x3D;&#x3D;true)</span><br><span class="line">  	&#123;</span><br><span class="line">      &#x2F;&#x2F;解锁临界区</span><br><span class="line">  		m_modelLock.Release();</span><br><span class="line">  		return false;</span><br><span class="line">  	&#125;</span><br><span class="line">  	CString oid&#x3D;m_ItemBuf[index].oid;</span><br><span class="line">  	LONG id&#x3D;m_ItemBuf[index].streamId;</span><br><span class="line">    &#x2F;&#x2F;解锁临界区</span><br><span class="line">  	m_modelLock.Release();</span><br><span class="line">  </span><br><span class="line">  	IMitModel* pMitModel&#x3D;GetInlPtr&lt;IMitModel*&gt;(_T(&quot;MitModel&quot;));</span><br><span class="line">  	if (pMitModel)</span><br><span class="line">  	&#123;</span><br><span class="line">  		MitObjInfo info;</span><br><span class="line">  		if (pMitModel-&gt;GetMitObjInfo(oid,info))</span><br><span class="line">  		&#123;</span><br><span class="line">  			SYSTEMTIME curTime;</span><br><span class="line">  			GetLocalTime(&amp;curTime);</span><br><span class="line">  			CString strFile;</span><br><span class="line">  			strFile.Format(&quot;%4d-%d-%d %d.%d.%d.%d&quot;,curTime.wYear,curTime.wMonth,curTime.wDay,</span><br><span class="line">  				curTime.wHour,curTime.wMinute,curTime.wSecond,curTime.wMilliseconds);</span><br><span class="line">  			strFile&#x3D;FileManager::ValidateFileName(strFile);</span><br><span class="line">  			CString FileName&#x3D;FileManager::ValidateFileName(info.fullname);</span><br><span class="line">  			FileName.Append(_T(&quot;-&quot;));</span><br><span class="line">  			FileName.Append(strFile);</span><br><span class="line">  			FileName.Append(_T(&quot;.bmp&quot;));</span><br><span class="line">  			IVideoPreviewControl* pControl&#x3D;GetInlPtr&lt;IVideoPreviewControl*&gt;(_T(&quot;VideoPreviewControl&quot;));</span><br><span class="line">  			if (pControl)</span><br><span class="line">  			&#123;</span><br><span class="line">  				bool bRt&#x3D;	pControl-&gt;CaptureImage(id,FileName);</span><br><span class="line">  				if (bRt)</span><br><span class="line">  				&#123;</span><br><span class="line">  					picPath&#x3D;FileName;</span><br><span class="line">  				&#125;</span><br><span class="line">  				return bRt;</span><br><span class="line">  			&#125;</span><br><span class="line">  		&#125;</span><br><span class="line">  	&#125;</span><br><span class="line">  	return false;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ul>
<li><p>?guard 和 lock 的区别 为了方便吗?</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">ScreenType <span class="title">CVideoPreviewModel::GetCurScreenType</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">LockGuard&lt;CriticalSectionLock&gt; <span class="title">guard</span><span class="params">(m_modelLock)</span></span>;</span><br><span class="line">  <span class="comment">//构造函数</span></span><br><span class="line">	<span class="keyword">return</span> m_eCurType;</span><br><span class="line">  <span class="comment">//解析函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="volatile-关键字-挥发性"><a href="#volatile-关键字-挥发性" class="headerlink" title="volatile 关键字(挥发性)"></a><a href="https://zhuanlan.zhihu.com/p/62060524">volatile 关键字</a>(挥发性)</h3><p> volatile 可以保证对特殊地址的稳定访问。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">volatile</span> <span class="keyword">int</span> i=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> a = i;</span><br><span class="line"><span class="keyword">int</span> b = i; </span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> a = i;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;i = %d&quot;</span>, a);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 下面汇编语句的作用就是改变内存中 i 的值</span></span><br><span class="line">    <span class="comment">// 但是又不让编译器知道</span></span><br><span class="line">    __asm &#123;</span><br><span class="line">        mov dword ptr [ebp<span class="number">-4</span>], <span class="number">20</span>h<span class="comment">//32</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> b = i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;i = %d&quot;</span>, b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="uml-箭头详解"><a href="#uml-箭头详解" class="headerlink" title="uml 箭头详解"></a><a href="https://www.jianshu.com/p/0820309fb055">uml 箭头详解</a></h3><h3 id="死锁图解"><a href="#死锁图解" class="headerlink" title="死锁图解"></a>死锁图解</h3><p><img src="https://pic2.zhimg.com/80/v2-4423d2645e0d0ef610cf63d34013792d_1440w.jpg" alt="img"></p>
<p><img src="https://pic4.zhimg.com/v2-08a5a1993bfa2468f2a40f7cb9864b67_r.jpg" alt="preview"></p>
]]></content>
      <categories>
        <category>program</category>
      </categories>
      <tags>
        <tag>kenzo</tag>
        <tag>thread</tag>
      </tags>
  </entry>
  <entry>
    <title>视频剪辑</title>
    <url>/2021/01/14/%E8%A7%86%E9%A2%91%E5%89%AA%E8%BE%91/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="1a2d501ac9621041546567376a9a5d4b1faab25b29b4c7050068fe2bcc079b1d"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>program</category>
      </categories>
      <tags>
        <tag>kenzo</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机系统基础</title>
    <url>/2020/05/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<blockquote>
<p>计算机系统基础课程</p>
</blockquote>
<span id="more"></span>

<h2 id="第一章-概述"><a href="#第一章-概述" class="headerlink" title="第一章 概述"></a>第一章 概述</h2><h3 id="1-1-计算机基本工作原理"><a href="#1-1-计算机基本工作原理" class="headerlink" title="1.1 计算机基本工作原理"></a>1.1 计算机基本工作原理</h3><ul>
<li><p>存储程序</p>
</li>
<li><p>冯诺依曼结构 模型机的硬件基本结构</p>
<ul>
<li>主存, 算数逻辑部件 ALU(arithmetic logic unit), 控制部件 CU(control unit) 取出指令, 通用寄存器组 GPRs(general purpose register), 指令寄存器 IR(instruction register), 程序计数器 PC(program counter), 中央处理器 CPU(central processing unit)包括: 控制部件, 运算部件, 各类寄存器</li>
</ul>
</li>
</ul>
<h3 id="1-2-程序的开发与运行"><a href="#1-2-程序的开发与运行" class="headerlink" title="1.2 程序的开发与运行"></a>1.2 程序的开发与运行</h3><ul>
<li>机器语言</li>
<li>汇编语言</li>
<li>高级编程语言</li>
<li>翻译程序<ul>
<li>汇编程序 汇编-&gt;机器</li>
<li>解释程序 源程序逐条-&gt;机器</li>
<li>编译程序 高级语言-&gt;汇编/机器</li>
</ul>
</li>
<li>处理步骤: 预处理-&gt;编译-&gt;汇编-&gt;链接</li>
</ul>
<h3 id="1-3-计算机系统的层次结构"><a href="#1-3-计算机系统的层次结构" class="headerlink" title="1.3 计算机系统的层次结构"></a>1.3 计算机系统的层次结构</h3><ul>
<li><p>指令集体系结构 ISA(instruction set architecture)  </p>
<p>定义了 一台计算机可以执行的所有 指令的集合，每条指令规定了计算机执行什么操作，以及所处理的操作数存放的地址空间和操作数类型 。</p>
</li>
<li><p>微体系结构(microarchitecture) 微体系结构最终是由逻辑电路 (logic circuit) 实现的</p>
</li>
<li><p>应用程序二进制接口 ABI(application binary interface) 用来约束连接器</p>
</li>
<li><p>应用程序编程接口 ABI(application programming interface) 用来约束编译器</p>
<ul>
<li><p>区分</p>
<h4 id="API-Application-Program-Interface"><a href="#API-Application-Program-Interface" class="headerlink" title="API: Application Program Interface"></a>API: Application Program Interface</h4><p>This is the set of public types/variables/functions that you expose from your application/library.</p>
<p>In C/C++ this is what you expose in the header files that you ship with the application.</p>
<h4 id="ABI-Application-Binary-Interface"><a href="#ABI-Application-Binary-Interface" class="headerlink" title="ABI: Application Binary Interface"></a>ABI: Application Binary Interface</h4><p>This is how the compiler builds an application.<br>It defines things (but is not limited to):</p>
<ul>
<li>How parameters are passed to functions (registers/stack).</li>
<li>Who cleans parameters from the stack (caller/callee).</li>
<li>Where the return value is placed for return.</li>
<li>How exceptions propagate.</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="1-4-计算机系统性能评价"><a href="#1-4-计算机系统性能评价" class="headerlink" title="1.4 计算机系统性能评价"></a>1.4 计算机系统性能评价</h3><ul>
<li>CPU 性能:<ul>
<li>时钟周期  CPU 的主脉冲信号， 其宽度称为时钟周期 (clock cycle,  tick,  clock  tick ,  clock ) </li>
<li>时钟频率 clock rate CPU 的圭埂就是 CPU 中的主脉冲信号的时钟频率 (clock rate) ,  是 CPU 时 钟周期的倒数 。</li>
<li>CPI(cycles per instruction) 表示执行一条指令所需的时钟周期数 。</li>
</ul>
</li>
</ul>
<h2 id="第二章-数据的机器级表示与处理"><a href="#第二章-数据的机器级表示与处理" class="headerlink" title="第二章 数据的机器级表示与处理"></a>第二章 数据的机器级表示与处理</h2><h3 id="2-1-数制与编码"><a href="#2-1-数制与编码" class="headerlink" title="2.1 数制与编码"></a>2.1 数制与编码</h3><ul>
<li><p>浮点数 <img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gg3ntcaf7nj309s01i74j.jpg" alt="截屏2020-06-24 下午8.38.16"></p>
<p>其中阶 E 用”移码”来表示, 即对每个阶都加上一个偏置常数(bias), 使得所有阶都是正数</p>
</li>
<li><p>补码</p>
</li>
</ul>
<h3 id="2-2-整数的表示"><a href="#2-2-整数的表示" class="headerlink" title="2.2 整数的表示"></a>2.2 整数的表示</h3><ul>
<li>整型长度 <ul>
<li>short 16 位</li>
<li>int 16 位是 16 位 32 位是 32 位</li>
<li>long 32 位是 32 位 64 位是 64 位</li>
<li>longlong 64 位</li>
</ul>
</li>
</ul>
<h3 id="2-3-浮点数的表示"><a href="#2-3-浮点数的表示" class="headerlink" title="2.3 浮点数的表示"></a>2.3 浮点数的表示</h3><ul>
<li><p>IEEE754 标准</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gg3pebo5y0j30oy09qgo0.jpg" alt="截屏2020-06-24 下午9.33.05"></p>
<p>阶码用移码形式，偏置常数并不是通常 n 位移码所用的 2^n-1^ 而是 2^n-1^-1</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gg4uayrh3dj311o0f2k36.jpg" alt="截屏2020-06-25 下午9.08.20"></p>
</li>
</ul>
<h3 id="2-4-十进制数的表示"><a href="#2-4-十进制数的表示" class="headerlink" title="2.4 十进制数的表示"></a>2.4 十进制数的表示</h3><ul>
<li>bcd 码</li>
</ul>
<h3 id="2-5-非数值数据的编码表示"><a href="#2-5-非数值数据的编码表示" class="headerlink" title="2.5 非数值数据的编码表示"></a>2.5 非数值数据的编码表示</h3><ul>
<li>逻辑值</li>
<li>西文字符 ascii</li>
<li>汉字字符 <ul>
<li>输入码(外码)</li>
<li>内码 </li>
<li>国际码</li>
<li>gb2312 94*94</li>
</ul>
</li>
</ul>
<h3 id="2-6-数据的宽度与存储"><a href="#2-6-数据的宽度与存储" class="headerlink" title="2.6 数据的宽度与存储"></a>2.6 数据的宽度与存储</h3><ul>
<li>字长!=字的长度=16</li>
<li>LSB MSB</li>
<li>大端(高权低位)   小端(低权低位)</li>
</ul>
<h3 id="2-7-数据的基本运算"><a href="#2-7-数据的基本运算" class="headerlink" title="2.7 数据的基本运算"></a>2.7 数据的基本运算</h3><ul>
<li>移位<ul>
<li>逻辑移位 高位补 0</li>
<li>算数移位 高位补符号</li>
</ul>
</li>
<li>整数加减?</li>
<li>整数乘除?</li>
<li>浮点数运算<ul>
<li>对阶 小阶向大阶看齐</li>
<li>尾数加减</li>
<li>尾数规格化</li>
<li>尾数舍入</li>
<li>阶码溢出判断</li>
</ul>
</li>
</ul>
<h2 id="第三章-程序的转换及机器级表示"><a href="#第三章-程序的转换及机器级表示" class="headerlink" title="第三章 程序的转换及机器级表示"></a>第三章 程序的转换及机器级表示</h2><blockquote>
<p>IA-32</p>
</blockquote>
<h3 id="3-1-程序转换概述"><a href="#3-1-程序转换概述" class="headerlink" title="3.1 程序转换概述"></a>3.1 程序转换概述</h3><ul>
<li>汇编</li>
<li>指令集体系结构 ISA(instruction set architecture) 机器语言虚拟机</li>
<li>生成机器代码的过程<ul>
<li>预处理.i, 编译.s, 汇编.o, 链接</li>
</ul>
</li>
<li>AT&amp;T <ul>
<li>存储器操作数形式为＂偏移量（基址寄存器，变址寄存器，比例因子） “</li>
<li>100(%ebx, %esi ,4)  表示存储单元的地址为 EBX 的内容加 ESI 的内容乘以 4 再加 100</li>
</ul>
</li>
</ul>
<h3 id="3-2-IA-32-intel-architecture-32-bit-指令系统概述"><a href="#3-2-IA-32-intel-architecture-32-bit-指令系统概述" class="headerlink" title="3.2 IA-32 (intel architecture 32-bit)指令系统概述"></a>3.2 IA-32 (intel architecture 32-bit)指令系统概述</h3><ul>
<li><p>数据类型及格式</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gg920c0yh1j312o0cc12u.jpg" alt="截屏2020-06-29 下午12.37.08"></p>
</li>
<li><p>寄存器</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gg921zanq2j30qe0kador.jpg" alt="截屏2020-06-29 下午12.38.47"></p>
<ul>
<li>通用寄存器</li>
<li>EFLAGS</li>
<li>段寄存器</li>
<li>浮点寄存器栈</li>
<li>多媒体扩展寄存器组</li>
</ul>
</li>
<li><p>寻址方式</p>
<ul>
<li>立即寻址, 寄存器寻址, 存储器操作数</li>
<li>工作模式<ul>
<li>实地址模式</li>
<li>保护模式</li>
</ul>
</li>
</ul>
</li>
<li><p>机器指令格式</p>
</li>
</ul>
<h3 id="3-3-IA-32-常用指令"><a href="#3-3-IA-32-常用指令" class="headerlink" title="3.3 IA-32 常用指令"></a>3.3 IA-32 常用指令</h3><ul>
<li>CALL RET</li>
</ul>
<h3 id="3-4-c-语言程序的机器级表示"><a href="#3-4-c-语言程序的机器级表示" class="headerlink" title="3.4 c 语言程序的机器级表示"></a>3.4 c 语言程序的机器级表示</h3><ul>
<li>过程调用</li>
<li>栈帧 当前栈帧的范围在帧指针 EBP 和栈指针 ESP 指向区域之间</li>
</ul>
<h3 id="3-5-复杂数据类型的分配和访问"><a href="#3-5-复杂数据类型的分配和访问" class="headerlink" title="3.5 复杂数据类型的分配和访问"></a>3.5 复杂数据类型的分配和访问</h3><ul>
<li>数组?</li>
<li>数据的对齐</li>
</ul>
<h3 id="3-6-越界访问-缓冲区溢出"><a href="#3-6-越界访问-缓冲区溢出" class="headerlink" title="3.6 越界访问 缓冲区溢出"></a>3.6 越界访问 缓冲区溢出</h3><ul>
<li>缓冲区溢出攻击<ul>
<li>应对策略</li>
</ul>
</li>
</ul>
<h2 id="第一次实验"><a href="#第一次实验" class="headerlink" title="第一次实验"></a>第一次实验</h2><h3 id="msb-与-lsb"><a href="#msb-与-lsb" class="headerlink" title="msb 与 lsb"></a>msb 与 lsb</h3><blockquote>
<p><strong>Most Significant Bit， Last（Least） Significant Bit</strong></p>
</blockquote>
<h4 id="大端-小端"><a href="#大端-小端" class="headerlink" title="大端 小端"></a>大端 小端</h4><p>PowerPC系列采用big endian方式存储数据</p>
<p>x86系列则采用little endian方式存储数据</p>
<p>其实big endian是指低地址存放最高有效字节（MSB），而little endian则是低地址存放最低有效字节（LSB）。</p>
<h3 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h3><p>对于float单精度浮点来说，它有32个比特位，其中第一位是符号位，和补码一样，第一位是0说明是正数，是1说明是负数</p>
<p>第二位到第九位是所谓的阶码。为了说明什么是阶码，我们先看这个十进制式子 <img src="https://www.zhihu.com/equation?tex=1.2%5Ctimes10%5E%7B5%7D" alt="[公式]"> ，看见右上角那个5了ma，那个东西就类似我们说的阶码，只不过计算机用的是二进制，所以实际上应该写成 <img src="https://www.zhihu.com/equation?tex=(1.x_%7B1%7Dx_%7B2%7Dx_%7B3%7D...)_%7B(2)%7D%5Ctimes2%5E%7BE%7D" alt="[公式]"> ，这里的E就是我们的阶码了，只不过由于诡异的IEEE754标准，这个E还不是真正的阶码，也就是说浮点数不是简单的1.xxxxx乘上 <img src="https://www.zhihu.com/equation?tex=2%5E%7Bn%7D" alt="[公式]"> ，n是几就左/右移几位。实际上，假如你要表示的数是1.0101，你要把10101乘上 <img src="https://www.zhihu.com/equation?tex=2%5E%7B-4%7D" alt="[公式]"> ，但是计算机中真正的阶码是 <img src="https://www.zhihu.com/equation?tex=(-4)+127" alt="[公式]"> 而不是-4——别问为什么，教科书上写了很多这么做的好处，这里我们只需要知道这一点即可。</p>
<p>剩下的23位是所谓的尾数，也就是 <img src="https://www.zhihu.com/equation?tex=1.x_%7B1%7Dx_%7B2%7Dx_%7B3%7D..." alt="[公式]"> 中的那个 <img src="https://www.zhihu.com/equation?tex=x_%7B1%7Dx_%7B2%7Dx_%7B3%7D..." alt="[公式]"> ，<strong>注意这里的尾数都是以原码表示的</strong>。你问我为什么开头一定是1？就像标准的十进制科学记数法开头一定是个1位数一样，开头为1是二进制的正规化数的“标准”，也就是说，开头为1才是二进制数科学记数法的“标准写法”……总之，记住这里有一个1就好了，到时候我们不要忘记加上。</p>
<p><img src="https://img-blog.csdnimg.cn/20190213233956617.png" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20190213223146755.png" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>cs</category>
      </categories>
      <tags>
        <tag>cs</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机系统结构</title>
    <url>/2021/03/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<blockquote>
<p>简介</p>
</blockquote>
<span id="more"></span>

<h1 id="计算机系统结构"><a href="#计算机系统结构" class="headerlink" title="计算机系统结构"></a>计算机系统结构</h1><h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2>]]></content>
      <categories>
        <category>cs</category>
      </categories>
      <tags>
        <tag>Organization</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次debug</title>
    <url>/2020/05/19/%E8%AE%B0%E4%B8%80%E6%AC%A1debug/</url>
    <content><![CDATA[<blockquote>
<p>记一次关于 wox 的 debug</p>
</blockquote>
<span id="more"></span>

<h2 id="bug-内容"><a href="#bug-内容" class="headerlink" title="bug 内容"></a>bug 内容</h2><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gey6aqidgij30jk04m74q.jpg" alt="6A27F581AC1FF94D4F23828E2591B828"></p>
<p>websearch 插件的 bd , bing 命令无法使用</p>
<h2 id="尝试"><a href="#尝试" class="headerlink" title="尝试"></a>尝试</h2><h3 id="隐藏文件"><a href="#隐藏文件" class="headerlink" title="隐藏文件"></a>隐藏文件</h3><p>找不到文件-&gt;显示隐藏文件?</p>
<p>感觉有点不符合逻辑, 而且测试的时候也和这个没关系</p>
<h3 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h3><p><strong>用户帐户控制</strong>（<em>User Account Control</em>，简写作UAC)是<a href="https://baike.baidu.com/item/%E5%BE%AE%E8%BD%AF">微软</a>公司在其[Windows Vista](<a href="https://baike.baidu.com/item/Windows">https://baike.baidu.com/item/Windows</a> Vista)及更高版本操作系统中采用的一种控制机制。其原理是通知用户是否对应用程序使用<a href="https://baike.baidu.com/item/%E7%A1%AC%E7%9B%98%E9%A9%B1%E5%8A%A8%E5%99%A8/213766">硬盘驱动器</a>和系统文件授权，以达到帮助阻止<a href="https://baike.baidu.com/item/%E6%81%B6%E6%84%8F%E7%A8%8B%E5%BA%8F/411166">恶意程序</a>（有时也称为“<a href="https://baike.baidu.com/item/%E6%81%B6%E6%84%8F%E8%BD%AF%E4%BB%B6/6588650">恶意软件</a>”）损坏系统的效果。</p>
<p>github 上的一个回答</p>
<p>Make sure that you check whether or not Wox is installed in a directory that is UAC protected such as “Program Files”. If it is then you might need to run it as admin by right clicking –&gt; Run as Administrator. Works fine on any of my Windows 10 machines</p>
<p>确保您检查了Wox是否安装在UAC保护的目录中，比如“程序文件”。如果是，那么您可能需要通过右键单击以admin身份运行它——以Administrator身份运行&gt;。在我的任何一台Windows 10电脑上都运行良好</p>
]]></content>
      <categories>
        <category>others</category>
      </categories>
      <tags>
        <tag>bug</tag>
      </tags>
  </entry>
  <entry>
    <title>语言规范-命名法</title>
    <url>/2020/06/06/%E8%AF%AD%E8%A8%80%E8%A7%84%E8%8C%83%E5%91%BD%E5%90%8D%E6%B3%95/</url>
    <content><![CDATA[<blockquote>
<p>匈牙利命名法整理</p>
</blockquote>
<span id="more"></span>

<h2 id="匈牙利命名法"><a href="#匈牙利命名法" class="headerlink" title="匈牙利命名法"></a>匈牙利命名法</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ul>
<li><p>变量: 小写字母开始, 后首字母大写</p>
</li>
<li><p>分类: </p>
<ul>
<li><p>系统命名法</p>
<p>前缀代表变量的实际数据类型</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">lAccountNum<span class="comment">//长整数</span></span><br><span class="line">arru8NumberList<span class="comment">//无符号 8 位整数数组</span></span><br><span class="line">szNAme<span class="comment">//零结束字符串</span></span><br></pre></td></tr></table></figure></li>
<li><p>应用命名法</p>
<p>前缀给出变量目的的提示, 或者说他代表了什么</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">rwPosition<span class="comment">//行</span></span><br><span class="line">usName<span class="comment">//非安全字符串</span></span><br><span class="line">strName<span class="comment">//包含名字的字符串</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="前缀举例"><a href="#前缀举例" class="headerlink" title="前缀举例"></a>前缀举例</h3><ul>
<li><p>a 数组</p>
</li>
<li><p>b 布尔值</p>
</li>
<li><p>by 字节</p>
</li>
<li><p>c Char</p>
</li>
<li><p>cr ColorRef 颜色参考值</p>
</li>
<li><p>cx, cy 坐标差</p>
</li>
<li><p>dw double word</p>
</li>
<li><p>fn 函数</p>
</li>
<li><p>h handle</p>
</li>
<li><p>i int</p>
</li>
<li><p>l long</p>
</li>
<li><p>lp long pointer</p>
</li>
<li><p>m_ 类的成员</p>
</li>
<li><p>p pointer</p>
</li>
<li><p>s string</p>
</li>
<li><p><code>bBusy</code>：<a href="https://zh.wikipedia.org/wiki/%E5%B8%83%E5%B0%94%E5%9E%8B">布尔型</a></p>
</li>
<li><p><code>cApples</code>：项目计数</p>
</li>
<li><p><code>dwLightYears</code>：双<a href="https://zh.wikipedia.org/wiki/%E5%AD%97_(%E8%AE%A1%E7%AE%97%E6%9C%BA)">字</a>（系统）</p>
</li>
<li><p><code>fBusy</code>：<a href="https://zh.wikipedia.org/wiki/%E5%B8%83%E5%B0%94%E5%9E%8B">布尔型</a>或<a href="https://zh.wikipedia.org/wiki/%E6%B5%AE%E7%82%B9%E6%95%B0">浮点型</a></p>
</li>
<li><p><code>nSize</code>：<a href="https://zh.wikipedia.org/wiki/%E6%95%B4%E5%9E%8B">整型</a>（系统）或计数（应用）</p>
</li>
<li><p><code>iSize</code>：<a href="https://zh.wikipedia.org/wiki/%E6%95%B4%E5%9E%8B">整型</a>（系统）或索引（应用）</p>
</li>
<li><p><code>fpPrice</code>：<a href="https://zh.wikipedia.org/wiki/%E6%B5%AE%E7%82%B9%E6%95%B0">浮点数</a></p>
</li>
<li><p><code>dbPi</code>：<a href="https://zh.wikipedia.org/wiki/%E9%9B%99%E5%80%8D%E7%B2%BE%E7%A2%BA%E6%B5%AE%E9%BB%9E%E6%95%B8">双精度浮点数</a>（系统）</p>
</li>
<li><p><code>pFoo</code>：<a href="https://zh.wikipedia.org/wiki/%E6%8C%87%E9%92%88">指针</a></p>
</li>
<li><p><code>rgStudents</code>：数组或范围</p>
</li>
<li><p><code>szLastName</code>：零结束字符串</p>
</li>
<li><p><code>u32Identifier</code>：无符号32位<a href="https://zh.wikipedia.org/wiki/%E6%95%B4%E5%9E%8B">整型</a>（系统）</p>
</li>
<li><p><code>stTime</code>：时钟结构</p>
</li>
<li><p><code>fnFunction</code>：函数名</p>
</li>
</ul>
<h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      <categories>
        <category>language</category>
      </categories>
      <tags>
        <tag>language</tag>
      </tags>
  </entry>
  <entry>
    <title>马原 吴晓明</title>
    <url>/2020/07/23/%E9%A9%AC%E5%8E%9F%E7%BD%91%E8%AF%BE%E5%90%B4%E6%99%93%E6%98%8E/</url>
    <content><![CDATA[<blockquote>
<p>马原网课</p>
</blockquote>
<span id="more"></span>

<h1 id="马克思哲学在现代的意义"><a href="#马克思哲学在现代的意义" class="headerlink" title="马克思哲学在现代的意义"></a>马克思哲学在现代的意义</h1><p>对现代性的有原则高度的批判</p>
<h2 id="现代性"><a href="#现代性" class="headerlink" title="现代性"></a>现代性</h2><p>现代性是指现代世界的本质根据, 这种本质根据有两个基本支柱: 资本 现代形而上学</p>
<ul>
<li><p>资本和现代形而上学的关系:</p>
<p>资本是物质的动因, 是一种欲望, 它要求不断的增值, 不断的获利, 它使现代世界表现为进步和不断发展</p>
<p>现代形而上学使资本的这种欲望得到实现和满足, 因此现代的经济生活主要表现为科学的生产性应用</p>
</li>
</ul>
<h3 id="资本"><a href="#资本" class="headerlink" title="资本"></a>资本</h3><p>资本首先是集中起来的货币</p>
<p>资本基本特征: 增值, 获利, 产生超出自身价值以上的价值</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gh18d442hvj31sq0q019m.jpg" alt="截屏2020-07-23 下午9.32.39"> 物物 w–w</p>
<p>使用价值 w–g–w</p>
<p>商业资本 <strong>g–w–g’,  g’=△g+g</strong></p>
<ul>
<li>进步强制(海德格尔)</li>
</ul>
<h3 id="现代形而上学"><a href="#现代形而上学" class="headerlink" title="现代形而上学"></a>现代形而上学</h3><p>是指现代哲学以及 以现代哲学 为基础的 现代科学和技术</p>
<h4 id="剩余"><a href="#剩余" class="headerlink" title="剩余"></a>剩余</h4><h5 id="绝对剩余价值"><a href="#绝对剩余价值" class="headerlink" title="绝对剩余价值"></a>绝对剩余价值</h5><p>绝对剩余指在必要劳动时间不变的条件下, 通过绝对延长工作日, 从而绝对延长剩余劳动时间生产出来的剩余价值(传统的, 不是现代的)</p>
<h5 id="相对剩余价值"><a href="#相对剩余价值" class="headerlink" title="相对剩余价值"></a>相对剩余价值</h5><p>相对剩余价值的增加不是由于创造出来的价值绝对的增加了, 而是通过缩短必要劳动时间, 把一部分原来的必要劳动时间转化为剩余劳动时间, 从而使剩余价值相对的增加(现代的, 提高生产率, 科学生产力的应用)</p>
<h2 id="有原则高度"><a href="#有原则高度" class="headerlink" title="有原则高度"></a>有原则高度</h2>]]></content>
      <categories>
        <category>others</category>
      </categories>
      <tags>
        <tag>society</tag>
      </tags>
  </entry>
  <entry>
    <title>鸟哥linux</title>
    <url>/2020/12/28/%E9%B8%9F%E5%93%A5/</url>
    <content><![CDATA[<blockquote>
<p>简介</p>
</blockquote>
<span id="more"></span>

<h1 id="0-章-计算机概论"><a href="#0-章-计算机概论" class="headerlink" title="0 章 计算机概论"></a>0 章 计算机概论</h1><ul>
<li>五大单元: 输入单元, 输出单元, 控制单元, 算数逻辑单元, 内存</li>
<li>cpu 架构: RISC CISC</li>
<li>多核心: 运算核心</li>
<li>外频与倍频</li>
<li>南北桥</li>
</ul>
<p>硬盘?</p>
]]></content>
      <categories>
        <category>cs</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>data_structure</title>
    <url>/2019/11/12/data_structure/</url>
    <content><![CDATA[<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><ul>
<li><p>int* a=&var;    int* 作为一个整体表示int类型指针</p>
</li>
<li><p>Typedef 建立一个类型别名的方法很简单，在传统的变量声明表达式里用类型名替代变量名，然后把关键字typedef加在该语句的开头</p>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> Line[<span class="number">81</span>];   </span><br></pre></td></tr></table></figure>

<p>此时Line类型即代表了具有81个元素的字符数组</p>
<span id="more"></span>

<ul>
<li>null用于指针</li>
<li>fwrite 函数</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">size_t</span> <span class="title">fwrite</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *ptr, <span class="keyword">size_t</span> size, <span class="keyword">size_t</span> nmemb, FILE *stream)</span></span></span><br></pre></td></tr></table></figure>

<p>​        ptr – 这是指向要被写入的元素数组的指针。<br>​        size – 这是要被写入的每个元素的大小，以字节为单位。<br>​        nmemb – 这是元素的个数，每个元素的大小为 size 字节。<br>​        stream – 这是指向 FILE 对象的指针，该 FILE 对象指定了一个输出流。</p>
<ul>
<li>fread 函数</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">size_t</span> <span class="title">fread</span><span class="params">(<span class="keyword">void</span> *ptr, <span class="keyword">size_t</span> size, <span class="keyword">size_t</span> nmemb, FILE *stream)</span></span></span><br></pre></td></tr></table></figure>

<p>​        ptr – 这是指向带有最小尺寸 size*nmemb 字节的内存块的指针。<br>​        size – 这是要读取的每个元素的大小，以字节为单位。<br>​        nmemb – 这是元素的个数，每个元素的大小为 size 字节。<br>​        stream – 这是指向 FILE 对象的指针，该 FILE 对象指定了一个输入流</p>
<ul>
<li><p>注释统一为//or/* */，暂定为写在注释对象上方，用//</p>
</li>
<li><p>malloc 函数失败返回null</p>
</li>
<li><p>c++函数内部不能定义函数（但是lamda好像可以）</p>
</li>
<li><p>fopen</p>
<table>
<thead>
<tr>
<th>控制读写权限的字符串（必须指明）</th>
<th align="right"></th>
</tr>
</thead>
<tbody><tr>
<td>打开方式</td>
<td align="right">说明</td>
</tr>
<tr>
<td>“r”</td>
<td align="right">以“只读”方式打开文件。只允许读取，不允许写入。文件必须存在，否则打开失败。</td>
</tr>
<tr>
<td>“w”</td>
<td align="right">以“写入”方式打开文件。如果文件不存在，那么创建一个新文件；如果文件存在，那么清空文件内容（相当于删除原文件，再创建一个新文件）。</td>
</tr>
<tr>
<td>“a”</td>
<td align="right">以“追加”方式打开文件。如果文件不存在，那么创建一个新文件；如果文件存在，那么将写入的数据追加到文件的末尾（文件原有的内容保留）。</td>
</tr>
<tr>
<td>“r+”</td>
<td align="right">以“读写”方式打开文件。既可以读取也可以写入，也就是随意更新文件。文件必须存在，否则打开失败。</td>
</tr>
<tr>
<td>“w+”</td>
<td align="right">以“写入/更新”方式打开文件，相当于<code>w</code>和<code>r+</code>叠加的效果。既可以读取也可以写入，也就是随意更新文件。如果文件不存在，那么创建一个新文件；如果文件存在，那么清空文件内容（相当于删除原文件，再创建一个新文件）。</td>
</tr>
<tr>
<td>“a+”</td>
<td align="right">以“追加/更新”方式打开文件，相当于a和r+叠加的效果。既可以读取也可以写入，也就是随意更新文件。如果文件不存在，那么创建一个新文件；如果文件存在，那么将写入的数据追加到文件的末尾（文件原有的内容保留）。</td>
</tr>
<tr>
<td>控制读写方式的字符串（可以不写）</td>
<td align="right"></td>
</tr>
<tr>
<td>打开方式</td>
<td align="right">说明</td>
</tr>
<tr>
<td>“t”</td>
<td align="right">文本文件。如果不写，默认为<code>&quot;t&quot;</code>。</td>
</tr>
<tr>
<td>“b”</td>
<td align="right">二进制文件。</td>
</tr>
</tbody></table>
</li>
</ul>
<h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><p>vscode格式化：option+shift+f</p>
<p>数据项是数据的最小不可分割单位</p>
<p>数据结构是指数据元素的集合以及它们之间的关系</p>
<p>原地工作算法：算法所需要的辅助空间不随着问题的规模而变化，是一个确定的值。</p>
<p>算法分析的主要任务：时间复杂度和空间复杂度</p>
<ul>
<li>数据</li>
<li>数据元素：数据的基本单位，可由多个数据项组成。如一本书</li>
<li>数据项：是数据的不可分割的最小单位。如书名，作者</li>
<li>数据对象：性质相同的数据元素的集合。   如整数，字母</li>
<li>数据结构：相互之间存在一种或多种特定关系的数据元素的集合。<ul>
<li>包括：集合，线性结构（特点：除了首尾元素，其他元素均只有一个前驱一个后继），树形结构，图状结构或者网状结构</li>
</ul>
</li>
<li>逻辑结构：上述结构都是逻辑结构，即表示数据之间的关系</li>
<li>存储结构（物理结构）：数据结构在计算机中的表示。<ul>
<li>包括：顺序存储结构，链式存储结构</li>
</ul>
</li>
<li>数据类型：一个值的集合和定义在这个值上的一组操作的总称，是一个取值范围。可以分为原子类型和结构类型。</li>
<li>抽象数据类型：一个数学模型以及定义在该模型上的一组操作，仅取决于一组逻辑特性</li>
</ul>
<p><img src="https://img-blog.csdn.net/20180129174653374?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzI2MjMzNjM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p><strong>算法特性</strong></p>
<ol>
<li>输入：一个算法必须有零个或以上输入量。</li>
<li>输出：一个算法应有一个或以上输出量，输出量是算法计算的结果。</li>
<li>确定性：算法的描述必须无歧义，以保证算法的实际执行结果是精确地符合要求或期望，通常要求实际执行结果是确定的。</li>
<li>有穷性：依据图灵的定义，一个演算法是能够被任何<a href="https://zh.wikipedia.org/wiki/%E5%9B%BE%E7%81%B5%E5%AE%8C%E5%85%A8">图灵完备</a>系统模拟的一串运算，而<a href="https://zh.wikipedia.org/wiki/%E5%9C%96%E9%9D%88%E6%A9%9F">图灵机</a>只有有限个状态、有限个输入符号和有限个转移函数（指令）。而一些定义更规定演算法必须在有限个步骤内完成任务。</li>
<li>可行性：又称可行性。能够实现，算法中描述的操作都是可以通过已经实现的基本运算执行有限次来实现。</li>
</ol>
<p><strong>设计要求</strong></p>
<ol>
<li>正确性</li>
<li>可读性</li>
<li>健壮性</li>
<li>效率与低存储量要求</li>
</ol>
<p><a href="https://www.jianshu.com/p/b36477f4ecee">逻辑结构与物理结构</a></p>
<h2 id="第二章-线性表"><a href="#第二章-线性表" class="headerlink" title="第二章 线性表"></a>第二章 线性表</h2><ul>
<li><p>线性表存在与否和是否为空时两个概念</p>
<p>处理方法：头结点；tag标记</p>
<p>一般约定好null的用法</p>
</li>
</ul>
<h3 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h3><h3 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h3><ul>
<li><p>带或不带表头</p>
</li>
<li><p>结构：数据域，指针域</p>
</li>
<li><p>生成单链表：先进先出，先进后出；</p>
</li>
<li><p>插入节点：节点之后（易）节点之前（难）</p>
</li>
<li><h4 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h4><ul>
<li>将元素插入有序表：<ul>
<li>不带表头：区分四种情况（p后，q前 是否为空）</li>
<li>带表头：q一定不为空</li>
</ul>
</li>
<li>指定位置插入：<ul>
<li>计数记到i-1（保证插入当前节点之后</li>
</ul>
</li>
<li>删除元素（记录前驱节点<ul>
<li>指定值（两个指针</li>
<li>指定位置（i-1</li>
</ul>
</li>
<li>两个有序单链表合并</li>
</ul>
</li>
<li><p>循环链表</p>
<ul>
<li>可设尾指针</li>
<li>循环指针指向头结点（如果有的话）</li>
</ul>
</li>
<li><p>双向循环链表</p>
</li>
<li><p>结构：prior指针，next指针，data值域</p>
</li>
<li><p>1、静态链表是用类似于数组方法实现的，是顺序的存储结构，在物理地址上是连续的，而且需要预先分配地址空间大小。所以静态链表的初始长度一般是固定的，在做插入和删除操作时不需要移动元素，仅需修改指针。</p>
<ul>
<li><h5 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h5><ul>
<li>在插入和删除操作时，只需要修改游标，不需要移动元素，从而改进了在顺序存储结构中的插入和删除操作需要移动大量元素的缺点。</li>
</ul>
</li>
<li><h5 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h5><ul>
<li>没有解决连续存储分配(数组)带来的表长难以确定的问题。</li>
<li>失去了顺序存储结构随机存取的特性。</li>
</ul>
</li>
</ul>
<p>2、动态链表是用内存申请函数（malloc/new）动态申请内存的，所以在链表的长度上没有限制。动态链表因为是动态申请内存的，所以每个节点的物理地址不连续，要通过指针来顺序访问。</p>
</li>
<li><p>顺序表存储密度大，链表小（因为有指针</p>
</li>
</ul>
<h2 id="第三章-栈与队列"><a href="#第三章-栈与队列" class="headerlink" title="第三章 栈与队列"></a>第三章 栈与队列</h2><p>插入对应的指针有两种方式，一个是最后一个元素，一个是下一个（空）元素</p>
<h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><ul>
<li>在表尾插入push删除pop</li>
<li>顺序结构：base指针，top指针，stacksize</li>
<li>栈顶：尾部，栈底：首部</li>
<li>LIFO后进先出</li>
<li>分类：静态顺序，动态顺序，链式</li>
<li>应用：括号匹配，表达式求值</li>
<li>链式：栈顶在首节点处</li>
</ul>
<h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><ul>
<li><p>队首：删除的一段</p>
</li>
<li><p>队尾：插入的一段</p>
</li>
<li><p>FIFO先进先出</p>
</li>
<li><h4 id="链式队列"><a href="#链式队列" class="headerlink" title="链式队列"></a>链式队列</h4><ul>
<li>front，rear两个指针，front：队首</li>
<li>如果删除节点后队列为空，需要修改队尾指针</li>
</ul>
</li>
<li><h4 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h4><ul>
<li>顺序循环队列结构：base指针，front，rear下标</li>
<li>假溢出<ul>
<li><ol>
<li>移动元素？开销大</li>
<li>循环表√</li>
</ol>
</li>
<li>方案：取模，留出一个单元不用</li>
</ul>
</li>
</ul>
</li>
<li><p>前中后缀表达式</p>
<p><a href="https://blog.csdn.net/Antineutrino/article/details/6763722">https://blog.csdn.net/Antineutrino/article/details/6763722</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/37467928">https://zhuanlan.zhihu.com/p/37467928</a></p>
</li>
</ul>
<h2 id="第五章-数组与广义表"><a href="#第五章-数组与广义表" class="headerlink" title="第五章 数组与广义表"></a>第五章 数组与广义表</h2><ul>
<li><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><ul>
<li>行序优先，列序优先</li>
<li>数组是一个定长的线性表，所以不能有元素的增加与删除操作✔️</li>
</ul>
</li>
<li><p>特殊矩阵的压缩存储</p>
<ul>
<li><p>对称矩阵</p>
<p>大小：1+2+3+。。。+n</p>
<p>下三角：aij序号：k=i(i-1)/2 + j</p>
<p>​                上三角aij=aji                <img src="/Users/akunda/Desktop/hexo/source/images/%E6%88%AA%E5%B1%8F2019-12-22%E4%B8%8B%E5%8D%888.02.26.png" alt="截屏2019-12-22下午8.02.26"></p>
</li>
<li><p>三对角矩阵</p>
<p>3n-2个元素</p>
<p>k=(3*(i-1)-1)+(j-i+2)=2i+j-2</p>
</li>
</ul>
</li>
<li><p>稀疏矩阵压缩存储</p>
<p>三元组表</p>
<ul>
<li>三元组顺序表（不能随机访问）（插入元素可能导致之后的元素依次向后递推）</li>
<li>结构：<ul>
<li>节点：行i，列j，值e</li>
<li>节点数组，行数，列数，非零元数，mu，nu，tu</li>
</ul>
</li>
</ul>
<p>十字链表</p>
<ul>
<li><p>结构</p>
<ul>
<li>节点：i，j，e，指针：right, down</li>
<li>行头数组，列头数组，mu，nu，tu</li>
</ul>
</li>
<li><p>当某稀疏矩阵经常进行元素的赋值运算时，十字链表比三元组表更适合作为其存储结构。</p>
<p>转置矩阵：保证行序优先，需要排序n^2（方便后续计算）</p>
<p>​                    改进：加两个数组，一个记录转置前每一行有几个元素，一个记录转制后每一行第一个元素在转制后三元组顺序表的位置</p>
</li>
</ul>
<p>稀疏矩阵的三种不同的存储方法，采用哪种方法要看程序具体要实现的功能：<br>如果想完成例如矩阵的转置这样的操作，宜采用三元组顺序表；<br>如果想实现矩阵的乘法这样的功能，宜采用行逻辑链接的顺序表；<br>如果矩阵运算过程中（例如矩阵的加法），需要不断地插入非 0 元素或删除变为 0 的元素，宜采用十字链表法</p>
<p>使用三元组顺序表或十字链表作为稀疏矩阵中的物理结构，对元素的访问形式只能是顺序访问</p>
</li>
<li><h3 id="广义表"><a href="#广义表" class="headerlink" title="广义表"></a>广义表</h3><ul>
<li><p><strong>广义表</strong>一般记作 LS = (a1, a2, ···, an), n是它的长度，ai可以是单个元素(原子)，也可以是广义表(子表)，当广义表非空时，称第一个元素a1为LS的表头，称其余元素组成的表为LS的表尾。注意：表头是元素(可以是原子，也可以是广表)，表尾一定是广义表。[<a href="https://zh.wikipedia.org/wiki/%E5%B9%BF%E4%B9%89%E8%A1%A8#cite_note-1">1]</a>E=(a, E)是一个递归的表。D=(( ),(e),(a,(b,c,d)))是多层次的广义表，长度为3，深度为3。例：((a),a)的表头是(a)，表尾是(a)，((a))的表头是(a)，表尾是( )。</p>
</li>
<li><p>广义表(((a,b,(),c),d),e,((f),g))的长度是____,深度是____？</p>
<p>广义表长度是数第一层括号内的逗号数目可以看到,只有一个元素,就是((a,b,(),c),d),e,((f),g)，所以长度是1，深度是数括号数目,深度是4。</p>
</li>
<li><p>a1表头，（a2，a3.。。。）表尾</p>
<p>当广义表的元素是一个数据元素时，称其为原子，否则称为广义表的子表</p>
</li>
<li><p>广义表允许共享子表</p>
</li>
<li><p>广义表允许递归定义eg：G=(a,G)</p>
</li>
<li><p>链式结构表示</p>
<ul>
<li>原子节点，列表节点（union），tag表示表结点还是原子节点</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="第六章-树与二叉树"><a href="#第六章-树与二叉树" class="headerlink" title="第六章 树与二叉树"></a>第六章 树与二叉树</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul>
<li><p>满二叉树：深度为k，有2<sup>k</sup>-1个节点</p>
</li>
<li><p>完全二叉树（顺序二叉树）：深度为k，编号与满二叉树一致，叶子节点只能在倒数两层上，2<sup>k</sup>-1&gt;n&gt;2<sup>k-1</sup>-1，节点i的双亲节点为log <sub>2</sub> i向下取整</p>
<p>完全二叉树的n<sub>1</sub>=0或1</p>
</li>
</ul>
<h3 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h3><p>n<sub>0</sub>=n<sub>2</sub>+1 根节点+双节点</p>
<p>n=n<sub>0</sub>+n<sub>1</sub>+n<sub>2</sub></p>
<h3 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h3><ul>
<li>顺序存储：非完全二叉树浪费空间</li>
<li>链式存储：二叉，三叉（包括指向双亲节点的指针）</li>
</ul>
<h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><p>先序，中序，后序</p>
<p>递归算法</p>
<p>中序遍历的非递归算法 栈</p>
<p><font color=red>后序遍历非递归算法</font></p>
<p>层序遍历 队列</p>
<ul>
<li><p>确定二叉树</p>
<ul>
<li>带空子树的序列可唯一确定二叉树</li>
<li>中序后序两个序列：<ul>
<li>根据后序找根节点，在中序划分左右子树，然后重复</li>
</ul>
</li>
<li>先序中序两个序列<ul>
<li>根据前序找根节点，在中序划分左右子树，然后重复</li>
</ul>
</li>
</ul>
</li>
<li><p>二叉树深度</p>
</li>
</ul>
<h3 id="线索二叉树"><a href="#线索二叉树" class="headerlink" title="线索二叉树"></a>线索二叉树</h3><ul>
<li>节点增加标志域ltag rtag，ltag=0代表左链域指示左孩子，ltag=1代表前驱，rtag=0右孩子，rtag=1后继节点</li>
<li>原理是将原来的空指针合理利用（2*n-（n-1））</li>
<li>线索添加参照遍历序列</li>
<li>遍历方法：以中序为例：有后继找后继，无后继找右子孙的最左子孙</li>
</ul>
<h3 id="树的结构"><a href="#树的结构" class="headerlink" title="树的结构"></a>树的结构</h3><ul>
<li>双亲表示法/顺序表示法，一个数组存储节点数据和双亲的位置<ul>
<li>结构：<ul>
<li>节点：data，parent位置下标</li>
<li>节点数组，根的位置r，节点数n</li>
</ul>
</li>
</ul>
</li>
<li>孩子表示法/链接表表示法，节点包括数据和孩子的指针（节点数量固定或者非固定）<ul>
<li>结构<ul>
<li>表结点：child，next指针</li>
<li>数组节点：data，firstchild指针</li>
<li>数组，根位置r，节点数n</li>
</ul>
</li>
</ul>
</li>
<li>孩子链表表示法/单链表表示法，有点类似图的邻接表表示法，把弧节点换成孩子节点</li>
<li>带双亲的孩子链表表示法，节点包括了双亲结点的位置</li>
<li>孩子兄弟表示法/二叉链表，节点：左孩子；节点值；右兄弟，相当于转换成二叉树<ul>
<li>结构<ul>
<li>firchild，nextsibling，data</li>
</ul>
</li>
</ul>
</li>
<li>树转化为二叉树：1. 加线：在兄弟之间加线 2. 抹线：把除了左孩子以外其他孩子的线去掉</li>
<li>二叉树转换成树：1. 加线：若p是左孩子，则把p的沿分支所有右孩子与p的双亲相连 2. 抹线：抹掉原来二叉树双亲与右孩子的连线</li>
<li>森林转化为二叉树：1.每棵树转化为二叉树 2. 根节点相连 3. 以第一棵树的根节点为根节点旋转得到目标二叉树</li>
<li>二叉树转化为森林：1.根节点沿右侧所有右孩子连线抹掉，得到多颗二叉树 2.树还原二叉树</li>
<li>树的遍历<ul>
<li>先根遍历（先序）<ul>
<li>访问根节点</li>
<li>访问每一棵子树</li>
</ul>
</li>
<li>后根遍历（相当于转化成二叉树以后的中序遍历）<ul>
<li>遍历子树</li>
<li>访问节点</li>
</ul>
</li>
</ul>
</li>
<li>森林的遍历<ul>
<li>先序遍历<ul>
<li>访问根节点</li>
<li>访问每一棵子树</li>
<li>访问其他树</li>
</ul>
</li>
<li>中序遍历<ul>
<li>遍历子树</li>
<li>访问节点</li>
<li>访问其他树</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="哈弗曼树（最优二叉树）"><a href="#哈弗曼树（最优二叉树）" class="headerlink" title="哈弗曼树（最优二叉树）"></a>哈弗曼树（最优二叉树）</h3><ul>
<li>树的路径长度PL：从root到每一个节点的路径长度之和（完全二叉树最小，单支二叉树最大）</li>
<li>树的带权路径长度WPL：每个叶子的权与该叶子的路径长度之和</li>
<li>在有n个相同叶子的二叉树中，wpl最小的称为<b>最优二叉树</b><ul>
<li>哈弗曼树的特点<ul>
<li>完全二叉树不一定是哈夫曼树</li>
<li>在哈夫曼树中，权值大的节点离根节点比较近</li>
<li>哈弗曼树不唯一，但WPL相同</li>
<li>不存在度为1的节点</li>
</ul>
</li>
<li>哈夫曼算法（构造哈夫曼树）<ul>
<li>选两个根节点权值最小的叶子作为左右子树构成一棵新的二叉树，根节点权值为左右子树权值之和</li>
<li>重复上述过程</li>
</ul>
</li>
<li>哈夫曼编码（最小冗余码）<ul>
<li>统计出现频率，作为叶子节点权值，构造哈弗曼树</li>
<li>左分支标0，右分支标1，形成二进制串</li>
<li>特点：任一编码不是其他编码的前缀</li>
<li>编码从叶子到根，译码从根到叶子</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>31</p>
<p>二叉树的先序遍历序列和后序遍历序列正好相反：高度等于其节点数<a href="https://zhidao.baidu.com/question/746019821869617732.html">https://zhidao.baidu.com/question/746019821869617732.html</a></p>
<h2 id="第七章-图"><a href="#第七章-图" class="headerlink" title="第七章 图"></a>第七章 图</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul>
<li>连通图：任意两个顶点都有路径</li>
<li>连通分量（极大连通图）</li>
<li>生成树（极小连通图）</li>
</ul>
<h3 id="存储结构-1"><a href="#存储结构-1" class="headerlink" title="存储结构"></a>存储结构</h3><ol>
<li><p>数组表示法：一个一维，一个二维，可以加权值</p>
<img src="/images/截屏2019-12-03下午2.35.09.png" alt="截屏2019-12-03下午2.35.09" style="zoom:50%;" /></li>
<li><p>邻接表表示法</p>
<p>邻接表，逆邻接表（出入度）</p>
<img src="/images/截屏2019-12-03下午2.39.20.png" alt="截屏2019-12-03下午2.39.20" style="zoom:50%;" /></li>
<li><p>十字链表表示法（有向图）</p>
<img src="/Users/akunda/Desktop/hexo/source/images/截屏2019-12-03下午2.41.12.png" alt="截屏2019-12-03下午2.41.12" style="zoom:50%;" /></li>
<li><p>邻接多重表（无向图）</p>
<p>每条弧节点包括：标志域（是否被搜索过），该边依附的两个顶点在顶点数组里的位置，指向下一条依附于两个顶点的边的指针</p>
<img src="/images/截屏2019-12-03下午2.42.43.png" alt="截屏2019-12-03下午2.42.43" style="zoom:50%;" /></li>
</ol>
<h3 id="图的遍历"><a href="#图的遍历" class="headerlink" title="图的遍历"></a>图的遍历</h3><ol>
<li><p>深度优先遍历</p>
<p>递归，堆栈</p>
<img src="/images/截屏2019-12-03下午6.25.27.png" alt="截屏2019-12-03下午6.25.27" style="zoom:50%;" /></li>
<li><p>广度优先遍历</p>
</li>
</ol>
  <img src="/images/截屏2019-12-03下午6.30.30.png" alt="截屏2019-12-03下午6.30.30" style="zoom:50%;" />

<h3 id="图的连通性"><a href="#图的连通性" class="headerlink" title="图的连通性"></a>图的连通性</h3><ul>
<li><p>连通分量</p>
</li>
<li><p>生成树，dfs，bfs生成树</p>
</li>
<li><p>有向图强连通图，顺着一遍，逆着一遍，取交集</p>
</li>
<li><p>网的最小生成树</p>
<p>mst性质</p>
<ul>
<li>prim算法    分成u，v-u，把点依次纳入u中<img src="/images/截屏2019-12-10下午8.25.48.png" alt="截屏2019-12-10下午8.25.48" style="zoom:50%;" /></li>
<li>kruskai算法：把边按照从小到大依次加入，保证不形成回路</li>
</ul>
</li>
</ul>
<h3 id="有向无环图（DAG图）"><a href="#有向无环图（DAG图）" class="headerlink" title="有向无环图（DAG图）"></a>有向无环图（DAG图）</h3><ul>
<li>AOV图</li>
<li>拓扑排序（不能有回路DAG）先输出没有入度的<ul>
<li>顶点表示活动，弧表示约束关系</li>
<li>拓扑排序产生计划</li>
</ul>
</li>
<li>AOE网<ul>
<li><p>顶点表示事件，弧表示活动，权表示活动时间</p>
</li>
<li><p>只有一个源点和汇点</p>
</li>
<li><p>关键路径（最长路径）包括的活动叫关键活动</p>
</li>
<li><p>活动最早开始时间e（最长路径，max{前一个活动+弧长}），最晚开始时间l，活动余量l-e，关键活动l-e=0</p>
<p>最早发生时间顺推max最迟逆推min</p>
</li>
<li><p>按拓扑排序计算</p>
</li>
</ul>
</li>
</ul>
<h3 id="最短路径"><a href="#最短路径" class="headerlink" title="最短路径"></a>最短路径</h3><ul>
<li>dijkstra路径长度递增法 O(n<sup>2</sup>) 类似prim算法</li>
<li>floyd算法O(n<sup>3</sup>)</li>
</ul>
<h2 id="第九章-查找"><a href="#第九章-查找" class="headerlink" title="第九章 查找"></a>第九章 查找</h2><p>静态查找表，动态查找表（可以增加删除）</p>
<p>ASL平均查找长度</p>
<p>动态查找表：表结构在查找过程中动态生成。eg二叉排序树，哈希表</p>
<h3 id="顺序表查找（数组）"><a href="#顺序表查找（数组）" class="headerlink" title="顺序表查找（数组）"></a>顺序表查找（数组）</h3><p>哨兵技术：（消除越界判定的开销）把给定查找的元素放在第一个，然后从最后一个开始往前查找，从而保证不会越界</p>
<p>ASL=(n+1)/2</p>
<p>O(n)</p>
<h3 id="折半查找法"><a href="#折半查找法" class="headerlink" title="折半查找法"></a>折半查找法</h3><p>有序顺序表（递增）</p>
<p>low mid high</p>
<ul>
<li><p>判定low&lt;=high</p>
<p>mid=[(low+high)/2]</p>
<p>左边查找：low不变，high=mid-1</p>
<p>右边查找：high不变，low=mid+1</p>
</li>
</ul>
<p>判定树：描述折半查找过程的二叉树，对于某一个节点N，从根节点到N的路径上包含的所有节点，实际上对应于在查找节点N时查找过的所有元素，查找次数=树的层数</p>
<p>O(log(n))</p>
<p>asl=1*1+2*2+3*4+4*8+5*…</p>
<h3 id="分块查找法"><a href="#分块查找法" class="headerlink" title="分块查找法"></a>分块查找法</h3><p>分成很多块，块与块之间有序，块内无序；于是先折半查找，再顺序查找；需要借助索引表（包括每一个块的起始位置和最大值）</p>
<p> ASL’blk=(b+1)/2+(s+1)/2=(s2+2s+n)/(2s)</p>
<p>s=√n效率最高</p>
<h3 id="二叉排序树查找法"><a href="#二叉排序树查找法" class="headerlink" title="二叉排序树查找法"></a>二叉排序树查找法</h3><ul>
<li><p>二叉排序树T：</p>
<ul>
<li><p>T左子树所有节点值小于T根节点的值</p>
<p>T右子树所有节点值大于T根节点的值</p>
<p>T左右子树均为二叉排序树</p>
</li>
</ul>
<p>对二叉排序树进行中序遍历，输出为递增序列</p>
</li>
<li><p>向二叉排序树插入数据</p>
<p>相当于在查找失败时插入</p>
</li>
<li><p>向二叉排序树删除数据</p>
<p>根据删除节点的子树情况分四种讨论（这里删除的节点是双亲节点的左子树）</p>
<ul>
<li><p>左空右空：直接删除</p>
</li>
<li><p>左空右不空：将右子树接到双亲结点的左子树上</p>
</li>
<li><p>左不空右空：将左子树接到双亲结点的左子树上</p>
</li>
<li><p><font color=red>左不空右不空</font>：</p>
<p>P为删除节点，F为双亲结点，S为P最右边的没有右子树的节点</p>
<ul>
<li>法1 P的左子树接到F左，P右子树接到S右</li>
<li>法2 S代替P，S左子树代替原来的S</li>
</ul>
</li>
</ul>
</li>
<li><p>平衡二叉树T（AVL树）：</p>
<p>T左右子树深度只差不超过1</p>
<p>T左右子树均为平衡二叉树</p>
</li>
<li><p>创建平衡二叉树</p>
<p>依次插入元素，如果不平衡了，对最小不平衡子树进行平衡化处理</p>
<ul>
<li>最小不平衡二叉树：以距离新插入节点最近的，平衡因子&gt;1的节点为根的子树</li>
</ul>
<p>根据市区平衡的插入位置分类</p>
<ul>
<li>LL：单向右旋，右旋右靠 <img src="http://img.blog.csdn.net/20170713212023464?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdGlhbnl1eGluZ3h1YW4=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></li>
<li>RR：单向左旋<img src="http://img.blog.csdn.net/20170713213413602?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdGlhbnl1eGluZ3h1YW4=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></li>
<li>LR：左旋右旋<img src="http://img.blog.csdn.net/20170713215031006?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdGlhbnl1eGluZ3h1YW4=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></li>
<li>RL：右旋左旋<img src="http://img.blog.csdn.net/20170713214216909?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdGlhbnl1eGluZ3h1YW4=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></li>
</ul>
<p>LL , LR ，RR ，RL其实已经为我们提供了最后哪个结点作为新的根指明了方向。如 LR 型最后的根结点为原来的根的左孩子的右孩子，RL 型最后的根结点为原来的根的右孩子的左孩子。只要记住这四种情况，可以很快地推导出所有的情况。</p>
<p><a href="https://zhuanlan.zhihu.com/p/56066942">https://zhuanlan.zhihu.com/p/56066942</a></p>
<p>O(log(n))</p>
</li>
</ul>
<h3 id="哈希查找法（散列）"><a href="#哈希查找法（散列）" class="headerlink" title="哈希查找法（散列）"></a>哈希查找法（散列）</h3><ul>
<li><p>哈希函数H(key)将key与在哈希表L中的存储位置对应起来</p>
</li>
<li><p>影响散列查找时间效率的主要因素：与散列表长和散列表中实际元素个数均相关asl=元素个数/哈希表长</p>
</li>
<li><p>构造哈希函数：</p>
<p>基本原则：均匀，避免冲突情况的过度集中，预期哈希查找的时间效率能达到最佳</p>
<p>常见方法：</p>
<ul>
<li><p>直接定址法</p>
<p>H(key)=a*key+b</p>
</li>
<li><p>数字分析法</p>
<p>事先分析关键字的每一位，从中选取若干随机位构成哈希地址</p>
</li>
<li><p>平方取中法</p>
<p>取关键字平方后中间若干位作为哈希地址</p>
</li>
<li><p>折叠法</p>
<p>将关键字分成位数相同的若干个段，将各段求和作为哈希地址</p>
</li>
<li><p>余数法</p>
<p>H(key)=key mod p (p&lt;=m) m为哈希表长，p为质数，或不含小于20质因数的合数</p>
</li>
</ul>
</li>
<li><p>解决冲突的方法</p>
<ul>
<li><p>开放地址法</p>
<p>在H(key)为起点，取一个增量di作为下一个探测的位置</p>
<p>即H<sub>i</sub>(key)=(H(key)+di) mod m   m为哈希表长</p>
<p>di取法</p>
<ul>
<li>线性探测，di取1，2，3……m-1</li>
<li>二次探测，di=1<sup>2</sup>，-1<sup>2</sup>，2<sup>2</sup>，-2<sup>2</sup>……+-k<sup>2</sup>   (k&lt;=m/2)</li>
<li>伪随机探测</li>
</ul>
</li>
<li><p>再哈希法</p>
<p>使用其他哈希函数RH计算关键字key的下一个地址直到不再发生冲突</p>
</li>
<li><p>链地址法</p>
<p>将关键字的同义词存储在各自的单链表中</p>
</li>
<li><p>公共溢出区法</p>
<p>当遇到冲突时，统一将所有同义词存储到“公共溢出区”</p>
</li>
</ul>
</li>
</ul>
<p>哈希的装填因子a=n/m n为关键字数，m为表长</p>
<h2 id="第十章-内部排序（在内存中排序）"><a href="#第十章-内部排序（在内存中排序）" class="headerlink" title="第十章 内部排序（在内存中排序）"></a>第十章 内部排序（在内存中排序）</h2><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><h4 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h4><p>不断插入新的元素使之有序，要确定位置，移动后面元素的位置</p>
<p>不断将要插入的元素放到一个额外存储空间内，使得这个元素的位置空出来，从后往前比较</p>
<ul>
<li><p>最好：正序：比较n-1次，移动0次</p>
</li>
<li><p>最坏：逆序：比较（2+3+4+n）移动（2+1）+（3+1）+++（n+1）</p>
</li>
<li><p>分类</p>
<ul>
<li><p>折半插入排序</p>
<p>顺序查找定位变为折半查找定位，比较次数变成nlogn，移动次数不变</p>
</li>
<li><p>2-路插入排序</p>
<p>需要辅助数组n</p>
<p>首尾视为循环，比较次数不变，平均移动次数减半</p>
</li>
<li><p>表插入排序</p>
<p>运用循环静态链表，不断修改指针域</p>
</li>
<li><p>希尔排序</p>
<p>不停分隔子序列，序列内部直接插入排序，最后整个排序</p>
<p>记第i步序列分成的组数为di，总趟数为m，则</p>
<ul>
<li>dm=1</li>
<li>i&lt;j, di&gt;dj</li>
<li>i&lt;j, i!=j, di,dj最大公约数为1</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="交换排序"><a href="#交换排序" class="headerlink" title="交换排序"></a>交换排序</h3><h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><p>走一趟就确定最后的一个元素</p>
<h4 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4><p>思想：low high，把low放到合适位置，并把以low划分为两个子表</p>
<p>low&lt;high时</p>
<p>​    向左移动high，将首次遇到的小于L[low]的L[high]与L[low]交换</p>
<p>​    向右移动low，将首次遇到的大于L[high]的L[low]与L[high]交换</p>
<p>形成了一棵二叉树，O(n)-O(logn)</p>
<p>辅助空间log(n)（递归啊）</p>
<h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><p>选择最大元素与最后一个元素交换</p>
<h4 id="简单选择排序"><a href="#简单选择排序" class="headerlink" title="简单选择排序"></a>简单选择排序</h4><p>顺序查找确定最大元素</p>
<h4 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h4><ul>
<li><p>堆（大顶堆）：构建完全二叉树</p>
<p>a<sub>i</sub>&gt;=a<sub>2i</sub>, a<sub>i</sub>&gt;=a<sub>2i+1</sub></p>
</li>
<li><p>调整堆：树的左右子树都为堆，但是仅根不满足堆的条件，将其转化为堆</p>
<ul>
<li>思想：将树根与左右子树的最大值交换，重复上述步骤，直到为堆</li>
</ul>
</li>
<li><p>创建堆：从最大序号的非叶子节点开始逐步到根进行调整堆，时间复杂度n</p>
</li>
<li><p>堆排序算法：将L转化为大顶堆，将堆的根与最后一个叶子（L最后一个元素）交换，然后除最后一个叶子重复上述步骤，最后层序遍历得到递增序列</p>
</li>
<li><p>T&lt;O(nlogn)，空间复杂度O(1)</p>
</li>
</ul>
<h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><ul>
<li>思想：先把L（n）看做有n个子表，然后相邻表合并，重复</li>
<li>分析：可以用二叉树表示，T&lt;O(nlogn), S=O(n)</li>
</ul>
<h3 id="基数排序法"><a href="#基数排序法" class="headerlink" title="基数排序法"></a>基数排序法</h3><ul>
<li>多关键字排序<ul>
<li>MSD最主位优先排序，从前往后，需要分割序列</li>
<li>LSD最次位优先排序，从后往前，不需要分割，而且只能用稳定排序算法</li>
</ul>
</li>
<li>基数排序：将每一个位视作一单关键字，采用LSD排序（桶，队列）<ul>
<li>思想：入桶,出桶重复多边</li>
<li>T=2nd, S=基数*元素个数</li>
</ul>
</li>
</ul>
<ul>
<li><p>稳定排序：冒泡排序，插入排序，归并排序，基数排序，希尔排序</p>
</li>
<li><p>不稳定排序：选择排序，快速排序，堆排序</p>
</li>
<li><p><a href="https://www.cnblogs.com/codingmylife/archive/2012/10/21/2732980.html">https://www.cnblogs.com/codingmylife/archive/2012/10/21/2732980.html</a></p>
</li>
<li><table>
<thead>
<tr>
<th>排序方法</th>
<th>最好情况</th>
<th>平均时间</th>
<th>最坏情况</th>
<th>辅助存储</th>
<th>稳定性</th>
</tr>
</thead>
<tbody><tr>
<td>简单排序</td>
<td>O(n)</td>
<td>O(n2)</td>
<td>O(n2)</td>
<td>O(1)</td>
<td>稳定*</td>
</tr>
<tr>
<td>快速排序</td>
<td>O(nlgn )</td>
<td>O(nlgn)</td>
<td>O(n2)有序，变成冒泡排序</td>
<td>O(lgn)</td>
<td>不稳定</td>
</tr>
<tr>
<td>堆排序</td>
<td>O(nlgn )</td>
<td>O(nlgn )</td>
<td>O(nlgn)</td>
<td>O(1)</td>
<td>不稳定</td>
</tr>
<tr>
<td>归并排序</td>
<td>O(nlgn )</td>
<td>O(nlgn )</td>
<td>O(nlgn)</td>
<td>O(n) n</td>
<td>稳定</td>
</tr>
<tr>
<td>基数排序</td>
<td>O(d(n+rd))</td>
<td>O(d(n+rd))</td>
<td>O(d(n+rd))</td>
<td>O(rd)</td>
<td>稳定</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>简单选择</td>
<td>O(n2)</td>
<td>O(n2)</td>
<td>O(n2)</td>
<td>O(1)</td>
<td>不稳定*</td>
</tr>
<tr>
<td>直接插入</td>
<td>O(n)正序，比较n-1，移动0</td>
<td>O(n2)</td>
<td>O(n2)逆序，比较i2-&gt;n求和，移动i3-&gt;n+1求和</td>
<td>O(1)哨兵</td>
<td>稳定</td>
</tr>
<tr>
<td>折半插入</td>
<td>O(nlgn )</td>
<td>O(nlgn )</td>
<td>O(nlgn)</td>
<td>O(1)</td>
<td>稳定</td>
</tr>
</tbody></table>
</li>
<li><p>有序表的合并</p>
<p>最好min{m,n}最坏n+m-1</p>
</li>
</ul>
]]></content>
      <categories>
        <category>cs</category>
      </categories>
      <tags>
        <tag>ds</tag>
      </tags>
  </entry>
  <entry>
    <title>diary</title>
    <url>/2020/05/10/dia/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="36ef0a547f79d84a5629e20b76033c56b9affe3475641a4d0a7e335c909a6c6a"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>others</category>
      </categories>
      <tags>
        <tag>society</tag>
      </tags>
  </entry>
  <entry>
    <title>rp入门</title>
    <url>/2020/06/13/rp%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="6229557b62bdd7a64a737b1e824b117b6ca22172bc8768f9f5ad6889339d9987"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>wow</category>
      </categories>
      <tags>
        <tag>rp</tag>
      </tags>
  </entry>
  <entry>
    <title>python xjb学</title>
    <url>/2019/11/10/xjb%E5%AD%A6python/</url>
    <content><![CDATA[<h2 id="正则表达式（re）"><a href="#正则表达式（re）" class="headerlink" title="正则表达式（re）"></a>正则表达式（re）</h2><p><a href="https://docs.python.org/zh-cn/3/library/re.html">官方文档</a></p>
<ul>
<li>r”string”的内容不会转义</li>
<li></li>
</ul>
<p>re.match 返回匹配对象Match</p>
<p>​    Match.group()可以找匹配对应的内容（在Pattern里加好括号）</p>
<p>​    或者直接以数组形式访问</p>
<p>匹配中文字符的正则表达式： [\u4e00-\u9fa5]</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">idPattern = re.<span class="built_in">compile</span>(</span><br><span class="line">        <span class="string">&quot;员工姓名：([\u4e00-\u9fa5]&#123;2,4&#125;)\s*日期：(\d&#123;1,2&#125;)月(\d&#123;1,2&#125;)日\s*办公地点：([\u4e00-\u9fa5]&#123;2,10&#125;)\s*当日健康状况：([\u4e00-\u9fa5]&#123;2,10&#125;)\s*&quot;</span>)</span><br><span class="line">    idResult = re.match(idPattern, <span class="built_in">id</span>)</span><br><span class="line">    dic[<span class="string">&quot;name&quot;</span>] = idResult.group(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h2><p>os.remove(filepath)</p>
<h2 id="range"><a href="#range" class="headerlink" title="range"></a>range</h2><p>range(3)</p>
<p>0,1,2</p>
<h2 id="numpy"><a href="#numpy" class="headerlink" title="numpy"></a>numpy</h2><ul>
<li><p>ndarray类</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">numpy.array(object, dtype &#x3D; None, copy &#x3D; True, order &#x3D; None, subok &#x3D; False, ndmin &#x3D; 0)</span><br></pre></td></tr></table></figure>

<p>ndarray属性</p>
<table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">ndarray.ndim</td>
<td align="left">秩，即轴的数量或维度的数量</td>
</tr>
<tr>
<td align="left">ndarray.shape</td>
<td align="left">数组的维度，对于矩阵，n 行 m 列</td>
</tr>
<tr>
<td align="left">ndarray.size</td>
<td align="left">数组元素的总个数，相当于 .shape 中 n*m 的值</td>
</tr>
<tr>
<td align="left">ndarray.dtype</td>
<td align="left">ndarray 对象的元素类型</td>
</tr>
<tr>
<td align="left">ndarray.itemsize</td>
<td align="left">ndarray 对象中每个元素的大小，以字节为单位</td>
</tr>
<tr>
<td align="left">ndarray.flags</td>
<td align="left">ndarray 对象的内存信息</td>
</tr>
<tr>
<td align="left">nd,array.real</td>
<td align="left">ndarray元素的实部</td>
</tr>
<tr>
<td align="left">ndarray.imag</td>
<td align="left">ndarray 元素的虚部</td>
</tr>
<tr>
<td align="left">ndarray.data</td>
<td align="left">包含实际数组元素的缓冲区，由于一般通过数组的索引获取元素，所以通常不需要使用这个属性。</td>
</tr>
</tbody></table>
</li>
<li><p>dtype类</p>
</li>
<li><p>创建数组：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">numpy.empty(shape, dtype = <span class="built_in">float</span>, order = <span class="string">&#x27;C&#x27;</span>)</span><br><span class="line">numpy.zeros(shape, dtype = <span class="built_in">float</span>, order = <span class="string">&#x27;C&#x27;</span>)</span><br><span class="line">numpy.ones(shape, dtype = <span class="literal">None</span>, order = <span class="string">&#x27;C&#x27;</span>)</span><br><span class="line">numpy.asarray(a, dtype = <span class="literal">None</span>, order = <span class="literal">None</span>) <span class="comment"># a为输入数组，如列表，元组等</span></span><br><span class="line">numpy.arange(start, stop, step, dtype)</span><br></pre></td></tr></table></figure></li>
<li><p>数组运算（broadcast）</p>
<p><strong>广播的规则:</strong></p>
<ul>
<li>让所有输入数组都向其中形状最长的数组看齐，形状中不足的部分都通过在前面加 1 补齐。</li>
<li>输出数组的形状是输入数组形状的各个维度上的最大值。</li>
<li>如果输入数组的某个维度和输出数组的对应维度的长度相同或者其长度为 1 时，这个数组能够用来计算，否则出错。</li>
<li>当输入数组的某个维度的长度为 1 时，沿着此维度运算时都用此维度上的第一组值。</li>
</ul>
<p><strong>简单理解：</strong>对两个数组，分别比较他们的每一个维度（若其中一个数组没有当前维度则忽略），满足：</p>
<ul>
<li>数组拥有相同形状。</li>
<li>当前维度的值相等。</li>
<li>当前维度的值有一个是 1。</li>
</ul>
<p>若条件不满足，抛出 <strong>“ValueError: frames are not aligned”</strong> 异常。</p>
<p>.T数组转置</p>
<p>最大最小</p>
<p>numpy.amin(array, axis) 用于计算数组中的元素沿指定轴的最小值。</p>
<p>numpy.amax() 用于计算数组中的元素沿指定轴的最大值。</p>
<p>极差np.ptp(a, axis =  0</p>
<p>算数平均值numpy.mean()</p>
<p>加权平均值numpy.average()</p>
<p>标准差</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">std &#x3D; sqrt(mean((x - x.mean())**2))</span><br></pre></td></tr></table></figure>

<p>np.std([1,2,3,4])</p>
<p>方差numpy.var()</p>
</li>
<li><p>部分函数</p>
<ul>
<li><p>numpy.sum</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.array([[<span class="number">1</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">2</span>],</span><br><span class="line">              [<span class="number">9</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">8</span>],</span><br><span class="line">              [<span class="number">3</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">1</span>]])</span><br><span class="line"><span class="built_in">print</span>(np.<span class="built_in">sum</span>(a, axis=<span class="number">0</span>))</span><br><span class="line"><span class="comment"># 为了描述方便,a就表示这个二维数组,np.sum(a, axis=0)的含义是a[0][j],a[1][j],a[2]j对应项相加的结果.即[1,5,5,2]+[9,6,2,8]+[3,7,9,1]=[13,18,16,11].</span></span><br></pre></td></tr></table></figure></li>
<li><p>numpy.tile</p>
<p>说白了，就是把数组沿各个方向复制</p>
<p>比如 a = np.array([0,1,2]),    np.tile(a,(2,1))就是把a先沿x轴（就这样称呼吧）复制1倍，即没有复制，仍然是 [0,1,2]。 再把结果沿y方向复制2倍，即最终得到</p>
<p> array([[0,1,2],</p>
<p>​            [0,1,2]])</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = np.array([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.tile(b, <span class="number">2</span>) <span class="comment">#沿X轴复制2倍</span></span><br><span class="line">array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">       [<span class="number">3</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">4</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.tile(b, (<span class="number">2</span>, <span class="number">1</span>))<span class="comment">#沿X轴复制1倍（相当于没有复制），再沿Y轴复制2倍</span></span><br><span class="line">array([[<span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">       [<span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">       [<span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">       [<span class="number">3</span>, <span class="number">4</span>]])</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="函数自动添加注释"><a href="#函数自动添加注释" class="headerlink" title="函数自动添加注释"></a>函数自动添加注释</h2><p>输入```后再输入回车</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">AddLoglevel</span>(<span class="params">table, pre_number</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    填写db_type</span></span><br><span class="line"><span class="string">    :param table: 单个表格对象</span></span><br><span class="line"><span class="string">    :param pre_number: 上一行的序号</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>##关键词？</p>
<p><strong>编码     # -*- coding: UTF-8 -*-</strong> 或者 <strong># coding=utf-8</strong> </p>
<p><strong>括号</strong>    ()元组 []列表 {}字典</p>
<p><em><strong>global</strong></em>    python如果想使用作用域之外的全局变量，则需要加global前缀。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">5</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>():</span></span><br><span class="line">    <span class="keyword">global</span> a</span><br><span class="line"> <span class="comment">#此处声明，告诉执行引擎：我要用全局变量a，不要整成局部的了！</span></span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;In test func: a = %d&#x27;</span> % a</span><br><span class="line"> </span><br><span class="line">test()</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;Global a = %d&#x27;</span> % a</span><br><span class="line"></span><br><span class="line">In test func: a = <span class="number">1</span></span><br><span class="line">Global a = <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p><strong>pycache文件</strong>    是产生的二进制文件，如果存在，下次执行代码就可不用编译节省时间</p>
<p><strong>extend &amp; append</strong>    extend将参数list里的每一个元素加到列表中，append将整个对象加入列表中</p>
<p><strong>切片</strong>    L[0:3] 取列表L的前三个元素</p>
<p><strong>list slice</strong>    </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">str_object[start_pos:end_pos:step]</span><br></pre></td></tr></table></figure>

<p>切片以start_pos索引（包括）开始（0），以end_pos索引（排除）结束（长度）。step参数用于指定从开始到结束索引要执行的步骤。</p>
<p>Python字符串切片始终遵循以下规则：<strong>s [：i] + s [i：] == s</strong>用于任何索引’i’。</p>
<p><strong>foo&amp;bar&amp;baz</strong>    意思就是张三李四王二麻子    </p>
<h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><ul>
<li><p>访问字典就像访问数组一样 dic[key]</p>
</li>
<li><p>判断字典里是否有key的方法</p>
<ul>
<li>d.has_key(‘name’)</li>
<li>‘name’ in d.keys()</li>
</ul>
</li>
</ul>
<p>##类class</p>
<p>类的方法第一个参数必须是self，self代表当前类的实例，self.__class__指向类</p>
<p>##python目录</p>
<p>###模块module</p>
<p>import module</p>
<p>module.func()</p>
<p>from module import *</p>
<p>func()</p>
<p><strong>命名空间</strong>    dir()函数显示命名空间里所有的变量名字</p>
<p>###包package</p>
<p>文件夹 包含__init__.py</p>
<h2 id="lambda函数"><a href="#lambda函数" class="headerlink" title="lambda函数"></a>lambda函数</h2><p>Python中，lambda函数也叫匿名函数，及即没有具体名称的函数，它允许快速定义单行函数，类似于C语言的宏，可以用在任何需要函数的地方。这区别于def定义的函数。<br>lambda与def的区别：<br>1）def创建的方法是有名称的，而lambda没有。<br>2）lambda会返回一个函数对象，但这个对象不会赋给一个标识符，而def则会把函数对象赋值给一个变量（函数名）。<br>3）lambda只是一个表达式，而def则是一个语句。<br>4）lambda表达式” : “后面，只能有一个表达式，def则可以有多个。<br>5）像if或for或print等语句不能用于lambda中，def可以。<br>6）lambda一般用来定义简单的函数，而def可以定义复杂的函数。<br>6）lambda函数不能共享给别的程序调用，def可以。<br>lambda语法格式：<br>lambda 变量 : 要执行的语句</p>
<h2 id="函数传参（可变不可变参数）"><a href="#函数传参（可变不可变参数）" class="headerlink" title="函数传参（可变不可变参数）"></a>函数传参（可变不可变参数）</h2><p>在 python 中，strings, tuples, 和 numbers 是不可更改的对象，而 list,dict 等则是可以修改的对象。</p>
<ul>
<li><strong>不可变类型：</strong>变量赋值 <strong>a=5</strong> 后再赋值 <strong>a=10</strong>，这里实际是新生成一个 int 值对象 10，再让 a 指向它，而 5 被丢弃，不是改变a的值，相当于新生成了a。</li>
<li><strong>可变类型：</strong>变量赋值 <strong>la=[1,2,3,4]</strong> 后再赋值 <strong>la[2]=5</strong> 则是将 list la 的第三个元素值更改，本身la没有动，只是其内部的一部分值被修改了。</li>
</ul>
<p>python 函数的参数传递：</p>
<ul>
<li><strong>不可变类型：</strong>类似 c++ 的值传递，如 整数、字符串、元组。如fun（a），传递的只是a的值，没有影响a对象本身。比如在 fun（a）内部修改 a 的值，只是修改另一个复制的对象，不会影响 a 本身。</li>
<li><strong>可变类型：</strong>类似 c++ 的引用传递，如 列表，字典。如 fun（la），则是将 la 真正的传过去，修改后fun外部的la也会受影响</li>
</ul>
<h2 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h2><ol>
<li>str float bytes 转 int<br>int()</li>
<li>str int bytes 转 float<br>float()</li>
<li>str float bytes 转 complex<br>complex()</li>
<li>str()可转换任意类型</li>
<li>str 转 bytes<br>bytes()</li>
<li>list() tuple()</li>
</ol>
<h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><ol>
<li>while，for循环可以用else</li>
<li>for i in sequence</li>
<li>多变量循环    for title, mark in zip(titles, marks):<h2 id="GUI"><a href="#GUI" class="headerlink" title="GUI"></a>GUI</h2></li>
</ol>
<h3 id="tkinter包"><a href="#tkinter包" class="headerlink" title="tkinter包"></a>tkinter包</h3><p>说明：py自带包，跨平台，简单<br>直接看文档就行<br>布局：grid pack place<br>master 父组件，frame一般认为master=None<br>StringVar</p>
<h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><h3 id="threading包"><a href="#threading包" class="headerlink" title="threading包"></a>threading包</h3><p>先创建，再start，join主线程，分线程结束后主线程才结束<br><strong>线程安全</strong>    </p>
<h2 id="format函数"><a href="#format函数" class="headerlink" title="format函数"></a>format函数</h2><h2 id="date"><a href="#date" class="headerlink" title="date"></a>date</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式化成2016-03-20 11:45:39形式</span></span><br><span class="line"><span class="built_in">print</span> (time.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, time.localtime()))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式化成Sat Mar 28 22:24:24 2016形式</span></span><br><span class="line"><span class="built_in">print</span> (time.strftime(<span class="string">&quot;%a %b %d %H:%M:%S %Y&quot;</span>, time.localtime()))</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 将格式字符串转换为时间戳</span></span><br><span class="line">a = <span class="string">&quot;Sat Mar 28 22:24:24 2016&quot;</span></span><br><span class="line"><span class="built_in">print</span> (time.mktime(time.strptime(a,<span class="string">&quot;%a %b %d %H:%M:%S %Y&quot;</span>)))</span><br></pre></td></tr></table></figure>



<h2 id="string转time"><a href="#string转time" class="headerlink" title="string转time"></a>string转time</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_ymd</span>(<span class="params">s</span>):</span></span><br><span class="line">    year_s, mon_s, day_s = s.split(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> datetime(<span class="built_in">int</span>(year_s), <span class="built_in">int</span>(mon_s), <span class="built_in">int</span>(day_s))</span><br></pre></td></tr></table></figure>

<h2 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h2><ol>
<li><p>_var    单个下划线是一个Python命名约定，表示这个名称是供内部使用的。 它通常不由Python解释器强制执行，仅仅作为一种对程序员的提示。</p>
</li>
<li><p>Var_    有时候，一个变量的最合适的名称已经被一个关键字所占用。 因此，像class或def这样的名称不能用作Python中的变量名称。 在这种情况下，你可以附加一个下划线来解决命名冲突</p>
</li>
<li><p>__var    双下划线前缀会导致Python解释器重写属性名称，以避免子类中的命名冲突。这也叫做名称修饰（name mangling） - 解释器更改变量的名称，以便在类被扩展的时候不容易产生冲突。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>:</span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">       self.foo = <span class="number">11</span></span><br><span class="line">       self._bar = <span class="number">23</span></span><br><span class="line">       self.__baz = <span class="number">23</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = Test()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">dir</span>(t)<span class="comment">#内置函数</span></span><br><span class="line">[<span class="string">&#x27;_Test__baz&#x27;</span>, <span class="string">&#x27;__class__&#x27;</span>, <span class="string">&#x27;__delattr__&#x27;</span>, <span class="string">&#x27;__dict__&#x27;</span>, <span class="string">&#x27;__dir__&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;__doc__&#x27;</span>, <span class="string">&#x27;__eq__&#x27;</span>, <span class="string">&#x27;__format__&#x27;</span>, <span class="string">&#x27;__ge__&#x27;</span>, <span class="string">&#x27;__getattribute__&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;__gt__&#x27;</span>, <span class="string">&#x27;__hash__&#x27;</span>, <span class="string">&#x27;__init__&#x27;</span>, <span class="string">&#x27;__le__&#x27;</span>, <span class="string">&#x27;__lt__&#x27;</span>, <span class="string">&#x27;__module__&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;__ne__&#x27;</span>, <span class="string">&#x27;__new__&#x27;</span>, <span class="string">&#x27;__reduce__&#x27;</span>, <span class="string">&#x27;__reduce_ex__&#x27;</span>, <span class="string">&#x27;__repr__&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;__setattr__&#x27;</span>, <span class="string">&#x27;__sizeof__&#x27;</span>, <span class="string">&#x27;__str__&#x27;</span>, <span class="string">&#x27;__subclasshook__&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;__weakref__&#x27;</span>, <span class="string">&#x27;_bar&#x27;</span>, <span class="string">&#x27;foo&#x27;</span>]</span><br></pre></td></tr></table></figure></li>
<li><p>__var__    Python保留了有双前导和双末尾下划线的名称，用于特殊用途。 这样的例子有，__init__对象构造函数，或__call__ — 它使得一个对象可以被调用。而且不会有名称修饰</p>
</li>
<li><p>_    单下划线表示一个临时变量。除了用作临时变量之外，“_”是大多数Python REPL中的一个特殊变量，它表示由解释器评估的最近一个表达式的结果。</p>
</li>
</ol>
<h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><p>@符号的意义</p>
<p>就是将一个函数包装起来，而且能保持代码结构不变</p>
<p><a href="https://foofish.net/python-decorator.html">参考网站：装饰器</a></p>
<h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><p>迭代器是一个可以记住遍历的位置的对象。</p>
<p>迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。迭代器只能往前不会后退。</p>
<p>迭代器有两个基本的方法：**iter()**（用于通过列表创建迭代器） 和 **next()**。</p>
<p>字符串，列表或元组对象都可用于创建迭代器：</p>
<h2 id="with"><a href="#with" class="headerlink" title="with"></a>with</h2><p>with 语句适用于对资源进行访问的场合，确保不管使用过程中是否发生异常都会执行必要的“清理”操作，释放资源，比如文件使用后自动关闭／线程中锁的自动获取和释放等。</p>
<p>（１）紧跟with后面的语句被求值后，返回对象的“–enter–()”方法被调用，这个方法的返回值将被赋值给as后面的变量；<br>（２）当with后面的代码块全部被执行完之后，将调用前面返回对象的“–exit–()”方法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;１.txt&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    data = file.read()</span><br></pre></td></tr></table></figure>



<h2 id="字符串格式化"><a href="#字符串格式化" class="headerlink" title="字符串格式化"></a>字符串格式化</h2><ul>
<li><p>%[数据名称][对齐标志][宽度].[精度]类型</p>
<p><img src="https://pic4.zhimg.com/80/v2-2a0bf9157e7c09926093f91636d91177_hd.jpg" alt="img"></p>
</li>
<li><p>str.format函数</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">[[填充字符]对齐方式][符号标志][#][宽度][,][.精度][类型]</span><br><span class="line">&#x27;&#123;:S^+#016,.2f&#125;&#x27;.format(1234)  # 输出&#x27;SSS+1,234.00SSSS&#x27;</span><br></pre></td></tr></table></figure>

<p><img src="https://pic1.zhimg.com/v2-0340c7e376d8215515f33c1c05c388f0_r.jpg" alt="preview"></p>
</li>
<li><p>f-string</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;My name is %s and i&#x27;</span>m %s years old.<span class="string">&#x27; % (name, age)</span></span><br><span class="line"><span class="string">&#x27;</span>My name <span class="keyword">is</span> &#123;&#125; <span class="keyword">and</span> i<span class="string">&#x27;m &#123;&#125; years old.&#x27;</span>.<span class="built_in">format</span>(name, age)</span><br><span class="line"><span class="string">f&#x27;My name is <span class="subst">&#123;name&#125;</span> and i&#x27;</span>m &#123;age&#125; years old.<span class="string">&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="虚拟环境"><a href="#虚拟环境" class="headerlink" title="虚拟环境"></a>虚拟环境</h2><h2 id="神奇的库"><a href="#神奇的库" class="headerlink" title="神奇的库"></a>神奇的库</h2><p>tqdm 进度条</p>
<h2 id="generator-amp-yield"><a href="#generator-amp-yield" class="headerlink" title="generator&amp;yield"></a>generator&amp;yield</h2><h3 id="generator参考网站"><a href="#generator参考网站" class="headerlink" title="generator参考网站"></a>generator<a href="https://www.ibm.com/developerworks/cn/opensource/os-cn-python-yield/index.html">参考网站</a></h3><p>如果列表元素可以按照某种算法推算出来，那我们是否可以在循环的过程中不断推算出后续的元素呢？这样就不必创建完整的list，从而节省大量的空间。在Python中，这种一边循环一边计算的机制，称为生成器：generator。</p>
<p>要创建一个generator，有很多种方法。第一种方法很简单，只要把一个列表生成式的<code>[]</code>改成<code>()</code>，就创建了一个generator：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>L = [x * x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>L</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>g = (x * x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>g</span><br><span class="line">&lt;generator <span class="built_in">object</span> &lt;genexpr&gt; at <span class="number">0x1022ef630</span>&gt;</span><br></pre></td></tr></table></figure>

<p>如果要一个一个打印出来，可以通过<code>next()</code>函数获得generator的下一个返回值（每一次generator的值都会更新）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> g:</span><br><span class="line">	<span class="built_in">print</span>(n)</span><br></pre></td></tr></table></figure>

<h3 id="yield"><a href="#yield" class="headerlink" title="yield"></a>yield</h3><p>通常的for…in…循环中，in后面是一个数组，这个数组就是一个可迭代对象，类似的还有链表，字符串，文件。它可以是mylist = [1, 2, 3]，也可以是mylist = [x*x for x in range(3)]。<br> 它的缺陷是所有数据都在内存中，如果有海量数据的话将会非常耗内存。</p>
<p>生成器是可以迭代的，但只可以读取它一次。因为用的时候才生成。比如 mygenerator = (x*x for x in range(3))，注意这里用到了()，它就不是数组，而上面的例子是[]。</p>
<p>我理解的生成器(generator)能够迭代的关键是它有一个next()方法，工作原理就是通过重复调用next()方法，直到捕获一个异常。可以用上面的mygenerator测试。</p>
<p>带有 yield 的函数不再是一个普通函数，而是一个生成器generator，可用于迭代，工作原理同上。</p>
<p>yield 是一个类似 return 的关键字，迭代一次遇到yield时就返回yield后面(右边)的值。重点是：下一次迭代时，从上一次迭代遇到的yield后面的代码(下一行)开始执行。</p>
<p>简要理解：yield就是 return 返回一个值，并且记住这个返回的位置，下次迭代就从这个位置后(下一行)开始。</p>
<p>带有yield的函数不仅仅只用于for循环中，而且可用于某个函数的参数，只要这个函数的参数允许迭代参数。比如array.extend函数，它的原型是array.extend(iterable)。</p>
<p>send(msg)与next()的区别在于send可以传递参数给yield表达式，这时传递的参数会作为yield表达式的值，而yield的参数是返回给调用者的值。——换句话说，就是send可以强行修改上一个yield表达式值。比如函数中有一个yield赋值，a = yield 5，第一次迭代到这里会返回5，a还没有赋值。第二次迭代时，使用.send(10)，那么，就是强行修改yield 5表达式的值为10，本来是5的，那么a=10</p>
<p>send(msg)与next()都有返回值，它们的返回值是当前迭代遇到yield时，yield后面表达式的值，其实就是当前迭代中yield后面的参数。</p>
<p>第一次调用时必须先next()或send(None)，否则会报错，send后之所以为None是因为这时候没有上一个yield(根据第8条)。可以认为，next()等同于send(None)。</p>
<h2 id="anaconda-mac-pycharm"><a href="#anaconda-mac-pycharm" class="headerlink" title="anaconda+mac+pycharm"></a>anaconda+mac+pycharm</h2><ol>
<li><p>下载安装 anaconda</p>
</li>
<li><p>下载安装 pycharm</p>
</li>
<li><p>anaconda 安装环境, 可以在创建的环境里用 terminal+pip安装难装的库</p>
</li>
<li><p>在pycharm 项目的 interpreter 里选择 anaconda 装好的环境</p>
<p>可以再命令行里用<code>conda env list</code>命令来找到环境目录, 选择 bin 里的 python 就能使用环境啦!</p>
</li>
<li><p>在安装 tensorflow 的时候用了清华的镜像速度快</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line">conda config --set show_channel_urls yes</span><br><span class="line">conda create -n tensorflow python=3.7</span><br><span class="line"><span class="meta">#</span><span class="bash">使用建好的名为 tensorflow 的环境</span></span><br><span class="line">pip install --upgrade --ignore-installed tensorflow</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>language</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>设备列表编辑</title>
    <url>/2020/10/22/%E7%9B%91%E6%8E%A7%E7%82%B9%E8%AE%BE%E5%A4%87%E5%88%97%E8%A1%A8%E7%BC%96%E8%BE%91/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="10626ea4d1de794a36ae6e6e0ef8421e4efcc1b8f9206e745cdfac1e25ef76ec"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>kenzo</category>
      </categories>
      <tags>
        <tag>kenzo</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络英文</title>
    <url>/2020/09/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
    <content><![CDATA[<blockquote>
<p>&lt;计算机网络自顶向下方法&gt;(英文版) 英文缩写和词汇汇总</p>
<p>学会了缩写就学会了计算机网络 —-赛诺</p>
</blockquote>
<span id="more"></span>

<h1 id="MOOC"><a href="#MOOC" class="headerlink" title="MOOC"></a>MOOC</h1><h2 id="第一章-计算机网络与因特网"><a href="#第一章-计算机网络与因特网" class="headerlink" title="第一章 计算机网络与因特网"></a>第一章 计算机网络与因特网</h2><ul>
<li><p>协议: 语法, 语义, 同步</p>
</li>
<li><p>C/S P2P</p>
</li>
<li><p>接入</p>
<ul>
<li>点对点<ul>
<li>电话线 ADSL 非对称数字用户环线（Asymmetrical Digital Subscriber Loop）双绞铜线</li>
<li>电缆/光纤混合线路 HFC (电视)</li>
<li>光纤到户 FTTH</li>
<li>卫星</li>
</ul>
</li>
<li>以太网/wifi<ul>
<li>有线以太网 双绞铜线</li>
<li>wifi</li>
</ul>
</li>
<li>广域无线网</li>
</ul>
</li>
<li><p>网络核心</p>
<ul>
<li>电路交换网络<ul>
<li>分频复用 FDM</li>
<li>时分复用 TDM</li>
</ul>
</li>
<li>报文交换</li>
<li>分组交换<ul>
<li>数据报网络(纯分组交换)</li>
<li>虚电路网络, 需要建立连接</li>
</ul>
</li>
</ul>
</li>
<li><p>时延丢包吞吐量</p>
<p>R 链路带宽, L 分组长度, a 平均分组到达速率</p>
<p>流量强度 L*a/R , 与 1 进行比较</p>
</li>
<li><p>层次化的网络体系</p>
<p>应用层, 传输层, 网络层, 链路层, 物理层</p>
<p>协议三要素: 语法, 语义, 同步</p>
<p>协议栈</p>
</li>
<li><p>网络体系结构模型</p>
<p>OSI: 表示层, 会话层(在应用层之上)</p>
</li>
<li><p>因特网中的复用和分解</p>
<ul>
<li><p>报文复用</p>
<p>时分复用带宽</p>
<p>频分复用带宽</p>
<p>同时使用</p>
</li>
<li><p>报文分解</p>
<ul>
<li> 针对应用进程</li>
</ul>
<p>  套接字: ip 地址 + 端口号 -&gt; 标识进程</p>
<ul>
<li><p>针对电路层</p>
<p>时分复用 –&gt; 统计时分复用(当 A 当前无传输, 就分给下一个)</p>
<p>频分复用</p>
<p>码分多址(CDMA) 码片? 互相之间正交, </p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>数据差错的检查</p>
</li>
</ul>
<h2 id="第二章-应用层"><a href="#第二章-应用层" class="headerlink" title="第二章 应用层"></a>第二章 应用层</h2><ul>
<li><p>应用层协议原理</p>
<p>CS 体系结构 p2p 体系结构 混合体系结构</p>
<p>应用层协议定义了</p>
<ul>
<li>交换报文的类型</li>
<li>各种报文类型的语法</li>
<li>字段的语义</li>
<li>进程何时, 如何发送报文及对报文进行响应</li>
</ul>
<p>服务</p>
</li>
<li><p>万维网与 http</p>
<ul>
<li><p>web 的构成</p>
<p>web 服务器</p>
<p>浏览器</p>
<p>协议: 信息表达的协议(html), 信息传输的协议(http)</p>
</li>
<li><p>web 内容的表达: html</p>
</li>
<li><p>web 内容的传输: tcp 端口 80</p>
<p>http1.0 非持久性链接 RTT * 2 + 文件传输时间</p>
<p>http1.1 持久性连接 分为: 非流水, 流水</p>
</li>
<li><p>http 报文类型</p>
<ul>
<li><p>http 请求报文</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gjb6r2za4aj30y40fuwt9.jpg" alt="截屏2020-10-02 下午6.52.38"></p>
<p>定义的方法:</p>
<ul>
<li>get 向服务器请求指定url 的对象</li>
<li>post 向服务器提交表单数据, 也可以同时请求一个 web 页面</li>
<li>head 返回响应报文, 不包含请求的对象</li>
<li>put 上传的文件放在实体主体字段中, 目标路径由 url 字段标明</li>
<li>delete 删除 url 字段中指定的文件</li>
</ul>
</li>
<li><p>http 响应报文</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gjb6vgjgthj31040e2nc8.jpg" alt="截屏2020-10-02 下午6.57.02"></p>
<p>响应状态码和短语</p>
<ul>
<li>200 ok, 请求成功, 被请求的对象在报文里</li>
<li>301 moved permanently 被请求的对象被移动过, 新的位置在报文中有说明(location)</li>
<li>400 bad request 服务器不懂请求报文</li>
<li>404 not found 服务器上找不到请求的对象</li>
<li>505 http version not supported 服务器不支持请求报文使用的 http 协议版本</li>
</ul>
</li>
<li><p>用户服务器交互 cookie</p>
<ul>
<li>目的: 限制用户的访问, 把内容和用户的身份关联起来</li>
<li>技术组成:<ul>
<li>在 http 响应报文中有一个 cookie 首部行</li>
<li>在 http 请求报文中也有一个 cookie 首部行</li>
<li>在用户的端系统保留了一个 cookie 文件, 由用户浏览器负责管理</li>
<li>在 web 站点有一个后端数据库</li>
</ul>
</li>
<li>私密性</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>smtp</p>
<ul>
<li><p>电子邮件系统的构成</p>
<ul>
<li>用户代理</li>
<li>邮件服务器</li>
<li>smtp 用在邮件服务器之间发送邮件<ul>
<li>客户端将邮件发到服务器</li>
<li>服务器接收和转发邮件</li>
</ul>
</li>
</ul>
</li>
<li><p>tcp 端口 25, 三个阶段: 握手, 报文传输, 结束 命令响应类型: 命令 ascii 码, 响应状态码和短语</p>
</li>
<li><p>邮件传输过程</p>
<ul>
<li>持续链接</li>
<li><strong>7 bit ascii 码</strong></li>
<li>crlf 表示邮件结束</li>
</ul>
</li>
<li><p>报文格式 rfc 822</p>
</li>
<li><p>客户机获取邮件的方法</p>
<ul>
<li><p>pop3 协议</p>
<p>认证, 交互(下载删除-下载保存), 退出</p>
<p>会话无状态</p>
</li>
<li><p>imap 协议</p>
<p>所有邮件保存在服务器上</p>
</li>
<li><p>http 协议</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>域名解析 DNS</p>
<ul>
<li><p>分布式数据库 运行在端到端系统, 使用 udp 端口 53 应用层</p>
</li>
<li><p>过程</p>
</li>
<li><p>ddos 攻击, 重定向攻击</p>
</li>
</ul>
</li>
<li><p>p2p 协议</p>
<ul>
<li>bittorrent</li>
</ul>
</li>
</ul>
<h2 id="第三章-运输层"><a href="#第三章-运输层" class="headerlink" title="第三章 运输层"></a>第三章 运输层</h2><ul>
<li><p>概述</p>
<p>网络层: 不同主机之间的逻辑通信</p>
<p>运输层: 应用进程之间的逻辑通信</p>
</li>
<li><p>端口和套接字</p>
</li>
<li><p>无连接传输UDP</p>
<p>1.多路复用, 多路分解</p>
<p>2.差错检查</p>
<p>数据报结构: </p>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gk46xm0jvyj30lq0botd5.jpg" alt="截屏2020-10-27 下午9.01.21"></p>
</li>
<li><p>可靠数据传输</p>
<ul>
<li><p>概述</p>
<p>可靠传输</p>
<ol>
<li>数据在传输过程中不会丢失</li>
<li>数据在传输过程中不会出错</li>
</ol>
<p>FSM 有限状态机</p>
</li>
<li><p>分类</p>
<ul>
<li><p>可靠信道上的可靠传输</p>
</li>
<li><p>比特受损, 但可按序接受不会丢失</p>
<p><strong>简单停等协议</strong></p>
<ol>
<li>差错检测</li>
<li>ƒ接收方反馈 ACK NAK</li>
</ol>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gk47cwe8paj30m20csdp0.jpg" alt="截屏2020-10-27 下午9.16.04"></p>
<p>问题: ack 和 nak 也会受损</p>
<p>方案: 编号, 对分组进行编号, 便于接收方识别重复分组, 区分连续的两个分组(0, 1)</p>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gk47g4h758j30n40e8tje.jpg" alt=" "></p>
<p>改进: 只有 ack, 给 ack 加上编号, 接收方对最后一个正确收到的分组发送 ack, double ACK = NAK</p>
</li>
<li><p>数据会丢失</p>
<p><strong>实用停等协议</strong></p>
<p>问题: 如何检测丢包</p>
<p>方案: 等待, 计时器</p>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gk47lx65jlj30na0fedrq.jpg" alt="截屏2020-10-27 下午9.24.31"></p>
</li>
<li><p><strong>滑动窗口协议</strong></p>
<p>问题: 解决硬件利用率不高的问题</p>
<p>方案: 允许发送方发送多个分组而无需等待确认</p>
<ol>
<li>必须增大序号范围</li>
<li>发送方和接收方需要对分组缓存</li>
</ol>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gk47v2aecsj30na06aadl.jpg" alt="截屏2020-10-27 下午9.33.30"></p>
<p>分组丢失了怎么办?</p>
<ul>
<li><p><strong>GBN</strong> <strong>协议</strong>: 其后的分组全部重传</p>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gk47znelcfj30oa0fgqh0.jpg" alt="截屏2020-10-27 下午9.37.56"></p>
</li>
<li><p><strong>SR</strong> <strong>协议</strong>: 仅重传该分组</p>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gk481a17asj30n60f0tl4.jpg" alt="截屏2020-10-27 下午9.39.31"></p>
</li>
<li><p>序号问题</p>
<p>发送窗口的序号和接受窗口的序号不能重复</p>
<p>两个窗口的序号均在 2^k^-1 内, 发送方+接收方 &lt;= 2^k^</p>
<p>GBN : 发送方&lt; 2^k^-1 接收方 = 1</p>
<p>SR: 接收方 = 发送方 &lt;= 2^k-1^</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>TCP</p>
<ul>
<li><p>报文首部结构</p>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gk487oge6jj30se0byq99.jpg" alt="截屏2020-10-27 下午9.45.39"></p>
<p>序号: 对字节流的编号, 在报文段数据中第一个字节在字节流中的编号</p>
<p>确认号: 期望号(ACK=1), 期待得到的下一个字节的 seq</p>
<p>窗口: 流量监测</p>
<p>紧急指针: URG, PSH 开关</p>
<p>tcp 没有规定如何处理乱序报文段, 由实现者实现</p>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gk48ibp1ctj30o40bw44s.jpg" alt="截屏2020-10-27 下午9.55.51"></p>
</li>
<li><p>tcp 超时</p>
<p>样本 RTT </p>
<p>EstimatedRTT = (1 - α) * EstimatedRTT + α * SampleRTT</p>
<p>α = 0.125 第一次 EstimatedRTT = SampleRTT</p>
<p>偏差 RTT</p>
<p>DevRTT = (1 - β) * DevRTT + β * |SampleRTT - EstimatedRTT|</p>
<p>β = 0.25 第一次 DevRTT = 0.5 * SampleRTT</p>
<p>TCP 中的超时间隔</p>
<p>TimeoutInterval = EstimatedRTT + 4 * DevRTT</p>
</li>
<li><p>TCP 的可靠数据传输</p>
<p>tcp 的确认永远是期待的分组</p>
<ul>
<li><p>快速重传: 在超时到来之前重传报文段</p>
<p>如果发送方收到一个数据的<strong>三个重复 ACK</strong>, 它会认为确认数据之后的报文段丢失</p>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gk4zstl2kzj30c60eytdx.jpg" alt="截屏2020-10-28 下午1.40.03"></p>
<p>每一次 TCP 重传均将下一次超时间隔设为先前值的两倍</p>
</li>
</ul>
</li>
<li><p>TCP 流量控制</p>
<ul>
<li><p>可变流量窗口: 将接收方缓冲区的空闲空间发给发送方</p>
<p>剩余空间为 0 时, 为了避免假死, 发送方发送一个字节的试探报文</p>
</li>
</ul>
</li>
<li><p>TCP 连接管理</p>
<ul>
<li><p>TCP 链接的建立</p>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gk500xl5iaj30li0b2jy5.jpg" alt="截屏2020-10-28 下午1.47.57"></p>
</li>
<li><p>TCP 连接的释放</p>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gk5717czi7j30ms0dcdp7.jpg" alt="截屏2020-10-28 下午5.50.24"></p>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gk5721ezljj30ni0emn72.jpg" alt="截屏2020-10-28 下午5.51.11"></p>
</li>
<li><p>TCP 链接管理的状态序列</p>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gk577xhb9gj30pa0cqwol.jpg" alt="截屏2020-10-28 下午5.56.52"></p>
<p>两个 establish 状态可能不同步</p>
</li>
</ul>
</li>
<li><p>拥塞控制</p>
<p>拥塞: 过多的源发送了过多的数据, 超出了网络的处理能力</p>
<p>和流量控制不同的是, 流量控制是发送方发送了过多的数据, 拥塞控制是过多数据积压在网络核心</p>
<p>现象: 延时长, 包丢失</p>
<p>拥塞的开销:</p>
<ol>
<li>发送方必须重传以补偿因为缓存溢出而丢失的分组</li>
<li>发送方在遇到大时延锁进行的不必要重传会引起路由器转发不必要的分组拷贝而占用其链路带宽</li>
<li>当分组被丢弃时, 该分组曾用到的所有上游传输容量被浪费了</li>
</ol>
<p>网络辅助的拥塞控制的方法</p>
<ol>
<li>直接网络反馈: 路由器以阻塞分组的形式通知发送方”网络堵塞了”</li>
<li>经由接收方的网络反馈: 路由器标识从发送方流向接收方分组的某个字段以知识拥塞产生, 由接收方通知发送方网络拥塞了</li>
</ol>
<p>端到端的拥塞控制</p>
<ol>
<li>网络层部位拥塞控制提供任何帮助和支持</li>
<li>端系统通过对网络行为观测判断网络是否发生拥塞</li>
<li>TCP 采用以上方法</li>
</ol>
</li>
<li><p>TCP 的拥塞控制</p>
<p>端到端的拥塞控制</p>
<ul>
<li><p>拥塞窗口</p>
<p>rate = (CongWin/RTT) bytes/sec</p>
</li>
<li><p>如何感受拥塞</p>
<p>超时, 三个冗余 ACK</p>
</li>
<li><p>拥塞控制算法(Reno 算法)</p>
<p>加性增, 乘性减(AIMD)</p>
<blockquote>
<p>mss 最大报文段长度</p>
</blockquote>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gk57t0k08kj30ng0emdqq.jpg" alt="截屏2020-10-28 下午6.17.07"></p>
<p>指数增加到一个门限值</p>
<p>指数增加阶段 -&gt; 慢启动, 线性增加阶段 -&gt; 拥塞避免</p>
<ul>
<li>对收到三个重复 ACK 的反应: 快速重传<ol>
<li>门限值设为当前 CongWin 的一半</li>
<li>将 CongWin 减为新的门限值+3 MSS</li>
<li>线性增加拥塞窗口</li>
</ol>
</li>
<li>超时时间的反应<ol>
<li>门限值设为当前 CongWin 的一半</li>
<li>将 CongWin 设为 1  MSS</li>
<li>窗口以指数速度增大</li>
<li>窗口增大到门限值以后, 在以线性速度增加</li>
</ol>
</li>
<li>Reno总结<ol>
<li>门限值 Threshold 决定出于慢启动阶段还是拥塞避免阶段</li>
<li>triple ACK 门限值变为一半, CongWin 设为门限值+3 MSS</li>
<li>超时 门限值变为一半, CongWin 设为 1 MSS</li>
</ol>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="第四章-网络层"><a href="#第四章-网络层" class="headerlink" title="第四章 网络层"></a>第四章 网络层</h2><ul>
<li><p>网络层概述</p>
<p>实现主机到主机的通信</p>
<ol>
<li><p>如何选路</p>
</li>
<li><p>如何转发</p>
</li>
<li><p>确定是否可达</p>
</li>
</ol>
<p>为传输层提供选路转发服务</p>
<ol>
<li>虚电路服务<ol>
<li>收发双方的路径和电话线路一样</li>
<li>数据传输前呼叫建立, 传输后断开连接</li>
<li>每一个分组携带虚电路标识(而不是目的主机的地址)</li>
<li>路径上的每个路由器必须维持连接状态信息</li>
</ol>
</li>
<li>数据报服务<ol>
<li>在网络层没有建立连接过程</li>
<li>不维护连接状态信息</li>
<li>同一对主机的报文可能会走不同的路径</li>
</ol>
</li>
</ol>
</li>
<li><p>路由器的工作原理</p>
<p>网路程, 数据链路层, 物理层</p>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gk58gzl5hdj30ng0ea7ec.jpg" alt="截屏2020-10-28 下午6.40.10"></p>
<ul>
<li><p>输入端口</p>
<ul>
<li>线头等待</li>
</ul>
</li>
<li><p>交换结构</p>
<ul>
<li><p>分类: 内存类, 总线类, 内联网络类</p>
<ul>
<li><p>内存交换: </p>
<ol>
<li>输入输出端口的交换是在路由器的直接控制下完成的</li>
<li>分组被拷贝到系统内存中, 在 cpu 控制下转发至输出端口</li>
<li>转发速度受限于内存带宽(每个分组走两次总线)</li>
</ol>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gk6mdsjenrj30jg06k77d.jpg" alt="截屏2020-10-29 下午11.26.40"></p>
</li>
<li><p>总线交换</p>
<ol>
<li>输入报文经共享总线将分组直接转发到输出端口</li>
<li>总线交换速度受限于总线带宽</li>
<li>Cisco5600 内置 32Gbps 总线, 能满足大多接入网或企业网的路由转发速率需求</li>
</ol>
</li>
<li><p>内联网络</p>
<ol>
<li>克服总线带宽限制</li>
<li>Banyan 网络: 用于计算机体系结构中多处理机互连</li>
<li>固定分组转发: 将长度变化的 ip 分组拆分为固定尺寸的信元, 通过交换网络进行转发</li>
<li>Cisco 12000: 通过内联网络交换速度为 60Gbps</li>
</ol>
</li>
</ul>
</li>
</ul>
</li>
<li><p>输出端口</p>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gk6mjektnzj30l60emqc4.jpg" alt="截屏2020-10-29 下午11.32.23"></p>
</li>
<li><p>缓存区?</p>
<p>RFC 3439: B = RTT * R</p>
<p>对于有 n 条 tcp 链接的链路: B = RTT * R / n^1/2^ </p>
<p>分组排队丢弃策略: </p>
<ul>
<li>被动管理<ol>
<li>弃尾策略</li>
<li>删除一个或者多个已排队分组</li>
</ol>
</li>
<li>主动管理–随机早期检测 RED<ol>
<li>随机计算平均队列长度 avg<del>th</del></li>
<li>最小阈值 min<del>th</del> 最大阈值 max<del>th</del></li>
<li>avg<del>th</del> 小于 min<del>th</del>, 允许分组入列</li>
<li>avg<del>th</del> 大于 max<del>th</del>, 分组被标记或丢弃</li>
<li>avg<del>th</del> 在 min<del>th</del> 和 max<del>th</del> 之间, 按照概率标记或丢弃分组</li>
</ol>
</li>
</ul>
</li>
</ul>
</li>
<li><p>ip 数据报格式</p>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gk6n6j8572j30nc0esdnj.jpg" alt="截屏2020-10-29 下午11.54.39"></p>
<p>版本: IPv4 IPv5 IPv6</p>
<p>服务类型: 报文处理方式</p>
<p>生存时间: 控制数据转发的跳数</p>
<p>报头校验和, 只检查首部</p>
<p>协议: 1ICMP 2IGMP 4IP 6TCP 8EGP 17UDP 41IPV6</p>
<p>源地址: 32bit</p>
<p>目的地址: 32bit</p>
<p>首部长度</p>
<p>总长度: 实际长度 = 总长度 - 首部长度, 以太网链路报文只允许 1500 字节</p>
<p>分片相关的字段(MTU)</p>
<p>​    标识: 网络层服务的上层传输层的同一次报文使用相同的表示, 相当于每次会话使用相同表示</p>
<p>​    标志: 1 位保留, 2 位表示能否分片, 3 位表示分片是否结束(1 未结束, 0 结束)</p>
<p>​    片偏移: 每个分片在整个报文中的位置</p>
</li>
<li><p>IP 地址</p>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gk6nkk5p1ej30ng0bijwn.jpg" alt="截屏2020-10-30 上午12.08.08"></p>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gk6nmqs2l5j30nc09wtea.jpg" alt="截屏2020-10-30 上午12.10.16"></p>
<p>NAT</p>
<p>ipv6 报文结构</p>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gk6nuwuduwj30no0d4guu.jpg" alt="截屏2020-10-30 上午12.18.02"></p>
</li>
<li><p>子网划分</p>
<p>从主机号中抽取一部分作为子网号, 进行子网划分</p>
<p>子网掩码</p>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gk6o2k52w8j30qc0gm7ej.jpg" alt="截屏2020-10-30 上午12.25.25"></p>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gk6o420nlzj30p00fm49h.jpg" alt="截屏2020-10-30 上午12.26.52"></p>
<ol>
<li>H<del>1</del>先将本子网的子网掩码与分组的 ip 地址相”与”, 不匹配给路由器</li>
<li>路由器根据路由表找到目的网络地址, 进行转发</li>
</ol>
</li>
<li><p>CIDR 无类别域间路由(classless interdomain routing)</p>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gk6ofdc3oqj30j007on25.jpg" alt="截屏2020-10-30 上午12.37.45"></p>
<p>/之后是掩码的位数</p>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gk6orahcgpj30l00ecn6t.jpg" alt="截屏2020-10-30 上午12.49.10"></p>
</li>
<li><p>网络地址转换 NAT</p>
<ul>
<li><p>解决的问题</p>
<ol>
<li>外网获取的 ip 地址资源有限</li>
<li>内网 ip 地址变动无需告知外网</li>
<li>更换 ISP 后内网 ip 地址不变</li>
<li>内网主机外网不可见</li>
</ol>
</li>
<li><p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gk6otwecwaj30oe0c6qar.jpg" alt="截屏2020-10-30 上午12.51.42"></p>
</li>
<li><p>改变</p>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gk9hls0rvzj30ji08i43n.jpg" alt="截屏2020-11-01 上午10.58.23"></p>
</li>
</ul>
</li>
<li><p>ICMP 协议(差错与控制报文协议)</p>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gk9hv8j3abj30o60f8thp.jpg" alt="截屏2020-11-01 上午11.07.31"></p>
<ul>
<li><p>ICMP 报文格式</p>
<ul>
<li><p>信息报文不可达</p>
<ol>
<li>信宿机硬件出现故障或者关机</li>
<li>发送者指定的地址不存在</li>
<li>网关不知道去往信宿的路径</li>
</ol>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gk9hyeqkgvj30jm06sn10.jpg" alt="截屏2020-11-01 上午11.10.34"></p>
</li>
<li><p>参数出错报文</p>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gk9hzax62lj30ji05ytcd.jpg" alt="截屏2020-11-01 上午11.11.14"></p>
</li>
<li><p>重定向报文</p>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gk9hzmirtsj30km07owik.jpg" alt="截屏2020-11-01 上午11.11.44"></p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>路由协议概述</p>
<p>好的路由: 无自环, 可收敛, 路径好</p>
<ul>
<li>AS<ul>
<li>AS 内</li>
<li>AS 外</li>
</ul>
</li>
</ul>
</li>
<li><p>选路算法</p>
<ul>
<li><p>OSPF 基于路径成本最优, 是一种 LS 协议</p>
<p>迪克斯特拉算法构造最短路径树, 只记录下一跳的节点, 不记录整个路径</p>
</li>
<li><p>RIP 基于路径距离最短, 是一种 DV 协议</p>
<p>相邻节点</p>
</li>
<li><p>BGP-4 协议</p>
</li>
</ul>
</li>
</ul>
<h2 id="第五章-链路层和局域网"><a href="#第五章-链路层和局域网" class="headerlink" title="第五章 链路层和局域网"></a>第五章 链路层和局域网</h2><ul>
<li><p>ALOHA</p>
</li>
<li><p>CSMA</p>
<ul>
<li>非坚持</li>
<li>1 坚持</li>
<li>p 坚持</li>
</ul>
</li>
<li><p>信道划分协议</p>
<ul>
<li>TDMA</li>
<li>FDMA</li>
</ul>
</li>
<li><p>随机访问协议</p>
</li>
<li><p>轮流协议</p>
</li>
<li><p>令牌传递协议</p>
</li>
<li><p>MAC 地址</p>
<p>48bit 链路层标识</p>
</li>
<li><p>ARP 协议 地址解析协议</p>
</li>
<li><p>以太网</p>
<ul>
<li><p>总线式</p>
</li>
<li><p>交换式</p>
</li>
<li><p>帧: 数据字段, 前同步码, 地址, 类型, CRC</p>
</li>
<li><p>集线器(转发器)</p>
</li>
<li><p>网桥 mac 层 lan 互连</p>
</li>
</ul>
</li>
<li><p>交换机</p>
</li>
<li><p>web:</p>
<p>dhcp dns arp </p>
</li>
</ul>
<h2 id="第六章-wifi"><a href="#第六章-wifi" class="headerlink" title="第六章 wifi"></a>第六章 wifi</h2><h1 id="实验-1-socket-编程"><a href="#实验-1-socket-编程" class="headerlink" title="实验 1 socket 编程"></a>实验 1 socket 编程</h1><h2 id="实验要求"><a href="#实验要求" class="headerlink" title="实验要求"></a>实验要求</h2><p>ip, 端口, 主目录</p>
<p>处理请求, 穿件套接字</p>
<p>确定网页文件</p>
<p>响应报文</p>
<p>tcp</p>
<p>关闭启动</p>
<p>*多媒体的网页</p>
<p>输出请求来源</p>
<p>输出处理结果</p>
<p>显示错误原因, 异常处理</p>
<h1 id="实验-2-rdt-协议"><a href="#实验-2-rdt-协议" class="headerlink" title="实验 2 rdt 协议"></a>实验 2 rdt 协议</h1><h2 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h2><p>序号, 窗口大小</p>
<p>Rdt 协议的发送方 RdtSender 和 Rdt 协议的接收方则是学生需要实现的功能，它们共同</p>
<p>实现了 Rdt 协议。其中 RdtSender 必须实现三个函数：send(Message)、receive(Packet)、</p>
<p>timeoutHandler(int seqNum)；RdtReceiver 则必须实现一个函数：receive(Packet)</p>
<p>单向传输, 指定编码报文序号的二进制位数和窗口大小</p>
<p>要求三: </p>
<ul>
<li><p>报文段序号按照报文段为单位进行编号</p>
</li>
<li><p>单一的超时计时器, 指定 timeout 参数</p>
</li>
<li><p>支持快速重传和超时重传</p>
</li>
<li><p>确认号为收到的最后一个报文段序号</p>
</li>
</ul>
<h2 id="模拟环境"><a href="#模拟环境" class="headerlink" title="模拟环境"></a>模拟环境</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">RdtSender::<span class="built_in">Send</span>(Message)&#123;</span><br><span class="line">	<span class="built_in">sendToNetworkLayer</span>(Packet);</span><br><span class="line">  <span class="built_in">startTimer</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">RdtReceiver::<span class="built_in">Receive</span>(Message)&#123;</span><br><span class="line">	<span class="keyword">if</span>(rightdata)</span><br><span class="line">    <span class="built_in">stopTimer</span>();</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">startTimer</span>();</span><br><span class="line">  <span class="keyword">if</span>(timeout)</span><br><span class="line">    <span class="built_in">timeoutHandler</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="知识"><a href="#知识" class="headerlink" title="知识"></a>知识</h2><h3 id="GBN"><a href="#GBN" class="headerlink" title="GBN"></a>GBN</h3><ul>
<li><p>接收方</p>
<p>属性: base nextseq, N</p>
<p>send: 检查窗口是否已满, 未满则 send, 更新变量</p>
<p>收到 ack: </p>
<p>timeout: 重传所以已经发送但未确认的分组</p>
<p>定时器: 最早发送还未确认的定时器</p>
</li>
<li><p>发送方</p>
<p>按序发送 ack, 否则发送上一个 ack</p>
</li>
</ul>
<h3 id="rdt"><a href="#rdt" class="headerlink" title="rdt"></a>rdt</h3><ul>
<li><p>rdt 1.0 无差错</p>
<p>发送接收</p>
</li>
<li><p>rdt 2.0 比特差错</p>
<p>checksum, ack, nak</p>
<p>除非接收方接收到了正确的数据, 否则发送方不会发送新的数据–停等协议</p>
</li>
<li><p>rdt 2.1 ack 或者 nak 受损</p>
<p>增加序号(sequence number)可以让接收方知道发送方是否在重传一个分组</p>
</li>
<li><p>rdt 2.2 冗余 ack</p>
<p>用两个 ack 表示 nak</p>
</li>
<li><p>rdt 3.0 丢包</p>
<p>等待与重传, 定时器</p>
<p>每发送一个分组就启动定时器</p>
</li>
<li><p>流水线 解决 RTT 占比过多的问题</p>
<p>每一个分组都要有自己的序号, 接收方和发送方要有缓冲区, 对于损坏的分组如何处理(GBN, SR)</p>
</li>
</ul>
<h1 id="计算机网络自顶向下"><a href="#计算机网络自顶向下" class="headerlink" title="计算机网络自顶向下"></a>计算机网络自顶向下</h1><h2 id="第一章-计算机网络和-Internet"><a href="#第一章-计算机网络和-Internet" class="headerlink" title="第一章 计算机网络和 Internet"></a>第一章 计算机网络和 Internet</h2><p>switch 交换机</p>
<p>router 路由器</p>
<p>coaxial cable 同轴电缆</p>
<p>optical fiber 光纤</p>
<p>radio spectrum 无线电</p>
<p>ISP(Internet Service Provider) 网络服务提供商</p>
<p>modem(modulator and demodulator) 调制解调器</p>
<p>IETF(Internet engineering task force) 互联网工程任务组</p>
<p>RFCs(requests for comments) IETF standards documents</p>
<p>API(application programming interface)</p>
<p>host 主机, end system</p>
<p>access network 接入网络</p>
<p>CO(central office)</p>
<p>DSL(digital subscriber line) 数字用户线路</p>
<p>​    DSLAM(DSL access multiplexer)</p>
<p>HFC(hybrid fiber coax) cable Internet access</p>
<p>​    CMTS(cable modem termination system)约等于 DLS 里的 DSLAM</p>
<p>FTTH(fiber to the home)</p>
<p>LAN(local area network)</p>
<p>​    Ethernet 以太网</p>
<p>​    3G(third-generation wireless)    </p>
<p>twisted-pair copper wire 双绞线</p>
<p>coaxial cable 同轴电缆</p>
<p>fiber optics 光纤</p>
<p>terrestrial radio channels 地面广播频道</p>
<p>satellite radio channels 卫星广播频道</p>
<p>​    geostationary satellite 地球同步卫星</p>
<p>​    LEO(low-earth orbiting) 近地轨道卫星</p>
<p>packet switching 分组交换</p>
<p>circuit switching 电路交换</p>
<p>​    FDM(frequency-division multiplexing)</p>
<p>​    TDM(time-division multiplexing)</p>
<p>​    bandwidth 带宽</p>
<p>network structure 1-5</p>
<p>​    PoPs(points of presence) 网络入网点</p>
<p>​    IXPs(Internet exchange points) 互联网交换节点</p>
<p>​    peer 同级交换</p>
<p>throughput 吞吐量</p>
<p>layer</p>
<p>​    application</p>
<p>​    transport</p>
<p>​    network</p>
<p>​    link</p>
<p>​    physic</p>
<p>ISO(International Organization for Standardization) 国际标准化组织</p>
<p>OSI 开放系统互连(模型)</p>
<p>DoS denial of service attack 拒绝服务攻击</p>
<p>DDoS distributed DoS 分布式 DoS</p>
<h2 id="第二章-应用层-1"><a href="#第二章-应用层-1" class="headerlink" title="第二章 应用层"></a>第二章 应用层</h2><p>CS client-server architecture 客户-服务器</p>
<p>P2P 对等体系架构</p>
<p>process 进程</p>
<p>message 报文</p>
<p>socket 套接字</p>
<p>API application programming interface 应用程序编程接口</p>
<p>RDT reliable data transfer可靠数据传输</p>
<p>SSL secure socket layer 安全套接字层</p>
<p>HTTP hypertext transfer protocol 超文本传输协议</p>
<p>RTT round-trip time 往返时间</p>
<p>web cache web 缓存器 也叫代理服务器(proxy server)</p>
<p>CDN content distribution network 内容分发网络</p>
<p>SMTP simple mail transfer protocol 简单邮件传输协议</p>
<p>user agent 用户代理</p>
<p>mail server 邮件服务器</p>
<p>POP3 post office protocol-version3 第三版邮局协议</p>
<p>IMAP internet mail access protocol 因特网邮件访问协议</p>
<p>DNS domain name system 域名系统</p>
<p>BIND (Berkeley internet name domain) BIND 软件</p>
<p>TLD top-level domain</p>
<p>torrent 洪流</p>
<p>DASH dynamic adaptive streaming over HTTP 经 http 的动态适应性流</p>
<h2 id="第三章-运输层-1"><a href="#第三章-运输层-1" class="headerlink" title="第三章 运输层"></a>第三章 运输层</h2><p>UDP user datagram protocol</p>
<p>TCP transfer control protocol</p>
<p>segment 报文段(运输层)</p>
<p>transport-layer multiplexing 多路复用</p>
<p>demultiplexing 多路分解</p>
<p>FSM finite-state machine 有限状态机</p>
<p>ARQ automatic repeat reQuest 自动重传请求协议</p>
<p>stop-and-wait 停等协议</p>
<p>alter-nating-bit protocol 比特交替协议</p>
<p>GBN go-back N 回退 N 步(又叫sliding-window protocol 滑动窗口协议)</p>
<p>SR selective repeat 选择重传</p>
<p>MSS maximum segment size 最大报文段长度(应用层数据的最大长度)</p>
<p>MTU maximum transmission unit 最大传输单元 (最大链路层帧长度)</p>
<p>cumulative acknowledgment 累计确认</p>
<p>SampleRTT 样本 RTT</p>
<p>​    EstimateRTT DevRTT</p>
<p>fast retransmit 快速重传</p>
<h2 id="第四章-网络层-数据平面"><a href="#第四章-网络层-数据平面" class="headerlink" title="第四章 网络层:数据平面"></a>第四章 网络层:数据平面</h2><p>forwarding 转发</p>
<p>routing 路由选择</p>
<p>SDN software defined networking 软件定义网络</p>
<p>head-of-the-line HOL 线路前部(阻塞)</p>
<p>FIFO FCFS 先进先出, 先来先服务</p>
<p>priority queueing 优先权排队</p>
<p>WFQ weighted fair queueing 加权公平排队</p>
<p>TTL time-to-live 寿命</p>
<p>MTU</p>
<p>network mask 子网掩码</p>
<p>CIDR classless interdomain routing 无类别域间路由选择</p>
<p>ICANN internet corporation for assigned names and numbers 英特网名字和编号分配机构</p>
<p>DHCP dynamic host configuration 动态主机配置协议</p>
<p>WAN wide area network 广域网</p>
<p>LAN local area network 局域网</p>
<p>WLAN wireless LAN 无线局域网</p>
<p>VLAN virtual LAN 虚拟局域网</p>
<p>wifi wireless fidelity</p>
<p>NAT network address translation 网络地址转换</p>
<h2 id="第五章-网络层-控制平面"><a href="#第五章-网络层-控制平面" class="headerlink" title="第五章 网络层: 控制平面"></a>第五章 网络层: 控制平面</h2><p>LS link state 链路状态算法</p>
<p>decentralized routing algorithm 分散式路由选择算法</p>
<p>dijkstra 狄利克雷算法</p>
<p>DV distance-vector 距离向量算法</p>
<p>bellman-ford 方程</p>
<p>OSPF open shortest path first 开放式最短路径有限</p>
<p>AS autonomous system 自治系统</p>
<p>ASN AS号</p>
<p>BGP broder gateway protocol 边界网关协议</p>
<h1 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h1><h2 id="http-状态码"><a href="#http-状态码" class="headerlink" title="http 状态码"></a>http 状态码</h2><p>200 OK 成功</p>
<p>301 moved permanently 永久转移</p>
<p>400 bad request 不能被服务器理解</p>
<p>404 not found</p>
<p>505 http version not supported</p>
<h2 id="报文等概念"><a href="#报文等概念" class="headerlink" title="报文等概念"></a>报文等概念</h2><p>报文 message 应用层</p>
<p>报文段 segment 传输层TCP</p>
<p>数据报 datagram 传输层 UDP</p>
<p>分组(包) packet 网络层</p>
<p>帧 frame 链路层</p>
<h2 id="abcde-类-ip"><a href="#abcde-类-ip" class="headerlink" title="abcde 类 ip"></a>abcde 类 ip</h2><p>A类地址第1字节为网络地址，其它3个字节为主机地址。另外第1个字节的最高位固定为0。 </p>
<p>​    A类地址范围：1.0.0.0到127.255.255.255。 </p>
<p>​    A类地址中的私有地址和保留地址： </p>
<p>​        10.0.0.0到10.255.255.255是私有地址（所谓的私有地址就是在互联网上不使用，而被用在局域网络中的地址）。 </p>
<p>　　127.0.0.0到127.255.255.255是保留地址，用做循环测试用的。 </p>
<p>　　0.0.0.0到0.255.255.255也是保留地址，用做表示所有的IP地址。 </p>
<p>​    A类地址默认子网掩码为255.0.0.0</p>
<p>B类地址第1字节和第2字节为网络地址，其它2个字节为主机地址。另外第1个字节的前两位固定为10。 </p>
<p>　B类地址范围：128.0.0.1到191.255.255.255。 </p>
<p>　B类地址的私有地址和保留地址 </p>
<p>　    172.16.0.0到172.31.255.255是私有地址 </p>
<p>　　169.254.0.0到169.254.255.255是保留地址。如果你的IP地址是自动获取IP地址，而你在网络上又没有找到可用的DHCP服务器，这时你将会从169.254.0.0到169.254.255.255中临时获得一个IP地址。 </p>
<p>　B类地址默认子网掩码为255.255.0.0</p>
<p>C类地址第1字节、第2字节和第3个字节为网络地址，第4个字节为主机地址。另外第1个字节的前三位固定为110。 </p>
<p>　　C类地址范围：192.0.0.1到223.255.255.255。 </p>
<p>　　C类地址中的私有地址：192.168.0.0到192.168.255.255是私有地址。 </p>
<p>　　C类地址默认子网掩码为255.255.255.0</p>
<p>D类地址不分网络地址和主机地址，它的第1个字节的前四位固定为1110。 </p>
<p>　　D类地址范围：224.0.0.0到239.255.255.255 </p>
<p>　　D类地址用于多点播送。 </p>
<p>　　D类IP地址第一个字节以“lll0”开始，它是一个专门保留的地址。它并不指向特定的网络，目前这一类地址被用在多点广播（Multicast）中。多点广播地址用来一次寻址一组计算机，它标识共享同一协议的一组计算机。 </p>
<p>　　D类地址又分为三种类型：即专用地址、公用地址和私用地址；其中专用地址（224.0.0.0-224.0.0.255）用于网络协议组的广播，公用地址（224.0.1.0-238.255.255.255）用于其它组播，私用地址（239.0.0.0-239.255.255.255）用于测试。 </p>
<p>　　在IPv6协议中，第一个字节必须是0xFF。</p>
<p>E类地址也不分网络地址和主机地址，它的第1个字节的前五位固定为11110。 </p>
<p>　　E类地址范围：240.0.0.1到255.255.255.254 </p>
<p>　　E类IP地址以“llll0”开始，为将来使用保留。 </p>
<p>　　全零（“0．0．0．0”）地址对应于当前主机。全“1”的IP地址（“255．255．255．255”）是当前子网的广播地址。 </p>
<p>　　E类IP地址的第一段数字范围为240～254，E类地址保留，仅作为搜索、Internet的实验和开发之用。</p>
]]></content>
      <categories>
        <category>cs</category>
      </categories>
      <tags>
        <tag>network</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机组成原理</title>
    <url>/2020/09/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<blockquote>
<p>简介</p>
</blockquote>
<span id="more"></span>

<h1 id="计算机组成原理实验"><a href="#计算机组成原理实验" class="headerlink" title="计算机组成原理实验"></a>计算机组成原理实验</h1><h2 id="实验-1-数据表示实验"><a href="#实验-1-数据表示实验" class="headerlink" title="实验 1 数据表示实验"></a>实验 1 数据表示实验</h2><h3 id="汉字编码实验"><a href="#汉字编码实验" class="headerlink" title="汉字编码实验"></a>汉字编码实验</h3><p>机内码 计算机内存储字符时使用的编码， 如 ascii，gb2312</p>
<p>区位码 4 位10 进制 <code>gb2312 汉字机内码=区位码+0xA0A0</code></p>
<p>字形码</p>
<p>偶校验: 如果一组给定数据位中1的个数是奇数，补一个bit为1，使得总的1的个数是偶数。例：0000001, 补一个bit为1, 0000001<strong>1</strong></p>
<p>奇校验同理</p>
<h2 id="实验-2"><a href="#实验-2" class="headerlink" title="实验 2"></a>实验 2</h2><p>gsp  c4 c3</p>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gk3z8s4incj31gm0pgnid.jpg" alt="截屏2020-10-27 下午4.35.03"></p>
<h2 id="实验-4"><a href="#实验-4" class="headerlink" title="实验 4"></a>实验 4</h2><h3 id="中断处理机制"><a href="#中断处理机制" class="headerlink" title="中断处理机制"></a>中断处理机制</h3><ul>
<li><p> 异常与中断概念</p>
</li>
<li><p>内部异常</p>
<ul>
<li><p>CPU内部引起的异常事件，也称内部中断</p>
</li>
<li><p>分类</p>
<ul>
<li><p>故障（Fault）</p>
<ul>
<li><p>指令执行引起，未定义指令、除数为零、缺页等</p>
</li>
<li><p>可恢复的故障，指令需恢复执行</p>
</li>
<li><p>不可恢复故障，进程被终止</p>
</li>
</ul>
</li>
<li><p>自陷（trap）</p>
<ul>
<li>系统调用、条件陷阱，位置固定，类似函数调用</li>
</ul>
</li>
<li><p>终止（Abort）</p>
<ul>
<li>随机出现的使得 CPU 无法继续执行的硬件故障，和具体指令无关。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>外部中断</p>
<ul>
<li><p>由外部设备向 CPU 发出的中断请求（如鼠标点击、按键动作）</p>
</li>
<li><p> CPU 暂时中断当前正在执行的程序，转去执行为某外设事件服务的中断服务程序，处理完毕后再返回断点继续执行</p>
</li>
<li><p>可屏蔽中断，非可屏蔽中断</p>
</li>
</ul>
</li>
<li><p>外部中断处理过程</p>
<ul>
<li><p>中断时机？</p>
<ul>
<li>指令执行周期最后一拍，如有中断请求则进入中断响应周期</li>
</ul>
</li>
<li><p>中断判别？</p>
<ul>
<li>外部中断会通过中断请求IntR信号发送给CPU</li>
</ul>
</li>
<li><p>完整中断流程</p>
<ul>
<li><p>中断响应</p>
<ul>
<li><p>实现中断函数的调用</p>
</li>
<li><p>中断隐指令完成的数据通路</p>
<ul>
<li><p>关中断</p>
<ul>
<li><p>清除中断使能寄存器IE</p>
</li>
<li><p>IE与中断请求逻辑与后送控制器</p>
</li>
<li><p>关中断后控制器无法接收新的中断请求</p>
</li>
</ul>
</li>
<li><p>保存断点</p>
<ul>
<li>保存PC值，X86进堆栈，MIPS送EPC</li>
</ul>
</li>
<li><p>中断识别</p>
<ul>
<li>识别中断源，并将对应中断服务程序入口地址送PC</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>CPU执行中断服务程序</p>
</li>
<li><p>中断返回</p>
<ul>
<li><p>中断服务程序最后一条指令为中断返回指令</p>
</li>
<li><p>MIPS：eret     X86：iret</p>
</li>
<li><p>单级中断中该指令开中断同时将断点地址送PC</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>支持中断的CPU设计</p>
<ul>
<li><p>硬件支持</p>
<ul>
<li><p>增加中断响应周期</p>
<ul>
<li><p>修改指令执行状态机</p>
</li>
<li><p>所有指令的最后一个状态需要进行中断请求判断</p>
</li>
<li><p>有中断进入中断响应周期</p>
</li>
<li><p>中断响应周期结束进入取指令公操作</p>
</li>
</ul>
</li>
<li><p>相关硬件与数据通路</p>
<ul>
<li><p>开关中断</p>
<ul>
<li><p>增加IE寄存器，用于屏蔽中断请求，为0时关中断，为1时开中断</p>
</li>
<li><p>开中断，关中断信号分别连接置位和复位信号</p>
</li>
<li><p>默认开中断，可以连接寄存器的~Q端</p>
</li>
</ul>
</li>
<li><p>保存断点</p>
<ul>
<li><p>增加EPC寄存器/堆栈</p>
</li>
<li><p>增加EPC与PC之间的通路</p>
</li>
</ul>
</li>
<li><p>中断识别</p>
<ul>
<li><p>增加中断控制逻辑</p>
</li>
<li><p>能识别中断源，产生中断请求和中断号</p>
</li>
<li><p>能根据中断号自动获取中断入口地址送PC</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>软件支持</p>
<ul>
<li><p>中断返回指令支持</p>
</li>
<li><p>编写中断服务程序</p>
<ul>
<li><p>保护现场</p>
<ul>
<li><p>压栈方式保护</p>
</li>
<li><p>所有在中断服务程序中被改写的通用寄存器都需要压栈</p>
</li>
<li><p>EPC，中断屏蔽字等</p>
</li>
</ul>
</li>
<li><p>中断服务</p>
</li>
<li><p>恢复现场</p>
</li>
<li><p>中断返回</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>控制器实现</p>
<ul>
<li><p>在原有状态机中增加中断响应周期路径和eret指令路径</p>
</li>
<li><p>微程序</p>
<ul>
<li><p>控制字段增加与中断相关的控制信号</p>
</li>
<li><p>判别测试字段增加Pend位，表示当前微指令为微程序的最后一条微指令，需要根据中断请求信号Intr的值进行中断判别</p>
</li>
<li><p>注意中断响应周期最后一个状态也需要设置Pend</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="mooc"><a href="#mooc" class="headerlink" title="mooc"></a>mooc</h1><h2 id="1-计算机系统概论"><a href="#1-计算机系统概论" class="headerlink" title="1. 计算机系统概论"></a>1. 计算机系统概论</h2><ul>
<li><p>冯诺依曼结构计算的工作原理: 存储程序 程序控制</p>
<p>对应硬件: 主机(CPU(运算器, 控制器), 内存), 外设(io, 外存储器), 总线(地址线, 数据线, 控制线)</p>
<ul>
<li><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gj3y3el1vvj30z60imtox.jpg" alt="截屏2020-09-26 下午12.34.11"></li>
</ul>
</li>
<li><p>系统性能评价</p>
<ul>
<li><p>非时间指标: 机器字长, 总线宽度, 主存容量与存储带宽(与总线宽度和传输速度相关)</p>
</li>
<li><p>时间指标: </p>
<ul>
<li><p>主频(1/时间周期) 主频 = 外频 * 倍频</p>
</li>
<li><p>CPI(clock cycles per instruction) (加权平均)</p>
<p>CPI = 指令周期之和/指令总数</p>
</li>
<li><p>MPIS 百万为单位</p>
<p>全性能公式: MPIS = (f/CPI) * 10 ^-6^</p>
</li>
<li><p>cpu时间 = 所有指令时钟周期之和 * T</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>计算机性能测试 几款软件</p>
</li>
</ul>
<h2 id="2-数据表示"><a href="#2-数据表示" class="headerlink" title="2. 数据表示"></a>2. 数据表示</h2><ul>
<li><p>机器数及其特点</p>
<p>反码最高位进位加到最低位</p>
</li>
<li><p>定点数与浮点数</p>
</li>
<li><p>数据校验</p>
<p>码距, 校验码增加的冗余就是为了增大码距</p>
<p>码距与纠错能力</p>
<ul>
<li>码距&gt;=e+1, 可检测 e 个错误</li>
<li>码距&gt;=2t+1, 可纠正 t 个错误</li>
<li>码距&gt;=e+t+1, 可纠正 t 个错误, 同时检测 e 个错误(e&gt;=t)</li>
</ul>
</li>
<li><p>奇偶校验</p>
<p>偶校验: 使得 1 的个数为偶数个, 所有位异或可得偶校验码, G = 传输来的所有位异或, G = 0 则无错误</p>
<p>奇校验: 所有位异或后取非, G = 传输来的所有位异或后取非, G = 0 则无错误</p>
<p>特点: 只能检测一位错误, 无错信息不可靠, 不能纠错</p>
<p>码距: 2</p>
<p>双向奇偶校验: 在传统基础上加一个垂直的校验, (右下角应该是横向的校验吧)</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gj43jinnhsj30780863zv.jpg" alt="截屏2020-09-26 下午3.42.48"></p>
</li>
<li><p>crc 校验</p>
<p>N = k + r &lt;= 2^r^ - 1 k有效信息, r 校验位</p>
<p>查表得生成多项式 G(x) 然后用 G(x)进行模 2 运算(异或)得到余数, 原数据+余数组成数据发送出去, 接收方把得到的数用 G(x)进行模 2 运算, 余数为 0 则正确, 而如果余数不为 0, 余数和出错位有一个对应关系, 与 G(x)有关, 与数据无关, 要查表</p>
</li>
<li><p>海明码</p>
<p>N = k + r &lt;= 2^r^ - 1</p>
<p>设从左到右为 1 ~ k+r 位, 数据位 D, 校验位 P</p>
<p>P 在 2^n^位置</p>
<p>D<del>i</del> 中的 i 决定参与哪些 P 的校验, P = D<del>xxx</del> ^ D<del>xxx</del> ^ …</p>
<p>指错字 G<del>i</del> = P<del>i</del> ^ D<del>xxx</del> ^ D<del>xxx</del> ^ …</p>
<p>G<del>4</del>G<del>3</del>G<del>2</del>G<del>1</del> 就是出错位, 都为 0 时表示无错</p>
<p>特点: 指错字为 0 不一定无错, 一位出错和两位出错不能由指错字区分(配合奇偶校验可以区分)</p>
</li>
</ul>
<h2 id="3-运算方法与运算器"><a href="#3-运算方法与运算器" class="headerlink" title="3. 运算方法与运算器"></a>3. 运算方法与运算器</h2><ul>
<li><p>定点数运算和溢出, 定点数补码加减运算器设计</p>
<p>补码运算, 已知 Y 的补码, 求 -Y 的补码: 可从右向左扫描, 在遇到 1 及以前, 直接输出, 之后取反输出, 得到 -Y 补码/所有位取反再最后加一</p>
<p>判断溢出的三种方法</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gj44y5bauwj30u012t15m.jpg" alt="深入理解计算机系统（第三版文字版）-60"></p>
<ul>
<li><p>四位串行加法器(简单)</p>
<p>实现减法?取反加一</p>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gk3vo6mblzj30te0j6q9z.jpg" alt="截屏2020-10-27 下午2.31.44"></p>
<p>溢出检测, 第二种最简单</p>
</li>
<li><p>并行(先行)加法运算器</p>
<p>Gi=XiYi</p>
<p>Pi=Xi^Yi</p>
<p>C4 = G4+G3P4+G2P4P3+G1P4P3P2+C0P4P3P2P1</p>
<p>C3 = G3+G2P3+G1P3P2+C0P3P2P1</p>
<p>…</p>
</li>
</ul>
</li>
<li><p>原码一位乘法</p>
<p>符号位单独运算</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gj45ru9yx9j311w0l4dx6.jpg" alt="截屏2020-09-26 下午4.59.45"></p>
</li>
<li><p>补码一位乘法</p>
<p>[x*y]<del>补</del> = [x]<del>补</del> * Σ(y<del>i+1</del> - y<del>i</del>) * 2^-i^</p>
<p><strong>算数右移</strong></p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gj45wuj1ekj30rc0d0n6c.jpg" alt="截屏2020-09-26 下午5.04.39"></p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gj45ywwml4j30rq08e79y.jpg" alt="截屏2020-09-26 下午5.06.47"></p>
</li>
<li><p>乘法运算器的设计</p>
<p>原码阵列乘法器</p>
<p>补码阵列乘法器</p>
</li>
<li><p>定点数除法</p>
</li>
</ul>
<h2 id="4-存储系统"><a href="#4-存储系统" class="headerlink" title="4. 存储系统"></a>4. 存储系统</h2><h3 id="存储系统的层次结构"><a href="#存储系统的层次结构" class="headerlink" title="存储系统的层次结构"></a>存储系统的层次结构</h3><blockquote>
<p>cache</p>
<p>cpu -&gt; cache -&gt; 主存 -&gt; 辅存</p>
</blockquote>
<p>L1 cache 集成在 CPU 中, 分数据 cache(D-Cache)和指令 cache(I-Cache)</p>
<p>L2 cahce 在主板上或与 cpu 集成在同一电路板上, 随着工艺提高 L2cahce 被集成在 cpu 内核中, 不分 d-cahce 和 i-cache</p>
<p>局部性原理:</p>
<ul>
<li><p>时间局部性</p>
<p>现在访问的信息在不久以后还会被访问</p>
</li>
<li><p>空间局部性</p>
<p>下一次访问的信息在这次访问的附近</p>
</li>
</ul>
<h3 id="主存中的数据组织"><a href="#主存中的数据组织" class="headerlink" title="主存中的数据组织"></a>主存中的数据组织</h3><ul>
<li>存储字长: 主存中一个存储单元所包含的二进制位数</li>
<li>ISA 设计时要考虑的两个问题<ul>
<li>如何根据字节地址读取一个 32 位的字 字的存放问题</li>
<li>一个字能否存放在主存的任何字节边界 字的边界对齐问题</li>
</ul>
</li>
<li>大端 高字节地址是数据的地址</li>
<li>小端 低字节地址是数据的地址</li>
</ul>
<h3 id="静态存储器的工作原理"><a href="#静态存储器的工作原理" class="headerlink" title="静态存储器的工作原理"></a>静态存储器的工作原理</h3><ul>
<li><p>SRAM 存储单元结构</p>
<img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gkb7np7zrnj30c40gk78l.jpg" alt="截屏2020-11-02 下午10.45.20" style="zoom:33%;" />

<ul>
<li><p>工作管: t1, t2(保存数据)</p>
</li>
<li><p>负载管: t3 t4(补充电荷)</p>
</li>
<li><p>门控管: t5 t6 t7 t8(开关作用)</p>
</li>
<li><p>写操作 </p>
<p>x 有效, t5 t6 通, a 与 i/o 连通</p>
<p>y 有效, t7 t8 通, b 与 !i/o 连通</p>
<p>i/o = 1 -&gt; A = 1 -&gt; T2 通 -&gt; B = 0 -&gt; T1 截止</p>
<p>!i/o = 0 -&gt; B = 0 -&gt; T1 截止 -&gt; A = 1 -&gt; T2 通</p>
<p>此时 T1 T2形成了稳态, A = 1, B = 0</p>
<p>此时写 1</p>
<p>相反写 0</p>
</li>
<li><p>读操作</p>
<p>x 有效, t5 t6 通, a 与 i/o 连通</p>
<p>y 有效, t7 t8 通, b 与 !i/o 连通</p>
<p>读 1 的时候, A = 1, B = 0</p>
<p>通过外接于 i/o 和!i/o 之间的电流放大器中的电流方向可以判断出读的是 1 还是 0</p>
</li>
<li><p>无论读写, xy 译码线都要有效</p>
</li>
<li><p>保持: xy 撤销后, 由 t3t4 为 t1t2 提供工作电流, 保持其稳定互锁状态不变</p>
</li>
<li><p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gkb825f5zuj30zs0ieh1b.jpg" alt="截屏2020-11-02 下午10.59.16"></p>
</li>
<li><p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gkb851v7z3j30rc0eq45p.jpg" alt="截屏2020-11-02 下午11.02.05"></p>
</li>
</ul>
</li>
</ul>
<h3 id="动态存储器的工作原理"><a href="#动态存储器的工作原理" class="headerlink" title="动态存储器的工作原理"></a>动态存储器的工作原理</h3><p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gkb8bnovhcj30ys0hedwb.jpg" alt="截屏2020-11-02 下午11.08.22"></p>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gkb8esl6d9j30xw0is1ck.jpg" alt="截屏2020-11-02 下午11.11.27"></p>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gkb8j4w095j30yy0d6wpl.jpg" alt="截屏2020-11-02 下午11.15.37"></p>
<ul>
<li>集中刷新</li>
<li>分散刷新</li>
<li>异步刷新</li>
</ul>
<h3 id="存储扩展"><a href="#存储扩展" class="headerlink" title="存储扩展"></a>存储扩展</h3><p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gkb8oqsco8j30xy0ee15g.jpg" alt="截屏2020-11-02 下午11.21.01"></p>
<p>Mk*N M:容量, N:位长</p>
<p>字扩展和位扩展</p>
<h3 id="多体交叉存储器"><a href="#多体交叉存储器" class="headerlink" title="多体交叉存储器"></a>多体交叉存储器</h3><p>高位多体交叉存储器: 类似字扩展</p>
<p>低位多体交叉存储器: 相邻地址存在不同存储器中, 可以并行访问, 每个单体都有单独的地址寄存器</p>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gki99w81cfj30vc0j6ar8.jpg" alt="截屏2020-11-09 上午1.00.10"></p>
<h3 id="cache-基本原理"><a href="#cache-基本原理" class="headerlink" title="cache 基本原理"></a>cache 基本原理</h3><p>写: 写穿策略, 写回策略</p>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gki9fg07sij30p60icjx1.jpg" alt="image-20201109010537809"></p>
<p>cache 结构</p>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gki9gnevk3j30y40ie14e.jpg" alt="截屏2020-11-09 上午1.06.33"></p>
<h3 id="相联存储器"><a href="#相联存储器" class="headerlink" title="相联存储器"></a>相联存储器</h3><p>相联存储器作用: 判断 cpu 要访问的内容是否在cache 中</p>
<p>贮存地址-&gt;查找依据</p>
<p>![截屏2020-11-09 上午1.14.27](../../../../Library/Application Support/typora-user-images/截屏2020-11-09 上午1.14.27.png)</p>
<h3 id="cache-地址映射和变换方法"><a href="#cache-地址映射和变换方法" class="headerlink" title="cache 地址映射和变换方法"></a>cache 地址映射和变换方法</h3><ul>
<li><p>全相联</p>
<p>主存分块, cache 分行, 大小一致, 将主存的地址变为二维地址(块地址tag+块内序号 (字))</p>
<p>![image-20201109012214178](../../../../Library/Application Support/typora-user-images/image-20201109012214178.png)</p>
<p>cache 所有空间都可以利用, 但是比对过程复杂, 适用于小容量 cache</p>
</li>
<li><p>直接相联</p>
<p>主存分块, cache 分行, 大小一致</p>
<p>主存地址分为三部分, tag index offset</p>
<p>tag 就是 tag, index 为 cache 的哪一行, offset 为第几个字, 形成一个三维结构</p>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gkia2k5rnqj31240fsanl.jpg" alt="截屏2020-11-09 上午1.27.33"></p>
<p>cache 利用率低, 容易冲突, 但是淘汰算法简单, 适用于大容量 cache</p>
</li>
<li><p>组相联</p>
<p>主存分块, cache 分行, 大小一致</p>
<p>cache 分组, 每组含 k 行, 以组队内存进行划分</p>
<p>主存地址分为: tag, 组号, index 第几组, offset 第几个字</p>
</li>
</ul>
<h3 id="替换算法-淘汰算法"><a href="#替换算法-淘汰算法" class="headerlink" title="替换算法(淘汰算法)"></a>替换算法(淘汰算法)</h3><ul>
<li>先进先出算法FIFO 维持一个计数器, 先进来的先被替换</li>
<li>最不经常使用算法LFU 维持一个计数器, 命中++, 把命中的最少的淘汰掉</li>
<li>近期最少使用LRU 维持一个计数器, 把访问间隔时间最长的替换掉</li>
<li>随机替换法 </li>
</ul>
<h3 id="高速缓冲存储器例题"><a href="#高速缓冲存储器例题" class="headerlink" title="高速缓冲存储器例题"></a>高速缓冲存储器例题</h3><h3 id="虚拟存储器"><a href="#虚拟存储器" class="headerlink" title="虚拟存储器"></a>虚拟存储器</h3><p>解决主存不足的问题</p>
<p>处于主存-辅存层次</p>
<p>页式虚拟存储器</p>
<p>MMU(memery management unit)管理虚拟存储器和物理存储器 </p>
<p>虚拟地址: 虚页号+页偏移量</p>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gkj4nbq8cej30ti0f4n4q.jpg" alt="截屏2020-11-09 下午7.05.43"></p>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gkj4p8qm7kj30rw0icdlv.jpg" alt="截屏2020-11-09 下午7.07.37"></p>
<h3 id="TLB-translation-lookaside-buffer"><a href="#TLB-translation-lookaside-buffer" class="headerlink" title="TLB(translation lookaside buffer)"></a>TLB(translation lookaside buffer)</h3><p>虚拟地址的转换 PTE 页表项</p>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gkj4tuy6pij30u00dgwkx.jpg" alt="截屏2020-11-09 下午7.12.02"></p>
<p> <img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gkj4vv63evj31340hen7i.jpg" alt="截屏2020-11-09 下午7.13.58"></p>
<p>TLB: 增加一个小容量, 高速存储部件存放当前访问页表地址变换条目</p>
<p>基于 TLB 的虚实地址转换</p>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gkj504t8jcj31060pg154.jpg" alt="截屏2020-11-09 下午7.18.04"></p>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gkj5493tzzj30vu0ky7c0.jpg" alt="截屏2020-11-09 下午7.22.02"></p>
<h3 id="RAID-redundant-arrays-of-inexpensive-disks-gt"><a href="#RAID-redundant-arrays-of-inexpensive-disks-gt" class="headerlink" title="RAID(redundant arrays of inexpensive disks-&gt;"></a>RAID(redundant arrays of inexpensive disks-&gt;</h3><h3 id="redundant-arrays-of-independent-disks"><a href="#redundant-arrays-of-independent-disks" class="headerlink" title="redundant arrays of independent disks)"></a>redundant arrays of independent disks)</h3><p>核心技术: </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1^0&#x3D;1 1&#x3D;0^1</span><br><span class="line">1^1&#x3D;0 1&#x3D;1^0</span><br><span class="line">0^0&#x3D;0 0&#x3D;0^0</span><br></pre></td></tr></table></figure>

<p>有一个磁盘坏了, 可以通过异或得到原来的数据</p>
<ul>
<li><p>RAID0 没有冗余</p>
<p>数据以条带方式均匀分布在各个磁盘(并行)</p>
<p>优点: 磁盘读写效率高</p>
<p>缺点: 无冗余</p>
</li>
<li><p>RAID1</p>
<p>数据采用镜像的冗余方式, 一个数据有多分拷贝</p>
<p>优点: 100%数据冗余, 理论上可以实现两倍读取速率</p>
<p>缺点: 空间利用率只有 1/2 </p>
</li>
<li><p>RAID3 RAID4</p>
<p>数据按位(3)/条(4)并行传输到多个磁盘上, 同时校验数据存放到专用校验盘上</p>
<p>优点: 磁盘利用率=(N-1)/N</p>
<p>缺点: 控制器复杂, 校验磁盘的写性能有瓶颈</p>
</li>
<li><p>RAID5</p>
<p>数据按条分布在不同的磁盘上, 但校验信息被均匀的分散到各个磁盘上 </p>
</li>
<li><p>RAID10</p>
<p>结合 RAID0 和 RAID1, 先镜像, 再条带化</p>
</li>
<li><p>RAID01</p>
<p>结合 RAID0 和 RAID1, 先条带化, 再镜像</p>
</li>
</ul>
<h2 id="5-指令系统"><a href="#5-指令系统" class="headerlink" title="5. 指令系统"></a>5. 指令系统</h2><h3 id="指令系统概述和指令格式"><a href="#指令系统概述和指令格式" class="headerlink" title="指令系统概述和指令格式"></a>指令系统概述和指令格式</h3><p>指令系统: 一台计算机中所有机器指令的集合</p>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gkjbtdzm8oj318y0bctin.jpg" alt="截屏2020-11-09 下午11.13.47"></p>
<p>指令分类</p>
<ul>
<li>地址码字段的分类<ul>
<li>三地址</li>
<li>二地址</li>
<li>一地址</li>
<li>零地址</li>
</ul>
</li>
<li>操作数的物理位置<ul>
<li>存储器, 存储器 SS</li>
<li>寄存器, 寄存器 RR</li>
<li>寄存器, 存储器 RS</li>
</ul>
</li>
<li>功能</li>
</ul>
<p>指令格式</p>
<p>操作码字段+寻址方式+地址码字段</p>
<h3 id="寻址方式-指令寻址"><a href="#寻址方式-指令寻址" class="headerlink" title="寻址方式 指令寻址"></a>寻址方式 指令寻址</h3><ul>
<li><p>指令寻址</p>
<ul>
<li><p>顺序寻址</p>
<p>指令序列在主存中顺序存放, 逐条执行</p>
<p>CPU 中设置 PC 程序计数器</p>
</li>
<li><p>跳跃寻址</p>
<p><code>JMP</code> </p>
</li>
</ul>
</li>
</ul>
<h3 id="操作数寻址"><a href="#操作数寻址" class="headerlink" title="操作数寻址"></a>操作数寻址</h3><ul>
<li><p>立即数寻址 <code>mov ax, 200h</code></p>
</li>
<li><p>寄存器寻址 <code>mov ax, bx</code></p>
</li>
<li><p>直接寻址 <code>mov ax, [200h]</code></p>
</li>
<li><p>间接寻址 <code>mov ax, i[200h]</code> 访问两次内存, 第一次访问主存得到地址, 再访问主存得到数据</p>
</li>
<li><p>寄存器间接寻址 <code>mov ax, [bx]</code> 访问一次主存</p>
</li>
<li><p>相对寻址 注意 pc 值在跳转过程的变化(+1)</p>
<p>从 2003h-&gt;200Ah : 200Ah-(2003h+2) = 5</p>
</li>
<li><p>基址寻址 <code>mov ax, 32[b]</code></p>
</li>
<li><p>变址寻址 <code>mov ax, 32[si]</code> 可循环</p>
</li>
</ul>
<h3 id="指令格式设计"><a href="#指令格式设计" class="headerlink" title="指令格式设计"></a>指令格式设计</h3><p><strong>操作码字段 寻址方式 地址码字段</strong></p>
<h3 id="MIPS-32-指令概述"><a href="#MIPS-32-指令概述" class="headerlink" title="MIPS(32) 指令概述"></a>MIPS(32) 指令概述</h3><h4 id="指令格式"><a href="#指令格式" class="headerlink" title="指令格式"></a>指令格式</h4><p><img src="http://tva1.sinaimg.cn/large/0081Kckwgy1gl54xmkf0uj314o0o4x0u.jpg" alt="截屏2020-11-28 下午7.58.05"></p>
<h4 id="寻址方式"><a href="#寻址方式" class="headerlink" title="寻址方式"></a>寻址方式</h4><ul>
<li>立即数寻址</li>
<li>寄存器直接寻址</li>
<li>基址寻址</li>
<li>相对寻址</li>
<li>伪直接寻址</li>
</ul>
<h4 id="指令详解"><a href="#指令详解" class="headerlink" title="指令详解"></a>指令详解</h4><h2 id="6-cpu"><a href="#6-cpu" class="headerlink" title="6. cpu"></a>6. cpu</h2><ul>
<li><p>6.1      中央处理器概述</p>
<ul>
<li><p>6.1.1       中央处理器的功能</p>
<ul>
<li><p>循环取指令执行指令</p>
<ul>
<li><p>程序控制</p>
<ul>
<li>控制程序中指令执行的顺序</li>
</ul>
</li>
<li><p>操作控制</p>
<ul>
<li>产生指令执行过程中所需要的操作控制信号</li>
</ul>
</li>
<li><p> 时序控制</p>
</li>
<li><p>对每个操作控制信号进行定时，严格控制每个操作控制信号的开始时间和持续时间</p>
</li>
<li><p> 数据加工</p>
</li>
<li><p>即对数据进行算术、逻辑运算，或将数据在相关部件之间传送。</p>
</li>
<li><p>中断处理</p>
<ul>
<li>CPU 应能及时响应内部异常和外部中断请求</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>6.1.2       中央处理器的组成</p>
<ul>
<li><p>控制器</p>
<ul>
<li>时序发生器、操作控制器</li>
</ul>
</li>
<li><p>运算器</p>
<ul>
<li>ALU、寄存器文件</li>
</ul>
</li>
<li><p>常用寄存器</p>
<ul>
<li><p>PC (Program Counter)——程序计数器     </p>
<ul>
<li>X86：EIP  MIPS：PC</li>
</ul>
</li>
<li><p>IR (Instruction Register)——指令寄存器                      [可选]</p>
</li>
<li><p>AR (Address Register)——地址寄存器      MAR           [可选]</p>
</li>
<li><p>DR (Data Register)——数据缓冲寄存器     MDR          [可选]</p>
</li>
<li><p>AC (Accumulate Count)——累加寄存器                      [可选]</p>
<ul>
<li>常见于早期计算机</li>
</ul>
</li>
<li><p>PSW (Program Status Word)——程序状态字               [可选]</p>
<ul>
<li>X86： EFLAGS   MIPS：无</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>6.2      指令周期</p>
<ul>
<li><p>6.2.1       指令执行的一般流程</p>
<ul>
<li>图解<img src="https://api2.mubu.com/v3/document_image/50029e8b-b45f-4abd-8a5f-83a16b879dde-329792.jpg" alt="img"></li>
</ul>
</li>
<li><p>6.2.2       指令周期的基本概念</p>
<ul>
<li><p>通常将一条指令从取出到执行完成所需要的时间称为指令周期</p>
<ul>
<li><p>若干机器周期</p>
<ul>
<li><p>机器周期：取指令所需要的最短时间，指令cache命中时最短</p>
</li>
<li><p>一个机器周期又包括若干时钟周期，可以进行一系列复杂的操作</p>
</li>
<li><p>一个时钟周期只能进行简单的微操作</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>最简单的划分：取指周期+执行周期+中断周期</p>
<ul>
<li>执行周期还可以进一步细分，如间址周期</li>
</ul>
</li>
<li><p>不同的寻址方式，不同的设计指令周期划分是不确定的</p>
</li>
</ul>
</li>
<li><p>6.2.3       寄存器传送语言</p>
<ul>
<li>用于描述指令执行过程中的数据通路</li>
</ul>
</li>
</ul>
</li>
<li><p>6.3      数据通路及指令操作流程</p>
<ul>
<li><p>6.3.1       数据通路模型与定时</p>
<ul>
<li><p>常见数据图解<img src="https://api2.mubu.com/v3/document_image/1a4635b4-ff95-4071-a099-6fa8ca5be453-329792.jpg" alt="img"></p>
</li>
<li><p>数据通路的时钟频率取决于数据处理单元的关键延迟</p>
</li>
</ul>
</li>
<li><p>6.3.2       基于单总线结构的数据通路</p>
<ul>
<li><p>基本特征</p>
<ul>
<li><p>CPU 中的运算器、控制器、寄存器堆等核心部件均通过一条内部的公共总线连接起来</p>
</li>
<li><p>同一时刻只有一个部件向总线输出数据</p>
</li>
<li><p>数据传输只能分时使用总线</p>
</li>
</ul>
</li>
<li><p>数据通路图解</p>
<ul>
<li><p><img src="https://api2.mubu.com/v3/document_image/de297a77-e1a7-4624-ab32-74542bf0bc8e-329792.jpg" alt="img"></p>
</li>
<li><p>指令周期图解</p>
<ul>
<li><img src="https://api2.mubu.com/v3/document_image/b837e953-d556-493b-a5bd-2bf1efee0fbe-329792.jpg" alt="img"></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>6.3.3       基于专用通路结构的数据通路</p>
<ul>
<li><p>基本特征</p>
<ul>
<li><p>各功能部件之间均基于专用的数据传输通路连接</p>
</li>
<li><p>各通路中的数据可并行传输，控制较总线结构要简单</p>
</li>
</ul>
</li>
<li><p>单周期MIPS</p>
<ul>
<li><p>所有指令一个时钟周期完成，CPI=1，但时钟频率取决于最慢的LW指令</p>
</li>
<li><p>数据、指令分开存放保证取指令和取操作数并行</p>
</li>
<li><p>运算PC、运算分支地址、运算数据所需的ALU分别设置，成本较高</p>
</li>
<li><p>控制器为组合逻辑，不同指令产生不同的控制信号组合，形成对应的数据通路</p>
</li>
</ul>
</li>
<li><p>多周期MIPS（不考）</p>
<ul>
<li><p>不再区分指令存储器和数据存储器，指令和数据保存在同一存储器中。</p>
</li>
<li><p> 部分功能单元，如 A</p>
</li>
<li><p>LU可在一条指令执行过程的不同时钟周期中多次使用，不需要额外设置ALU或加法器。</p>
</li>
<li><p>主要功能单元输出端都增加了一些附加寄存器，方便暂存当前时钟周期加工处理的数据给后续时钟周期使用</p>
<ul>
<li><p>DR、IR</p>
</li>
<li><p>A、B  缓存寄存器操作数</p>
</li>
<li><p>C 缓存分支地址或ALU运算结果</p>
</li>
<li><p>增加和扩展了部分多路选择器</p>
</li>
<li><p>增加了ALU控制器</p>
<ul>
<li><p>专门负责产生 ALU 的运算选择控制信号 AluOP</p>
</li>
<li><p>方便合并R型运算指令以及I型指令的状态机</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>指令周期图解</p>
<ul>
<li><p>注意S2，S5状态可以合并，R型运算指令共享S8<del>S9路径，I型运算共享S10</del>S11路径<img src="https://api2.mubu.com/v3/document_image/b5c00733-af77-4711-9c26-dc5f7f220ed0-329792.jpg" alt="img"></p>
</li>
<li><p>控制器是时序逻辑，需要实现尚需状态机，每一个圆圈一个时钟周期</p>
</li>
<li><p>不同指令时钟周期数不一样</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>6.4      时序与控制</p>
<ul>
<li><p>6.4.1       中央处理器的时序</p>
<ul>
<li><p>传统三级时序</p>
<ul>
<li><p>机器周期电位、节拍电位、节拍脉冲</p>
</li>
<li><p>时序图</p>
<ul>
<li><p>一条指令包括x个机器周期，一个机器周期包括y个节拍，一个节拍包括z个脉冲<img src="https://api2.mubu.com/v3/document_image/a33be99e-bc66-4436-998e-bca2a2fb81f4-329792.jpg" alt="img"></p>
</li>
<li><p>x，y，z的值与指令寻址方式，CPU设计等有关，可固定，也可以变化</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>现代时序：只有时钟周期，指令执行过程是时钟驱动的状态机</p>
</li>
</ul>
</li>
<li><p>6.4.2       控制方式</p>
<ul>
<li><p>同步控制</p>
<ul>
<li><p>指令周期定长</p>
</li>
<li><p>机器周期数固定</p>
</li>
</ul>
</li>
<li><p>异步控制</p>
<ul>
<li><p>按需分配时钟</p>
</li>
<li><p>指令周期可变，机器周期可变</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>6.4.3       时序发生器</p>
<ul>
<li><p>输入时钟脉冲信号，指令译码信号、反馈信号持续不断的产生状态周期电位和节拍电位，操作控制器利用这些周期、节拍电位信号对操作控制信号进行时序的调制，生成控制信号序列。</p>
</li>
<li><p>输入：clk，指令译码、反馈信号</p>
</li>
<li><p>输出：状态周期电位，节拍电位</p>
</li>
<li><p>图解</p>
<ul>
<li><img src="https://api2.mubu.com/v3/document_image/1abe4764-4514-435f-b534-2407d3e520fb-329792.jpg" alt="img"><img src="https://api2.mubu.com/v3/document_image/f512c9fb-8f50-4b21-a49e-7814f5249688-329792.jpg" alt="img"></li>
</ul>
</li>
<li><p>设计思路</p>
<ul>
<li><p>利用数字逻辑同步时序电路设计方法进行构造，根据状态机进行实现</p>
</li>
<li><p>定长指令周期状态机</p>
<ul>
<li>状态切换只与时钟信号有关<img src="https://api2.mubu.com/v3/document_image/7cfd71a3-b48c-4735-a505-4e6460e37ea0-329792.jpg" alt="img"></li>
</ul>
</li>
<li><p>变长指令周期状态机</p>
<ul>
<li>状态切换还与指令译码有关<img src="https://api2.mubu.com/v3/document_image/47faac3c-6d3b-44df-bf74-13495098dc50-329792.jpg" alt="img"></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>6.5      硬布线控制器</p>
<ul>
<li><p>6.5.1       三级时序硬布线控制器</p>
<ul>
<li><p>硬布线控制器是组合逻辑</p>
<ul>
<li><p>输入：指令译码、状态周期电位、节拍电位、反馈信号</p>
</li>
<li><p>输出Cn：微操作控制器信号序列</p>
</li>
<li><p>逻辑函数<img src="https://api2.mubu.com/v3/document_image/ebded0fa-35ac-4d6c-a252-ae2c43a47c31-329792.jpg" alt="img"></p>
</li>
<li><p>例子<img src="https://api2.mubu.com/v3/document_image/dd7dd982-93ff-4bf9-9e4b-cdb4c451e462-329792.jpg" alt="img"></p>
</li>
</ul>
</li>
<li><p>图例<img src="https://api2.mubu.com/v3/document_image/7f324698-97c6-4832-8ad7-4c929cbd40f2-329792.jpg" alt="img"></p>
</li>
</ul>
</li>
<li><p>6.5.2       三级时序硬布线控制器设计</p>
<ul>
<li><p>设计流程</p>
<ul>
<li><p>分析指令执行的数据通路，列出各指令执行操作流程每一步所需要的控制信号</p>
</li>
<li><p> 对指令的操作流程进行细化，将每条指令的每个微操作分配到具体机器周期的具体时间节拍信号上，即对操作控制信号进行同步控制</p>
</li>
<li><p> 根据控制信号同步控制方式构造合适的时序发生器</p>
</li>
<li><p> 对每一个控制信号进行逻辑综合，得到每个控制信号的逻辑表达式</p>
</li>
<li><p> 最后采用逻辑门或 PLA 或 ROM 实现逻辑表达式的功能</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>6.5.3       现代时序硬布线控制器</p>
<ul>
<li><p>核心是有限状态机</p>
</li>
<li><p>控制信号是现态的函数</p>
</li>
<li><p>图解</p>
<ul>
<li><img src="https://api2.mubu.com/v3/document_image/0daf4262-d213-490b-b1b0-231b30a6dcab-329792.jpg" alt="img"></li>
</ul>
</li>
</ul>
</li>
<li><p>6.5.4       现代时序硬布线控制器设计</p>
<ul>
<li><p>设计流程</p>
<ul>
<li><p>分析指令执行的数据通路，列出每条指令执行操作流程每一步所需要的控制信号</p>
</li>
<li><p> 对指令的操作流程进行细化，将每条指令的每个微操作分配到具体时钟节拍上</p>
</li>
<li><p> 以时钟周期为单位构建指令执行状态图，生成状态转换表，实现有限状态机</p>
</li>
<li><p> 收集每一个控制信号产生的所有状态条件，得到每个控制信号的逻辑表达式。</p>
</li>
<li><p> 最后采用逻辑门或 PLA 或 ROM 实现硬布线控制器逻辑</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>6.6      微程序控制器</p>
<ul>
<li><p>6.6.1       微程序控制的基本概念</p>
<ul>
<li><p>存储逻辑：控制信号序列不由硬件产生，而是像程序一样存储起来</p>
<ul>
<li><p>控制信号序列分解为若干时钟节拍</p>
</li>
<li><p>一个节拍的控制信号编成一条微指令</p>
</li>
<li><p>一条指令有多少节拍就对应多少条微指令，形成一段微程序</p>
</li>
<li><p>取指令过程是公操作，取指令过程对应取指微程序，取指微程序为所有指令共享</p>
</li>
<li><p>控存中的微程序图解<img src="https://api2.mubu.com/v3/document_image/98eb7b3b-ac19-4da5-9c90-fdefe3009d46-329792.jpg" alt="img"></p>
</li>
</ul>
</li>
<li><p>软时序：依序执行微指令即可生成控制信号序列</p>
<ul>
<li><p>执行一条微指令，给出对应的控制信号</p>
</li>
<li><p>微指令周期就是一个时钟周期，控制器信号的时间长度就是一个节拍</p>
</li>
<li><p>软时序：按顺序执行微指令，就是按顺序给出控制信号</p>
</li>
<li><p>指令取指执行→微程序执行→ 微指令执行→生成控制信号序列</p>
</li>
</ul>
</li>
<li><p>微指令格式</p>
<ul>
<li><p>操作控制字段：存储微操作控制信号</p>
<ul>
<li>每一位对应一个控制信号，也称微命令，可同时给出多个操作信号</li>
</ul>
</li>
<li><p>顺序控制字段：控制微程序执行顺序</p>
<ul>
<li><p>判别测试位：如果为1，要约定条件生成下一条微指令地址</p>
</li>
<li><p>下址字段：判别测试条件为0时下一条微指令的地址</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>图解<img src="https://api2.mubu.com/v3/document_image/6e825efb-3223-4ea2-8bdf-43f4cf234cb7-329792.jpg" alt="img"></p>
</li>
</ul>
</li>
<li><p>6.6.2       微程序控制器组成原理</p>
<ul>
<li><p>初始化，微地址寄存器为0,控存0号单元为取指令微程序入口</p>
</li>
<li><p>下址字段法<img src="https://api2.mubu.com/v3/document_image/5ce99f63-5b98-48ce-a0a3-e3ec53b02d3a-329792.jpg" alt="img"></p>
</li>
<li><p>计数器法</p>
<ul>
<li>增加一个Pend，表示最后一条微指令，下一条微指令应该返回取指微程序<img src="https://api2.mubu.com/v3/document_image/2b6dd194-5a6b-406e-8a9f-5846ae257b5f-329792.jpg" alt="img"></li>
</ul>
</li>
</ul>
</li>
<li><p>6.6.3       微程序控制器设计</p>
<ul>
<li><p>分析指令执行的数据通路，给出控制信号序列，根据控制信号设计微指令控制字段</p>
</li>
<li><p> 以时钟周期为单位构建指令执行状态图。</p>
</li>
<li><p>一个状态对应一条微指令</p>
</li>
<li><p>根据状态机设计微指令，安排微程序，状态字等价于微地址</p>
</li>
<li><p>根据状态机分支情况设置判别测试位</p>
</li>
<li><p>根据控存中微程序存放组织方式构建微程序控制器中的地址转移逻辑，微地址寄存器μAR、控存之间的通路，实现微程序控制器</p>
</li>
</ul>
</li>
<li><p>6.6.4       微指令及其编码方法</p>
<ul>
<li><p>微指令编码方法</p>
<ul>
<li><p>直接表示法</p>
<ul>
<li>简单，并行，速度快，微指令字长</li>
</ul>
</li>
<li><p>编码表示法</p>
<ul>
<li>微指令字短、增加译码器延迟</li>
</ul>
</li>
<li><p>混合表示法</p>
</li>
</ul>
</li>
<li><p>微指令格式</p>
<ul>
<li><p>水平微指令</p>
<ul>
<li>编程难，微程序短，并行性高，速度快，控存开销大</li>
</ul>
</li>
<li><p>垂直微指令</p>
<ul>
<li>编程易，微程序长，并行性差，速度慢，控存开销小，已淘汰</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>6.7      异常与中断处理</p>
<ul>
<li><p> 异常与中断概念</p>
</li>
<li><p>内部异常</p>
<ul>
<li><p>CPU内部引起的异常事件，也称内部中断</p>
</li>
<li><p>分类</p>
<ul>
<li><p>故障（Fault）</p>
<ul>
<li><p>指令执行引起，未定义指令、除数为零、缺页等</p>
</li>
<li><p>可恢复的故障，指令需恢复执行</p>
</li>
<li><p>不可恢复故障，进程被终止</p>
</li>
</ul>
</li>
<li><p>自陷（trap）</p>
<ul>
<li>系统调用、条件陷阱，位置固定，类似函数调用</li>
</ul>
</li>
<li><p>终止（Abort）</p>
<ul>
<li>随机出现的使得 CPU 无法继续执行的硬件故障，和具体指令无关。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>外部中断</p>
<ul>
<li><p>由外部设备向 CPU 发出的中断请求（如鼠标点击、按键动作）</p>
</li>
<li><p> CPU 暂时中断当前正在执行的程序，转去执行为某外设事件服务的中断服务程序，处理完毕后再返回断点继续执行</p>
</li>
<li><p>可屏蔽中断，非可屏蔽中断</p>
</li>
</ul>
</li>
<li><p>外部中断处理过程</p>
<ul>
<li><p>中断流程</p>
</li>
<li><p>图解</p>
<ul>
<li><img src="https://api2.mubu.com/v3/document_image/3efffa6b-20d3-41d8-82c6-2cfeca1f0cd4-329792.jpg" alt="img"></li>
</ul>
</li>
<li><p>中断时机？</p>
<ul>
<li>指令执行周期最后一拍，如有中断请求则进入中断响应周期</li>
</ul>
</li>
<li><p>中断判别？</p>
<ul>
<li>外部中断会通过中断请求IntR信号发送给CPU</li>
</ul>
</li>
<li><p>完整中断流程</p>
<ul>
<li><p>中断响应</p>
<ul>
<li><p>实现中断函数的调用</p>
</li>
<li><p>中断隐指令完成的数据通路</p>
<ul>
<li><p>关中断</p>
<ul>
<li><p>清除中断使能寄存器IE</p>
</li>
<li><p>IE与中断请求逻辑与后送控制器</p>
</li>
<li><p>关中断后控制器无法接收新的中断请求</p>
</li>
</ul>
</li>
<li><p>保存断点</p>
<ul>
<li>保存PC值，X86进堆栈，MIPS送EPC</li>
</ul>
</li>
<li><p>中断识别</p>
<ul>
<li>识别中断源，并将对应中断服务程序入口地址送PC</li>
</ul>
</li>
</ul>
</li>
<li><p>CPU执行中断服务程序</p>
</li>
<li><p>中断返回</p>
<ul>
<li><p>中断服务程序最后一条指令为中断返回指令</p>
</li>
<li><p>MIPS：eret     X86：iret</p>
</li>
<li><p>单级中断中该指令开中断同时将断点地址送PC</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>支持中断的CPU设计</p>
<ul>
<li><p>硬件支持</p>
<ul>
<li><p>增加中断响应周期</p>
<ul>
<li><p>修改指令执行状态机</p>
<ul>
<li>传统时序状态机<ul>
<li><img src="https://api2.mubu.com/v3/document_image/f70b744c-ebf2-46ae-8054-c44a60303ddc-329792.jpg" alt="img"></li>
</ul>
</li>
</ul>
</li>
<li><p>现代时序状态机</p>
<ul>
<li><img src="https://api2.mubu.com/v3/document_image/b95070b0-98a5-4551-8da2-8e866e337529-329792.jpg" alt="img"></li>
</ul>
</li>
<li><p>注意事项</p>
<ul>
<li><p>所有指令的最后一个状态需要进行中断请求判断</p>
</li>
<li><p>有中断进入中断响应周期</p>
</li>
<li><p>中断响应周期结束进入取指令公操作</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>相关硬件与数据通路</p>
<ul>
<li><p>开关中断</p>
<ul>
<li><p>增加IE寄存器，用于屏蔽中断请求，为0时关中断，为1时开中断</p>
</li>
<li><p>注意初始化时应该默认开中断</p>
</li>
</ul>
</li>
<li><p>开中断，关中断信号分别连接置位和复位信号</p>
<ul>
<li><p>默认开中断，可以连接寄存器的~Q端</p>
</li>
<li><p><img src="https://api2.mubu.com/v3/document_image/04a6d766-3947-4886-afef-9040dc7a5038-329792.jpg" alt="img"></p>
</li>
</ul>
</li>
<li><p>保存断点</p>
</li>
<li><p>增加EPC寄存器/堆栈</p>
</li>
<li><p>增加EPC与PC之间的通路</p>
<ul>
<li><img src="https://api2.mubu.com/v3/document_image/5db28da8-3982-4382-960c-77912759a36a-329792.jpg" alt="img"></li>
</ul>
</li>
<li><p>中断识别</p>
<ul>
<li><p>增加中断控制逻辑</p>
</li>
<li><p>能识别中断源，产生中断请求和中断号</p>
</li>
<li><p>能根据中断号自动获取中断入口地址送PC</p>
<ul>
<li><img src="https://api2.mubu.com/v3/document_image/e7da8ad8-18e6-4141-9472-db00c197f905-329792.jpg" alt="img"></li>
</ul>
</li>
</ul>
</li>
<li><p>软件支持</p>
<ul>
<li><p>中断返回指令支持</p>
</li>
<li><p>编写中断服务程序</p>
</li>
<li><p>保护现场</p>
<ul>
<li><p>压栈方式保护</p>
</li>
<li><p>所有在中断服务程序中被改写的通用寄存器都需要压栈</p>
</li>
<li><p>EPC，中断屏蔽字等</p>
</li>
</ul>
</li>
<li><p>中断服务</p>
</li>
<li><p>恢复现场</p>
</li>
<li><p>中断返回</p>
</li>
<li><p>图解</p>
</li>
<li><p><img src="https://api2.mubu.com/v3/document_image/5c589cbf-4251-4b78-8e63-5e82c56975a2-329792.jpg" alt="img"></p>
</li>
</ul>
</li>
<li><p>控制器实现</p>
<ul>
<li><p>在原有状态机中增加中断响应周期路径和eret指令路径</p>
</li>
<li><p>微程序</p>
</li>
<li><p>控制字段增加与中断相关的控制信号</p>
</li>
<li><p>判别测试字段增加Pend位，表示当前微指令为微程序的最后一条微指令，需要根据中断请求信号Intr的值进行中断判别</p>
</li>
<li><p>图解</p>
<ul>
<li><img src="https://api2.mubu.com/v3/document_image/3e281b8b-61b9-4ed4-b5d6-05fc58c86bc7-329792.jpg" alt="img"></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="深入理解计算机系统"><a href="#深入理解计算机系统" class="headerlink" title="深入理解计算机系统"></a>深入理解计算机系统</h1><h2 id="第一章-计算机系统漫游"><a href="#第一章-计算机系统漫游" class="headerlink" title="第一章 计算机系统漫游"></a>第一章 计算机系统漫游</h2><h3 id="程序被翻译为不同的格式"><a href="#程序被翻译为不同的格式" class="headerlink" title="程序被翻译为不同的格式"></a>程序被翻译为不同的格式</h3><p>上下文</p>
<p>hello.c -预处理器(cpp, preprocesser)-&gt; hello.i -编译器(ccl, compiler)-&gt; hello.s -汇编器(as, assembler)-&gt; hello.o -连接器(ld, linker)-&gt; hello</p>
<p>GNU 项目 GNU is not Unix</p>
<p>​    GCC(GNU compiler collection), GDB(GNU debugger) 工具</p>
<h3 id="系统硬件"><a href="#系统硬件" class="headerlink" title="系统硬件"></a>系统硬件</h3><h4 id="总线"><a href="#总线" class="headerlink" title="总线"></a>总线</h4><p>字长, bit byte 为国际单位, 字长不是, 字长与机器本身相关</p>
<h4 id="io-设备"><a href="#io-设备" class="headerlink" title="io 设备"></a>io 设备</h4><p>每个 io 设备都通过一个控制器或适配器与 io 总线相连</p>
<p>控制器是io 设备本身或者系统的主印刷电路板上的芯片组</p>
<p>适配器是一块插在主板插槽上的卡</p>
<h4 id="主存"><a href="#主存" class="headerlink" title="主存"></a>主存</h4><p>DRAM(dynamic random access memory)</p>
<h4 id="处理器-CPU"><a href="#处理器-CPU" class="headerlink" title="处理器 CPU"></a>处理器 CPU</h4><p>处理器的核心是一个大小为一个字的存储设备(寄存器), 成为程序计数器(PC), PC 在任何时候都指向主存中的某条机器指令</p>
<p>处理器的</p>
<p>​    指令集架构: 每条机器代码指令的效果</p>
<p>​    微体系结构: 处理器实际上是如何实现的</p>
<h3 id="存储设备形成层次结构"><a href="#存储设备形成层次结构" class="headerlink" title="存储设备形成层次结构"></a>存储设备形成层次结构</h3><p>由快到慢: 寄存器, L1 高速缓存, L2 高速缓存, L3 高速缓存, DRAM, 本地二级存储(本地硬盘), 远程二级存储(分布式文件系统, web 服务器)</p>
<h3 id="操作系统管理硬件"><a href="#操作系统管理硬件" class="headerlink" title="操作系统管理硬件"></a>操作系统管理硬件</h3><h4 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h4><p>上下文切换</p>
<p>内核: 内核是操作系统代码常驻主存的部分</p>
<h4 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h4><p>每个线程都运行在进程的上下文中, 并共享同样的代码和全局数据</p>
<h4 id="虚拟内存"><a href="#虚拟内存" class="headerlink" title="虚拟内存"></a>虚拟内存</h4><p> <img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gip88f6ju0j30mh0inths.jpg" alt="IMG_FB723107648D-1"></p>
<h4 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h4><h3 id="重要主题"><a href="#重要主题" class="headerlink" title="重要主题"></a>重要主题</h3><h4 id="并发和并行"><a href="#并发和并行" class="headerlink" title="并发和并行"></a>并发和并行</h4><blockquote>
<p>你吃饭吃到一半，电话来了，你一直到吃完了以后才去接，这就说明你不支持并发也不支持并行。<br>你吃饭吃到一半，电话来了，你停了下来接了电话，接完后继续吃饭，这说明你支持并发。<br>你吃饭吃到一半，电话来了，你一边打电话一边吃饭，这说明你支持并行。</p>
<p>并发的关键是你有处理多个任务的能力，不一定要同时。<br>并行的关键是你有同时处理多个任务的能力。</p>
<p>所以我认为它们最关键的点就是：是否是『同时』。</p>
<p><strong>转自知乎</strong></p>
</blockquote>
<p><strong>处理器</strong>, 和操作系统课的并发区分! </p>
<p>并发: 指一个同时具有多个活动的系统</p>
<p>并行: 用并发来使一个系统运行的更快</p>
<h5 id="线程级并发"><a href="#线程级并发" class="headerlink" title="线程级并发"></a>线程级并发</h5><p>单处理器</p>
<p>多核处理器</p>
<p>超线程(同时多线程)???</p>
<h5 id="指令级并行"><a href="#指令级并行" class="headerlink" title="指令级并行"></a>指令级并行</h5><p>现代处理器可以同时执行多条指令的属性称为指令级并行</p>
<p>超标量: 如果处理器可以达到比一个周期一条指令更快的执行速率, 就称之为超标量处理器</p>
<h5 id="单指令-多数据并行"><a href="#单指令-多数据并行" class="headerlink" title="单指令, 多数据并行"></a>单指令, 多数据并行</h5><p>允许一条指令产生多个可以并行执行的操作</p>
<h4 id="抽象"><a href="#抽象" class="headerlink" title="抽象"></a>抽象</h4><h2 id="第二章-信息的表示和处理"><a href="#第二章-信息的表示和处理" class="headerlink" title="第二章 信息的表示和处理"></a>第二章 信息的表示和处理</h2><p>ISO: international organization for standardization</p>
<h3 id="信息存储"><a href="#信息存储" class="headerlink" title="信息存储"></a>信息存储</h3><p>内存 –&gt; 虚拟内存</p>
<p>每个字节 –&gt; 地址</p>
<p>所有可能的地址的集合 –&gt; 虚拟地址空间</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gj41qk2i2gj30gv0exafo.jpg" alt="IMG_0A3C8AB125D9-1"></p>
<p>0x12345678</p>
<p>大端 12 34 56 78</p>
<p>小端 78 56 34 12</p>
<h3 id="整数运算"><a href="#整数运算" class="headerlink" title="整数运算"></a>整数运算</h3><ul>
<li><p>检测无符号加法中的溢出</p>
<p>S = x + y - 2^w^</p>
<p>而 x, y &lt; 2^w^</p>
<p>所以 S &lt; x, y</p>
</li>
<li><p>无符号数求反</p>
<p>!x = 2^w^ - x</p>
<p>∵ !x + x = 2^w^</p>
</li>
<li><p>补码加法</p>
<p>x + y = x + y - 2 * 2^w-1^</p>
<p>x + y = x + y</p>
<p>x + y = x + y + 2* 2^w-1^</p>
<p>(符号位的权为 2^w-1^)</p>
</li>
<li><p>补码的溢出</p>
<p>参考补码加法和无符号加法的溢出, 可知 S 与 x, y 符号相反时发生溢出</p>
</li>
<li><p>补码乘法</p>
<p>-2^w-1^&lt;x, y&lt;2^w-1^-1</p>
<p>-2^w-1^ * (2^w-1^-1) &lt; x*y &lt; 2^w-1^ * 2^w-1^</p>
</li>
<li><p>除以 2</p>
<p>x&gt;&gt;k = x/2^k^ 向下取整 (因为右移出去的 1 变成 0 , 值变小)</p>
<p>但是对于负数, 我们希望向 0 舍入, 引入概念偏置</p>
<p>偏置 biasing(b) 移k 位, b = 2^k^-1</p>
<p>对于不需要舍入的, 不会改变值, 对于需要舍入的会进 1 位, 从而实现向上舍入</p>
</li>
</ul>
<h3 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h3><ul>
<li><p>IEEE 754表示</p>
<p>SME 为有效值, sfe 为实际存储中的值</p>
<p>V = (-1)^s^ * M * 2^E^</p>
<p>S sign 符号</p>
<p>M significand 尾数</p>
<p>E exponent 阶码</p>
<p>32 位 S 31 E 30-23 M 22-0</p>
<p>64 位 S 63 E 62-52 M 51-0</p>
<p><strong>分类</strong></p>
<ul>
<li><p>规格化 S = s, E = e - bias, M = f + 1</p>
<p>0&lt;e&lt;2^k^-1</p>
<p>bias = 2^k-1^-1</p>
<p>eg: 对于 32 位, E 的取值为 1-127 ~ 254-127</p>
<p>f+1 是因为有一个隐含的 1(implied leading 1)</p>
</li>
<li><p>非规格化 S = s, E = 1 - bias, M = f</p>
<p>e = 0</p>
<p>注意规格化数和非规格化数之间的平滑转换</p>
</li>
<li><p>特殊值</p>
<p>e = 2^k^-1</p>
<p>s=0 正无穷</p>
<p>s=1 负无穷</p>
<p>f != 0 NaN(not a number)</p>
<p>e =0 f = 0 0</p>
</li>
</ul>
</li>
</ul>
<p><a href="https://www.zhihu.com/question/40571490/answer/746043817?utm_source=qq&utm_medium=social&utm_oi=806118869101088768">CPU 的工作原理是什么 知乎</a></p>
<h1 id="大萝卜提纲"><a href="#大萝卜提纲" class="headerlink" title="大萝卜提纲"></a>大萝卜提纲</h1>]]></content>
      <categories>
        <category>cs</category>
      </categories>
      <tags>
        <tag>Organization</tag>
      </tags>
  </entry>
  <entry>
    <title>c 艹 从入门到 mfc 到 qt</title>
    <url>/2020/03/20/cpp/</url>
    <content><![CDATA[<blockquote>
<p>简介: cpp 简要指北</p>
</blockquote>
<h1 id="c艹指南"><a href="#c艹指南" class="headerlink" title="c艹指南"></a>c艹指南</h1><ul>
<li><p>简单入门：</p>
<span id="more"></span></li>
</ul>
<h2 id="iterator-second"><a href="#iterator-second" class="headerlink" title="iterator.second"></a>iterator.second</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">std::map&lt;X, Y&gt;实际储存了一串std::pair&lt;const X, Y&gt;</span><br><span class="line"></span><br><span class="line">std::map&lt;std::string, int&gt; m &#x3D; &#x2F;* fill it *&#x2F;;</span><br><span class="line">auto it &#x3D; m.begin();</span><br><span class="line"></span><br><span class="line">这里，如果你用*it，那么你将得到map第一个元素的std::pair：</span><br><span class="line"></span><br><span class="line">现在你可以接收std::pair的两个元素：</span><br><span class="line"></span><br><span class="line">(*it).first会得到key，</span><br><span class="line"></span><br><span class="line">(*it).second会得到value。</span><br><span class="line"></span><br><span class="line">这等同于it-&gt;first和it-&gt;second。</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="c-amp-h文件-h文件里不要定义变量，可以声明！！"><a href="#c-amp-h文件-h文件里不要定义变量，可以声明！！" class="headerlink" title=".c&amp;.h文件 .h文件里不要定义变量，可以声明！！"></a><a href="https://www.cnblogs.com/laojie4321/archive/2012/03/30/2425015.html">.c&amp;.h文件</a> .h文件里不要定义变量，可以声明！！</h2><ul>
<li><p>一个经典错误。3a222<br>在a.h头文件中定义变量temp并初始化，即显式初始化。int temp = 0；</p>
<p>a.c b.c文件中都包含了a.h头文件，则在编译时会出现：multiple definition of `a’的错误。</p>
<p>a.h中定义变量temp，不初始化为0即为不显示初始化。</p>
<p>不显示初始化不出错原因：<br>—— 不显式的初始化，在C语言中（C++中不是这样的），则先假定为声明，多次声明是没错的，最后才是定义。</p>
</li>
<li><p>强符号和弱符号</p>
</li>
<li><p>命名空间</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  bool:         所占字节数：1    最大值：1        最小值：0</span><br><span class="line">  char:         所占字节数：1    最大值：        最小值：?</span><br><span class="line">  signed char:     所占字节数：1    最大值：        最小值：?</span><br><span class="line">  unsigned char:     所占字节数：1    最大值：?        最小值：</span><br><span class="line">  wchar_t:     所占字节数：4    最大值：2147483647        最小值：-2147483648</span><br><span class="line">  short:         所占字节数：2    最大值：32767        最小值：-32768</span><br><span class="line">  int:         所占字节数：4    最大值：2147483647    最小值：-2147483648</span><br><span class="line">  unsigned:     所占字节数：4    最大值：4294967295    最小值：0</span><br><span class="line">  long:         所占字节数：8    最大值：9223372036854775807    最小值：-9223372036854775808</span><br><span class="line">  unsigned long:     所占字节数：8    最大值：18446744073709551615    最小值：0</span><br><span class="line">  double:     所占字节数：8    最大值：1.79769e+308    最小值：2.22507e-308</span><br><span class="line">  long double:     所占字节数：16    最大值：1.18973e+4932    最小值：3.3621e-4932</span><br><span class="line">  float:         所占字节数：4    最大值：3.40282e+38    最小值：1.17549e-38</span><br><span class="line">  size_t:     所占字节数：8    最大值：18446744073709551615    最小值：0</span><br><span class="line">string:     所占字节数：24</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Extern"><a href="#Extern" class="headerlink" title="Extern"></a>Extern</h2><p>用extern来声明在别的文件中已经存在的变量和函数，而且格式必须严格一致（比如数组不等价于指针）</p>
<p>区分声明与定义</p>
<p><em><strong>*1、一种是需要建立存储空间的。例如：int a 在声明的时候就已经建立了存储空间。*</strong></em></p>
<p><em><strong>*2、另一种是不需要建立存储空间的。 例如：extern int a 其中变量a是在别的文件中定义的*</strong></em></p>
<p>声明是向编译器介绍名字－－标识符。它告诉编译器“这个函数或变量在某处可找到，它的模样象什么”。</p>
<p>而定义是说：“在这里建立变量”或“在这里建立函数”。它为名字分配存储空间。无论定义的是函数还是变量，编译器都要为它们在定义点分配存储空间。对于变量，编译器确定变量的大小，然后在内存中开辟空间来保存其数据，对于函数，编译器会生成代码，这些代码最终也要占用一定的内存。</p>
<ul>
<li><p>auto自动判断变量类型</p>
</li>
<li><p>static    <strong>static</strong> 存储类指示编译器在程序的生命周期内保持局部变量的存在，而不需要在每次它进入和离开作用域时进行创建和销毁。因此，使用 static 修饰局部变量可以在函数调用之间保持局部变量的值。</p>
</li>
</ul>
<h2 id="传参"><a href="#传参" class="headerlink" title="传参"></a>传参</h2><table>
<thead>
<tr>
<th align="left">调用类型</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><a href="https://www.runoob.com/cplusplus/cpp-function-call-by-value.html">传值调用</a></td>
<td align="left">该方法把参数的实际值复制给函数的形式参数。在这种情况下，修改函数内的形式参数对实际参数没有影响。</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cplusplus/cpp-function-call-by-pointer.html">指针调用</a></td>
<td align="left">该方法把参数的地址复制给形式参数。在函数内，该地址用于访问调用中要用到的实际参数。这意味着，修改形式参数会影响实际参数。</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cplusplus/cpp-function-call-by-reference.html">引用调用</a></td>
<td align="left">该方法把参数的引用复制给形式参数。在函数内，该引用用于访问调用中要用到的实际参数。这意味着，修改形式参数会影响实际参数。</td>
</tr>
</tbody></table>
<ul>
<li>参数可以有默认值</li>
</ul>
<h2 id="lambda表达式"><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a>lambda表达式</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">[capture](parameters)-&gt;return_type&#123;body&#125;</span><br></pre></td></tr></table></figure>

<p>大家可能会想<code>lambda</code>表达式最前面的方括号的意义何在？其实这是<code>lambda</code>表达式一个很要的功能，就是闭包。这里我们先讲一下<code>lambda</code>表达式的大致原理：每当你定义一个<code>lambda</code>表达式后，编译器会自动生成一个匿名类（这个类当然重载了<code>()</code>运算符），我们称为闭包类型（closure type）。那么在运行时，这个<code>lambda</code>表达式就会返回一个匿名的闭包实例，其实一个右值。所以，我们上面的<code>lambda</code>表达式的结果就是一个个闭包。闭包的一个强大之处是其可以通过传值或者引用的方式捕捉其封装作用域内的变量，前面的方括号就是用来定义捕捉模式以及变量，我们又将其称为<code>lambda</code>捕捉块。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">10</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">auto</span> add_x = [x](<span class="keyword">int</span> a) &#123; <span class="keyword">return</span> a + x; &#125;;  <span class="comment">// 复制捕捉x</span></span><br><span class="line">    <span class="keyword">auto</span> multiply_x = [&amp;x](<span class="keyword">int</span> a) &#123; <span class="keyword">return</span> a * x; &#125;;  <span class="comment">// 引用捕捉x</span></span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; <span class="built_in">add_x</span>(<span class="number">10</span>) &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; <span class="built_in">multiply_x</span>(<span class="number">10</span>) &lt;&lt; endl;</span><br><span class="line">    <span class="comment">// 输出：20 100</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>函数返回数组，返回类型为指针，返回的数组要定义成静态数组</li>
<li>引用！=指针</li>
<li>cout&lt;&lt; cin&gt;&gt;</li>
<li>ifndef endif</li>
<li>vector转数组：&amp;vector[0]传参</li>
<li><code>explicit</code>的作用是用来声明类构造函数是显示调用的，而非隐式调用，所以只用于修饰单参构造函数。因为无参构造函数和多参构造函数本身就是显示调用的。再加上<code>explicit</code>关键字也没有什么意义。</li>
<li>~ ：析构函数</li>
<li>template &lt;typename&gt; … 模板（泛型编程）</li>
<li>&amp;&amp; r-value reference</li>
</ul>
<h2 id="虚函数"><a href="#虚函数" class="headerlink" title="虚函数"></a>虚函数</h2><p>➢ 编译程序为有虚函数的类创建一个虚函数入口地址表VFT， </p>
<p>➢ 表首地址存放在对象的起始单元中。</p>
<p>➢ 当对象调用虚函数时，通过其起始单元得到VFT首址，</p>
<p>动态绑定到相应的函数成员。</p>
<h2 id="原型-声明-定义"><a href="#原型-声明-定义" class="headerlink" title="原型 声明 定义"></a>原型 声明 定义</h2><p>声明: 指出存储类型, 给存储单元指定名称, 声明是向编译器介绍名字和模样</p>
<p>​    声明分为两种: 需要建立存储空间的如<code>int a</code>; 不需要建立存储空间的如<code>extern int a</code></p>
<p>定义: 分配内存空间, 定义是说”在这里建立变量(函数)” –&gt; 建立空间</p>
<p><strong>基本类型变量的声明和定义是同时产生的, 对于对象来说则是分开的</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">A a; <span class="comment">//对象声明</span></span><br><span class="line">a = <span class="keyword">new</span> <span class="built_in">A</span>(); <span class="comment">//对象定义(初始化)</span></span><br></pre></td></tr></table></figure>

<p>所谓定义就是（编译器）创建一个对象，为这个对象分配一块内存，并给它取上一个名字，这个名字就是就是我们经常所说的变量名或对象名。</p>
<p>声明有2重含义：</p>
<p>（1） 告诉编译器，这个名字已经匹配到一块内存上，下面的代码用到变量或者对象是在别的地方定义的。声明可以出现多次。</p>
<p>（2） 告诉编译器，这个名字已经被预定了，别的地方再也不能用它来作为变量名或对象名。</p>
<p><em><strong>*定义和声明的最重要区别就是：*</strong></em></p>
<p><em><strong>*定义创建对象并为这个对象分配了内存，声明没有分配内存。*</strong></em></p>
<p>函数原型: 在<a href="https://zh.wikipedia.org/wiki/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1">计算机编程</a>中，<strong>函数原型</strong>（英语：<strong>Function prototype</strong>）或<strong>函数接口</strong>（英语：<strong>Function interface</strong>）是用于指定函数的名称和<a href="https://zh.wikipedia.org/wiki/%E7%B1%BB%E5%9E%8B%E7%89%B9%E5%BE%81">类型特征</a>（<a href="https://zh.wikipedia.org/wiki/%E5%85%83%E6%95%B0">元数</a>，参数的<a href="https://zh.wikipedia.org/wiki/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B">数据类型</a>和返回值类型）的一种省略了函数体的<a href="https://zh.wikipedia.org/wiki/%E5%AD%90%E7%A8%8B%E5%BA%8F">函数</a><a href="https://zh.wikipedia.org/w/index.php?title=%E5%A3%B0%E6%98%8E&action=edit&redlink=1">声明</a>。</p>
<h2 id="strcut和class的区别"><a href="#strcut和class的区别" class="headerlink" title="strcut和class的区别"></a>strcut和class的区别</h2><ol>
<li>默认的继承访问权。class默认的是private,strcut默认的是public。</li>
<li>默认访问权限：struct作为数据结构的实现体，它默认的数据访问控制是public的，而class作为对象的实现体，它默认的成员变量访问控制是private的。</li>
<li>“class”这个关键字还用于定义模板参数，就像“typename”。但关建字“struct”不用于定义模板参数</li>
<li>class和struct在使用大括号{ }上的区别<br>关于使用大括号初始化<br>1.）class和struct如果定义了构造函数的话，都不能用大括号进行初始化<br>2.）如果没有定义构造函数，struct可以用大括号初始化。<br>3.）如果没有定义构造函数，且所有成员变量全是public的话，class可以用大括号初始化</li>
<li>(<a href="https://www.jianshu.com/p/409f931c17d9">https://www.jianshu.com/p/409f931c17d9</a>)</li>
</ol>
<h2 id="namespace"><a href="#namespace" class="headerlink" title="namespace"></a>namespace</h2><ol>
<li>类的头文件应该是自己形成一个命名空间, 然后 cpp <strong>文件因为是相当于在类外进行定义</strong>所以要使用命名空间指明函数定义</li>
</ol>
<h2 id="explicit-implicit"><a href="#explicit-implicit" class="headerlink" title="explicit implicit"></a>explicit implicit</h2><p>上面的代码中, “CxString string2 = 10;” 这句为什么是可以的呢? 在C++中, 如果的构造函数只有一个参数时, 那么在编译的时候就会有一个缺省的转换操作:将该构造函数对应数据类型的数据转换为该类对象. 也就是说 “CxString string2 = 10;” 这段代码, 编译器自动将整型转换为CxString类对象, 实际上等同于下面的操作:</p>
<p><code>CxString string2(10);</code></p>
<p>当使用 explicit 关键字修饰构造函数以后, 就能避免这种操作</p>
<p>默认情况下构造函数都是 implicit 的</p>
<h2 id="friend-友元"><a href="#friend-友元" class="headerlink" title="friend 友元"></a>friend 友元</h2><p>原则上, 类的私有（private）和受保护（protected）成员不能从声明它们的同一类外部访问。但是, 此规则不适用于友元 “friends”。</p>
<p>以friend关键字修饰的函数或类称为友元函数或友元类。</p>
<p><strong>友元函数</strong>是可以直接访问类的私有成员的非成员函数。它是定义在类外的普通函数，它不属于任何类，但需要在类的定义中加以声明，声明时只需在友元的名称前加上关键字friend，其格式如下：</p>
<p>  <code> friend 类型 函数名(形式参数);</code></p>
<p><strong>友元类</strong>的所有成员函数都是另一个类的友元函数，都可以访问另一个类中的隐藏信息（包括私有成员和保护成员）。    </p>
<p>　　当希望一个类可以存取另一个类的私有成员时，可以将该类声明为另一类的友元类。定义友元类的语句格式如下：</p>
<p><code>friend class 类名;</code></p>
<p>其中：friend和class是关键字，类名必须是程序中的一个已定义过的类。</p>
<p><strong>使用友元类时注意</strong>：</p>
<p>　　1、友元关系不能被继承。</p>
<p>　　2、友元关系是单向的，不具有交换性。若类B是类A的友元，类A不一定是类B的友元，要看在类中是否有相应的声明。</p>
<p>　　3、友元关系具有非传递性。若类B是类A的友元，类C是B的友元，类C不一定是类A的友元，同样要看类中是否有相应的申明。</p>
<h2 id="public-protect-private"><a href="#public-protect-private" class="headerlink" title="public protect private"></a>public protect private</h2><p><strong>继承无法访问父变量的 private 成员</strong></p>
<p><strong>访问权限</strong></p>
<p><strong>private</strong>：私有成员</p>
<p>仅可被本类的函数成员访问</p>
<p>不能被派生类、其它类和普通函数访问</p>
<p><strong>protected</strong>：受保护成员</p>
<p>可被本类和派生类的函数成员访问</p>
<p>不能被其它类函数成员和普通函数访问</p>
<p><strong>public</strong>：公有成员</p>
<p>可被任何函数成员和普通函数访问</p>
<p><strong>继承权限</strong><br><strong>public继承</strong><br>派生类通过public继承，基类的各种权限不变 。<br>派生类的成员函数，可以访问基类的public成员、protected成员，但是无法访问基类的private成员。<br>派生类的实例变量，可以访问基类的public成员，但是无法访问protected、private成员，仿佛基类的成员之间加到了派生类一般。<br>可以将public继承看成派生类将基类的public,protected成员囊括到派生类，但是不包括private成员。</p>
<p><strong>protected继承</strong><br> 派生类通过protected继承，基类的public成员在派生类中的权限变成了protected 。protected和private不变。<br>派生类的成员函数，可以访问基类的public成员、protected成员，但是无法访问基类的private成员。<br>派生类的实例变量，无法访问基类的任何成员，因为基类的public成员在派生类中变成了protected。<br>可以将protected继承看成派生类将基类的public,protected成员囊括到派生类，全部作为派生类的protected成员，但是不包括private成员。<br>private成员是基类内部的隐私，除了友元，所有人员都不得窥探。派生类的友元，都不能访问</p>
<p><strong>private继承</strong><br>派生类通过private继承，基类的所有成员在派生类中的权限变成了private。<br>派生类的成员函数，可以访问基类的public成员、protected成员，但是无法访问基类的private成员。<br>派生类的实例变量，无法访问基类的任何成员，因为基类的所有成员在派生类中变成了private。<br>可以将private继承看成派生类将基类的public,protected成员囊括到派生类，全部作为派生类的private成员，但是不包括private成员。<br>private成员是基类内部的隐私，除了友元，所有人员都不得窥探。派生类的友元，都不能访问</p>
<p><strong>总结：继承修饰符，就像是一种筛子，将基类的成员筛到派生类。public、protected、private，就是筛子的眼。</strong><br><strong>通过public继承，所有基类成员（除了private），public、protected都到了派生类里面，public筛眼比较大，不会改变访问权限。</strong><br><strong>通过protected继承，所有基类成员（除了private），public、protected都到了派生类里面，protected筛眼大小适中，所有过来的成员都变成了protected。</strong><br><strong>通过private继承，所有基类成员（除了private），public、protected都到了派生类里面，private筛眼最小，所有过来的成员都变成了private。</strong></p>
<h2 id="隐式转换和显式转换"><a href="#隐式转换和显式转换" class="headerlink" title="隐式转换和显式转换"></a>隐式转换和显式转换</h2><p>隐式转换: 比如 double = int, 或者调用构造函数的那种(见explicit implicit)</p>
<p>显式转换: 又称强制类型转换. 比如 int(), static_cast</p>
<h2 id="默认构造函数-析构函数-拷贝构造函数-拷贝运算符-编译器提供"><a href="#默认构造函数-析构函数-拷贝构造函数-拷贝运算符-编译器提供" class="headerlink" title="默认构造函数, 析构函数, 拷贝构造函数, 拷贝运算符(编译器提供)"></a>默认构造函数, 析构函数, 拷贝构造函数, 拷贝运算符(编译器提供)</h2><h3 id="默认构造函数"><a href="#默认构造函数" class="headerlink" title="默认构造函数"></a>默认构造函数</h3><p>在这个程序片段中Bar的成员foo含有默认构造函数，它初始化自己的类成员val为0而Bar本身并没有定义默认的构造函数，这个构造函数的目的是为了初始化它的成员变量foo，实际上就是调用Bar::foo的默认构造函数，但它并不会做一丁点关于另外一个变量str的初始化和赋值工作，初始化Bar::foo是编译器的责任，二初始化str是程序员的责任</p>
<p>大概意思就是: 如果类内的成员有构造函数, 那么编译器生成的默认构造函数中就会调用这个成员的默认构造函数, 如果父类有默认构造函数, 就会调用父类的默认构造函数, 如果 class 里有虚函数, 或者带有虚基类, 会生成 vtbl. 否则就会生成 trival 构造函数(不做任何事情)</p>
<h3 id="默认析构函数"><a href="#默认析构函数" class="headerlink" title="默认析构函数"></a>默认析构函数</h3><p>情况同默认构造函数</p>
<p>对于编译器提供的默认析构函数，不管是无用的，还是非无用的，它们都不会自动清除对象里面所包含的资源。</p>
<h3 id="拷贝构造函数"><a href="#拷贝构造函数" class="headerlink" title="拷贝构造函数"></a>拷贝构造函数</h3><p>浅拷贝(指针)</p>
<h3 id="拷贝运算符"><a href="#拷贝运算符" class="headerlink" title="拷贝运算符"></a>拷贝运算符</h3><p>浅拷贝</p>
<h2 id="返回引用"><a href="#返回引用" class="headerlink" title="返回引用"></a>返回引用</h2><p>当返回的值不是引用型时，编译器会专门给返回值分配出一块内存的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">T function1()&#123;</span><br><span class="line">2     T t(0);</span><br><span class="line">3     return t;</span><br><span class="line">4 &#125;</span><br><span class="line">5 T x&#x3D;function1();</span><br></pre></td></tr></table></figure>

<p>这里的过程是：<br>1.创建命名对象t<br>2.拷贝构造一个无名的临时对象，并返回这个临时对象<br>3.由临时对象拷贝构造对象x<br>4.T x=function1();这句语句结束时，析构临时对象<br>这里一共生成了3个对象，一个命名对象t，一个临时对象作为返回值，一个命名对象x。</p>
<p>返回引用, 其实就是返回了一个对象的引用, 新对象 = 返回的引用, 调用了拷贝构造函数</p>
<h2 id="copy-amp-swap"><a href="#copy-amp-swap" class="headerlink" title="copy&amp;swap"></a>copy&amp;swap</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Widget&amp; Widget::<span class="keyword">operator</span>=(<span class="keyword">const</span> Widget &amp; rhs)&#123;</span><br><span class="line">  Widget <span class="built_in">tmp</span>(rhs);<span class="comment">//这个变量会被自动销毁(局部变量</span></span><br><span class="line">  <span class="built_in">swap</span>(tmp);</span><br><span class="line">  <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="虚基类"><a href="#虚基类" class="headerlink" title="虚基类"></a>虚基类</h2><p>虚继承: 避免继承多次同一个基类</p>
<p>在虚继承中，虚基类是由最终的派生类初始化的，换句话说，最终派生类的构造函数必须要调用虚基类的构造函数。对最终的派生类来说，<a href="http://www.gfgb120.com/">虚基类是间接基类</a>，而不是直接基类。这跟普通继承不同，在普通继承中，派生类构造函数中只能调用直接基类的构造函数，不能调用间接基类的</p>
<p><strong>在那之前，所有虚基类的构造函数必须被调用，按照声明的继承顺序从左往右，从最深到最浅的顺序</strong></p>
<h2 id="静态数据成员"><a href="#静态数据成员" class="headerlink" title="静态数据成员"></a>静态数据成员</h2><p>静态成员变量必须要在类外部定义, 因为要在对象创建之前就分配内存</p>
<h2 id="缺省参数"><a href="#缺省参数" class="headerlink" title="缺省参数"></a>缺省参数</h2><p>带缺省值的参数必须放在参数列表的最后面。因为传参是从右向左的。<br>缺省参数不能同时在函数声明和定义中出现，只能二者留其一。</p>
<h2 id="默认访问权限"><a href="#默认访问权限" class="headerlink" title="默认访问权限"></a>默认访问权限</h2><p>struct, union: public</p>
<p>class: private</p>
<h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><p>在构造函数体前初始化：只读成员、引用成员、对象成员, 包括在声明时初始化和在列表中初始化, 静态变量只能在类外初始化</p>
<h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p>从小到大可以分为五级：</p>
<p>① 作用于表达式内 (常量) </p>
<p>② 作用于函数成员内 (函数参数、局部变量、局部类型) </p>
<p>③ 作用于类或派生类内 (数据/函数/类型 成员) </p>
<p>④ 作用于基类内 (数据/函数/类型 成员) </p>
<p>⑤ 作用于虚基类内 (数据/函数/类型 成员)</p>
<p>虚基类 》基类 》类 /派生类 》成员函数 》表达式内</p>
<h2 id="成员指针"><a href="#成员指针" class="headerlink" title="成员指针"></a>成员指针</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Class Student &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> number;</span><br><span class="line">……</span><br><span class="line">&#125;；</span><br><span class="line"></span><br><span class="line"><span class="function">Student <span class="title">xu</span><span class="params">(<span class="number">123</span>,<span class="string">&quot;Xuxiangyang&quot;</span>,<span class="number">100</span>)</span></span>;</span><br><span class="line"><span class="function">Student <span class="title">zhang</span><span class="params">(<span class="number">456</span>,”Zhangsan”,<span class="number">99</span>)</span></span>;</span><br><span class="line"><span class="keyword">int</span> *p=&amp;xu.number; <span class="comment">// p 指向对象 xu中的number</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Student::*q = &amp;Student::number; <span class="comment">// q 数据成员指针</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//int Student::*q; q= &amp;Student::number;</span></span><br><span class="line">cout &lt;&lt; xu.*q&lt;&lt;endl; <span class="comment">// cout &lt;&lt; xu.number &lt;&lt;endl; </span></span><br><span class="line">cout &lt;&lt; zhang.*q &lt;&lt;endl;</span><br><span class="line"><span class="keyword">int</span> *p=&amp;Student::number; <span class="comment">//无法从 Student::* 转换为 int ***</span></span><br></pre></td></tr></table></figure>

<p>对于普通指针变量来说，其值是它所指向的地址，0表示空指针。<br>而对于数据成员指针变量来说，其值是数据成员所在地址相对于对象起始地址的偏移值，空指针用-1表示</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">X</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VALUE_OF_PTR(p)     (*(long*)&amp;p)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> X::*p = <span class="number">0</span>;  <span class="comment">// VALUE_OF_PTR(p) == -1</span></span><br><span class="line">    p = &amp;X::a;      <span class="comment">// VALUE_OF_PTR(p) == 0</span></span><br><span class="line">    p = &amp;X::b;      <span class="comment">// VALUE_OF_PTR(p) == 4</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="–-重载"><a href="#–-重载" class="headerlink" title="++(–)重载"></a>++(–)重载</h2><p><a href="https://blog.csdn.net/aaqian1/article/details/85954206">https://blog.csdn.net/aaqian1/article/details/85954206</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Three <span class="keyword">operator</span>--();	<span class="comment">//声明自减运算符--重载成员函数(前缀方式)</span></span><br><span class="line">Three <span class="keyword">operator</span>--(<span class="keyword">int</span>); <span class="comment">//声明自减运算符--重载成员函数(后缀方式)</span></span><br></pre></td></tr></table></figure>











<h1 id="堆与栈"><a href="#堆与栈" class="headerlink" title="堆与栈"></a><a href="https://blog.csdn.net/hairetz/article/details/4141043">堆与栈</a></h1><h2 id="一、预备知识—程序的内存分配"><a href="#一、预备知识—程序的内存分配" class="headerlink" title="一、预备知识—程序的内存分配"></a>一、预备知识—程序的内存分配</h2><p> 一个由C/C++编译的程序占用的内存分为以下几个部分 </p>
<ol>
<li>栈区（stack）—  由编译器自动分配释放  ，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈。 </li>
<li><strong>堆区</strong>（heap） —  一般由程序员分配释放，  若程序员不释放，程序结束时可能由OS回收  。注意它与数据结构中的堆是两回事，分配方式倒是类似于链表，呵呵。 </li>
<li>全局区（静态区)（static）— 全局变量和静态变量的存储是放在一块的，初始化的全局变量和静态变量在一块区域，  未初始化的全局变量和未初始化的静态变量在相邻的另一块区域。  -  程序结束后由系统释放。 </li>
<li>文字常量区  —常量字符串就是放在这里的。程序结束后由系统释放 </li>
<li>程序代码区—存放函数体的二进制代码。  </li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main.cpp  </span></span><br><span class="line"><span class="keyword">int</span>  a  =  <span class="number">0</span>;  全局初始化区  </span><br><span class="line"><span class="keyword">char</span>  *p1;  全局未初始化区  </span><br><span class="line"><span class="built_in">main</span>()  </span><br><span class="line">&#123;  </span><br><span class="line">  <span class="keyword">int</span>  b;  栈  </span><br><span class="line">  <span class="keyword">char</span>  s[]  =  <span class="string">&quot;abc&quot;</span>;  栈  </span><br><span class="line">  <span class="keyword">char</span>  *p2;  栈  </span><br><span class="line">  <span class="keyword">char</span>  *p3  =  <span class="string">&quot;123456&quot;</span>;  <span class="number">123456</span>/<span class="number">0</span>在常量区，p3在栈上。  </span><br><span class="line">  <span class="keyword">static</span>  <span class="keyword">int</span>  c  =<span class="number">0</span>；  全局（静态）初始化区  </span><br><span class="line">  p1  =  (<span class="keyword">char</span>  *)<span class="built_in">malloc</span>(<span class="number">10</span>);  </span><br><span class="line">  p2  =  (<span class="keyword">char</span>  *)<span class="built_in">malloc</span>(<span class="number">20</span>);  </span><br><span class="line">  <span class="comment">//分配得来得10和20字节的区域就在堆区。  </span></span><br><span class="line">  <span class="built_in">strcpy</span>(p1,  <span class="string">&quot;123456&quot;</span>);  <span class="comment">//123456/0放在常量区，编译器可能会将它与p3所指向的&quot;123456&quot;优化成一个地方。  </span></span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<h2 id="二、堆和栈的理论知识"><a href="#二、堆和栈的理论知识" class="headerlink" title="二、堆和栈的理论知识"></a>二、堆和栈的理论知识</h2><h3 id="2-1申请方式"><a href="#2-1申请方式" class="headerlink" title="2.1申请方式"></a>2.1申请方式</h3><ul>
<li>stack:<br>由系统自动分配。 例如，声明在函数中一个局部变量  int  b;  系统自动在栈中为b开辟空间  </li>
<li>heap:<br>需要程序员自己申请，并指明大小，在c中malloc函数<br>如p1  =  (char  *)malloc(10);<br>在C++中用new运算符<br>如p2  =  new  char[10];<br><strong>但是注意p1、p2本身是在栈中的。</strong>  </li>
</ul>
<h3 id="2-2-申请后系统的响应"><a href="#2-2-申请后系统的响应" class="headerlink" title="2.2  申请后系统的响应"></a>2.2  申请后系统的响应</h3><ul>
<li>栈：只要栈的剩余空间大于所申请空间，系统将为程序提供内存，否则将报异常提示栈溢 出。  </li>
<li>堆：首先应该知道操作系统有一个记录空闲内存地址的链表，当系统收到程序的申请时，会遍历该链表，寻找第一个空间大于所申请空间的堆结点，然后将该结点从空闲结点链表中删除，并将该结点的空间分配给程序，另外，对于大多数系统，会在这块内存空间中的首地址处记录本次分配的大小，这样，代码中的delete语句才能正确的释放本内存空间。<br>另外，由于找到的堆结点的大小不一定正好等于申请的大小，系统会自动的将多余的那部 分重新放入空闲链表中。  </li>
</ul>
<h3 id="2-3申请大小的限制"><a href="#2-3申请大小的限制" class="headerlink" title="2.3申请大小的限制"></a>2.3申请大小的限制</h3><ul>
<li>栈：在Windows下,栈是向低地址扩展的数据结构，是一块连续的内存的区域。这句话的意思是栈顶的地址和栈的最大容量是系统预先规定好的，在WINDOWS下，栈的大小是2M（也有的说是1M，总之是一个编译时就确定的常数），如果申请的空间超过栈的剩余空间时，将提示overflow。因此，能从栈获得的空间较小。  </li>
<li>堆：堆是向高地址扩展的数据结构，是不连续的内存区域。这是由于系统是用链表来存储空闲内存地址的，自然是不连续的，而链表的遍历方向是由低地址向高地址。堆的大小受限于计算机系统中有效的虚拟内存。由此可见，堆获得的空间比较灵活，也比较大。  </li>
</ul>
<h3 id="2-4申请效率的比较："><a href="#2-4申请效率的比较：" class="headerlink" title="2.4申请效率的比较："></a>2.4申请效率的比较：</h3><ul>
<li>栈由系统自动分配，速度较快。但程序员是无法控制的。  </li>
<li>堆是由new分配的内存，一般速度比较慢，而且容易产生内存碎片,不过用起来最方便.<br>另外，在WINDOWS 下，最好的方式是用VirtualAlloc分配内存，他不是在堆，也不是在栈, 是直接在进程的地址空间中保留一块内存，虽然用起来最不方便。但是速度快，也最灵活。 </li>
</ul>
<h3 id="2-5堆和栈中的存储内容"><a href="#2-5堆和栈中的存储内容" class="headerlink" title="2.5堆和栈中的存储内容"></a>2.5堆和栈中的存储内容</h3><ul>
<li>栈：在函数调用时，第一个进栈的是主函数中的下一条指令（函数调用语句的下一条可执行语句）的地址，然后是函数的各个参数，在大多数的C编译器中，参数是由右往左入栈的，然后是函数中的局部变量。注意静态变量是不入栈的。<br>当本次函数调用结束后，局部变量先出栈，然后是参数，最后栈顶指针指向最开始存的地址，也就是主函数中的下一条指令，程序由该点继续运行。  </li>
<li>堆：一般是在堆的头部用一个字节存放堆的大小。堆中的具体内容由程序员安排。  </li>
</ul>
<h3 id="2-6存取效率的比较"><a href="#2-6存取效率的比较" class="headerlink" title="2.6存取效率的比较"></a>2.6存取效率的比较</h3><p> char  s1[]  =  “aaaaaaaaaaaaaaa”;<br> char  *s2  =  “bbbbbbbbbbbbbbbbb”;<br> aaaaaaaaaaa是在运行时刻赋值的；<br> 而bbbbbbbbbbb是在编译时就确定的；<br> 但是，在以后的存取中，在栈上的数组比指针所指向的字符串(例如堆)快。<br> 比如： </p>
 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"> </span>&#123;  </span><br><span class="line">   <span class="keyword">char</span>  a  =  <span class="number">1</span>;  </span><br><span class="line">   <span class="keyword">char</span>  c[]  =  <span class="string">&quot;1234567890&quot;</span>;</span><br><span class="line">   <span class="keyword">char</span>  *p  =<span class="string">&quot;1234567890&quot;</span>; </span><br><span class="line">   a  =  c[<span class="number">1</span>];  </span><br><span class="line">   a  =  p[<span class="number">1</span>];  </span><br><span class="line">   <span class="keyword">return</span>;  </span><br><span class="line"> &#125; </span><br></pre></td></tr></table></figure>

<p> 对应的汇编代码 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10:  a  &#x3D;  c[1];  </span><br><span class="line">00401067  8A  4D  F1  mov  cl,byte  ptr  [ebp-0Fh]  </span><br><span class="line">0040106A  88  4D  FC  mov  byte  ptr  [ebp-4],cl  </span><br><span class="line">11:  a  &#x3D;  p[1];  </span><br><span class="line">0040106D  8B  55  EC  mov  edx,dword  ptr  [ebp-14h]  </span><br><span class="line">00401070  8A  42  01  mov  al,byte  ptr  [edx+1]  </span><br><span class="line">00401073  88  45  FC  mov  byte  ptr  [ebp-4],al  </span><br></pre></td></tr></table></figure>


<p>第一种在读取时直接就把字符串中的元素读到寄存器cl中，而第二种则要先把指针值读到edx中，再根据edx读取字符，显然慢了。  </p>
<h3 id="2-7小结："><a href="#2-7小结：" class="headerlink" title="2.7小结："></a>2.7小结：</h3><p>堆和栈的区别可以用如下的比喻来看出：<br>使用栈就象我们去饭馆里吃饭，只管点菜（发出申请）、付钱、和吃（使用），吃饱了就走，不必理会切菜、洗菜等准备工作和洗碗、刷锅等扫尾工作，他的好处是快捷，但是自由度小。<br>使用堆就象是自己动手做喜欢吃的菜肴，比较麻烦，但是比较符合自己的口味，而且自由度大。  (经典！) </p>
<h1 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a><a href="https://blog.csdn.net/ydar95/article/details/69822540">类型转换</a></h1><blockquote>
<p>const_cast , static_cast , dynamic_cast , reinterpret_cast</p>
</blockquote>
<h2 id="1-C风格的强制转换"><a href="#1-C风格的强制转换" class="headerlink" title="1. C风格的强制转换"></a>1. C风格的强制转换</h2><p>C风格的强制转换(Type Cast)容易理解,不管什么类型的转换都可以使用使用下面的方式.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">TypeName b = (TypeName)a;<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>当然,C++也是支持C风格的强制转换,但是C风格的强制转换可能带来一些隐患,让一些问题难以察觉.所以C++提供了一组可以用在不同场合的强制转换的函数.</p>
<h2 id="2-C-四种强制转换类型函数"><a href="#2-C-四种强制转换类型函数" class="headerlink" title="2. C++ 四种强制转换类型函数"></a>2. C++ 四种强制转换类型函数</h2><h3 id="2-1-const-cast"><a href="#2-1-const-cast" class="headerlink" title="2.1 const_cast"></a>2.1 const_cast</h3><p>1、常量指针被转化成非常量的指针，并且仍然指向原来的对象；<br>2、常量引用被转换成非常量的引用，并且仍然指向原来的对象；<br>3、const_cast一般用于修改指针。如const char *p形式。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 原始数组</span></span><br><span class="line">    <span class="keyword">int</span> ary[<span class="number">4</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印数据</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">        std::cout &lt;&lt; ary[i] &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 常量化数组指针</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span>*c_ptr = ary;</span><br><span class="line">    <span class="comment">//c_ptr[1] = 233;   //error</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过const_cast&lt;Ty&gt; 去常量</span></span><br><span class="line">    <span class="keyword">int</span> *ptr = <span class="keyword">const_cast</span>&lt;<span class="keyword">int</span>*&gt;(c_ptr);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改数据</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">        ptr[i] += <span class="number">1</span>;    <span class="comment">//pass</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印修改后的数据</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">        std::cout &lt;&lt; ary[i] &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*  out print</span></span><br><span class="line"><span class="comment">    1   2   3   4</span></span><br><span class="line"><span class="comment">    2   3   4   5</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>注意:对于在定义为常量的参数,使用const_cast可能会有不同的效果.类似代码如下</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> c_val = <span class="number">233</span>;  <span class="comment">//声明为常量类型</span></span><br><span class="line">    <span class="keyword">int</span> &amp;use_val = <span class="keyword">const_cast</span>&lt;<span class="keyword">int</span>&amp;&gt;(c_val); <span class="comment">//使用去const 引用</span></span><br><span class="line">    <span class="keyword">int</span> *ptr_val = <span class="keyword">const_cast</span>&lt;<span class="keyword">int</span>*&gt;(&amp;c_val);<span class="comment">//使用去const 指针</span></span><br><span class="line"></span><br><span class="line">    use_val = <span class="number">666</span>;  <span class="comment">//未定义行为</span></span><br><span class="line">    std::cout &lt;&lt; c_val &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; use_val &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; *ptr_val &lt;&lt; std::endl;</span><br><span class="line">    *ptr_val = <span class="number">110</span>; <span class="comment">//未定义行为</span></span><br><span class="line">    std::cout &lt;&lt; c_val &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; use_val &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; *ptr_val &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 在 vs2017 下 输出为</span></span><br><span class="line"><span class="comment">    233 666 666</span></span><br><span class="line"><span class="comment">    233 110 110</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>未定义行为:C++标准对此类行为没有做出明确规定.同一份代码在使用不同的编译器会有不同的效果.在 vs2017 下, 虽然代码中 <em>c_val , use_val , ptr_val</em> 看到的地址是一样的.但是c_val的值并没有改变.有可能在某种编译器实现后,这一份代码的<em>c_val</em> 会被改变.也有可能编译器对这类行为直接 <em>error</em> 或 <em>warning</em>.</p>
<h3 id="2-2-static-cast"><a href="#2-2-static-cast" class="headerlink" title="2.2 static_cast"></a>2.2 static_cast</h3><ol>
<li>static_cast 作用和C语言风格强制转换的效果基本一样，由于没有运行时类型检查来保证转换的安全性，所以这类型的强制转换和C语言风格的强制转换都有安全隐患。</li>
<li>用于类层次结构中基类（父类）和派生类（子类）之间指针或引用的转换。注意：进行上行转换（把派生类的指针或引用转换成基类表示）是安全的；进行下行转换（把基类指针或引用转换成派生类表示）时，由于没有动态类型检查，所以是不安全的。</li>
<li>用于基本数据类型之间的转换，如把int转换成char，把int转换成enum。这种转换的安全性需要开发者来维护。</li>
<li>static_cast不能转换掉原有类型的const、volatile、或者 __unaligned属性。(前两种可以使用const_cast 来去除)</li>
<li>在c++ primer 中说道：c++ 的任何的隐式转换都是使用 <em>static_cast</em> 来实现。</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 常规的使用方法 */</span></span><br><span class="line"><span class="keyword">float</span> f_pi=<span class="number">3.141592f</span></span><br><span class="line"><span class="keyword">int</span>   i_pi=<span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(f_pi); <span class="comment">/// i_pi 的值为 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* class 的上下行转换 */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span>&#123;</span></span><br><span class="line">    <span class="comment">// something</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub</span>:</span><span class="keyword">public</span> Base&#123;</span><br><span class="line">    <span class="comment">// something</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  上行 Sub -&gt; Base</span></span><br><span class="line"><span class="comment">//编译通过，安全</span></span><br><span class="line">Sub sub;</span><br><span class="line">Base *base_ptr = <span class="keyword">static_cast</span>&lt;Base*&gt;(&amp;sub);  </span><br><span class="line"></span><br><span class="line"><span class="comment">//  下行 Base -&gt; Sub</span></span><br><span class="line"><span class="comment">//编译通过，不安全</span></span><br><span class="line">Base base;</span><br><span class="line">Sub *sub_ptr = <span class="keyword">static_cast</span>&lt;Sub*&gt;(&amp;base);    </span><br></pre></td></tr></table></figure>

<h3 id="2-3-dynamic-cast"><a href="#2-3-dynamic-cast" class="headerlink" title="2.3 dynamic_cast"></a>2.3 dynamic_cast</h3><p><em>dynamic_cast</em>强制转换,应该是这四种中最特殊的一个,因为他涉及到面向对象的多态性和程序运行时的状态,也与编译器的属性设置有关.所以不能完全使用C语言的强制转换替代,它也是最常有用的,最不可缺少的一种强制转换.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Base</span>() &#123;&#125;</span><br><span class="line">    ~<span class="built_in">Base</span>() &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;I&#x27;m Base&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">i_am_virtual_foo</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub</span>:</span> <span class="keyword">public</span> Base&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Sub</span>() &#123;&#125;</span><br><span class="line">    ~<span class="built_in">Sub</span>() &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;I&#x27;m Sub&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">i_am_virtual_foo</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Sub-&gt;Base&quot;</span> &lt;&lt; endl;</span><br><span class="line">    Sub * sub = <span class="keyword">new</span> <span class="built_in">Sub</span>();</span><br><span class="line">    sub-&gt;<span class="built_in">print</span>();</span><br><span class="line">    Base* sub2base = <span class="keyword">dynamic_cast</span>&lt;Base*&gt;(sub);</span><br><span class="line">    <span class="keyword">if</span> (sub2base != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        sub2base-&gt;<span class="built_in">print</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;&lt;sub-&gt;base&gt; sub2base val is: &quot;</span> &lt;&lt; sub2base &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl &lt;&lt; <span class="string">&quot;Base-&gt;Sub&quot;</span> &lt;&lt; endl;</span><br><span class="line">    Base *base = <span class="keyword">new</span> <span class="built_in">Base</span>();</span><br><span class="line">    base-&gt;<span class="built_in">print</span>();</span><br><span class="line">    Sub  *base2sub = <span class="keyword">dynamic_cast</span>&lt;Sub*&gt;(base);</span><br><span class="line">    <span class="keyword">if</span> (base2sub != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        base2sub-&gt;<span class="built_in">print</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt;<span class="string">&quot;&lt;base-&gt;sub&gt; base2sub val is: &quot;</span>&lt;&lt; base2sub &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> sub;</span><br><span class="line">    <span class="keyword">delete</span> base;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* vs2017 输出为下</span></span><br><span class="line"><span class="comment">Sub-&gt;Base</span></span><br><span class="line"><span class="comment">I&#x27;m Sub</span></span><br><span class="line"><span class="comment">I&#x27;m Base</span></span><br><span class="line"><span class="comment">&lt;sub-&gt;base&gt; sub2base val is: 00B9E080   // 注:这个地址是系统分配的,每次不一定一样</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Base-&gt;Sub</span></span><br><span class="line"><span class="comment">I&#x27;m Base</span></span><br><span class="line"><span class="comment">&lt;base-&gt;sub&gt; base2sub val is: 00000000   // VS2017的C++编译器,对此类错误的转换赋值为nullptr</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>从上边的代码和输出结果可以看出:<br>对于<em>从子类到基类的指针转换</em> ,dynamic_cast 成功转换,没有什么运行异常,且达到预期结果<br>而<em>从基类到子类的转换</em> , dynamic_cast 在转换时也没有报错,但是输出给 <em>base2sub</em> 是一个 <em>nullptr</em> ,说明dynami_cast 在程序运行时对类型转换对<em>“运行期类型信息”（Runtime type information，RTTI）</em>进行了检查.<br>这个检查主要来自<em>虚函数(virtual function)</em> 在C++的面对对象思想中，虚函数起到了很关键的作用，当一个类中拥有至少一个虚函数，那么编译器就会构建出一个虚函数表(virtual method table)来指示这些函数的地址，假如继承该类的子类定义并实现了一个同名并具有同样函数签名（function siguature）的方法重写了基类中的方法，那么虚函数表会将该函数指向新的地址。此时多态性就体现出来了：当我们将基类的指针或引用指向子类的对象的时候，调用方法时，就会顺着虚函数表找到对应子类的方法而非基类的方法。<em>因此注意下代码中 Base 和 Sub 都有声明定义的一个虚函数 ” i_am_virtual_foo” ,我这份代码的 Base 和 Sub 使用 dynami_cast 转换时检查的运行期类型信息,可以说就是这个虚函数</em></p>
<h3 id="2-4-reinterpret-cast"><a href="#2-4-reinterpret-cast" class="headerlink" title="2.4 reinterpret_cast"></a>2.4 reinterpret_cast</h3><p>reinterpret_cast是强制类型转换符用来处理无关类型转换的，通常为操作数的位模式提供较低层次的重新解释！但是他仅仅是重新解释了给出的对象的比特模型，并没有进行二进制的转换！<br>他是用在任意的指针之间的转换，引用之间的转换，指针和足够大的int型之间的转换，整数到指针的转换，在下面的文章中将给出.<br>请看一个简单代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdint&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> *ptr = <span class="keyword">new</span> <span class="built_in"><span class="keyword">int</span></span>(<span class="number">233</span>);</span><br><span class="line">    <span class="keyword">uint32_t</span> ptr_addr = <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">uint32_t</span>&gt;(ptr);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;ptr 的地址: &quot;</span> &lt;&lt; hex &lt;&lt; ptr &lt;&lt; endl</span><br><span class="line">        &lt;&lt; <span class="string">&quot;ptr_addr 的值(hex): &quot;</span> &lt;&lt; hex &lt;&lt; ptr_addr &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">delete</span> ptr;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">ptr 的地址: 0061E6D8</span></span><br><span class="line"><span class="comment">ptr_addr 的值(hex): 0061e6d8</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>上述代码将指针ptr的地址的值转换成了 <em>unsigned int</em> 类型的ptr_addr 的整数值.<br>提供下IBM C++ 对 reinterpret_cast 推荐使用的地方<br>A pointer to any integral type large enough to hold it （指针转向足够大的整数类型）<br>A value of integral or enumeration type to a pointer （从整形或者enum枚举类型转换为指针）<br>A pointer to a function to a pointer to a function of a different type （从指向函数的指针转向另一个不同类型的指向函数的指针）<br>A pointer to an object to a pointer to an object of a different type （从一个指向对象的指针转向另一个不同类型的指向对象的指针）<br>A pointer to a member to a pointer to a member of a different class or type, if the types of the members are both function types or object types （从一个指向成员的指针转向另一个指向类成员的指针！或者是类型，如果类型的成员和函数都是函数类型或者对象类型）</p>
<p>下面这个例子来自 MSDN 的一个<a href="https://msdn.microsoft.com/en-us/library/e0w9f63b(VS.80).aspx">哈希函数辅助</a></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// expre_reinterpret_cast_Operator.cpp  </span></span><br><span class="line"><span class="comment">// compile with: /EHsc  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span>  </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Returns a hash code based on an address  </span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">short</span> <span class="title">Hash</span><span class="params">(<span class="keyword">void</span> *p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> val = <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">unsigned</span> <span class="keyword">int</span>&gt;(p);</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">unsigned</span> <span class="keyword">short</span>)(val ^ (val &gt;&gt; <span class="number">16</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++)</span><br><span class="line">        cout &lt;&lt; <span class="built_in">Hash</span>(a + i) &lt;&lt; endl;</span><br><span class="line">&#125;<span class="number">123456789101112131415</span></span><br></pre></td></tr></table></figure>

<h2 id="3-结尾"><a href="#3-结尾" class="headerlink" title="3. 结尾"></a>3. 结尾</h2><p>在使用强制转换的时候,请先考虑清楚我们真的需要使用强制转换和我们应该使用那种强制转换.<br>我这只是简单的介绍这四种强制转换的用途,以上是自己的理解,文章中肯定有各种问题错误,希望大家帮忙指出矫正,本文仅供参考.<br>谢谢阅读.</p>
<h1 id="cpp-实验tips"><a href="#cpp-实验tips" class="headerlink" title="cpp 实验tips"></a>cpp 实验tips</h1><h2 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h2><h3 id="struct-中的-const-成员"><a href="#struct-中的-const-成员" class="headerlink" title="struct 中的 const 成员"></a>struct 中的 const 成员</h3><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gj7iqelf3jj30rm0digmj.jpg" alt="截屏2020-09-29 下午2.45.05"></p>
<h3 id="初始化-struct"><a href="#初始化-struct" class="headerlink" title="初始化 struct"></a>初始化 struct</h3><p>结构体是常用的自定义构造类型，是一种很常见的数据打包方法。结构体对象的初始化有多种方式，分为顺序初始化、指定初始化、构造函数初始化。假如有如下结构体。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">struct A &#123;</span><br><span class="line">	int b;</span><br><span class="line">	int c;</span><br><span class="line">&#125;;</span><br><span class="line">1234</span><br></pre></td></tr></table></figure>

<p>（1）顺序初始化因为书写起来较为简约，是我们最常用的初始化方式，但相对于指定初始化，无法变更数据成员初始化顺序，灵活性较差，而且表现形式不直观，不能一眼看出 struct 各个数据成员的值。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">A</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> b;</span><br><span class="line">	<span class="keyword">int</span> c;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="number">1234</span></span><br><span class="line">A a = &#123;<span class="number">1</span>, <span class="number">2</span>&#125;;</span><br><span class="line"><span class="comment">// 点号+赋值符号</span></span><br><span class="line">A a = &#123;.b = <span class="number">1</span>, .c = <span class="number">2</span>&#125;;</span><br><span class="line"><span class="comment">//冒号</span></span><br><span class="line">A a = &#123;b:<span class="number">1</span>, c:<span class="number">2</span>&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="要注意后面是不是-0-if-检验"><a href="#要注意后面是不是-0-if-检验" class="headerlink" title="% /  要注意后面是不是 0 if 检验"></a>% /  要注意后面是不是 0 if 检验</h3><h3 id="null-与-nullptr-的区别"><a href="#null-与-nullptr-的区别" class="headerlink" title="null 与 nullptr 的区别"></a>null 与 nullptr 的区别</h3><h3 id="delete-和-free-的区别"><a href="#delete-和-free-的区别" class="headerlink" title="delete 和 free 的区别"></a>delete 和 free 的区别</h3><p>但是，free函数只是释放指针指向的内容，而该指针仍然指向原来指向的地方，此时，指针为野指针，如果此时操作该指针会导致不可预期的错误。安全做法是：在使用free函数释放指针指向的空间之后，将指针的值置为NULL。</p>
<h3 id="处有未经处理的异常-0xC0000005-读取位置-0xcccccccc-时发生访问冲突"><a href="#处有未经处理的异常-0xC0000005-读取位置-0xcccccccc-时发生访问冲突" class="headerlink" title="处有未经处理的异常: 0xC0000005: 读取位置 0xcccccccc 时发生访问冲突"></a>处有未经处理的异常: 0xC0000005: 读取位置 0xcccccccc 时发生访问冲突</h3><p>具体原因是在 destroy 的时候删除了 p 本身(题目未要求删除)</p>
<p>解决方法：在debug下，未初始化的指针的地址为0xcccccccc ， 检查下有没有什么地方使用了未初始化的指针，定位后应该是data指针没有初始化，应对其初始化：</p>
<h2 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h2><h3 id="noexcept"><a href="#noexcept" class="headerlink" title="noexcept"></a>noexcept</h3><h3 id="初始化列表"><a href="#初始化列表" class="headerlink" title="初始化列表"></a>初始化列表</h3><h3 id="amp-amp-运算符"><a href="#amp-amp-运算符" class="headerlink" title="&amp;&amp;运算符"></a>&amp;&amp;运算符</h3><h3 id="Invalid-address-specified-to-RtlValidateHea"><a href="#Invalid-address-specified-to-RtlValidateHea" class="headerlink" title="Invalid address specified to RtlValidateHea"></a>Invalid address specified to RtlValidateHea</h3><h2 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h2><h3 id="std-move"><a href="#std-move" class="headerlink" title="std::move()"></a><a href="https://zhuanlan.zhihu.com/p/94588204">std::move()</a></h3><p>前段时间和朋友聊天的过程中说到了右值和std::move以及项目代码里面不合时宜的使用std::move。以及前段时间，华为开源了方舟编译器，大神们讨论方舟编译器，有人贴出里面乱用std::move，看了一下它的源码，是有随意使用std::move的现象。因此，对右值引用和std::move做了一下回顾。</p>
<p>说到<strong>右值</strong>，先看一下什么是右值，在c++中，一个值要么是右值，要么是左值，<em>左值是指表达式结束后依然存在的持久化对象，右值是指表达式结束时就不再存在的临时对象。所有的具名变量或者对象都是左值，而右值不具名。</em></p>
<p>比如：</p>
<p>常见的右值：“abc”,123等都是右值。</p>
<p><strong>右值引用，</strong>用以引用一个右值，可以延长右值的生命期，比如：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>&amp;&amp; i = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">int</span>&amp;&amp; j = std::<span class="built_in">move</span>(i);</span><br><span class="line"><span class="keyword">int</span>&amp;&amp; k = i;<span class="comment">//编译不过，这里i是一个左值，右值引用只能引用右值</span></span><br></pre></td></tr></table></figure>

<p>可以通过下面的代码，更深入的体会左值引用和右值引用的区别：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">int i;</span><br><span class="line">int&amp;&amp; j = i++;</span><br><span class="line">int&amp;&amp; k = ++i;</span><br><span class="line">int&amp; m = i++;</span><br><span class="line">int&amp; l = ++i;</span><br><span class="line"></span><br><span class="line">move.cpp: In function ‘int main()’:</span><br><span class="line">move.cpp:72:14: error: cannot bind ‘int’ lvalue to ‘int&amp;&amp;’</span><br><span class="line">  int&amp;&amp; k = ++i;</span><br><span class="line">              ^</span><br><span class="line">move.cpp:73:15: error: invalid initialization of non-const reference of type ‘int&amp;’ from an rvalue of type ‘int’</span><br><span class="line">     int&amp; m = i++;</span><br></pre></td></tr></table></figure>

<p><strong>为什么需要右值引用</strong></p>
<p>C++引入右值引用之后，可以通过右值引用，充分使用临时变量，或者即将不使用的变量即右值的资源，减少不必要的拷贝，提高效率。如下代码，均会产生临时变量：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">class RValue &#123;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">RValue get() &#123;</span><br><span class="line">    return RValue();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void put(RValue)&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>为了充分利用右值的资源，减少不必要的拷贝，C++11引入了右值引用(&amp;&amp;)，移动构造函数，移动复制运算符以及std::move。</p>
<p><strong>右值引用(&amp;&amp;)，移动构造函数，移动复制运算符以及std::move</strong></p>
<p>将上面的类定义补充完整：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">ut&lt;&lt;#include &lt;iostream&gt;</span><br><span class="line">#include &lt;memory&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">struct RValue &#123;</span><br><span class="line">	RValue():sources(&quot;hello!!!&quot;)&#123;&#125;</span><br><span class="line">	RValue(RValue&amp;&amp; a) &#123;</span><br><span class="line">		sources = std::move(a.sources);</span><br><span class="line">		cout&lt;&lt;&quot;&amp;&amp; RValue&quot;&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	RValue(const RValue&amp; a) &#123;</span><br><span class="line">		sources = a.sources;</span><br><span class="line">		cout&lt;&lt;&quot;&amp; RValue&quot;&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	void operator=(const RValue&amp;&amp; a) &#123;</span><br><span class="line">		sources = std::move(a.sources);</span><br><span class="line">		cout&lt;&lt;&quot;&amp;&amp; ==&quot;&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	void operator=(const RValue&amp; a) &#123;</span><br><span class="line">		sources = a.sources;</span><br><span class="line">		cout&lt;&lt;&quot;&amp; ==&quot;&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	string sources;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">RValue get() &#123;</span><br><span class="line">        RValue a;</span><br><span class="line">	return a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void put(RValue)&#123;&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">	RValue a = get();</span><br><span class="line">        cout&lt;&lt;&quot;---------------&quot;&lt;&lt;endl;</span><br><span class="line">	put(RValue());</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>不过，当运行的时候却发现没有任何输出</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">g++ move.cpp -std=c++11 -o move</span><br><span class="line"> ./move </span><br></pre></td></tr></table></figure>

<p>这是因为，编译器做了优化，编译的时候加上-fno-elide-constructors，去掉优化</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">g++ move.cpp -std=c++11 -fno-elide-constructors -o move</span><br><span class="line"> ./move </span><br><span class="line">&amp;&amp; RValue</span><br><span class="line">&amp;&amp; RValue</span><br><span class="line">---------------</span><br><span class="line">&amp;&amp; RValue</span><br></pre></td></tr></table></figure>

<p>通过上面的代码，可以看出，在没有加-fno-elide-constructors选项时，编译器做了优化，没有临时变量的生成。在加了-fno-elide-constructors选项时，get产生了两次临时变量，二put生成了一次临时变量。</p>
<p>将get函数稍微修改一下：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">RValue get() &#123;</span><br><span class="line">	RValue a;</span><br><span class="line">	return std::move(RValue());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">g++ move.cpp -std=c++11 -o move</span><br><span class="line"> ./move </span><br><span class="line">&amp;&amp; RValue</span><br><span class="line">---------------</span><br><span class="line"></span><br><span class="line">//加编译选项</span><br><span class="line">g++ move.cpp -std=c++11 -fno-elide-constructors -o move</span><br><span class="line"> ./move </span><br><span class="line">&amp;&amp; RValue</span><br><span class="line">&amp;&amp; RValue</span><br><span class="line">---------------</span><br><span class="line">&amp;&amp; RValue</span><br></pre></td></tr></table></figure>

<p>只是简单的修改了一下，std::move(a)，在编译器做了优化的情况下，用了std::move，反而多做了一次拷贝。</p>
<p>其实，RValue如果在没有定义移动构造函数，重复上面的操作，生成临时变量的次数还是一样的，只不过，调用的时拷贝构造函数了而已。</p>
<p>通过get函数可以知道，乱用std::move在编译器开启构造函数优化的场景下反而增加了不必要的拷贝。那么，std::move应该在什么场景下使用？</p>
<p><strong>std::move使用场景</strong></p>
<p>1、移动构造函数的原理</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gjouc37bo1j30cm095my6.jpg" alt="image-20201014142110913"></p>
<p>通过移动构造，b指向a的资源，a不再拥有资源，这里的资源，可以是动态申请的内存，网络链接，打开的文件，也可以是本例中的string。<strong>这时候访问a的行为时未定义的</strong>，比如，如果资源是动态内存，a被移动之后，再次访问a的资源，根据移动构造函数的定义，可能是空指针，如果是资源上文的string，移动之后，a的资源为空字符串（string被移动之后，为空字符串）。</p>
<p>可以通过下面代码验证，修改main函数：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">int main() &#123;</span><br><span class="line">	RValue a, b;</span><br><span class="line">	RValue a1 = std::move(a);</span><br><span class="line">	cout&lt;&lt;&quot;a.sources:&quot;&lt;&lt;a.sources&lt;&lt;endl;</span><br><span class="line">	cout&lt;&lt;&quot;a1.sources:&quot;&lt;&lt;a1.sources&lt;&lt;endl;</span><br><span class="line">	RValue b1(b);</span><br><span class="line">	cout&lt;&lt;&quot;b.sources:&quot;&lt;&lt;b.sources&lt;&lt;endl;</span><br><span class="line">	cout&lt;&lt;&quot;b1.sources:&quot;&lt;&lt;a1.sources&lt;&lt;endl;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">g++ move.cpp -std=c++11 -o move</span><br><span class="line"> ./move </span><br><span class="line">&amp;&amp; RValue</span><br><span class="line">a.sources:</span><br><span class="line">a1.sources:hello!!!</span><br><span class="line">&amp; RValue</span><br><span class="line">b.sources:hello!!!</span><br><span class="line">b1.sources:hello!!!</span><br></pre></td></tr></table></figure>

<p>通过移动构造函数之后，a的资源为空，b指向了a的资源。通过拷贝构造函数，b<strong>复制</strong>了a的资源。</p>
<p>2、std::move的原理</p>
<p>std::move的定义：</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gjoueoadnuj30hn027dh4.jpg" alt="image-20201014142341508"></p>
<p>这里，T&amp;&amp;是通用引用，需要注意和右值引用（比如int&amp;&amp;）区分。通过move定义可以看出，move并没有”移动“什么内容，<strong>只是将传入的值转换为右值</strong>，此外没有其他动作。std::move+移动构造函数或者移动赋值运算符，才能充分起到减少不必要拷贝的意义。</p>
<p>3、std::move的使用场景</p>
<p>在之前的项目中看到有的同事到处使用std::move，好像觉得使用了std::move就能移动资源，提升性能一样，在我看来，std::move主要使用在以下场景：</p>
<ul>
<li><strong>使用前提：1 定义的类使用了资源并定义了移动构造函数和移动赋值运算符，2 该变量即将不再使用</strong></li>
<li>使用场景</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">RValue a, b;</span><br><span class="line">	</span><br><span class="line"><span class="comment">//对a,b坐一系列操作之后，不再使用a,b，但需要保存到智能指针或者容器之中</span></span><br><span class="line"><span class="function">unique_ptr&lt;RValue&gt; <span class="title">up</span><span class="params">(<span class="keyword">new</span> RValue(std::move(a)))</span></span>;</span><br><span class="line">vector&lt;RValue*&gt; vr;</span><br><span class="line">vr.<span class="built_in">push_back</span>(<span class="keyword">new</span> <span class="built_in">RValue</span>(std::<span class="built_in">move</span>(b)));</span><br><span class="line"></span><br><span class="line"><span class="comment">//临时容器中保存的大量的元素需要复制到目标容器之中	</span></span><br><span class="line">vector&lt;RValue&gt; vrs_temp;</span><br><span class="line">vrs_temp.<span class="built_in">push_back</span>(<span class="built_in">RValue</span>());</span><br><span class="line">vrs_temp.<span class="built_in">push_back</span>(<span class="built_in">RValue</span>());</span><br><span class="line">vrs_temp.<span class="built_in">push_back</span>(<span class="built_in">RValue</span>());</span><br><span class="line"><span class="function">vector&lt;RValue&gt; <span class="title">vrs</span><span class="params">(std::move(vrs_temp))</span></span>;</span><br><span class="line">	</span><br><span class="line">RValue c;</span><br><span class="line"><span class="built_in">put</span>(std::<span class="built_in">move</span>(c));</span><br></pre></td></tr></table></figure>

<ul>
<li>在没有右值引用之前，为了使用临时变量，通常定义const的左值引用，比如const string&amp;，在有了右值引用之后，为了使用右值语义，不要把参数定义为常量左值引用，否则，传递右值时调用的时拷贝构造函数</li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">void put(const RValue&amp; c)&#123;</span><br><span class="line">	cout&lt;&lt;&quot;----------&quot;&lt;&lt;endl;</span><br><span class="line">	unique_ptr&lt;RValue&gt; up(new RValue(std::move(c)));</span><br><span class="line">	cout&lt;&lt;&quot;----------&quot;&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">RValue c;</span><br><span class="line">put(std::move(c));</span><br><span class="line"></span><br><span class="line">g++ move.cpp -std=c++11 -o move</span><br><span class="line"> ./move </span><br><span class="line">----------</span><br><span class="line">&amp; RValue</span><br><span class="line">----------</span><br></pre></td></tr></table></figure>

<p>不使用左值常量引用：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">void put(RValue c)&#123;</span><br><span class="line">	cout&lt;&lt;&quot;----------&quot;&lt;&lt;endl;</span><br><span class="line">	unique_ptr&lt;RValue&gt; up(new RValue(std::move(c)));</span><br><span class="line">	cout&lt;&lt;&quot;----------&quot;&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">RValue c;</span><br><span class="line">put(std::move(c));</span><br><span class="line"></span><br><span class="line">g++ move.cpp -std=c++11 -o move</span><br><span class="line"> ./move </span><br><span class="line">&amp;&amp; RValue</span><br><span class="line">----------</span><br><span class="line">&amp;&amp; RValue</span><br><span class="line">----------</span><br></pre></td></tr></table></figure>

<p>这是因为，根据通用引用的定义，std::move(c)过程中，模板参数被推倒为const RValue&amp;，因此，调用拷贝构造函数。</p>
<p><strong>总结</strong></p>
<p>通过简绍右值和右值引用以及std::move和移动构造函数，总结右值引用，移动构造函数和移动赋值运算符和std::move的用法和注意事项。</p>
<h2 id="4"><a href="#4" class="headerlink" title="4."></a>4.</h2><h3 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Test</span>(<span class="keyword">int</span> a)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;a = a;</span><br><span class="line">    &#125;</span><br><span class="line">    Test &amp; <span class="keyword">operator</span>++()<span class="comment">// 前置++</span></span><br><span class="line">    &#123;</span><br><span class="line">        a++;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Test &amp; <span class="keyword">operator</span>--()<span class="comment">// 前置--</span></span><br><span class="line">    &#123;</span><br><span class="line">        a--;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 后置++</span></span><br><span class="line">    <span class="comment">// 通过一个站位参数来和前置++区分开来</span></span><br><span class="line">    <span class="comment">// 实现上，多了一个 tmp 变量，来实现先操作，后自增的效果</span></span><br><span class="line">    Test <span class="keyword">operator</span>++(<span class="keyword">int</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">Test <span class="title">tmp</span><span class="params">(*<span class="keyword">this</span>)</span></span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;a++;</span><br><span class="line">        <span class="keyword">return</span> tmp;</span><br><span class="line">    &#125;   </span><br><span class="line">    Test <span class="keyword">operator</span>--(<span class="keyword">int</span>) <span class="comment">// 后置--</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">Test <span class="title">tmp</span><span class="params">(*<span class="keyword">this</span>)</span></span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;a--;</span><br><span class="line">        <span class="keyword">return</span> tmp;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//前置后置</span></span><br><span class="line">A &amp;<span class="keyword">operator</span>++( )&#123; a++; <span class="keyword">return</span> *<span class="keyword">this</span>; &#125;<span class="comment">//单目，前置运算 --a</span></span><br><span class="line">A <span class="keyword">operator</span>++(<span class="keyword">int</span>)&#123; <span class="keyword">return</span> <span class="built_in">A</span>(a++); &#125;<span class="comment">//双目，后置运算</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="Effective-c"><a href="#Effective-c" class="headerlink" title="Effective c++"></a>Effective c++</h1><h2 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h2><p>声明式: 告诉编译器某个东西的名称和类型</p>
<p>签名式(signature): 每个函数的声明揭示其签名式, 也就是参数和返回类型</p>
<p>定义式: 提供给编译器 一些声明式的细节, 对对象而言, 定义式是编译器为此对象拨发内存的地址; 对函数或者函数模板而言, 定义式提供了代码本体; 对于 class 而言定义式列出他们的成员</p>
<p>copy 构造函数定义了一个对象如何 passed by value</p>
<p>接口: 函数的签名或 class 内可访问的元素</p>
<h2 id="const函数"><a href="#const函数" class="headerlink" title="const函数"></a>const函数</h2><p>不会对这个类的对象的数据成员作出任何改变, 即在 const 成员函数中无法赋值</p>
<table>
<thead>
<tr>
<th>表头</th>
<th align="center">const 对象</th>
<th align="center">noconst 对象</th>
</tr>
</thead>
<tbody><tr>
<td>const 成员函数</td>
<td align="center">yes</td>
<td align="center">yes</td>
</tr>
<tr>
<td>noconst 成员函数</td>
<td align="center">no</td>
<td align="center">yes</td>
</tr>
</tbody></table>
<p>const 成员函数也不要提供修改途径(比如返回引用), 虽然可以通过编译</p>
<p>可以通过 <code>mutable</code> 在 const 函数中改变对象的数据</p>
<h2 id="构造函数-1"><a href="#构造函数-1" class="headerlink" title="构造函数"></a>构造函数</h2><p>在构造函数中赋值相当于先初始化再赋值, 有开销<br>所以要用初始化列表赋值, 对象成员的初始化是在进入构造函数本体之前</p>
<p>调用构造函数初始化成员</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">ABEntry::<span class="built_in">ABEntry</span>()&#123;</span><br><span class="line">	:<span class="built_in">Name</span>(),</span><br><span class="line">  :<span class="built_in">Address</span>(),</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line">在初始化列表中调用构造函数</span><br></pre></td></tr></table></figure>

<p>避免编译器自动生成的 copy 构造函数和 copy 运算符, 声明为 private</p>
<h2 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h2><p>析构函数的运作方式是, 最深层派生(most derived)的那个 class 其虚构函数最先被调用, 然后是调用其每一个 base class 的析构函数</p>
<h2 id="return-this"><a href="#return-this" class="headerlink" title="return *this"></a>return *this</h2><p>不一定的，看函数值是什么形式。若返回值的是对象，即 形如 student f(…)；返回的是对象。若返回的形式是引用，即形如 student &amp; f(….)；返回的是对象地址。但函数体的写法都是 return * this</p>
<p>类比</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> x;   <span class="keyword">int</span>  &amp;y=x;   <span class="keyword">int</span> z=x; </span><br></pre></td></tr></table></figure>

<p>后面两个语句的写法都对，但是功能不同，含义不同。</p>
<p>推荐都写成返回引用的形式, 这样捷克语实现预算符</p>
<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>调用 base 的运算符</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Base::<span class="keyword">operator</span> = (target);</span><br></pre></td></tr></table></figure>



<h1 id="cpp-课件"><a href="#cpp-课件" class="headerlink" title="cpp 课件"></a>cpp 课件</h1><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>x– 是右值</p>
<p>–x 是左值</p>
<p>C++primer中对 <strong>对象</strong>的定义：<strong>对象</strong>是指一块能存储数据并具有某种类型的内存空间<br>一个<strong>对象</strong>a，它有<strong>值</strong>和<strong>地址&amp;a</strong>，运行程序时，计算机会为该对象分配存储空间，来存储该对象的值，我们通过该对象的地址，来访问存储空间中的值</p>
<p><strong>指针</strong>p也是<strong>对象</strong>，它同样有地址&amp;p和存储的值p，只不过，<strong>p存储的数据类型是数据的地址</strong>。如果我们要以p中存储的数据为地址，来访问对象的值，则要在p前加解引用操作符”<em>“,即</em>p。</p>
<p>对象有常量（const）和变量之分，既然指针本身是对象，那么指针所存储的地址也有常量和变量之分，指针常量是指，指针这个对象所存储的地址是不可以改变的，而指向常量的指针的意思是，不能通过该指针来改变这个指针所指向的对象。</p>
<p><font color = "red"><strong>我们可以把引用理解成变量的别名</strong>。</font></p>
<p>定义一个引用的时候，程序把该引用和它的初始值绑定在一起，而不是拷贝它。计算机必须<strong>在声明r的同时就要对它初始化</strong>，并且，<strong>r一经声明，就不可以再和其它对象绑定在一起了。</strong></p>
<p>实际上，你也可以把引用看做是通过一个<strong>常量指针</strong>来实现的，它只能绑定到初始化它的对象上。</p>
<p>关于指针和引用的对比，可以参看&lt;&lt;more effective C++&gt;&gt;中的第一条条款，引用的一个优点是它一定不为空，因此相对于指针，它不用检查它所指对象是否为空，这增加了效率</p>
<p>比如下面的代码</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a,b,*p,&amp;r=a;<span class="comment">//正确</span></span><br><span class="line">r=<span class="number">3</span>;<span class="comment">//正确：等价于a=3</span></span><br><span class="line"><span class="keyword">int</span> &amp;rr;<span class="comment">//出错：引用必须初始化</span></span><br><span class="line">p=&amp;a;<span class="comment">//正确：p中存储a的地址，即p指向a</span></span><br><span class="line">*p=<span class="number">4</span>;<span class="comment">//正确：p中存的是a的地址，对a所对应的存储空间存入值4</span></span><br><span class="line">p=&amp;b<span class="comment">//正确：p可以多次赋值，p存储b的地址</span></span><br></pre></td></tr></table></figure>

<p><strong>引用必须初始化</strong><br>引用变量中存放的是被引用变量的地址, 本质是指针<br>使用引用对象, 操作对象都是被引用的对象</p>
<p>引用一旦被初始化为指向一个对象，就不能再改变为另一个对象的引用；指针是可变的</p>
<p><strong>int &amp;x = ……;</strong> <strong>引用变量</strong></p>
<p><strong>void f(int &amp;x) ;</strong> <strong>引用参数</strong> 引用经常被用作函数参数, 使得函数中的变量名成为调用程序中的变量的别名. </p>
<ul>
<li><p>新建临时变量: </p>
<p>条件: 1. 实参的类型正确, 但不是左值, 2. 实参的类型不正确, 但可以转换为正确的类型</p>
<p>如果接受引用参数的函数的意图是修改作为参数传递的变量, 那么创建临时变量将阻止这种意图, 所以当引用为 const 时创建临时变量不会影响</p>
</li>
</ul>
<p><strong>Int &amp; f(……) ;</strong> <strong>返回结果引用</strong> </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> swap（<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> &amp;y)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> t;</span><br><span class="line">  t=x;</span><br><span class="line">  x=y;</span><br><span class="line">  y=t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> &amp; <span class="title">f</span><span class="params">( )</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> t=<span class="number">25</span>;</span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//不要像这样返回一个局部变量的引用, 一般返回一个作为参数传递给函数的引用, 但是可以返回 new 出来的变量的引用</span></span><br><span class="line"><span class="comment">//lea eax,[t]  返回地址</span></span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> &amp; <span class="title">f</span><span class="params">(<span class="keyword">int</span> t )</span> </span>&#123;</span><br><span class="line">  t=t+<span class="number">10</span>;</span><br><span class="line">  <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line">a = <span class="built_in">f</span>(<span class="number">10</span>)+<span class="built_in">f</span>(<span class="number">20</span>) ;</span><br><span class="line"><span class="comment">// 显示 a = 60</span></span><br><span class="line">b = <span class="built_in">f</span>(<span class="number">20</span>)+<span class="built_in">f</span>(<span class="number">10</span>);</span><br><span class="line"><span class="comment">// 显示 b = 40</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*a=f(10)+f(20)</span></span><br><span class="line"><span class="comment">先执行 f(10), </span></span><br><span class="line"><span class="comment">返回 函数f中变量t 的地址</span></span><br><span class="line"><span class="comment">再执行 f(20)</span></span><br><span class="line"><span class="comment">返回 函数f中变量t 的地址</span></span><br><span class="line"><span class="comment">根据第1个返回地址，取相</span></span><br><span class="line"><span class="comment">应单元的内容，为 30</span></span><br><span class="line"><span class="comment">根据第2个返回地址，取相</span></span><br><span class="line"><span class="comment">应单元的内容，为 30</span></span><br><span class="line"><span class="comment">故 a =60*/</span></span><br></pre></td></tr></table></figure>

<p>左值引用 vs 右值引用</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> x=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> &amp;y =x; <span class="comment">// x 是一个左值</span></span><br><span class="line"><span class="keyword">int</span> &amp;z = x*<span class="number">2</span>; <span class="comment">//错误，无法从 int 转换为 int &amp;</span></span><br><span class="line"><span class="comment">// z 定义为一个引用，z 中应存放一个地址</span></span><br><span class="line"><span class="comment">// 而 x*2 会对应一个值，无法取其地址，送入 z 中。</span></span><br><span class="line"><span class="keyword">int</span> &amp;&amp; w = x*<span class="number">2</span>; <span class="comment">// 右值引用；x*2是一个右值；</span></span><br><span class="line"><span class="comment">// 将 x*2 存放在一个临时单元中；将该单元的地址送入 w 中</span></span><br></pre></td></tr></table></figure>

<p>const引用可以读取但是不可以被修改引用对象，任何对const引用进行赋值都是不合法的，它适用指向const对象的引用，而非const的引用不适用于指向const对象的引用。</p>
<p>函数返回一个引用可以使得函数成为左值(c 语言中没有引用, 函数返回值只能作为右值)</p>
<h2 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*单目:: 指定为全局标识符</span></span><br><span class="line"><span class="comment">全局类型名、全局变量名、全局函数名等*/</span></span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line">:: x = <span class="number">10</span>; <span class="comment">// 全局变量</span></span><br><span class="line">x =<span class="number">20</span>; <span class="comment">// 局部变量</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="数据成员指针"><a href="#数据成员指针" class="headerlink" title="数据成员指针"></a>数据成员指针</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> Student::*q = &amp;Student::number; <span class="comment">// q 数据成员指针</span></span><br><span class="line">cout &lt;&lt; xu.*q&lt;&lt;endl;</span><br></pre></td></tr></table></figure>

<p>取函数地址时，有无 <strong>&amp;</strong> 一样；</p>
<p>用函数指针是，有无 ***** 一样</p>
<p>普通成员指针是一个偏移量，存放的不是成员地址，故不能移动：</p>
<p>普通成员指针不能进行类型转换</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> Student::*p;</span><br><span class="line">p=p+<span class="number">1</span>; <span class="comment">// 非法 , 不能移动指针</span></span><br><span class="line"><span class="keyword">int</span> *q; q = q+<span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<h2 id="类中的关键字"><a href="#类中的关键字" class="headerlink" title="类中的关键字"></a>类中的关键字</h2><ul>
<li>const</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TUTOR</span>&#123;</span></span><br><span class="line"><span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> sex; <span class="comment">//性别为只读成员</span></span><br><span class="line"><span class="keyword">int</span> wage;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">TUTOR</span>(<span class="keyword">const</span> <span class="keyword">char</span> *n, <span class="keyword">char</span> g, <span class="keyword">int</span> s): <span class="built_in">sex</span>(g), <span class="built_in">wage</span>(s)</span><br><span class="line">&#123; <span class="built_in">strcpy_s</span>(name,n); &#125;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">char</span> *<span class="title">getname</span><span class="params">( )</span> <span class="keyword">const</span></span>&#123; <span class="keyword">return</span> name; &#125;</span><br><span class="line"><span class="comment">//函数体不能修改当前对象 函数的返回类型有 const 修饰</span></span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">setname</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *n)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="built_in">strcpy_s</span>(name, n); <span class="keyword">return</span> name; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">TUTOR <span class="title">xu</span><span class="params">(“xuxy”,’M’,<span class="number">2000</span>)</span></span>;</span><br><span class="line">*xu.<span class="built_in">getname</span>()=‘X’; <span class="comment">// 不能给常量赋值</span></span><br><span class="line">*xu.<span class="built_in">setname</span>(“xuxiangyang”) =‘X’; <span class="comment">// name 的首字母变成X</span></span><br><span class="line"><span class="built_in">strcpy_s</span>(xu.<span class="built_in">setname</span>(“xu123”), <span class="number">6</span>, “hello”); <span class="comment">//name 改为hello</span></span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> *p1 </span><br><span class="line">p1=<span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> * pc;</span><br><span class="line">pc = p1;</span><br><span class="line"><span class="comment">//legal, p1 指向的字符串可以通过 p1 修改, 但不能通过 pc 修改</span></span><br></pre></td></tr></table></figure>

<p>当const在函数名前面的时候修饰的是函数返回值。</p>
<p>当const在函数名后面表示是常成员函数，该函数不能修改对象内的任何成员，只能发生读操作，不能发生写操作。</p>
<p>volatile 关键字: 优化器不对该变量的读取进行优化，用到该变量时重</p>
<p>新读取。</p>
<ul>
<li><p>mutable:</p>
<p>可变的</p>
<p>➢ 是const 的反义词</p>
<p>➢ 为突破 const的限制而设置的</p>
<p>➢ 被mutable 修饰的变量永远处于可变得状态，即使在const函数中</p>
<p>➢ mutable只能用来修饰数据成员</p>
<p>➢ 不能与 const、volatile 或 static 同时出现</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> a; <span class="keyword">const</span> <span class="keyword">int</span> b; <span class="comment">//b为const成员</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">( )</span></span>&#123;a++; <span class="keyword">return</span> a; &#125; <span class="comment">//this类型为： A * const this</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">( )</span><span class="keyword">const</span></span>&#123;<span class="keyword">return</span> a; &#125; <span class="comment">//this类型为：const A * const this。</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">( )</span><span class="keyword">volatile</span></span>&#123;<span class="keyword">return</span> a++; &#125; <span class="comment">//this类型为：volatile A * const this</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">( )</span><span class="keyword">const</span> <span class="keyword">volatile</span></span>&#123; <span class="keyword">return</span> a; &#125;<span class="comment">//this类型为：const volatile A* const this</span></span><br><span class="line"><span class="built_in">A</span>(<span class="keyword">int</span> x) ：<span class="built_in">b</span>(x) &#123; a=x; &#125; <span class="comment">//不可在函数体内对b赋值修改</span></span><br><span class="line">&#125; <span class="built_in">x</span>(<span class="number">3</span>); <span class="comment">//等价于A x(3)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">const</span> A <span class="title">y</span><span class="params">(<span class="number">6</span>)</span></span>; <span class="comment">// y 不可修改</span></span><br><span class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">volatile</span> A <span class="title">z</span><span class="params">(<span class="number">8</span>)</span></span>; <span class="comment">// z 不可修改</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">x.<span class="built_in">f</span>( ); <span class="comment">//普通对象x调用int f( ): this指向的对象可修改</span></span><br><span class="line">y.<span class="built_in">f</span>( ); <span class="comment">//只读对象y调用int f( )const:this指向的对象不可修改</span></span><br><span class="line">z.<span class="built_in">f</span>( ); <span class="comment">//只读挥发对象z调用int f( )const volatile:this指向的对象不可修改、挥发</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>const 成员函数和 non-const 成员函数是两个函数, 会区分调用(取决于 this 是 const 还是 non-const)</p>
</li>
</ul>
]]></content>
      <categories>
        <category>language</category>
      </categories>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机系统</title>
    <url>/2020/09/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<blockquote>
<p>&lt;计算机操作系统&gt;大纲和要点</p>
</blockquote>
<span id="more"></span>

<h1 id="计算机操作系统"><a href="#计算机操作系统" class="headerlink" title="计算机操作系统"></a>计算机操作系统</h1><h2 id="第一章-绪论"><a href="#第一章-绪论" class="headerlink" title="第一章 绪论"></a>第一章 绪论</h2><h3 id="操作系统的地位"><a href="#操作系统的地位" class="headerlink" title="操作系统的地位"></a>操作系统的地位</h3><ul>
<li><strong>存储程序式计算机</strong>(冯诺依曼):存储器, 运算器, 控制部件, io<ul>
<li>主存  MAR, MDR, CR</li>
<li>CPU  ALU, 控制单元(PC, IR)</li>
<li>io</li>
</ul>
</li>
</ul>
<h3 id="操作系统的形成发展"><a href="#操作系统的形成发展" class="headerlink" title="操作系统的形成发展"></a>操作系统的形成发展</h3><ul>
<li><p>元器件</p>
<ul>
<li>电子管时代</li>
<li>集成电路时代</li>
<li>超大规模集成电路时代</li>
</ul>
</li>
<li><p>操作系统阶段</p>
<ul>
<li><p>操作系统初级阶段</p>
<blockquote>
<p>监督程序</p>
</blockquote>
<ul>
<li><p>早期批处理</p>
<p>为了解决人机矛盾</p>
</li>
<li><p>脱机批处理</p>
<p>为了解决 CPU 高速与 io 低速的矛盾, 但是 cpu 在输入输出是会空闲</p>
<p>由主机和卫星机组成</p>
</li>
<li><p>执行系统</p>
<p>通道和中断</p>
<ul>
<li>通道: 负责外部设备与主存之间的信息传递</li>
<li>中断: 就是中断, interrupt</li>
</ul>
</li>
</ul>
</li>
<li><p>操作系统的形成</p>
<ul>
<li><p><strong>多道程序设计技术</strong></p>
<p>为了解决 cpu 空闲的问题, 多个独立程序相互穿插运行, 使得 cpu 和外部设备尽可能并行操作</p>
<ul>
<li>特征: 多道, 宏观上并行, 微观上还是串行</li>
</ul>
</li>
<li><p><strong>分时技术</strong></p>
<p>为了解决用户不能直接控制程序运行的问题, 实现联机操作交互对话(用户使用计算机)</p>
<p>分时技术使得每个终端用户在自己的终端设备上以联机方式使用计算机, 好像自己独占一样, 分时技术就是把时间分成片然后轮流分给用户</p>
</li>
</ul>
<p>出现了</p>
<ul>
<li>批量操作系统–&gt;多道程序设计</li>
<li>分时操作系统–&gt;分时技术</li>
<li>实时操作系统–&gt;生产过程<ul>
<li>“实时”: 计算机对于外来信息能够在被控对象允许的截止期限内做出反应</li>
</ul>
</li>
</ul>
</li>
<li><p>操作系统的进一步发展</p>
<ul>
<li>即, 现代操作系统</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="操作系统的概念"><a href="#操作系统的概念" class="headerlink" title="操作系统的概念"></a>操作系统的概念</h3><ul>
<li><p><u><strong>操作系统的特性</strong></u></p>
<ul>
<li>并发: 单机操作系统的并行性, 又叫并发性, 但是是逻辑上的并行, 物理上的串行</li>
<li>共享</li>
<li>不确定性(用户 xjer 操作)</li>
</ul>
</li>
<li><p><strong>操作系统的资源管理能力</strong></p>
<blockquote>
<p>对系统资源实施管理和调度, 控制和协调并发活动, 对外提供用户界面</p>
</blockquote>
<ul>
<li>处理机管理(cpu)</li>
<li>存储器管理(主存)<ul>
<li>存储分配和存储无关性, 存储保护, 存储扩充</li>
</ul>
</li>
<li>设备管理<ul>
<li>设备无关性, 设备分配, 设备传输控制</li>
</ul>
</li>
<li>文件系统(file system)</li>
</ul>
</li>
<li><p>操作系统应该解决的问题</p>
<ul>
<li>资源分配的方法和策略<ul>
<li>先来先服务</li>
<li>显现调度</li>
<li>时间片轮转</li>
</ul>
</li>
<li>协调并发活动<ul>
<li>锁, 上锁, 开锁</li>
<li>信号灯, 信号灯上的 p 操作 v 操作</li>
</ul>
</li>
<li>保证数据一致性</li>
<li>数据存取</li>
</ul>
</li>
</ul>
<h3 id="☆操作系统基本类型"><a href="#☆操作系统基本类型" class="headerlink" title="☆操作系统基本类型"></a>☆操作系统基本类型</h3><h4 id="批量操作系统"><a href="#批量操作系统" class="headerlink" title="批量操作系统"></a>批量操作系统</h4><ul>
<li>多道程序设计, 将用户提交的作业成批输入计算机, 然后由作业调度程序自动选择作业运行</li>
<li>特点:<ul>
<li>吞吐率高</li>
<li>作业周转时间长</li>
<li>交互性差</li>
</ul>
</li>
</ul>
<h4 id="分时操作系统"><a href="#分时操作系统" class="headerlink" title="分时操作系统"></a>分时操作系统</h4><ul>
<li>时间片轮转, 使一台机器同时为多个终端用户服务(联机方式)</li>
<li>特点<ul>
<li>并行性, 独占性, 交互性</li>
</ul>
</li>
</ul>
<h4 id="实时操作系统"><a href="#实时操作系统" class="headerlink" title="实时操作系统"></a>实时操作系统</h4><ul>
<li><p>能够在 deadline 内处理完毕外部信息并作出反应</p>
</li>
<li><p>特点</p>
<ul>
<li>实时响应</li>
<li>高可靠性, 安全性</li>
<li>执行装置, 咨询装置</li>
</ul>
</li>
<li><p>分类</p>
<ul>
<li>实时控制(工厂)</li>
<li>实时信息处理(检索)</li>
</ul>
</li>
<li><p>嵌入式操作系统(EOS)</p>
<ul>
<li><p>区别</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ginxwsli3fj30ri09yahv.jpg" alt="image-20200912161900450"></p>
</li>
</ul>
</li>
</ul>
<h4 id="个人计算机操作系统"><a href="#个人计算机操作系统" class="headerlink" title="个人计算机操作系统"></a>个人计算机操作系统</h4><p>都懂</p>
<h4 id="网络操作系统"><a href="#网络操作系统" class="headerlink" title="网络操作系统"></a>网络操作系统</h4><ul>
<li><p>特点:</p>
<ol>
<li><p>多个处理部件</p>
</li>
<li><p>无公共主存</p>
</li>
<li><p>消息通信机制</p>
</li>
</ol>
</li>
<li><p>网络通信模块</p>
</li>
</ul>
<h4 id="分布式操作系统"><a href="#分布式操作系统" class="headerlink" title="分布式操作系统"></a>分布式操作系统</h4><ul>
<li>与网络操作系统的区别<ul>
<li>计算机网络存取资源是不透明的, 分布式是透明的</li>
<li>计算机网络合作计算需要用户分配, 分布式由系统分配</li>
<li>分布式系统对用户完全透明</li>
</ul>
</li>
</ul>
<h3 id="操作系统的关键技术"><a href="#操作系统的关键技术" class="headerlink" title="操作系统的关键技术"></a>操作系统的关键技术</h3><h4 id="并行处理技术"><a href="#并行处理技术" class="headerlink" title="并行处理技术"></a>并行处理技术</h4><h4 id="虚拟技术"><a href="#虚拟技术" class="headerlink" title="虚拟技术"></a>虚拟技术</h4><p>虚拟存储技术为主</p>
<h3 id="UNIX-Linux"><a href="#UNIX-Linux" class="headerlink" title="UNIX, Linux"></a>UNIX, Linux</h3><h4 id="UNIX"><a href="#UNIX" class="headerlink" title="UNIX"></a>UNIX</h4><ul>
<li>特点<ul>
<li>核心层和使用层</li>
<li>shell</li>
<li>层次式文件系统</li>
<li>统一看待文件和设备</li>
<li>可移植性</li>
</ul>
</li>
</ul>
<h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><ul>
<li>基础<ul>
<li>UNIX</li>
<li>Minix</li>
<li>GNU</li>
<li>POSIX(portable operating system ix)</li>
</ul>
</li>
<li>特点<ul>
<li>多用户, 多任务</li>
</ul>
</li>
<li>系统组成<ul>
<li>内核: 多进程管理, 进程调度</li>
<li>shell</li>
<li>实用工具</li>
</ul>
</li>
</ul>
<h2 id="第二章-操作系统的结构和硬件支持"><a href="#第二章-操作系统的结构和硬件支持" class="headerlink" title="第二章 操作系统的结构和硬件支持"></a>第二章 操作系统的结构和硬件支持</h2><h3 id="操作系统虚拟机"><a href="#操作系统虚拟机" class="headerlink" title="操作系统虚拟机"></a>操作系统虚拟机</h3><p>在裸机上配置了操作系统后就构成了操作系统虚拟机</p>
<p>操作系统的核心在裸机上运行, 而用户程序则在扩充后的机器上运行</p>
<p>操作系统提供的全部命令的集合称为: 操作命令语言, 它分为</p>
<ul>
<li><p>操作命令</p>
<ol>
<li>键盘命令</li>
<li>作业控制语言</li>
<li>图形化用户界面</li>
</ol>
</li>
<li><p>系统功能调用</p>
<p>INT</p>
</li>
</ul>
<h3 id="操作系统的结构"><a href="#操作系统的结构" class="headerlink" title="操作系统的结构"></a>操作系统的结构</h3><p>操作系统由内核(核心层)和其他操作系统功能组成, 核心层包括处理器管理, 存储管理, 设备管理, 文件管理</p>
<p>四种设计方法</p>
<ul>
<li><p>一体化结构</p>
<p>过程间可以互相调用而不受约束</p>
</li>
<li><p>模块化结构</p>
<p>功能是通过逻辑独立的模块来划分的</p>
</li>
<li><p>可扩展内核结构</p>
<p>内核分为基础核心和其他核心功能两部分</p>
</li>
<li><p>层次化结构</p>
</li>
</ul>
<h4 id="运行时的组织结构"><a href="#运行时的组织结构" class="headerlink" title="运行时的组织结构"></a>运行时的组织结构</h4><p>操作系统运行过程中调用一个给定的操作系统的内部例程有两种方式</p>
<ul>
<li><p>系统功能调用方式 INT</p>
</li>
<li><p>客户/服务器方式</p>
<p>将操作系统服务作为系统服务进程来提供, 服务请求和服务响应是通过消息传递方式来实现的</p>
</li>
</ul>
<h3 id="处理机的特权级"><a href="#处理机的特权级" class="headerlink" title="处理机的特权级"></a>处理机的特权级</h3><blockquote>
<p>为了保护操作系统</p>
</blockquote>
<h4 id="☆处理机的态和分类"><a href="#☆处理机的态和分类" class="headerlink" title="☆处理机的态和分类"></a>☆处理机的态和分类</h4><p>核态 &gt; 管态 &gt; 用户态</p>
<p>计算机系统中运行的程序可以分为两大类</p>
<ul>
<li>操作系统的管理程序</li>
<li>用户程序</li>
</ul>
<p>处理机的态, 又称处理机的特权级, 就是处理机当前处于何种状态, 正在执行哪类程序, 为了保护操作系统, 至少分为管态, 用户态两种状态</p>
<ul>
<li><p>管态</p>
<p>在此状态下中央处理机可以使用全部机器指令</p>
</li>
<li><p>用户态(目态)</p>
<p>在此状态下禁止使用特权指令, 不能直接取用资源与改变机器状态, 并且只允许用户程序访问自己的存储区域</p>
</li>
<li><p>核态</p>
<p>具有管态的所有权限. 此时管态的权限有所变化: 管态允许使用一些在用户态下所不能使用的资源, 但不能使用修改机器的状态指令</p>
</li>
</ul>
<h4 id="特权指令"><a href="#特权指令" class="headerlink" title="特权指令"></a>特权指令</h4><blockquote>
<p>FLAG: IOPL 位, IO 特权</p>
</blockquote>
<p>这些特权指令设计如下方面</p>
<ol>
<li>改变机器状态的指令</li>
<li>修改特殊寄存器的指令</li>
<li>设计外部设备的输入输出指令</li>
</ol>
<p><strong>在下列情况下有用户态自动转向管态(中断发生, 中断返回)</strong></p>
<ol>
<li>用户进程访问操作系统, 要求操作系统的某种服务, 这种访问称为<u>系统功能调用</u></li>
<li>在用户程序执行时, 发生一次中断</li>
<li>在一个用户进程中产生一个错误状态, 这种状态被处理为程序性中断</li>
<li>在用户态下企图执行一条特权指令, 作为一种特殊类型的错误, 按照情况三处理</li>
</ol>
<h3 id="中断及其处理"><a href="#中断及其处理" class="headerlink" title="中断及其处理"></a>中断及其处理</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p><strong>指某个时间发生时, 系统终止现行程序的运行, 引出处理该事件的程序进行处理, 处理完毕后返回断点继续执行</strong></p>
<img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gk9jczvbcrj30rs0sx1cl.jpg" alt="image-20201101115909104" style="zoom:25%;" />

<h4 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h4><p><strong>按照功能分类</strong></p>
<ol>
<li><u>输入输出中断</u></li>
<li><u>外中断: 如时钟中断, 操作员控制台中断</u></li>
<li><u>机器故障中断: 如电源故障</u></li>
<li><u>程序性中断: 程序性质的错误</u></li>
<li><u>访管中断: 对操作系统提出某种需求(INT)时所发出的中断</u></li>
</ol>
<p><strong>按照中断方式分类</strong></p>
<ol>
<li>强迫性中断: 由某种事故或外部请求信号引起的</li>
<li>自愿中断(INT): 这种事件是由于运行程序请求操作系统服务引起的</li>
</ol>
<p><strong>按照中断来源分类</strong></p>
<ol>
<li>外中断(中断): 由处理机外部事件引起的中断成为外中断, 在 x86 中称为异步中断. 包括 I/O中断, 外中断</li>
<li>俘获: 由处理机内部时间引起的中断成为俘获, x86 中称为异常, 也成同步中断. 包括访管中断, 程序性中断, 机器故障中断</li>
</ol>
<h4 id="向量中断"><a href="#向量中断" class="headerlink" title="向量中断"></a>向量中断</h4><p>向量中断: 硬件提供入口地址, 非向量中断: 只有一个入口地址, 软件通过标志位进行判断是哪个中断</p>
<p>由中断源自己引导处理机进入中断服务程序的中断过程称为向量中断</p>
<p>中断向量包含两个字: 第一个字含有中断服务例程的入口地址, 第二个字是服务程序所用的处理机状态字</p>
<p>所有中断向量放在一起组成中断向量表</p>
<h4 id="中断进入"><a href="#中断进入" class="headerlink" title="中断进入"></a>中断进入</h4><p>发现中断源而产生中断过程的设备称为中断装置(中断器)</p>
<ol>
<li><p>保护现场和恢复现场</p>
</li>
<li><p>程序状态字: 主要包括: 程序当前应执行的指令, 当前指令执行情况, 处理机所在状态, 程序在执行时应屏蔽的中断, 寻址方法编址保护键, 响应中断的内容, 小型机(X86)包括 CS:IP 和 FLAGS</p>
</li>
<li><p><strong>中断响应</strong>: 中断响应的实质是交换 用户程序和处理该中断事件的中断程序的 指令执行地址和处理器状态</p>
<img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gk9jsya3zjj31i70rs4qp.jpg" alt="image-20201101121433659" style="zoom:50%;" /></li>
</ol>
<p>硬件负责中断的发现, 响应中断请求, 把中断的原因和断点记下来供软件处理时查用; </p>
<p>软件的中断处理程序负责中断分析, 中断处理</p>
<h4 id="☆软件中断处理过程"><a href="#☆软件中断处理过程" class="headerlink" title="☆软件中断处理过程"></a>☆软件中断处理过程</h4><p>包括三步</p>
<ol>
<li>保护现场和传递参数</li>
<li>执行响应的中断(自陷)服务例程</li>
<li>恢复和退出中断</li>
</ol>
<h5 id="中断服务的主要内容"><a href="#中断服务的主要内容" class="headerlink" title="中断服务的主要内容"></a>中断服务的主要内容</h5><ul>
<li>硬件故障的中断处理</li>
<li>程序性中断事件的处理</li>
<li>外部中断时间的处理<ul>
<li>时钟中断事件的处理</li>
<li>控制台中断事件的处理</li>
</ul>
</li>
<li>外部设备中断的处理<ul>
<li>传输结束中断的处理</li>
<li>传输错误中断的处理</li>
<li>故障中断的处理</li>
</ul>
</li>
</ul>
<h3 id="UNIX-Linux-系统结构"><a href="#UNIX-Linux-系统结构" class="headerlink" title="UNIX Linux 系统结构"></a>UNIX Linux 系统结构</h3><h4 id="UNIX-系统的体系结构"><a href="#UNIX-系统的体系结构" class="headerlink" title="UNIX 系统的体系结构"></a>UNIX 系统的体系结构</h4><p>UNIX 的系统核心层的功能包括文件管理, 设备管理, 存储管理, 处理机管理</p>
<img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gk9k8exdzoj30yp0rs7u2.jpg" alt="image-20201101122924852" style="zoom:33%;" />

<h4 id="Linux-系统的内核结构"><a href="#Linux-系统的内核结构" class="headerlink" title="Linux 系统的内核结构"></a>Linux 系统的内核结构</h4><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gk9kb3ht5ej313t0rse58.jpg" alt="image-20201101123159716" style="zoom:33%;" />

<h3 id="Linux-系统的特权级与中断处理"><a href="#Linux-系统的特权级与中断处理" class="headerlink" title="Linux 系统的特权级与中断处理"></a>Linux 系统的特权级与中断处理</h3><p>Inter i386: 实模式, 保护模式</p>
<p>实模式: 只能使用实地址访问主存, 没有安全保护措施</p>
<p>保护模式: 处理机提供 4 个特权级, Linux 使用两个: 特权级 0(核模式), 特权级 3(用户模式)</p>
<h4 id="中断处理的上半部和下半部"><a href="#中断处理的上半部和下半部" class="headerlink" title="中断处理的上半部和下半部"></a>中断处理的上半部和下半部</h4><p>Linux 的中断处理有自己的特色: 分为上半部和下半部, 将中断响应后必须立即处理的工作即刻执行, 而将更多的处理工作向后推迟执行</p>
<h5 id="上半部"><a href="#上半部" class="headerlink" title="上半部"></a>上半部</h5><p>中断处理程序的上半部是中断处理中又严格时间限制的工作, 是关键而紧迫的部分, 上半部的工作是不可打断的</p>
<h5 id="下半部"><a href="#下半部" class="headerlink" title="下半部"></a>下半部</h5><p>下半部的执行时可以被打断的</p>
<p>实现机制主要有两种: tasklet 和工作队列</p>
<ul>
<li><p>tasklet</p>
<blockquote>
<p>软中断是利用<a href="https://baike.baidu.com/item/%E7%A1%AC%E4%BB%B6%E4%B8%AD%E6%96%AD">硬件中断</a>的概念，用软件方式进行模拟，实现宏观上的异步执行效果。很多情况下，软中断和”信号”有些类似，同时，软中断又是和硬中断相对应的，”硬中断是<a href="https://baike.baidu.com/item/%E5%A4%96%E9%83%A8%E8%AE%BE%E5%A4%87">外部设备</a>对CPU的中断”，”软中断通常是硬<a href="https://baike.baidu.com/item/%E4%B8%AD%E6%96%AD%E6%9C%8D%E5%8A%A1%E7%A8%8B%E5%BA%8F">中断服务程序</a>对内核的中断”，”信号则是由内核（或其他进程）对某个进程的中断”。</p>
<p>百度百科</p>
</blockquote>
<p>通过软中断(信号机制)实现, 详情不列</p>
</li>
<li><p>工作队列</p>
<p>工作队列机制将中断处理程序的下半部交给一个内核线程去执行</p>
</li>
</ul>
<h2 id="第三章-操作系统的用户接口"><a href="#第三章-操作系统的用户接口" class="headerlink" title="第三章 操作系统的用户接口"></a>第三章 操作系统的用户接口</h2><h3 id="用户工作环境"><a href="#用户工作环境" class="headerlink" title="用户工作环境"></a>用户工作环境</h3><p>操作系统提供的环境:</p>
<ol>
<li>提供各种软硬件资源</li>
<li>设计操作系统的命令集</li>
<li>系统初启</li>
</ol>
<h4 id="☆操作系统的生成和系统初启"><a href="#☆操作系统的生成和系统初启" class="headerlink" title="☆操作系统的生成和系统初启"></a>☆操作系统的生成和系统初启</h4><h5 id="系统生成-计算机厂商"><a href="#系统生成-计算机厂商" class="headerlink" title="系统生成(计算机厂商)"></a>系统生成(计算机厂商)</h5><p>系统生成程序: SYSGEN</p>
<p>系统生成必须确定以下信息:</p>
<ol>
<li>使用的 CPU 类型, 需要安装的选项(如扩展指令集, 浮点运算操作)</li>
<li>可用主存空间</li>
<li>可用设备</li>
<li>操作系统选项和参数值(如支持进程的最大数量, 进程调度策略的类型, 需要的缓冲区的大小)</li>
</ol>
<h5 id="系统初始启动-系统引导-如关机后"><a href="#系统初始启动-系统引导-如关机后" class="headerlink" title="系统初始启动(系统引导), 如关机后"></a>系统初始启动(系统引导), 如关机后</h5><ul>
<li><p>初始启动三个阶段</p>
<ol>
<li>初始引导: 把系统核心装入主存中的指定位置, 并在指定地址启动</li>
<li>核心初始化: 执行系统核心的初始启动子程序, 初始化系统核心参数</li>
<li>系统初始化: 为用户使用系统做准备(如建立文件系统, 建立日历时钟)</li>
</ol>
<p>之后用户就可以使用计算机系统了</p>
</li>
<li><p>系统引导的方式</p>
<ul>
<li><p>独立引导(滚雪球)bootup</p>
<p>操作系统的核心文件存储在系统本身的存储设备中, 由操作系统自己将操作系统核心程序读入主存并运行</p>
<p>过程: </p>
<ol>
<li><p>初始引导(自举)</p>
<p>自举是操作系统通过滚雪球的方式将自己建立起来的过程</p>
<p>主要任务就是把系统核心送入主存并启动它运行</p>
<p>启动需要一个小程序: <strong>引导程序</strong></p>
<p>在大多数机器的只读存储器(ROM只读存储器, PROM可编程只读存储器, EPROM可擦除可编程只读存储器)中有一段用于初始引导的代码, 当系统加电或者按下某个按钮时自动将这段程序读入主存</p>
<p>初始引导的步骤:</p>
<ol>
<li>系统加电</li>
<li>执行初始引导程序</li>
<li>从硬盘中读入操作系统引导程序</li>
</ol>
</li>
<li><p>引导程序的执行</p>
</li>
<li><p>核心初始化</p>
<ol>
<li>建立进程有关的数据结构</li>
<li>获得自由存储空间的容量</li>
<li>建立系统设备和文件系统的数据结构</li>
<li>初始化时钟</li>
</ol>
</li>
<li><p>系统初始化</p>
</li>
</ol>
</li>
<li><p>辅助下装方式 download</p>
<p>从另外的计算机系统中将操作系统常驻部分传到该计算机中</p>
</li>
<li><p>Linux 系统的引导</p>
<p>linux 系统是滚雪球方式启动的</p>
<p>过程:</p>
<ol>
<li>系统加电或者复位</li>
<li>BIOS(Basic Input Output System) 启动(在 ROM 中的引导程序放在固定位置:FFFF:0000)<ol>
<li>上电自检</li>
<li>对硬件设备检测和链接</li>
<li>从盘中读入引导程序</li>
</ol>
</li>
<li>引导程序执行</li>
<li>核心及系统初始化(过程略)</li>
</ol>
</li>
</ul>
</li>
</ul>
<h5 id="应用程序的处理"><a href="#应用程序的处理" class="headerlink" title="应用程序的处理"></a>应用程序的处理</h5><p>编辑, 编译, 连接, 运行</p>
<img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gk9zjg7bbwj324s0rsb29.jpg" alt="image-20201101211858528" style="zoom: 25%;" />

<p><strong>连接类型:</strong></p>
<h6 id="静态连接"><a href="#静态连接" class="headerlink" title="静态连接"></a>静态连接</h6><p>写进目标文件</p>
<h6 id="动态链接"><a href="#动态链接" class="headerlink" title="动态链接"></a>动态链接</h6><p>在调用外部函数的地方做记录, dll 动态链接库</p>
<h3 id="用户接口"><a href="#用户接口" class="headerlink" title="用户接口"></a>用户接口</h3><p>用户接口分类: 操作接口(操作命令)(用户通过此来组织自己的工作流程和控制程序的运行), 程序接口(系统功能调用)(用户程序可以调用的服务)</p>
<ul>
<li><p>操作接口:</p>
</li>
<li><p>程序接口:</p>
</li>
</ul>
<h3 id="系统功能调用"><a href="#系统功能调用" class="headerlink" title="系统功能调用"></a>系统功能调用</h3><p><strong>定义</strong>: 用户程序对操作系统例行子程序的调用应以一种特殊的调用方式, 就是访管方式来实现(用户态和管态之间的转换) <code>svc n</code></p>
<p>当处理机执行到访管指令时就发生访管中断</p>
<h4 id="☆系统功能调用的实现"><a href="#☆系统功能调用的实现" class="headerlink" title="☆系统功能调用的实现"></a>☆系统功能调用的实现</h4><p><strong>一个带有一定功能号的访管指令定义了一个系统调用, 系统调用是利用访管指令定义的命令</strong></p>
<p>实现这种服务是由 SSR(系统服务请求)机构 来实现的</p>
<img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gka05sph7fj31g40rsx5f.jpg" alt="image-20201101214029068" style="zoom:25%;" />

<h3 id="UNIX-系统功能调用"><a href="#UNIX-系统功能调用" class="headerlink" title="UNIX 系统功能调用"></a>UNIX 系统功能调用</h3><p>分类: 进程管理, 文件和外设管理, 系统状态</p>
<h4 id="UNIX-系统功能调用的实现"><a href="#UNIX-系统功能调用的实现" class="headerlink" title="UNIX 系统功能调用的实现"></a>UNIX 系统功能调用的实现</h4><ul>
<li><p>访管指令<code>trap</code>是俘获的一种</p>
</li>
<li><p>系统调用入口地址表</p>
</li>
<li><p>系统调用实现过程</p>
<img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gka0d393okj31ge0rs1kt.jpg" alt="image-20201101214729668" style="zoom:25%;" /></li>
</ul>
<h3 id="Linux-系统功能调用"><a href="#Linux-系统功能调用" class="headerlink" title="Linux 系统功能调用"></a>Linux 系统功能调用</h3><p>linux 中系统调用是通过异常实现的</p>
<img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gka0g52u4pj31kc0rs1kx.jpg" alt="image-20201101215025303" style="zoom:25%;" />

<h4 id="Linux-系统功能调用的实现机制"><a href="#Linux-系统功能调用的实现机制" class="headerlink" title="Linux 系统功能调用的实现机制"></a>Linux 系统功能调用的实现机制</h4><ul>
<li><p>系统调用进入 <code>int 0x80</code></p>
</li>
<li><p>系统调用号和系统调用表</p>
<p>每个系统调用被赋予唯一的系统调用号, 定义在文件: include/asm-i386/unistd.h</p>
<p>系统调用表记录了内核中所有已经注册过的系统调用, 保存在文件 arch/i386/kernel/entry.S</p>
</li>
<li><p>系统调用处理程序<code>system_call()</code></p>
<ol>
<li><code>SAVE_ALL</code> 保护现场</li>
<li>进行系统调用正确检查</li>
<li>调用服务例程</li>
<li><code>RESRORE_ALL</code> 恢复现场, <code>iret</code> 返回</li>
</ol>
</li>
</ul>
<h4 id="Linux-增加新的系统调用"><a href="#Linux-增加新的系统调用" class="headerlink" title="Linux 增加新的系统调用"></a>Linux 增加新的系统调用</h4><p>eg. 新增加的系统调用名为<code>mysyscall</code>, 系统调用编号名<code>__NR_mysyscall</code>, 服务例程名<code>sys_mysysycall</code></p>
<h5 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h5><ol>
<li><p>添加新的服务例程</p>
<p>在/usr/src/linux/kernel/sys.c 文件中新增一个函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">asmlinkage <span class="keyword">int</span> <span class="title">sys_mysyscall</span><span class="params">(<span class="keyword">int</span> number)</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> number;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>增加新的系统调用号</p>
<p>在 include/asm-i386/unistd.h 增加</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __NR_mysyscall XX</span></span><br></pre></td></tr></table></figure></li>
<li><p>修改系统调用表</p>
<p>在文件 /arch/i386/kernel/entry.S 的 sys_call_table 中增加</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">ENTRY(sys_call_table)</span><br><span class="line">  .<span class="keyword">long</span> sys_restart_syscall</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  .<span class="keyword">long</span> sys_mysyscall <span class="comment">//新增</span></span><br></pre></td></tr></table></figure></li>
<li><p>重新编译内核并启动新内核</p>
</li>
</ol>
<h2 id="第四章-进程及进程管理"><a href="#第四章-进程及进程管理" class="headerlink" title="第四章 进程及进程管理"></a>第四章 进程及进程管理</h2><h3 id="进程引入"><a href="#进程引入" class="headerlink" title="进程引入"></a>进程引入</h3><h4 id="顺序程序"><a href="#顺序程序" class="headerlink" title="顺序程序"></a>顺序程序</h4><blockquote>
<p> 程序是为解决某一问题而设计的一系列指令的集合, 是算法的形式化描述</p>
</blockquote>
<p><strong>特点:</strong> 顺序性, 封闭性, 可再现性</p>
<h4 id="并发程序"><a href="#并发程序" class="headerlink" title="并发程序"></a>并发程序</h4><p><strong>定义</strong>: 程序的并发执行是指, 若干个程序同时在系统中运行 这些程序的执行在时间上是重叠的, 一个程序的执行尚未结束, 另一个程序的执行已经开始</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cobegin</span><br><span class="line">	S1; S2; S3...</span><br><span class="line">coend</span><br></pre></td></tr></table></figure>

<p><strong>特点</strong>: </p>
<ol>
<li><p>失去程序的封闭性(公共变量)</p>
</li>
<li><p>程序与计算不再一一对应</p>
<p>当多个计算任务共享某个程序时, 他们都可以调用这个程序</p>
</li>
<li><p>程序并发执行时的相互制约关系</p>
</li>
</ol>
<h4 id="与时间有关的错误"><a href="#与时间有关的错误" class="headerlink" title="与时间有关的错误"></a>与时间有关的错误</h4><h3 id="进程概念"><a href="#进程概念" class="headerlink" title="进程概念"></a>进程概念</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><blockquote>
<p>执行中的程序</p>
</blockquote>
<ol>
<li>进程是这样的计算部分: 他是可以和其他计算并行的一个计算</li>
<li>进程是一个程序与其数据一道通过处理机的执行所发生的活动</li>
<li>进程是由一个程序以及与他相关的状态信息所组成的</li>
<li>进程就是一个程序在给定活动空间和初始环境下, 在一个处理机上的执行过程</li>
<li>进程是指一个具有一定独立功能的程序关于某个数据集合的一次运行活动</li>
</ol>
<p><strong>进程和程序的区别</strong>:</p>
<ol>
<li>程序是指令的有序集合, 是一个静态概念, 进程是程序在处理机上的一次执行过程</li>
<li>进程是一个能独立运行的单位</li>
<li>进程是竞争计算机系统有限资源的基本单位, 也是进行处理机调度的基本单位</li>
</ol>
<p>为了描述进程, 人们提出了一个数据结构: <strong>进程控制块</strong></p>
<h4 id="进程的状态及变迁"><a href="#进程的状态及变迁" class="headerlink" title="进程的状态及变迁"></a>进程的状态及变迁</h4><h5 id="进程的基本状态"><a href="#进程的基本状态" class="headerlink" title="进程的基本状态"></a>进程的基本状态</h5><ul>
<li><p>就绪状态</p>
<p>进程获得除了 cpu 以外的所有资源</p>
</li>
<li><p>运行状态</p>
<p>得到了 cpu 的控制权限</p>
</li>
<li><p>等待状态(阻塞状态)</p>
<p>若一进程正在等待某一时间发生而暂时停止执行, 这时, 即使给他 cpu 控制权, 他也无法执行</p>
</li>
</ul>
<img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gka1uaxnjnj31jv0rskjl.jpg" alt="image-20201101223838478" style="zoom:25%;" />

<h4 id="进程控制块-PCB-process-control-block"><a href="#进程控制块-PCB-process-control-block" class="headerlink" title="进程控制块(PCB process control block)"></a>进程控制块(PCB process control block)</h4><p>内容:</p>
<ol>
<li><p>进程标识符</p>
</li>
<li><p>进程的状态</p>
</li>
<li><p>当前队列指针 next</p>
<p>通常把具有相同转台的进程链在一起, 组成队列</p>
</li>
<li><p>进程优先级</p>
</li>
<li><p>CPU 现场保护区</p>
</li>
<li><p>通信信息</p>
</li>
<li><p>家族联系(如子进程和父进程的标识符)</p>
</li>
<li><p>占有资源清单</p>
</li>
</ol>
<h3 id="进程控制"><a href="#进程控制" class="headerlink" title="进程控制"></a>进程控制</h3><p>包括: 创建进程, 撤销进程, 进程等待, 进程唤醒</p>
<p>通过原语(一种特殊的系统调用, 他可以完成一个特定功能, 一般为外层软件所调用, 其特点是原语执行时不可中断, 具有原子性)来实现控制和管理的目的</p>
<h4 id="进程创建-fork"><a href="#进程创建-fork" class="headerlink" title="进程创建 fork()"></a>进程创建 <code>fork()</code></h4><h4 id="进程撤销-kill"><a href="#进程撤销-kill" class="headerlink" title="进程撤销 kill()"></a>进程撤销 <code>kill()</code></h4><h4 id="进程等待-susp-chan"><a href="#进程等待-susp-chan" class="headerlink" title="进程等待 susp(chan)"></a>进程等待 <code>susp(chan)</code></h4><p>chan: 进程等待的原因</p>
<p>将现行进程的 cpu现场保护到 PCB 结构中</p>
<h4 id="进程唤醒-wakeup-chan"><a href="#进程唤醒-wakeup-chan" class="headerlink" title="进程唤醒 wakeup(chan)"></a>进程唤醒 <code>wakeup(chan)</code></h4><p>chan: 进程等待的原因</p>
<h3 id="进程之间的约束关系"><a href="#进程之间的约束关系" class="headerlink" title="进程之间的约束关系"></a>进程之间的约束关系</h3><h4 id="进程竞争"><a href="#进程竞争" class="headerlink" title="进程竞争"></a>进程竞争</h4><h4 id="进程协作"><a href="#进程协作" class="headerlink" title="进程协作"></a>进程协作</h4><p>有以下两种情况需要合作</p>
<ol>
<li>信息共享</li>
<li>并行处理</li>
</ol>
<p>协调进程之间的协作需要进程同步, 进程同步需要进程通信</p>
<h4 id="进程同步概念"><a href="#进程同步概念" class="headerlink" title="进程同步概念"></a>进程同步概念</h4><p><strong>进程同步</strong>可以分为: 进程互斥, 进程同步, 进程的直接通信</p>
<h5 id="进程互斥"><a href="#进程互斥" class="headerlink" title="进程互斥"></a>进程互斥</h5><p>A 和 B 不能在同一时间执行</p>
<blockquote>
<p>临界资源: 通常把一次仅允许一个进程使用的资源叫做临界资源</p>
<p>临界区: 一组进程共享某一临界资源, 这组进程中的每个进程对应的程序中都包含了一个访问该临界资源的程序段, 这段程序成为临界区或临界段</p>
</blockquote>
<h5 id="进程同步"><a href="#进程同步" class="headerlink" title="进程同步"></a>进程同步</h5><p>保证进程之间操作的先后次序的约束, 所谓同步, 就是并发进程在一些关键点上可能需要互相等待与互通消息, 这种互相制约的等待与互通消息称为进程同步</p>
<h3 id="同步机构"><a href="#同步机构" class="headerlink" title="同步机构"></a>同步机构</h3><p>操作系统提供的同步机构有两种</p>
<ol>
<li>锁和上锁, 开锁操作</li>
<li>信号灯(信号量)和 P, V 操作</li>
</ol>
<h4 id="锁和上锁-开锁操作"><a href="#锁和上锁-开锁操作" class="headerlink" title="锁和上锁, 开锁操作"></a>锁和上锁, 开锁操作</h4><p>对于每一个共享的临界资源都要有一个单独的锁位, 0 可用 1 已占用</p>
<p>进程使用共享资源之前必须进行一下操作, 称为关锁</p>
<ol>
<li>检测锁位的值</li>
<li>是 0 则置为 1</li>
<li>是 1 则返回 1.再考察</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">lock()&#123;</span><br><span class="line">  <span class="keyword">while</span>(w==<span class="number">1</span>)&#123;</span><br><span class="line">    保护现场;</span><br><span class="line">    将现行进程的 pcb 插入 w 的等待队列;</span><br><span class="line">    将该进程置为等待;</span><br><span class="line">    转进程调度;</span><br><span class="line">  &#125;</span><br><span class="line">  w = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">unlock()&#123;</span><br><span class="line">  <span class="keyword">if</span> (w 等待队列不为空)&#123;</span><br><span class="line"> 		移除等待队列首元素;</span><br><span class="line">    将该进程的 pcb 插入就绪队列;</span><br><span class="line">    置该进程为就绪;</span><br><span class="line">  &#125;</span><br><span class="line">  w = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="信号灯-信号量-和-P-V-操作"><a href="#信号灯-信号量-和-P-V-操作" class="headerlink" title="信号灯(信号量)和 P, V 操作"></a>信号灯(信号量)和 P, V 操作</h4><h5 id="信号灯"><a href="#信号灯" class="headerlink" title="信号灯"></a>信号灯</h5><p>信号灯是一个确定的二元组<code>(s, q)</code><br>s(信号灯) 是一个非负初值的整型变量, 代表资源的实体或并发进程的状态<br>q 是一个初始状态为空的队列</p>
<p>当 s&gt;=0 时为绿灯, 进程可以继续推进, s&lt;0 为红灯, 进程被阻, 信号灯的值通过 PV 操作改变</p>
<h5 id="P-1"><a href="#P-1" class="headerlink" title="P(-1)"></a>P(-1)</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">P()&#123;</span><br><span class="line">  s--;</span><br><span class="line">  <span class="keyword">if</span>(s&lt;<span class="number">0</span>)&#123;</span><br><span class="line">    保留调用进程现场;</span><br><span class="line">    将该进程的 pcb 插入 s 的等待队列;</span><br><span class="line">    置该进程为等待;</span><br><span class="line">    转进程调度;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="V-1"><a href="#V-1" class="headerlink" title="V(+1)"></a>V(+1)</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">V()&#123;</span><br><span class="line">  s++;</span><br><span class="line">  <span class="keyword">if</span>(s&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">    移除 s 等待队列首元素;</span><br><span class="line">    将该进程的 pcb 插入就绪队列;</span><br><span class="line">    置该进程为就绪;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="进程互斥与同步的实现"><a href="#进程互斥与同步的实现" class="headerlink" title="进程互斥与同步的实现"></a>进程互斥与同步的实现</h3><h4 id="上锁开锁实现进程互斥"><a href="#上锁开锁实现进程互斥" class="headerlink" title="上锁开锁实现进程互斥"></a>上锁开锁实现进程互斥</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">main()&#123;</span><br><span class="line">  <span class="keyword">int</span> w = <span class="number">0</span>;</span><br><span class="line">  cobegin</span><br><span class="line">    pp1();</span><br><span class="line">  	pp2();</span><br><span class="line">  coend</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pp1()&#123;</span><br><span class="line">  ...</span><br><span class="line">  lock(w);</span><br><span class="line">  cs1;<span class="comment">//临界区 1</span></span><br><span class="line">  unlock(w);</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pp2()&#123;</span><br><span class="line">  ...</span><br><span class="line">  lock(w);</span><br><span class="line">  cs2;<span class="comment">//临界区 2</span></span><br><span class="line">  unlock(w);</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="信号灯实现进程互斥"><a href="#信号灯实现进程互斥" class="headerlink" title="信号灯实现进程互斥"></a>信号灯实现进程互斥</h4><p>设互斥信号灯为 mutex(mutual exclusion), 赋初值为 1</p>
<p>进入临界区的操作置于 P(mutex)和 V(mutex)之间即可</p>
<p>对于两个并发进程, 互斥信号灯的取值仅为 1, 0, -1</p>
<p>mutext = 1 没有进程进入临界区</p>
<p>mutext = 0 一个进程进入临界区</p>
<p>mutext = -1 一个进程进入临界区, 另一个等待进入</p>
<h4 id="信号灯实现进程同步"><a href="#信号灯实现进程同步" class="headerlink" title="信号灯实现进程同步"></a>信号灯实现进程同步</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">main()&#123;</span><br><span class="line">  <span class="keyword">int</span> s1 = <span class="number">0</span>;<span class="comment">//有无化验单</span></span><br><span class="line">  <span class="keyword">int</span> s2 = <span class="number">0</span>;<span class="comment">//有无化验结果</span></span><br><span class="line">  cobegin</span><br><span class="line">    labora();<span class="comment">//化验</span></span><br><span class="line">    diagnosis();<span class="comment">//看病</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">labora()&#123;</span><br><span class="line">  <span class="keyword">while</span>(化验工作未完成)&#123;</span><br><span class="line">  	p(s1);<span class="comment">//询问有无化验单</span></span><br><span class="line">    化验工作;</span><br><span class="line">    v(s2);<span class="comment">//送出化验结果</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">diagnosis()&#123;</span><br><span class="line">  <span class="keyword">while</span>(看病工作未完成)&#123;</span><br><span class="line">    看病;</span><br><span class="line">  	v(s1);<span class="comment">//送出化验单</span></span><br><span class="line">    p(s2);<span class="comment">//等化验结果</span></span><br><span class="line">    诊断;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="合作进程的执行次序"><a href="#合作进程的执行次序" class="headerlink" title="合作进程的执行次序"></a>合作进程的执行次序</h5><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gka3jglo8jj30t10rsn8t.jpg" alt="image-20201101233724704" style="zoom:20%;" />

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">main()&#123;</span><br><span class="line">  <span class="keyword">int</span> sb = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> sc = <span class="number">0</span>;</span><br><span class="line">  cobegin</span><br><span class="line">    pa();</span><br><span class="line">  	pb();</span><br><span class="line">  	pc();</span><br><span class="line">  coend</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pa()&#123;</span><br><span class="line">  ...</span><br><span class="line">  v(sb);</span><br><span class="line">  v(sc);</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pb()&#123;</span><br><span class="line">  p(sb);</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pc()&#123;</span><br><span class="line">  p(sc);</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="共享缓冲区的合作进程的同步"><a href="#共享缓冲区的合作进程的同步" class="headerlink" title="共享缓冲区的合作进程的同步"></a>共享缓冲区的合作进程的同步</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">main()&#123;</span><br><span class="line">  <span class="keyword">int</span> sa = <span class="number">0</span>;<span class="comment">//buf 中有信息</span></span><br><span class="line">  <span class="keyword">int</span> sb = <span class="number">1</span>;<span class="comment">//buf 中无空位置</span></span><br><span class="line">  cobegin</span><br><span class="line">    cp();<span class="comment">//计算进程</span></span><br><span class="line">  	iop();<span class="comment">//打印进程</span></span><br><span class="line">  coend</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cp()&#123;</span><br><span class="line">  <span class="keyword">while</span>(计算未完成)&#123;</span><br><span class="line">  	得到一个计算结果;</span><br><span class="line">    p(sb);</span><br><span class="line">    将数据送到缓冲区中;</span><br><span class="line">    v(sa);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">iop()&#123;</span><br><span class="line">  <span class="keyword">while</span>(打印工作未完成)&#123;</span><br><span class="line">    p(sa);</span><br><span class="line">    从缓冲区取一个数;</span><br><span class="line">    v(sb);</span><br><span class="line">    在打印机上输出;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="生产者消费者问题"><a href="#生产者消费者问题" class="headerlink" title="生产者消费者问题"></a>生产者消费者问题</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">main()&#123;</span><br><span class="line">  <span class="keyword">int</span> full = <span class="number">0</span>;<span class="comment">//满缓冲区的数目</span></span><br><span class="line">  <span class="keyword">int</span> emtpy = n;<span class="comment">//空缓冲区的数目</span></span><br><span class="line">  <span class="keyword">int</span> mutex = <span class="number">1</span>;<span class="comment">//对有界缓冲区进行操作的互斥信号灯</span></span><br><span class="line">  cobegin</span><br><span class="line">    p1(),p2(),p3()...<span class="comment">//生产者</span></span><br><span class="line">    c1(),c2(),c3()...<span class="comment">//消费者</span></span><br><span class="line">  coend</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">producer()&#123;</span><br><span class="line">  <span class="keyword">while</span>(生产未完成)&#123;</span><br><span class="line">    ...</span><br><span class="line">    生产一个产品;</span><br><span class="line">    p(empty);</span><br><span class="line">    p(mutex);</span><br><span class="line">    送一个产品到有界缓冲区;</span><br><span class="line">    v(mutex);</span><br><span class="line">    v(full);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">consumer()&#123;</span><br><span class="line">  <span class="keyword">while</span>(还要继续消费)&#123;</span><br><span class="line">    p(full);</span><br><span class="line">    p(mutex);</span><br><span class="line">		从有界缓冲区中取产品;</span><br><span class="line">    v(mutex);</span><br><span class="line">    v(empty);</span><br><span class="line">    ...</span><br><span class="line">    消费一个产品</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="进程通信-IPC-interprocess-communication"><a href="#进程通信-IPC-interprocess-communication" class="headerlink" title="进程通信(IPC interprocess communication)"></a>进程通信(IPC interprocess communication)</h3><h4 id="进程通信方式"><a href="#进程通信方式" class="headerlink" title="进程通信方式"></a>进程通信方式</h4><p>IPC 机制是消息(message)从一个进程的地址空间拷贝到另一个进程的地址空间的过程, 而不使用存储器的方法</p>
<ol>
<li><p>消息缓冲通信</p>
<p>使用消息头</p>
<p>包括消息缓冲, 发送原语和接受原语</p>
</li>
<li><p>信箱通信</p>
<p>包括信箱结构, 消息发送和接受</p>
<p>分类: 信箱定义在用户空间和操作系统的空间</p>
<img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gka4dnr7f1j31k10rs7wh.jpg" alt="image-20201102000626648" style="zoom: 25%;" />

<img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gka4envfg1j31f50rs4qc.jpg" alt="image-20201102000724924" style="zoom:25%;" /></li>
</ol>
<h3 id="线程的概念和特点"><a href="#线程的概念和特点" class="headerlink" title="线程的概念和特点"></a>线程的概念和特点</h3><blockquote>
<p>在传统操作系统中, 每个进程只存在一条控制线索和一个程序计数器, 现代操作系统中, 有些提供了对单个进程中多条控制线索的支持, 这些控制线索通常称为线程, 也叫轻量级进程</p>
<p>线程是进程的一个执行路径</p>
</blockquote>
<p>对于线程的描述:</p>
<ol>
<li>线程是进程中的一条执行路径</li>
<li>他有自己私用的堆栈和处理机执行环境</li>
<li>他共享父进程的主存</li>
<li>他是单个进程所创建的许多个同时存在的线程中的一个</li>
</ol>
<p>进一步可以将进程的组成概括为以下:</p>
<ol>
<li>一个执行程序, 定义了初始代码和数据</li>
<li>一个私用地址空间, 他是进程可以使用的一组虚拟主存地址</li>
<li>进程执行时所需的系统资源是由操作系统分配给进程的</li>
<li>若系统支持线程运行, 那么, 每个进程至少有一个执行线程</li>
</ol>
<p>进程是任务调度的单位, 也是系统资源的分配单位;</p>
<p>线程是进程中的一条执行路径, 是任务调度的单位, 但不是系统资源的分配单位</p>
<p>线程完全继承父进程占有的资源, 当他活动时, 具有自己的运行现场, 有自己的堆栈</p>
<h4 id="线程的特点"><a href="#线程的特点" class="headerlink" title="线程的特点"></a>线程的特点</h4><h5 id="线程的状态变迁"><a href="#线程的状态变迁" class="headerlink" title="线程的状态变迁:"></a>线程的状态变迁:</h5><ol>
<li>创建</li>
<li>就绪</li>
<li>运行</li>
<li>等待</li>
<li>终止</li>
</ol>
<h5 id="用户线程和内核线程"><a href="#用户线程和内核线程" class="headerlink" title="用户线程和内核线程"></a>用户线程和内核线程</h5><ul>
<li>用户线程: 是在内核的支持下, 用户层通过线程库实现的, 用户线程的创建和调度是在用户控件内形成的, 不需要内核干预</li>
<li>内核线程: 由操作系统直接支持, 对内核线程的管理是由操作系统完成的</li>
</ul>
<h3 id="操作系统的并发机制实例"><a href="#操作系统的并发机制实例" class="headerlink" title="操作系统的并发机制实例"></a>操作系统的并发机制实例</h3><h4 id="创建进程"><a href="#创建进程" class="headerlink" title="创建进程"></a>创建进程</h4><p><code>fork()</code></p>
<ol>
<li>为新锦成分配一个新的 PCB 结构</li>
<li>为子进程赋一个惟一的进程标识号(PID)</li>
<li>做一个父进程上下文的逻辑副本(增加引用数)</li>
<li>增加与该进程相关联的文件表和索引节点表的引用数, 这意味着父进程打开的文件子进程可以继续使用</li>
<li>对父进程返回子进程的进程号, 对子进程返回 0</li>
</ol>
<h4 id="创建线程"><a href="#创建线程" class="headerlink" title="创建线程"></a>创建线程</h4><p><code>clone()</code></p>
<h4 id="等待进程-线程的终止及其应用"><a href="#等待进程-线程的终止及其应用" class="headerlink" title="等待进程, 线程的终止及其应用"></a>等待进程, 线程的终止及其应用</h4><p><code>waitpid(pid_t pid, int *status, int options)</code></p>
<p>使得父进程暂停执行, 知道它的一个子进程结束为止</p>
<p>pid: 子进程的 PID</p>
<p>status: 子进程的退出码</p>
<h4 id="信号量与使用方法"><a href="#信号量与使用方法" class="headerlink" title="信号量与使用方法"></a>信号量与使用方法</h4><p><code>semget semop semctl</code></p>
<h5 id="信号量的创建"><a href="#信号量的创建" class="headerlink" title="信号量的创建"></a>信号量的创建</h5><p><code>int semget(key_t key, int num_sems, int sem_flags)</code></p>
<p>key: 用来允许多个进程访问相同信号量的整数值, 他们通过相同的 key 值来调用 semget()</p>
<p>num_sems: 所需要的信号量数目, semget()创建的是一个信号量数组, 数组元素个数为 num_sems</p>
<p>sem_flags: 标记集合</p>
<h5 id="信号量控制"><a href="#信号量控制" class="headerlink" title="信号量控制"></a>信号量控制</h5><p><code>int semctl(int sem_id, int sem_num, int command, ...)</code></p>
<p>sem_id: semget()函数所获得的信号量标识符</p>
<p>sem_num: 信号量数组元素的下标, 即对第几个信号量进行控制</p>
<p>command: 要执行的动作, 常用的值有 SETVAL(用于为信号量赋初值), IPC_RMID(当信号量不再需要时用于删除一个信号量标识符)</p>
<h5 id="信号量操作"><a href="#信号量操作" class="headerlink" title="信号量操作"></a>信号量操作</h5><p><code>int semop(int sem_id, struct sembuf *sem_ops, size_t num_sem_ops)</code></p>
<p>sem_id: 信号量标识符</p>
<p>sem_ops: 指向结构数组的指针</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sembuf</span> &#123;</span></span><br><span class="line">  <span class="keyword">short</span> sem_num;<span class="comment">//信号量数组下标</span></span><br><span class="line">  <span class="keyword">short</span> sem_op;<span class="comment">//信号量的变化量值, -1 对应 p, 1 对应 v</span></span><br><span class="line">  <span class="keyword">short</span> sem_flg;<span class="comment">//通常设置为 0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="共享主存"><a href="#共享主存" class="headerlink" title="共享主存"></a>共享主存</h4><blockquote>
<p>共享主存允许两个或更多进程访问用一块主存, 但程序编制者必须提供自己的同步措施</p>
</blockquote>
<ul>
<li><p>共享主存的分配</p>
<p><code>shmget</code></p>
<p>参数 1: 表示共享主存快的键值(IPC_PRIVATE 可以保证系统建立一个全新的共享主存块)</p>
<p>参数 2: 所申请的主存块的大小</p>
<p>参数 3: 一组标识</p>
</li>
<li><p>共享主存的绑定</p>
<p><code>shmat</code>绑定</p>
<p>参数 1: 共享主存标识符 SHMID</p>
<p>参数 2: 指向希望用于映射该共享主存块的进程主存地址的指针</p>
<p>参数 3: 一个标志位</p>
<p><code>shmdt</code>脱离</p>
</li>
<li><p>共享主存的释放</p>
<p><code>shmctl</code></p>
<p>参数 1: 共享主存标识符</p>
<p>参数 2: IPC_RMID</p>
<p>参数 3: null</p>
<p>或用来 get 共享主存的相关信息</p>
<p>参数 1: 共享主存标识符</p>
<p>参数 2: IPC_STAT</p>
<p>参数 3: 一个指向 struct shmid_ds 对象的指针</p>
</li>
</ul>
<h3 id="UNIX-进程管理"><a href="#UNIX-进程管理" class="headerlink" title="UNIX 进程管理"></a>UNIX 进程管理</h3><h4 id="UNIX-进程及其映像"><a href="#UNIX-进程及其映像" class="headerlink" title="UNIX 进程及其映像"></a>UNIX 进程及其映像</h4><ul>
<li><p>进程映像</p>
<p>unix 中的进程实体称为映像(image), 包括</p>
<ul>
<li><p>进程基本控制块 proc结构</p>
<p>unix 把进程控制块分为两部分, 把最常用的一部分信息常驻主存作为基本控制块, 称为 proc 结构</p>
<p>另一部分存放不常用的信息称为扩充控制块, 称为 user 结构</p>
</li>
<li><p>正文段</p>
<p>纯过程, 只能读和执行</p>
</li>
<li><p>数据段</p>
<p>可读可写可执行</p>
<p>分为三部分: 最高层用户栈, 中间用户数据区, 低端进程数据区(ppda per process data area), ppda 分为两部分, 上面是核心栈, 下面是 user 结构</p>
</li>
</ul>
</li>
<li><p>共享正文段</p>
<p>为了管理正文段, 设置正文表 text</p>
<p>正文段平时放在磁盘上</p>
</li>
<li><p>进程基本控制块</p>
<p>proc 型数据结构</p>
</li>
<li><p>进程扩充控制块</p>
<p>user 型数据结构</p>
</li>
</ul>
<img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gka7voph7cj313k0rse3i.jpg" alt="image-20201102020733676" style="zoom:25%;" />

<h4 id="UNIX-进程状态及变迁"><a href="#UNIX-进程状态及变迁" class="headerlink" title="UNIX 进程状态及变迁"></a>UNIX 进程状态及变迁</h4><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gka7xkeuz1j31620rs1kx.jpg" alt="image-20201102020916842" style="zoom:25%;" />

<p>状态:</p>
<ol>
<li><p>运行状态</p>
</li>
<li><p>就绪状态</p>
<p>在主存中就绪, 就绪切换出</p>
</li>
<li><p>睡眠状态</p>
<p>高优先睡眠, 低优先睡眠</p>
</li>
<li><p>创建状态</p>
</li>
<li><p>僵死状态</p>
</li>
<li><p>进程转台变迁</p>
</li>
</ol>
<h4 id="UNIX-进程的创建"><a href="#UNIX-进程的创建" class="headerlink" title="UNIX 进程的创建"></a>UNIX 进程的创建</h4><p><code>pid = fork()</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">fork()&#123;</span><br><span class="line">  newproc();</span><br><span class="line">  判断从 newproc 返回的值;</span><br><span class="line">  <span class="keyword">if</span>(返回值为 <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="comment">//子进程</span></span><br><span class="line">    子进程标识数送入栈内 r0 保护单元;</span><br><span class="line">    栈内保护的返回地址加 <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span>(r0);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//父进程</span></span><br><span class="line">    父进程标识数送入栈内 r0 保护单元;</span><br><span class="line">    子进程运行时间参数清零;</span><br><span class="line">    <span class="keyword">return</span>(r0);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gka84vi0atj318t0rskd5.jpg" alt="image-20201102021616008" style="zoom:25%;" />

<h4 id="UNIX-进程的终止与等待"><a href="#UNIX-进程的终止与等待" class="headerlink" title="UNIX 进程的终止与等待"></a>UNIX 进程的终止与等待</h4><h5 id="进程的自我终止"><a href="#进程的自我终止" class="headerlink" title="进程的自我终止"></a>进程的自我终止</h5><p><code>exit(status)</code></p>
<p>status 是终止进程向父进程传递的参数, 父进程用 wait 取得该参数</p>
<h5 id="等待进程的终止"><a href="#等待进程的终止" class="headerlink" title="等待进程的终止"></a>等待进程的终止</h5><p><code>pid = wait(stat_addr)</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">wait(stat_addr)&#123;</span><br><span class="line">  <span class="keyword">if</span>(等待进程没有僵死进程)</span><br><span class="line">    <span class="keyword">return</span>(错误码);</span><br><span class="line">  <span class="keyword">for</span>(;;)&#123;</span><br><span class="line">    <span class="keyword">if</span>(等待进程有僵死子进程)&#123;</span><br><span class="line">      取任一僵死子进程;</span><br><span class="line">      将子进程的 cpu 使用量加到父进程;</span><br><span class="line">     	释放子进程的 proc;</span><br><span class="line">      <span class="keyword">return</span>(子进程标识号, 子进程退出码);</span><br><span class="line">    &#125;</span><br><span class="line">    睡眠在可中断的优先级上(事件:子进程退出)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="UNIX-进程的睡眠与唤醒"><a href="#UNIX-进程的睡眠与唤醒" class="headerlink" title="UNIX 进程的睡眠与唤醒"></a>UNIX 进程的睡眠与唤醒</h4><h5 id="进程的睡眠"><a href="#进程的睡眠" class="headerlink" title="进程的睡眠"></a>进程的睡眠</h5><p><code>sleep(chan, pri)</code></p>
<p>pri 为唤醒后该进程的优先级, 若为负责进入高优先级睡眠状态, 否则进入低睡眠优先级状态</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">sleep(chan, pri)&#123;</span><br><span class="line">	提高处理机执行级来屏蔽所有中断;</span><br><span class="line">  置当前进程状态为睡眠;</span><br><span class="line">	<span class="keyword">if</span>(pri&lt;<span class="number">0</span>)&#123;</span><br><span class="line">    p_wchan = chan;</span><br><span class="line">    p_pri = pri;</span><br><span class="line">    s_stat = SSLEEP;</span><br><span class="line">    重置处理机优先级为进程进入睡眠时的值;</span><br><span class="line">    <span class="keyword">switch</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    p_wchan = chan;</span><br><span class="line">    p_pri = pri;</span><br><span class="line">    s_stat = SWAIT;</span><br><span class="line">		<span class="keyword">if</span>(<span class="number">0</span>#因无进程换出而等待)&#123;</span><br><span class="line">     	唤醒 <span class="number">0</span>#进程;</span><br><span class="line">    	重置处理机优先级为进程进入睡眠时的值;</span><br><span class="line">      <span class="keyword">switch</span>(); </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="唤醒睡眠进程"><a href="#唤醒睡眠进程" class="headerlink" title="唤醒睡眠进程"></a>唤醒睡眠进程</h5><p><code>wakeup(chan)</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">wakeup(chan)&#123;</span><br><span class="line">  提高处理机执行级来屏蔽所有中断;</span><br><span class="line">  查找睡眠原因;</span><br><span class="line">  <span class="keyword">for</span>(每个在该原因上睡眠的进程)&#123;</span><br><span class="line">    将进程移出此等待队列;</span><br><span class="line">    置进程状态为就绪;</span><br><span class="line">    将进程加入就绪队列;</span><br><span class="line">    清除 proc 表中的睡眠原因域;</span><br><span class="line">    <span class="keyword">if</span>(进程尚未装入主存)</span><br><span class="line">      唤醒对换过程(进程 <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="keyword">if</span>(被唤醒的进程比当前运行的进程的优先级高)</span><br><span class="line">        设置调度标志</span><br><span class="line">  &#125;</span><br><span class="line">  将处理机的执行级恢复为原来的级别;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Linux-系统的进程管理"><a href="#Linux-系统的进程管理" class="headerlink" title="Linux 系统的进程管理"></a>Linux 系统的进程管理</h3><h4 id="进程描述符-process-descriptor-及其主要内容"><a href="#进程描述符-process-descriptor-及其主要内容" class="headerlink" title="进程描述符(process descriptor)及其主要内容"></a>进程描述符(process descriptor)及其主要内容</h4><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gka8qe9bzpj30tk0rsas6.jpg" alt="image-20201102023701946" style="zoom: 33%;" />

<h4 id="进程描述符的获得"><a href="#进程描述符的获得" class="headerlink" title="进程描述符的获得"></a>进程描述符的获得</h4><p><code>current</code>宏</p>
<p>thread_info 结构成为进程基本信息块, Linux 系统将内核态的进程堆栈和 thread_info 结构组织在一起, thread_info 放在堆栈的尾端, 可以直接用 esp 获取</p>
<h4 id="linux-进程状态变迁"><a href="#linux-进程状态变迁" class="headerlink" title="linux 进程状态变迁"></a>linux 进程状态变迁</h4><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gka8t20qaxj31hm0rs1kx.jpg" alt="image-20201102023934918" style="zoom:25%;" />

<h4 id="linux-系统的进程创建"><a href="#linux-系统的进程创建" class="headerlink" title="linux 系统的进程创建"></a>linux 系统的进程创建</h4><p>写时拷贝(copy-on-write), 当一方要写入时才进行拷贝</p>
<p><code>fork() clone()</code></p>
<h4 id="linux-系统的进程终止"><a href="#linux-系统的进程终止" class="headerlink" title="linux 系统的进程终止"></a>linux 系统的进程终止</h4><p><code>exit()</code></p>
<h4 id="linux-系统的进程等待"><a href="#linux-系统的进程等待" class="headerlink" title="linux 系统的进程等待"></a>linux 系统的进程等待</h4><h4 id="linux-系统的进程唤醒"><a href="#linux-系统的进程唤醒" class="headerlink" title="linux 系统的进程唤醒"></a>linux 系统的进程唤醒</h4><h2 id="第五章-资源分配与调度"><a href="#第五章-资源分配与调度" class="headerlink" title="第五章 资源分配与调度"></a>第五章 资源分配与调度</h2><h3 id="资源管理概述"><a href="#资源管理概述" class="headerlink" title="资源管理概述"></a>资源管理概述</h3><h4 id="静态分配与动态分配"><a href="#静态分配与动态分配" class="headerlink" title="静态分配与动态分配"></a>静态分配与动态分配</h4><p>静态: 作业被调度时根据用户给出的信息分配</p>
<p>动态: 进程运行中 根据运行状态动态分配使用释放</p>
<h4 id="资源管理"><a href="#资源管理" class="headerlink" title="资源管理"></a>资源管理</h4><h4 id="虚拟资源"><a href="#虚拟资源" class="headerlink" title="虚拟资源"></a>虚拟资源</h4><h3 id="资源管理的机制与策略"><a href="#资源管理的机制与策略" class="headerlink" title="资源管理的机制与策略"></a>资源管理的机制与策略</h3><h4 id="资源分配机制"><a href="#资源分配机制" class="headerlink" title="资源分配机制"></a>资源分配机制</h4><h5 id="资源描述器rd"><a href="#资源描述器rd" class="headerlink" title="资源描述器rd"></a>资源描述器rd</h5><p>描述了资源的特性和管理方式, 一个资源分配单位(如主存的块, 磁盘的扇区)对应一个资源描述器</p>
<h5 id="资源信息块rib"><a href="#资源信息块rib" class="headerlink" title="资源信息块rib"></a>资源信息块rib</h5><p>它描述了<strong>某类</strong>资源的请求者, 可利用的资源, 以及该类资源的分配程序地址</p>
<p>数据结构包括: 等待队列头指针(PCB), 可利用资源队列头指针(rd), 资源分配程序入口地址</p>
<h4 id="资源分配策略"><a href="#资源分配策略" class="headerlink" title="资源分配策略"></a>资源分配策略</h4><p>选择请求者, 选择资源两种策略, 分别针对两个队列</p>
<h5 id="先请求先服务"><a href="#先请求先服务" class="headerlink" title="先请求先服务"></a>先请求先服务</h5><p>如批处理系统在处理作业调度采用 FIFO</p>
<h5 id="优先调度"><a href="#优先调度" class="headerlink" title="优先调度"></a>优先调度</h5><p>对每一个进程指定优先级</p>
<h5 id="针对设备特性的调度"><a href="#针对设备特性的调度" class="headerlink" title="针对设备特性的调度"></a>针对设备特性的调度</h5><h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><p>定义: 进程之间相互等待不能向前推进</p>
<p>例子: 生产者消费者的 mutex 和 占用的顺序问题</p>
<h4 id="死锁的原因"><a href="#死锁的原因" class="headerlink" title="死锁的原因"></a>死锁的原因</h4><p>根本原因: 操作系统能够提供的资源个数比请求资源的进程数少</p>
<p>进程推进顺序违法</p>
<h5 id="必要条件"><a href="#必要条件" class="headerlink" title="必要条件:"></a>必要条件:</h5><ol>
<li>互斥条件</li>
<li>不剥夺条件: 资源被占有以后不能被剥夺</li>
<li>占有并等待: 等待资源时继续占有已经有的资源</li>
<li>环路条件: 存在一种进程的循环链, 链中的每一个进程已获得的资源被链中的下一个进程所请求</li>
</ol>
<h4 id="死锁的处理"><a href="#死锁的处理" class="headerlink" title="死锁的处理"></a>死锁的处理</h4><p>思想: 进入系统的一组进程必须事先宣布他们所需要的各类资源数</p>
<p>资源分配图:</p>
<p>若图没有环, 则系统没有发生死锁, 若有环, 则可能发生死锁</p>
<p>如果环涉及一组资源类型, 且每个资源类型只有一个实例, 那么有环就意味着有死锁</p>
<h5 id="解决死锁"><a href="#解决死锁" class="headerlink" title="解决死锁"></a>解决死锁</h5><p>破坏必要条件</p>
<ol>
<li>资源静态分配</li>
<li>资源动态分配, 有控分配</li>
<li>检测死锁并修复</li>
<li>忽略死锁, 重启系统</li>
</ol>
<h5 id="死锁的预防"><a href="#死锁的预防" class="headerlink" title="死锁的预防"></a>死锁的预防</h5><p>静态预防: 预先分配所有共享资源</p>
<p>动态避免: 有序分配</p>
<p>要求每个进程: </p>
<ol>
<li>对它锁必须使用而且属于某一类的所有资源必须一次性申请完</li>
<li>在申请不同类资源时, 必须按各类的编号<strong>依次</strong>申请</li>
</ol>
<h5 id="银行家算法"><a href="#银行家算法" class="headerlink" title="银行家算法"></a>银行家算法</h5><p>进入系统的进程必须说明它对各类资源类型实例的最大需求量</p>
<p>当进程申请一组资源时, 该算法需要检查申请者对各类资源的最大需求量, 如果系统现存的资源数可以满足当前它对资源的最大需求量, 就满足该申请, 否则等待. </p>
<p>即仅当申请者可以再一定时间内无条件归还所申请的资源是, 才把资源分配给他</p>
<h2 id="第六章-进程调度"><a href="#第六章-进程调度" class="headerlink" title="第六章 进程调度"></a>第六章 进程调度</h2><h3 id="处理机的多级调度"><a href="#处理机的多级调度" class="headerlink" title="处理机的多级调度"></a>处理机的多级调度</h3><p>批处理系统: 作业调度+ 进程调度</p>
<p>多任务操作系统</p>
<p>多线程操作系统</p>
<h3 id="作业调度"><a href="#作业调度" class="headerlink" title="作业调度"></a>作业调度</h3><h4 id="作业状态"><a href="#作业状态" class="headerlink" title="作业状态"></a>作业状态</h4><p>后备状态, 执行状态, 完成状态</p>
<h4 id="作业调度的功能"><a href="#作业调度的功能" class="headerlink" title="作业调度的功能"></a>作业调度的功能</h4><h5 id="数据结构-作业控制块-jcb"><a href="#数据结构-作业控制块-jcb" class="headerlink" title="数据结构: 作业控制块 jcb"></a>数据结构: 作业控制块 jcb</h5><h5 id="调度算法"><a href="#调度算法" class="headerlink" title="调度算法"></a>调度算法</h5><p>平均周转时间: 周转时间 = 作业完成的时间 - 进入系统的时间 </p>
<p>带权周转时间 = 周转时间/作业实际执行时间</p>
<h6 id="FIFO"><a href="#FIFO" class="headerlink" title="FIFO"></a>FIFO</h6><h6 id="短作业优先调度"><a href="#短作业优先调度" class="headerlink" title="短作业优先调度"></a>短作业优先调度</h6><p>总是选取计算时间最短的作业作为下一个服务的对象</p>
<p>可以使平均周转时间最小</p>
<h6 id="响应比高者优先调度算法"><a href="#响应比高者优先调度算法" class="headerlink" title="响应比高者优先调度算法"></a>响应比高者优先调度算法</h6><p>响应时间 = 进入系统后的等待时间 + 执行时间</p>
<p>响应比 = 响应时间/执行时间 = 1 + 等待时间/执行时间</p>
<p>每次调度作业, 计算响应比, 响应比最高执行</p>
<h6 id="优先调度算法"><a href="#优先调度算法" class="headerlink" title="优先调度算法"></a>优先调度算法</h6><h5 id="分配资源"><a href="#分配资源" class="headerlink" title="分配资源"></a>分配资源</h5><h5 id="善后处理"><a href="#善后处理" class="headerlink" title="善后处理"></a>善后处理</h5><h3 id="进程调度"><a href="#进程调度" class="headerlink" title="进程调度"></a>进程调度</h3><p>分为: 调度和分派</p>
<h4 id="进程调度的功能"><a href="#进程调度的功能" class="headerlink" title="进程调度的功能:"></a>进程调度的功能:</h4><ol>
<li>记录进程有关情况(PCB)</li>
<li>决定分配策略</li>
<li>实施处理机的分配和回收</li>
</ol>
<h4 id="调度方式"><a href="#调度方式" class="headerlink" title="调度方式"></a>调度方式</h4><p>非剥夺调用</p>
<p>可剥夺调用</p>
<h4 id="进程优先数调度算法"><a href="#进程优先数调度算法" class="headerlink" title="进程优先数调度算法"></a>进程优先数调度算法</h4><p>分两级</p>
<p>进程调度(低级调度, 短程调度)</p>
<p>高级调度(中程调度)</p>
<h5 id="进程优先数调度算法-1"><a href="#进程优先数调度算法-1" class="headerlink" title="进程优先数调度算法"></a>进程优先数调度算法</h5><h6 id="优先数"><a href="#优先数" class="headerlink" title="优先数:"></a>优先数:</h6><p>静态优先数: 进程创建时确定</p>
<p>动态优先数: 进程被重新调度时或者耗尽时间定额时, 优先数被调整</p>
<h4 id="循环轮转调度"><a href="#循环轮转调度" class="headerlink" title="循环轮转调度"></a>循环轮转调度</h4><p>FIFO 有缺陷</p>
<p>每个进程被调度时分得一个时间片, 时间片用完以后, 转为就绪并进入就绪队列末端</p>
<p>时间片 q = 用户所能接受的响应时间/进入系统的进程数目</p>
<p>改进: </p>
<ol>
<li><p>可变时间片</p>
<p>每一轮开始时, 系统根据就绪队列中已有的进程数目计算一次 q</p>
</li>
<li><p>多就绪队列</p>
<p>某进程分到处理机时, 给它一个与<strong>就绪队列对应的时间片</strong>, 时间片用完后, 被迫释放处理机, 进入下一级就绪队列中, 每高一级就绪队列, 时间片就加倍</p>
</li>
</ol>
<h4 id="状态变迁"><a href="#状态变迁" class="headerlink" title="状态变迁"></a>状态变迁</h4><p>超时间片: 低优先就绪</p>
<p>阻塞: 高优先就绪</p>
<h2 id="第七章-主存管理"><a href="#第七章-主存管理" class="headerlink" title="第七章 主存管理"></a>第七章 主存管理</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>物理主存</p>
<p>​    物理地址(实地址, 绝对地址): 处理机可以根据绝对地址任意存放信息</p>
<p>逻辑主存</p>
<p>​    逻辑地址(虚地址)</p>
<p>分片:</p>
<ol>
<li>划分为大小不同的区域, 根据需求决定大小: 按区(按段)分配</li>
<li>划分为大小相同的块: 按页分配</li>
</ol>
<p>逻辑组织:</p>
<ol>
<li>一维地址</li>
<li>二维地址: 例如分为代码段, 数据段, 堆栈段, 确定地址需要两个信息: 分段, 偏移量</li>
</ol>
<h3 id="主存管理的功能"><a href="#主存管理的功能" class="headerlink" title="主存管理的功能"></a>主存管理的功能</h3><h4 id="虚拟存储器"><a href="#虚拟存储器" class="headerlink" title="虚拟存储器"></a>虚拟存储器</h4><p>定义: 只装入部分程序代码和数据就启动运行, 由操作系统和硬件相配合完成主存和辅存之间的信息动态调度, 这样的计算机好像为用户提供了一个比主存大得多的存储器</p>
<p>虚地址空间 V</p>
<p>实地址空间 R</p>
<h4 id="地址映射"><a href="#地址映射" class="headerlink" title="地址映射"></a>地址映射</h4><p>即逻辑地址和物理地址的转换</p>
<p>根据程序开发的不同阶段分类:</p>
<ol>
<li>编程或者编译时确定<br>这样的程序模块必须放在主存的一个确定地址</li>
<li>静态地址映射(静态重定位)<br>虚实地址对应在程序装入主存时完成(转换由软件实现)<br>要求被装入的程序本身是可以重定位的, 即对需要修改的地址具有某种标识<br>但这种情况下, 一个已经开始执行的程序是无法在主存中移动的</li>
<li>动态地址映射<br>程序执行期间, 随着和每条指令和数据访问, 自动连续的进行映射<br>当某个进程取得 CPU 时, 操作系统负责将该程序在主存中的起始地址送入重定位寄存器中(硬件实现转换)</li>
</ol>
<h4 id="主存分配"><a href="#主存分配" class="headerlink" title="主存分配"></a>主存分配</h4><h4 id="存储保护"><a href="#存储保护" class="headerlink" title="存储保护"></a>存储保护</h4><p>上下界防护(上下界寄存器)</p>
<h3 id="分区存储"><a href="#分区存储" class="headerlink" title="分区存储"></a>分区存储</h3><h4 id="分区分配机构"><a href="#分区分配机构" class="headerlink" title="分区分配机构"></a>分区分配机构</h4><p>描述主存资源的数据结构: 主存资源信息块(m_rib), 分区描述器(pd)</p>
<p>m_rib: 等待队列指针, 空闲区队列指针, 主存分配程序入口地址</p>
<p>pd: 分区标志(已用1还是空闲0), 分区大小, 勾连字(next空区)</p>
<h4 id="分区分配和放置策略"><a href="#分区分配和放置策略" class="headerlink" title="分区分配和放置策略"></a>分区分配和放置策略</h4><h5 id="分区分配"><a href="#分区分配" class="headerlink" title="分区分配"></a>分区分配</h5><p>分配主存块: 若找到的空闲区的大小小于请求大小, 就继续找, 否则找到</p>
<p>如果大小正好, 啧从空闲区移除, 否则一部分成为已分配区, 一部分成为空闲区并修改 pd</p>
<h5 id="放置策略"><a href="#放置策略" class="headerlink" title="放置策略"></a>放置策略</h5><p>即空闲队列的排序规则</p>
<ol>
<li>按照地址增加或减少排序</li>
<li>按照区的大小排序</li>
</ol>
<h6 id="算法"><a href="#算法" class="headerlink" title="算法:"></a>算法:</h6><ol>
<li>首次适应算法<br>按照地址排序, 尽可能利益存储器低地址的空闲区</li>
<li>最佳适应算法<br>按照大小递增的顺序排序, 能找到最适合的, 但会使得剩下的空闲区非常小以至于无法使用</li>
<li>最坏适应算法<br>放入最大的空闲区, 按照大小递减的顺序排列</li>
</ol>
<h4 id="碎片问题"><a href="#碎片问题" class="headerlink" title="碎片问题"></a>碎片问题</h4><ol>
<li>回收时立即拼接</li>
<li>找不到足够大的的空闲区再拼接</li>
</ol>
<h3 id="页式存储"><a href="#页式存储" class="headerlink" title="页式存储"></a>页式存储</h3><p>主存的块和页面大小相等且为 2 的幂次, 只要求把当前所需要的一部分页面装入主存即可</p>
<h4 id="页式地址转换"><a href="#页式地址转换" class="headerlink" title="页式地址转换"></a>页式地址转换</h4><h5 id="页表-地址变换表-地址映像表-页号-块号"><a href="#页表-地址变换表-地址映像表-页号-块号" class="headerlink" title="页表(地址变换表, 地址映像表): 页号, 块号"></a>页表(地址变换表, 地址映像表): 页号, 块号</h5><p>页面尺寸一般为 1, 2, 4kb</p>
<p>页表放在快速存储器中, 放置页表的快速存储器叫做联想存储器, 其中的页表叫做块表</p>
<h5 id="虚拟地址"><a href="#虚拟地址" class="headerlink" title="虚拟地址"></a>虚拟地址</h5><p>按位分成页号和页内位移, 页内位移取决于页面尺寸</p>
<h5 id="页式地址变换"><a href="#页式地址变换" class="headerlink" title="页式地址变换"></a>页式地址变换</h5><p>作业访问主存-&gt;虚拟地址-&gt;分页机构-&gt;页号+页内位移-&gt;页表始址寄存器-&gt;页表-&gt;根据页号找到块号-&gt;块号+页内位移-&gt;物理地址</p>
<h4 id="请调页面机制"><a href="#请调页面机制" class="headerlink" title="请调页面机制"></a>请调页面机制</h4><p>即从辅存把页面装入主存</p>
<h5 id="扩充页表"><a href="#扩充页表" class="headerlink" title="扩充页表"></a>扩充页表</h5><p>页号, 主存块号, 中段位(1 不在主存 0 在主存), 辅存地址</p>
<h4 id="淘汰机制与策略"><a href="#淘汰机制与策略" class="headerlink" title="淘汰机制与策略"></a>淘汰机制与策略</h4><h5 id="扩充页表-1"><a href="#扩充页表-1" class="headerlink" title="扩充页表"></a>扩充页表</h5><p>页号, 主存块号, 中断位, 改变位(1 修改过 0 未修改), 引用位(1 已被访问 0 未被访问), 辅存地址</p>
<h4 id="几种置换算法"><a href="#几种置换算法" class="headerlink" title="几种置换算法"></a>几种置换算法</h4><h5 id="1-最佳算法-opt-理论"><a href="#1-最佳算法-opt-理论" class="headerlink" title="1. 最佳算法 opt(理论)"></a>1. 最佳算法 opt(理论)</h5><h5 id="2-先进先出-FIFO"><a href="#2-先进先出-FIFO" class="headerlink" title="2. 先进先出 FIFO"></a>2. 先进先出 FIFO</h5><p>将留存最老的一页淘汰</p>
<ol>
<li>利用: 页号表</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">P[k] = 新页号;<span class="comment">//P 为页号表, 大小为程序可用的块的数量m</span></span><br><span class="line">k = (k+<span class="number">1</span>) mod m;<span class="comment">//k 为替换指针</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在存储分块中建立先后次序</li>
</ol>
<p>存储分块表: 以块号为序号, 依次登记各块的分配情况(分配给了哪个页)</p>
<p>组成: 块号, 页号, 指针(指向下一个已分配的块, 指示了块分配的次序, 用一个替换指针实现替换最先分配的块)</p>
<h5 id="3-最久未使用算法-LRU"><a href="#3-最久未使用算法-LRU" class="headerlink" title="3. 最久未使用算法(LRU)"></a>3. 最久未使用算法(LRU)</h5><p>选择最长时间未被使用的页</p>
<ol>
<li>计数器<br>计数器内容复制到对应页表项的时间域内, 反应最近是否使用</li>
<li>页号堆栈<br>栈底存放的就是最久未使用的</li>
</ol>
<h5 id="4-LRU-近似算法"><a href="#4-LRU-近似算法" class="headerlink" title="4. LRU 近似算法"></a>4. LRU 近似算法</h5><p>存储块有一个引用位, 当页面被访问时置 1, 页面管理软件周期性将所有引用位置 0</p>
<h3 id="段式和段页式存储"><a href="#段式和段页式存储" class="headerlink" title="段式和段页式存储"></a>段式和段页式存储</h3><h4 id="地址变换"><a href="#地址变换" class="headerlink" title="地址变换"></a>地址变换</h4><p>同时提供段名和段内地址, 程序地址的形式为(s, w)</p>
<p>段表: 段号, 长度, 基址</p>
<p>基址+段内地址=主存地址</p>
<h4 id="扩充段表"><a href="#扩充段表" class="headerlink" title="扩充段表"></a>扩充段表</h4><p>加入中断位, 引用位, 改变位</p>
<h4 id="段页式存储"><a href="#段页式存储" class="headerlink" title="段页式存储"></a>段页式存储</h4><p>一个程序-&gt;一张段表-&gt;每个段一个页表</p>
<h2 id="第八章-设备管理"><a href="#第八章-设备管理" class="headerlink" title="第八章 设备管理"></a>第八章 设备管理</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>设备分类: 存储设备, io 设备, 通信设备</p>
<p>功能: 状态跟踪, 设备分配, 设备管理</p>
<h4 id="设备独立性"><a href="#设备独立性" class="headerlink" title="设备独立性"></a>设备独立性</h4><p>定义: 用户在编制程序时所使用的设备与实际使用的设备无关, 也就是在用户程序中仅使用逻辑设备名</p>
<ol>
<li>程序独立于分配给他的某种类型的具体设备</li>
<li>程序尽可能与它所使用的的 io 设备类型无关</li>
</ol>
<h5 id="独立性的实现"><a href="#独立性的实现" class="headerlink" title="独立性的实现"></a>独立性的实现</h5><ol>
<li>软通道<br>在用户一级仅进行逻辑指派, 操作系统的 io 管理模块需要建立逻辑设备与物理设备的链接</li>
<li>指派命令<br><code>assign 物理名: 逻辑名</code></li>
<li>逻辑设备描述器 ldd</li>
</ol>
<h5 id="设备独立性的优点"><a href="#设备独立性的优点" class="headerlink" title="设备独立性的优点"></a>设备独立性的优点</h5><p>方便用户, 提高设备利用率, 提高系统的可适应性和可扩展性</p>
<h4 id="设备控制块dcb"><a href="#设备控制块dcb" class="headerlink" title="设备控制块dcb"></a>设备控制块dcb</h4><p>记录硬件特性, 链接, 使用情况的数据结构, 每一个设备有一个设备控制块</p>
<p>内有命令转换表的指针</p>
<h3 id="缓冲技术"><a href="#缓冲技术" class="headerlink" title="缓冲技术"></a>缓冲技术</h3><p>定义: 缓冲是在两种不同速度设备之间平滑传输信息过程的常用手段</p>
<p>实现: 硬件: 缓冲器, 软件: 存储区</p>
<h5 id="利用缓冲技术进行-io"><a href="#利用缓冲技术进行-io" class="headerlink" title="利用缓冲技术进行 io"></a>利用缓冲技术进行 io</h5><ul>
<li><p>读</p>
<ol>
<li><p>用户要求在某个设备上进行读操作时, 先获得一个空缓存</p>
</li>
<li><p>将物理记录送到缓存区中</p>
</li>
<li><p>当用户要求使用这些数据的时候, 系统从缓冲区提取数据发给用户进程的存储区中</p>
<p>当缓冲区空而进程有要求数据时, 进程被迫等待</p>
</li>
</ol>
</li>
<li><p>写</p>
<ol>
<li><p>用户要求写操作时, 先获得一个空缓存</p>
</li>
<li><p>将进程的逻辑记录送到缓存区中, 若为顺序写请求, 啧直到写满缓冲区为止</p>
</li>
<li><p>当缓冲区写满的时候, 系统从缓冲区提取数据写到设备上, 缓冲区再次为空</p>
<p>系统来不及腾出缓冲区时, 进程被迫等待</p>
</li>
</ol>
</li>
</ul>
<h5 id="缓冲技术解决的问题"><a href="#缓冲技术解决的问题" class="headerlink" title="缓冲技术解决的问题"></a>缓冲技术解决的问题</h5><ol>
<li>速度差异问题(双缓冲区)</li>
<li>协调数据大小不一致的问题(网络)</li>
<li>应用程序的拷贝语义问题(write 操作, 写入的是内核操作中在 write 调用时的拷贝数据, 而不是数据本身)</li>
</ol>
<h4 id="常用的缓存技术"><a href="#常用的缓存技术" class="headerlink" title="常用的缓存技术"></a>常用的缓存技术</h4><h5 id="双缓冲"><a href="#双缓冲" class="headerlink" title="双缓冲"></a>双缓冲</h5><p>交替使用</p>
<h5 id="缓冲池"><a href="#缓冲池" class="headerlink" title="缓冲池"></a>缓冲池</h5><p>一组缓冲区组成, 避免在消费者多次访问相同数据时重复产生相同数据的问题</p>
<h3 id="设备分配"><a href="#设备分配" class="headerlink" title="设备分配"></a>设备分配</h3><p>静态分配: 对独占设备一般用静态分配, 一旦分配给一个应用程序, 就由其单独使用</p>
<p>动态分配: 共享设备</p>
<p>io 分配算法: FIFO, 优先级</p>
<h4 id="独享分配"><a href="#独享分配" class="headerlink" title="独享分配"></a>独享分配</h4><p>有些外部设备适用于一个应用程序独占使用</p>
<h4 id="共享分配"><a href="#共享分配" class="headerlink" title="共享分配"></a>共享分配</h4><p>当进程提出资源申请时, 由设备管理模块进行分配, 进程使用完毕以后立即归还</p>
<h4 id="虚拟分配"><a href="#虚拟分配" class="headerlink" title="虚拟分配"></a>虚拟分配</h4><h5 id="虚拟设备"><a href="#虚拟设备" class="headerlink" title="虚拟设备"></a>虚拟设备</h5><p>利益系统中便于共享的快速的存储设备来替代不适合共享的, 慢速的字符设备, 采用预先收存, 延迟发送的方式来改造独占设备</p>
<h5 id="虚拟分配-1"><a href="#虚拟分配-1" class="headerlink" title="虚拟分配"></a>虚拟分配</h5><p>方法: 将想要从独占设备输入(出)的信息先复制到辅存的存储设备中, 当进程需要从输入设备读入信息时, 系统将这一要求转换成从辅存读入的请求</p>
<p>通常把用来代替独占性设备的那部分外存空间称为虚拟设备</p>
<h5 id="Spool-假脱机系统"><a href="#Spool-假脱机系统" class="headerlink" title="Spool 假脱机系统"></a>Spool 假脱机系统</h5><p>该系统在应用程序执行前将应用程序的信息通过 独占设备预先输入到辅存上的一个特定的存储区域(叫做”井”)存放好, 称为预输入</p>
<h4 id="设备分配算法"><a href="#设备分配算法" class="headerlink" title="设备分配算法"></a>设备分配算法</h4><p>FCFS</p>
<p>最短寻道时间 SSTF</p>
<p>扫描算法 类比电梯</p>
<p>循环扫描算法 磁头单向移动</p>
<h3 id="输入输出控制"><a href="#输入输出控制" class="headerlink" title="输入输出控制"></a>输入输出控制</h3><h4 id="输入输出硬件"><a href="#输入输出硬件" class="headerlink" title="输入输出硬件"></a>输入输出硬件</h4><p>端口(硬件的端口又叫做接口), 总线, 控制器(用于操作端口, 总线或设备的电子器件)</p>
<p>处理器控制控制器:</p>
<ol>
<li>控制器拥有多个寄存器</li>
<li>方式 1: 通过特殊 io 指令, 将信息传递给控制寄存器</li>
<li>方式 2: 主存映射 io, 设备控制寄存器映射到处理器的地址空间</li>
<li>处理器通过标准数据传输指令完成对设备控制器的读写</li>
</ol>
<h4 id="输入输出控制方式"><a href="#输入输出控制方式" class="headerlink" title="输入输出控制方式"></a>输入输出控制方式</h4><ol>
<li>循环测试 io 方式: 反复检测控制寄存器的完成位</li>
<li>io 中断方式<ol>
<li>将启动位和中断允许位送入控制器寄存器</li>
<li>请求数据输入的进程进入等待状态</li>
<li>输入完成后输入设备通过中断向 cpu 发中断请求信号</li>
<li>中断处理程序保护现场, 将输入寄存器的数据转送到特定单元, 唤醒请求的进程, 然后恢复中断现场继续执行</li>
<li>之后某一时刻请求进程开始执行, 从特定单元取出数据</li>
</ol>
</li>
<li>通道方式</li>
<li>DMA 方式<br>DMA 控制器可以控制设备和主存之间的成批交换, 而且不需要 cpu 干预</li>
</ol>
<h4 id="输入输出子系统"><a href="#输入输出子系统" class="headerlink" title="输入输出子系统"></a>输入输出子系统</h4><p>io 子系统对不太设备按统一标准来处理</p>
<h5 id="各类设备的接口"><a href="#各类设备的接口" class="headerlink" title="各类设备的接口"></a>各类设备的接口</h5><ol>
<li>块设备接口<br>read, write, seek</li>
<li>主存映射接口</li>
<li>字符流设备接口</li>
<li>网络套接字接口</li>
</ol>
<h5 id="输入输出子系统功能"><a href="#输入输出子系统功能" class="headerlink" title="输入输出子系统功能"></a>输入输出子系统功能</h5><p>解释用户的 io 系统调用, 设备驱动, 中断处理</p>
<h5 id="调用-io-核心模块的方式"><a href="#调用-io-核心模块的方式" class="headerlink" title="调用 io 核心模块的方式"></a>调用 io 核心模块的方式</h5><ol>
<li>设备处理进程方式<br>io 控制模块有一个接口程序-&gt;负责解释进程的 io 系统调用<br>对每类设备有一个设备处理程序(某类设备的驱动程序)-&gt;接受 接口程序的命令</li>
<li>文件操作方式<br>unix</li>
</ol>
<h5 id="输入输出例子"><a href="#输入输出例子" class="headerlink" title="输入输出例子"></a>输入输出例子</h5><h6 id="通用形式的系统调用"><a href="#通用形式的系统调用" class="headerlink" title="通用形式的系统调用"></a>通用形式的系统调用</h6><p>对一个 io 请求</p>
<ol>
<li>实现使用设备的转换</li>
<li>合法性检查</li>
<li>形成 io 请求块</li>
</ol>
<h6 id="设备处理进程"><a href="#设备处理进程" class="headerlink" title="设备处理进程"></a>设备处理进程</h6><p>设备处理程序: 从 io 请求队列中取出一个 iorb, 启动相应 io 操作, 完成后进入中断处理程序</p>
<h3 id="UNIX-系统的设备管理"><a href="#UNIX-系统的设备管理" class="headerlink" title="UNIX 系统的设备管理"></a>UNIX 系统的设备管理</h3><h2 id="第九章-文件系统"><a href="#第九章-文件系统" class="headerlink" title="第九章 文件系统"></a>第九章 文件系统</h2><p>文件分类: 系统文件, 程序库文件, 用户文件</p>
<p>文件组织: 逻辑文件, 物理文件</p>
<p>对应: 逻辑记录, 块</p>
<h3 id="文件的逻辑结构和存储方法"><a href="#文件的逻辑结构和存储方法" class="headerlink" title="文件的逻辑结构和存储方法"></a>文件的逻辑结构和存储方法</h3><h4 id="逻辑结构"><a href="#逻辑结构" class="headerlink" title="逻辑结构"></a>逻辑结构</h4><h5 id="流式文件"><a href="#流式文件" class="headerlink" title="流式文件"></a>流式文件</h5><p>无结构</p>
<h5 id="记录式文件"><a href="#记录式文件" class="headerlink" title="记录式文件"></a>记录式文件</h5><p>有结构, 可分定长变长</p>
<h3 id="文件的物理结构"><a href="#文件的物理结构" class="headerlink" title="文件的物理结构"></a>文件的物理结构</h3><h4 id="组织文件的方式"><a href="#组织文件的方式" class="headerlink" title="组织文件的方式"></a>组织文件的方式</h4><h5 id="连续文件"><a href="#连续文件" class="headerlink" title="连续文件"></a>连续文件</h5><p>文件目录项: 文件名, 块数量, 第一个逻辑记录所在的块</p>
<h5 id="串联文件"><a href="#串联文件" class="headerlink" title="串联文件"></a>串联文件</h5><p>文件目录项: 文件名, 第一个块</p>
<p>类比链表</p>
<p>文件映照结构(表实现)</p>
<h5 id="索引文件"><a href="#索引文件" class="headerlink" title="索引文件"></a>索引文件</h5><p>文件索引表</p>
<h6 id="直接索引"><a href="#直接索引" class="headerlink" title="直接索引"></a>直接索引</h6><p>文件目录项: 文件+索引表, 索引表每一个项对应一个块号</p>
<h6 id="一级间接索引"><a href="#一级间接索引" class="headerlink" title="一级间接索引"></a>一级间接索引</h6><p>文件目录项: 文件+索引表, 索引表每一个项对应一个一级间接索引表, 一级间接索引表每一个项对应一个块号</p>
<h6 id="二级间接索引"><a href="#二级间接索引" class="headerlink" title="二级间接索引"></a>二级间接索引</h6><p>文件目录项: 文件+索引表, 索引表每一个项对应一个二级间接索引表, 二级间接索引表每一个项对应一个一级间接索引表, 一级间接索引表每一个项对应一个块号</p>
<h3 id="文件存储空间的管理"><a href="#文件存储空间的管理" class="headerlink" title="文件存储空间的管理"></a>文件存储空间的管理</h3><p>磁盘空闲空间</p>
<h4 id="空闲文件目录"><a href="#空闲文件目录" class="headerlink" title="空闲文件目录"></a>空闲文件目录</h4><p>一个表, 每一个表项: 序号, 第一个空闲块号, 空闲块个数…</p>
<h4 id="空闲块链"><a href="#空闲块链" class="headerlink" title="空闲块链"></a>空闲块链</h4><h4 id="位示图"><a href="#位示图" class="headerlink" title="位示图"></a>位示图</h4><p>每个块是否空闲用一位表示, 1 已分配, 0 空闲</p>
<h4 id="分配策略"><a href="#分配策略" class="headerlink" title="分配策略"></a>分配策略</h4><h5 id="静态分配"><a href="#静态分配" class="headerlink" title="静态分配"></a>静态分配</h5><p>创建文件时宣布文件大小</p>
<h5 id="动态分配"><a href="#动态分配" class="headerlink" title="动态分配"></a>动态分配</h5><p>写文件时分配大小</p>
<h3 id="文件目录"><a href="#文件目录" class="headerlink" title="文件目录"></a>文件目录</h3><h4 id="一级文件目录"><a href="#一级文件目录" class="headerlink" title="一级文件目录"></a>一级文件目录</h4><p>表项: 文件名, 物理地址, 其他信息</p>
<p>不能解决重名问题</p>
<h4 id="多级文件目录"><a href="#多级文件目录" class="headerlink" title="多级文件目录"></a>多级文件目录</h4><p>目录对应目录文件</p>
<h3 id="共享与安全"><a href="#共享与安全" class="headerlink" title="共享与安全"></a>共享与安全</h3><h4 id="存取权限的类型和验证"><a href="#存取权限的类型和验证" class="headerlink" title="存取权限的类型和验证"></a>存取权限的类型和验证</h4><h5 id="访问控制矩阵"><a href="#访问控制矩阵" class="headerlink" title="访问控制矩阵"></a>访问控制矩阵</h5><p>每一个用户对每一个文件的权限</p>
<h5 id="存取控制表"><a href="#存取控制表" class="headerlink" title="存取控制表"></a>存取控制表</h5><p>用户分组</p>
<h5 id="用户权限表"><a href="#用户权限表" class="headerlink" title="用户权限表"></a>用户权限表</h5><h5 id="口令"><a href="#口令" class="headerlink" title="口令"></a>口令</h5><h5 id="密码"><a href="#密码" class="headerlink" title="密码"></a>密码</h5><h4 id="利用文件路径名加快查找"><a href="#利用文件路径名加快查找" class="headerlink" title="利用文件路径名加快查找"></a>利用文件路径名加快查找</h4><h5 id="建立当前目录"><a href="#建立当前目录" class="headerlink" title="建立当前目录"></a>建立当前目录</h5><h5 id="链接技术"><a href="#链接技术" class="headerlink" title="链接技术"></a>链接技术</h5><p>硬链接 软连接</p>
<h3 id="文件操作与备份"><a href="#文件操作与备份" class="headerlink" title="文件操作与备份"></a>文件操作与备份</h3><h3 id="UNIX-文件系统"><a href="#UNIX-文件系统" class="headerlink" title="UNIX 文件系统"></a>UNIX 文件系统</h3><h4 id="UNIX-文件索引结构"><a href="#UNIX-文件索引结构" class="headerlink" title="UNIX 文件索引结构"></a>UNIX 文件索引结构</h4><p>目录项只包括文件名, 其他信息存到索引节点 inode 上</p>
<h5 id="UNIX7-文件索引结构"><a href="#UNIX7-文件索引结构" class="headerlink" title="UNIX7 文件索引结构"></a>UNIX7 文件索引结构</h5><p>i_addr[8]</p>
<p>小型文件: 直接索引表 8 </p>
<p>大型文件: 一级间接索引 7</p>
<p>巨型文件: 一级间接索引 7 + 二级间接索引 1</p>
<h5 id="UNIX-systemV-索引结构"><a href="#UNIX-systemV-索引结构" class="headerlink" title="UNIX systemV 索引结构"></a>UNIX systemV 索引结构</h5><p>i_addr[13]</p>
<p>0-9 直接索引</p>
<p>10 一级间接索引</p>
<p>11 二级间接索引</p>
<p>12 三级间接索引</p>
<h4 id="UNIX-文件目录结构"><a href="#UNIX-文件目录结构" class="headerlink" title="UNIX 文件目录结构"></a>UNIX 文件目录结构</h4><h4 id="UNIX-打开文件机构"><a href="#UNIX-打开文件机构" class="headerlink" title="UNIX 打开文件机构"></a>UNIX 打开文件机构</h4><h5 id="活动-i-节点表"><a href="#活动-i-节点表" class="headerlink" title="活动 i 节点表"></a>活动 i 节点表</h5><p>打开文件-&gt;登记到活动 i 节点(主存索引节点)</p>
<h5 id="系统打开文件表"><a href="#系统打开文件表" class="headerlink" title="系统打开文件表"></a>系统打开文件表</h5><p>不同进程打开同一个文件时要登记不同的表项</p>
<h5 id="用户文件描述符表"><a href="#用户文件描述符表" class="headerlink" title="用户文件描述符表"></a>用户文件描述符表</h5><p>每个用户打开的文件</p>
<p>每一项指向系统打开文件表的一个表项</p>
<h4 id="文件存储器空闲块的管理"><a href="#文件存储器空闲块的管理" class="headerlink" title="文件存储器空闲块的管理"></a>文件存储器空闲块的管理</h4><p>表链结合</p>
<h3 id="Linux-文件系统"><a href="#Linux-文件系统" class="headerlink" title="Linux 文件系统"></a>Linux 文件系统</h3><p>VFS</p>
<p>15</p>
<h1 id="实验-3"><a href="#实验-3" class="headerlink" title="实验 3"></a>实验 3</h1><h2 id="IPC-Inter-Process-Communication"><a href="#IPC-Inter-Process-Communication" class="headerlink" title="IPC(Inter-Process Communication)"></a>IPC(Inter-Process Communication)</h2><h2 id="共享内存-share-memory"><a href="#共享内存-share-memory" class="headerlink" title="共享内存 share memory"></a>共享内存 share memory</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">shmget</span><span class="params">(<span class="keyword">key_t</span> key,<span class="keyword">size_t</span> size,<span class="keyword">int</span> shmflg)</span></span>;  <span class="comment">//shmget函数用来创建一个新的共享内存段， 或者访问一个现有的共享内存段（不同进程只要key值相同即可访问同一共享内存段）。第一个参数key是ftok生成的键值，第二个参数size为共享内存的大小，第三个参数sem_flags是打开共享内存的方式。</span></span><br><span class="line">eg.<span class="keyword">int</span> shmid = <span class="built_in">shmget</span>(key, <span class="number">1024</span>, IPC_CREATE | IPC_EXCL | <span class="number">0666</span>);<span class="comment">//第三个参数参考消息队列int msgget(key_t key,int msgflag);</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">shmat</span><span class="params">(<span class="keyword">int</span> shm_id,<span class="keyword">const</span> <span class="keyword">void</span> *shm_addr,<span class="keyword">int</span> shmflg)</span></span>; <span class="comment">//shmat函数通过shm_id将共享内存连接到进程的地址空间中。第二个参数可以由用户指定共享内存映射到进程空间的地址，shm_addr如果为0，则由内核试着查找一个未映射的区域。返回值为共享内存映射的地址。</span></span><br><span class="line">eg.<span class="keyword">char</span> *shms = (<span class="keyword">char</span> *)<span class="built_in">shmat</span>(shmid, <span class="number">0</span>, <span class="number">0</span>);<span class="comment">//shmid由shmget获得</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">shmdt</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *shm_addr)</span></span>; <span class="comment">//shmdt函数将共享内存从当前进程中分离。 参数为共享内存映射的地址。</span></span><br><span class="line">eg.<span class="built_in">shmdt</span>(shms);</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">shmctl</span><span class="params">(<span class="keyword">int</span> shm_id,<span class="keyword">int</span> cmd,struct shmid_ds *buf)</span></span>;<span class="comment">//shmctl函数是控制函数，使用方法和消息队列msgctl()函数调用完全类似。参数一shm_id是共享内存的句柄，cmd是向共享内存发送的命令，最后一个参数buf是向共享内存发送命令的参数。</span></span><br></pre></td></tr></table></figure>

<h1 id="实验-4"><a href="#实验-4" class="headerlink" title="实验 4"></a>实验 4</h1><p><code>ls -lR</code></p>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gkw3e2j7jmj30l40aw0v7.jpg" alt="截屏2020-11-21 上午12.14.35"></p>
<ul>
<li><p>总计: 16</p>
</li>
<li><p>文件属性: drwxrwxr-x</p>
<ul>
<li><p>第一个字符表示文件类型, -: 普通文件 d: 目录 l: 链接文件 b(block): 设备文件 c(character): 字符设备文件 p(pipe): 命令管道文件 s: sock 文件</p>
</li>
<li><p>剩下九个字符表示该文件或者目录的权限位</p>
<p>r(read)w(write)x(execute)</p>
<p>前三个表示文件拥有者权限, 中间三个表示文件所属组拥有的权限, 最后三个表示其他用户拥有的权限</p>
</li>
</ul>
</li>
<li><p>文件硬链接数: 2 </p>
</li>
<li><p>文件拥有者: akunda</p>
</li>
<li><p>文件拥有者所在的组: akunda</p>
</li>
<li><p>文件所占用的空间(字节): 4096(文件夹是文件夹本身的大小, 不包括文件夹下面的子文件的大小)</p>
</li>
<li><p>文件最近访问(修改)时间: Nov 2 00:45</p>
</li>
<li><p>文件名: lab1</p>
</li>
</ul>
]]></content>
      <categories>
        <category>cs</category>
      </categories>
      <tags>
        <tag>os</tag>
      </tags>
  </entry>
</search>
