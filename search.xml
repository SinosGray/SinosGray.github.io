<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ShellScript</title>
    <url>/2022/06/28/ShellScript/</url>
    <content><![CDATA[<blockquote>
<p>mac terminal 快捷键</p>
<p>1、将光标移动到行首：ctrl + a</p>
<p>2、将光标移动到行尾：ctrl + e</p>
<p>3、清除屏幕：       ctrl + l</p>
<p>4、搜索以前使用命令：ctrl + r</p>
<p>5、清除当前行：     ctrl + u</p>
<p>6、清除至当前行尾：  ctrl + k</p>
<p>7、单词为单位移动：option + 方向键</p>
</blockquote>
<span id="more"></span>

<h1 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h1><h2 id="vim-config"><a href="#vim-config" class="headerlink" title="vim config"></a>vim config</h2><p>~/.vimrc</p>
<h2 id="基本指令"><a href="#基本指令" class="headerlink" title="基本指令"></a>基本指令</h2><p>i, a 插入</p>
<p>hjkl 左上下右</p>
<p>o 新增下一行 O 新增上一行</p>
<p>gg 第一行 G 最后一行</p>
<p>yy 复制当前行 yw 复制单词 p 粘贴 3p 粘贴三次</p>
<p>dd 删除当前行</p>
<p>. 重复前次操作</p>
<p>u 撤销前次操作</p>
<p>ctrl r 恢复前次操作</p>
<p>dw 删除单词 cw 改变单词</p>
<p>w 下个单词首部, e 下个单词尾部, b 上个单词首部</p>
<p>/ 搜索</p>
<p>:%s/old/new/g 全局替换</p>
<p>ci+括号 删除括号里的内容</p>
<p>ctrl u 向上翻页</p>
<p>ctrl d 向下翻页</p>
<p>f 查找</p>
<p>ctrl v 可视化块 d 删除</p>
<p>shift v 可视化行</p>
<h1 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h1><ul>
<li>~/.bashrc: 提示文本, 颜色</li>
<li>~/.bash_history: 保存运行过的命令</li>
</ul>
<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><ul>
<li><p>; 分隔命令</p>
</li>
<li><p>在Bash中，每一个变量的值都是字符串</p>
<p>查看 QQ 进程的环境变量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps -p 8617 -wwwE # QQ</span><br><span class="line"> PID TTY           TIME CMD</span><br><span class="line">8617 ??       243:33.14 /Applications/QQ.app/Contents/MacOS/QQ USER=akunda __CFBundleIdentifier=com.tencent.qq COMMAND_MODE=unix2003 LOGNAME=akunda PATH=/usr/bin:/bin:/usr/sbin:/sbin SSH_AUTH_SOCK=/private/tmp/com.apple.launchd.Anke8CUOPJ/Listeners SHELL=/bin/zsh HOME=/Users/akunda __CF_USER_TEXT_ENCODING=0x1F5:0x19:0x34 TMPDIR=/var/folders/7_/pnngkwkj0fj188s18w3rvx3w0000gn/T/ XPC_SERVICE_NAME=application.com.tencent.qq.115283210.115284637 XPC_FLAGS=1</span><br></pre></td></tr></table></figure>

<p>变量赋值</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">var=&quot;value  ?&quot; # 不要加空格!</span><br><span class="line">echo $var</span><br><span class="line">echo $&#123;var&#125;</span><br><span class="line">echo &quot;we have a $&#123;var&#125;&quot;</span><br><span class="line">echo &quot;we have a $var&quot;</span><br><span class="line">length=$&#123;#var&#125; # 得到变量长度</span><br></pre></td></tr></table></figure>

<p>环境变量是未在当前进程中定义，而从父进程中继承而来的变量<br>export命令用来设置环境变量。至此之后，从当前shell脚本执行的任何应用程序都会继承 这个变量。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo $PATH</span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="variable">$PATH</span> /usr/<span class="built_in">local</span>/apache-maven-3.6.3/bin</span></span><br><span class="line">export PATH=&quot;$PATH:/home/user/bin&quot;</span><br><span class="line"></span><br><span class="line">PATH=&quot;$PATH:/home/user/bin&quot;</span><br><span class="line">export PATH</span><br></pre></td></tr></table></figure>

<p>超级用户 UID=0</p>
</li>
<li><p>echo</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo &quot;welcome\!&quot;</span><br><span class="line">echo &#x27;welcome!&#x27;</span><br><span class="line">echo welcome!</span><br><span class="line"></span><br><span class="line">printf  &quot;%-5s %-10s %-4.2f\n&quot; 1 Sarath 80.3456 </span><br><span class="line"></span><br><span class="line">echo -e &quot;1\t2\t3&quot; </span><br><span class="line"><span class="meta">#</span><span class="bash">123</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>20210114凯卓公司</title>
    <url>/2021/01/15/20210114%E5%87%AF%E5%8D%93%E5%85%AC%E5%8F%B8/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="7118666bea89ff7dd649dae3e21883bc075fcfae6b65ebe6e646b668132496b8"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>program</category>
      </categories>
      <tags>
        <tag>kenzo</tag>
      </tags>
  </entry>
  <entry>
    <title>data_structure</title>
    <url>/2019/11/12/data_structure/</url>
    <content><![CDATA[<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><ul>
<li><p>int* a=&var;    int* 作为一个整体表示int类型指针</p>
</li>
<li><p>Typedef 建立一个类型别名的方法很简单，在传统的变量声明表达式里用类型名替代变量名，然后把关键字typedef加在该语句的开头</p>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> Line[<span class="number">81</span>];   </span><br></pre></td></tr></table></figure>

<p>此时Line类型即代表了具有81个元素的字符数组</p>
<span id="more"></span>

<ul>
<li>null用于指针</li>
<li>fwrite 函数</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">size_t</span> <span class="title">fwrite</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *ptr, <span class="keyword">size_t</span> size, <span class="keyword">size_t</span> nmemb, FILE *stream)</span></span></span><br></pre></td></tr></table></figure>

<p>​        ptr – 这是指向要被写入的元素数组的指针。<br>​        size – 这是要被写入的每个元素的大小，以字节为单位。<br>​        nmemb – 这是元素的个数，每个元素的大小为 size 字节。<br>​        stream – 这是指向 FILE 对象的指针，该 FILE 对象指定了一个输出流。</p>
<ul>
<li>fread 函数</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">size_t</span> <span class="title">fread</span><span class="params">(<span class="keyword">void</span> *ptr, <span class="keyword">size_t</span> size, <span class="keyword">size_t</span> nmemb, FILE *stream)</span></span></span><br></pre></td></tr></table></figure>

<p>​        ptr – 这是指向带有最小尺寸 size*nmemb 字节的内存块的指针。<br>​        size – 这是要读取的每个元素的大小，以字节为单位。<br>​        nmemb – 这是元素的个数，每个元素的大小为 size 字节。<br>​        stream – 这是指向 FILE 对象的指针，该 FILE 对象指定了一个输入流</p>
<ul>
<li><p>注释统一为//or/* */，暂定为写在注释对象上方，用//</p>
</li>
<li><p>malloc 函数失败返回null</p>
</li>
<li><p>c++函数内部不能定义函数（但是lamda好像可以）</p>
</li>
<li><p>fopen</p>
<table>
<thead>
<tr>
<th>控制读写权限的字符串（必须指明）</th>
<th align="right"></th>
</tr>
</thead>
<tbody><tr>
<td>打开方式</td>
<td align="right">说明</td>
</tr>
<tr>
<td>“r”</td>
<td align="right">以“只读”方式打开文件。只允许读取，不允许写入。文件必须存在，否则打开失败。</td>
</tr>
<tr>
<td>“w”</td>
<td align="right">以“写入”方式打开文件。如果文件不存在，那么创建一个新文件；如果文件存在，那么清空文件内容（相当于删除原文件，再创建一个新文件）。</td>
</tr>
<tr>
<td>“a”</td>
<td align="right">以“追加”方式打开文件。如果文件不存在，那么创建一个新文件；如果文件存在，那么将写入的数据追加到文件的末尾（文件原有的内容保留）。</td>
</tr>
<tr>
<td>“r+”</td>
<td align="right">以“读写”方式打开文件。既可以读取也可以写入，也就是随意更新文件。文件必须存在，否则打开失败。</td>
</tr>
<tr>
<td>“w+”</td>
<td align="right">以“写入/更新”方式打开文件，相当于<code>w</code>和<code>r+</code>叠加的效果。既可以读取也可以写入，也就是随意更新文件。如果文件不存在，那么创建一个新文件；如果文件存在，那么清空文件内容（相当于删除原文件，再创建一个新文件）。</td>
</tr>
<tr>
<td>“a+”</td>
<td align="right">以“追加/更新”方式打开文件，相当于a和r+叠加的效果。既可以读取也可以写入，也就是随意更新文件。如果文件不存在，那么创建一个新文件；如果文件存在，那么将写入的数据追加到文件的末尾（文件原有的内容保留）。</td>
</tr>
<tr>
<td>控制读写方式的字符串（可以不写）</td>
<td align="right"></td>
</tr>
<tr>
<td>打开方式</td>
<td align="right">说明</td>
</tr>
<tr>
<td>“t”</td>
<td align="right">文本文件。如果不写，默认为<code>&quot;t&quot;</code>。</td>
</tr>
<tr>
<td>“b”</td>
<td align="right">二进制文件。</td>
</tr>
</tbody></table>
</li>
</ul>
<h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><p>vscode格式化：option+shift+f</p>
<p>数据项是数据的最小不可分割单位</p>
<p>数据结构是指数据元素的集合以及它们之间的关系</p>
<p>原地工作算法：算法所需要的辅助空间不随着问题的规模而变化，是一个确定的值。</p>
<p>算法分析的主要任务：时间复杂度和空间复杂度</p>
<ul>
<li>数据</li>
<li>数据元素：数据的基本单位，可由多个数据项组成。如一本书</li>
<li>数据项：是数据的不可分割的最小单位。如书名，作者</li>
<li>数据对象：性质相同的数据元素的集合。   如整数，字母</li>
<li>数据结构：相互之间存在一种或多种特定关系的数据元素的集合。<ul>
<li>包括：集合，线性结构（特点：除了首尾元素，其他元素均只有一个前驱一个后继），树形结构，图状结构或者网状结构</li>
</ul>
</li>
<li>逻辑结构：上述结构都是逻辑结构，即表示数据之间的关系</li>
<li>存储结构（物理结构）：数据结构在计算机中的表示。<ul>
<li>包括：顺序存储结构，链式存储结构</li>
</ul>
</li>
<li>数据类型：一个值的集合和定义在这个值上的一组操作的总称，是一个取值范围。可以分为原子类型和结构类型。</li>
<li>抽象数据类型：一个数学模型以及定义在该模型上的一组操作，仅取决于一组逻辑特性</li>
</ul>
<p><img src="https://img-blog.csdn.net/20180129174653374?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzI2MjMzNjM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p><strong>算法特性</strong></p>
<ol>
<li>输入：一个算法必须有零个或以上输入量。</li>
<li>输出：一个算法应有一个或以上输出量，输出量是算法计算的结果。</li>
<li>确定性：算法的描述必须无歧义，以保证算法的实际执行结果是精确地符合要求或期望，通常要求实际执行结果是确定的。</li>
<li>有穷性：依据图灵的定义，一个演算法是能够被任何<a href="https://zh.wikipedia.org/wiki/%E5%9B%BE%E7%81%B5%E5%AE%8C%E5%85%A8">图灵完备</a>系统模拟的一串运算，而<a href="https://zh.wikipedia.org/wiki/%E5%9C%96%E9%9D%88%E6%A9%9F">图灵机</a>只有有限个状态、有限个输入符号和有限个转移函数（指令）。而一些定义更规定演算法必须在有限个步骤内完成任务。</li>
<li>可行性：又称可行性。能够实现，算法中描述的操作都是可以通过已经实现的基本运算执行有限次来实现。</li>
</ol>
<p><strong>设计要求</strong></p>
<ol>
<li>正确性</li>
<li>可读性</li>
<li>健壮性</li>
<li>效率与低存储量要求</li>
</ol>
<p><a href="https://www.jianshu.com/p/b36477f4ecee">逻辑结构与物理结构</a></p>
<h2 id="第二章-线性表"><a href="#第二章-线性表" class="headerlink" title="第二章 线性表"></a>第二章 线性表</h2><ul>
<li><p>线性表存在与否和是否为空时两个概念</p>
<p>处理方法：头结点；tag标记</p>
<p>一般约定好null的用法</p>
</li>
</ul>
<h3 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h3><h3 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h3><ul>
<li><p>带或不带表头</p>
</li>
<li><p>结构：数据域，指针域</p>
</li>
<li><p>生成单链表：先进先出，先进后出；</p>
</li>
<li><p>插入节点：节点之后（易）节点之前（难）</p>
</li>
<li><h4 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h4><ul>
<li>将元素插入有序表：<ul>
<li>不带表头：区分四种情况（p后，q前 是否为空）</li>
<li>带表头：q一定不为空</li>
</ul>
</li>
<li>指定位置插入：<ul>
<li>计数记到i-1（保证插入当前节点之后</li>
</ul>
</li>
<li>删除元素（记录前驱节点<ul>
<li>指定值（两个指针</li>
<li>指定位置（i-1</li>
</ul>
</li>
<li>两个有序单链表合并</li>
</ul>
</li>
<li><p>循环链表</p>
<ul>
<li>可设尾指针</li>
<li>循环指针指向头结点（如果有的话）</li>
</ul>
</li>
<li><p>双向循环链表</p>
</li>
<li><p>结构：prior指针，next指针，data值域</p>
</li>
<li><p>1、静态链表是用类似于数组方法实现的，是顺序的存储结构，在物理地址上是连续的，而且需要预先分配地址空间大小。所以静态链表的初始长度一般是固定的，在做插入和删除操作时不需要移动元素，仅需修改指针。</p>
<ul>
<li><h5 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h5><ul>
<li>在插入和删除操作时，只需要修改游标，不需要移动元素，从而改进了在顺序存储结构中的插入和删除操作需要移动大量元素的缺点。</li>
</ul>
</li>
<li><h5 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h5><ul>
<li>没有解决连续存储分配(数组)带来的表长难以确定的问题。</li>
<li>失去了顺序存储结构随机存取的特性。</li>
</ul>
</li>
</ul>
<p>2、动态链表是用内存申请函数（malloc/new）动态申请内存的，所以在链表的长度上没有限制。动态链表因为是动态申请内存的，所以每个节点的物理地址不连续，要通过指针来顺序访问。</p>
</li>
<li><p>顺序表存储密度大，链表小（因为有指针</p>
</li>
</ul>
<h2 id="第三章-栈与队列"><a href="#第三章-栈与队列" class="headerlink" title="第三章 栈与队列"></a>第三章 栈与队列</h2><p>插入对应的指针有两种方式，一个是最后一个元素，一个是下一个（空）元素</p>
<h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><ul>
<li>在表尾插入push删除pop</li>
<li>顺序结构：base指针，top指针，stacksize</li>
<li>栈顶：尾部，栈底：首部</li>
<li>LIFO后进先出</li>
<li>分类：静态顺序，动态顺序，链式</li>
<li>应用：括号匹配，表达式求值</li>
<li>链式：栈顶在首节点处</li>
</ul>
<h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><ul>
<li><p>队首：删除的一段</p>
</li>
<li><p>队尾：插入的一段</p>
</li>
<li><p>FIFO先进先出</p>
</li>
<li><h4 id="链式队列"><a href="#链式队列" class="headerlink" title="链式队列"></a>链式队列</h4><ul>
<li>front，rear两个指针，front：队首</li>
<li>如果删除节点后队列为空，需要修改队尾指针</li>
</ul>
</li>
<li><h4 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h4><ul>
<li>顺序循环队列结构：base指针，front，rear下标</li>
<li>假溢出<ul>
<li><ol>
<li>移动元素？开销大</li>
<li>循环表√</li>
</ol>
</li>
<li>方案：取模，留出一个单元不用</li>
</ul>
</li>
</ul>
</li>
<li><p>前中后缀表达式</p>
<p><a href="https://blog.csdn.net/Antineutrino/article/details/6763722">https://blog.csdn.net/Antineutrino/article/details/6763722</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/37467928">https://zhuanlan.zhihu.com/p/37467928</a></p>
</li>
</ul>
<h2 id="第五章-数组与广义表"><a href="#第五章-数组与广义表" class="headerlink" title="第五章 数组与广义表"></a>第五章 数组与广义表</h2><ul>
<li><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><ul>
<li>行序优先，列序优先</li>
<li>数组是一个定长的线性表，所以不能有元素的增加与删除操作✔️</li>
</ul>
</li>
<li><p>特殊矩阵的压缩存储</p>
<ul>
<li><p>对称矩阵</p>
<p>大小：1+2+3+。。。+n</p>
<p>下三角：aij序号：k=i(i-1)/2 + j</p>
<p>​                上三角aij=aji                <img src="/Users/akunda/Desktop/hexo/source/images/%E6%88%AA%E5%B1%8F2019-12-22%E4%B8%8B%E5%8D%888.02.26.png" alt="截屏2019-12-22下午8.02.26"></p>
</li>
<li><p>三对角矩阵</p>
<p>3n-2个元素</p>
<p>k=(3*(i-1)-1)+(j-i+2)=2i+j-2</p>
</li>
</ul>
</li>
<li><p>稀疏矩阵压缩存储</p>
<p>三元组表</p>
<ul>
<li>三元组顺序表（不能随机访问）（插入元素可能导致之后的元素依次向后递推）</li>
<li>结构：<ul>
<li>节点：行i，列j，值e</li>
<li>节点数组，行数，列数，非零元数，mu，nu，tu</li>
</ul>
</li>
</ul>
<p>十字链表</p>
<ul>
<li><p>结构</p>
<ul>
<li>节点：i，j，e，指针：right, down</li>
<li>行头数组，列头数组，mu，nu，tu</li>
</ul>
</li>
<li><p>当某稀疏矩阵经常进行元素的赋值运算时，十字链表比三元组表更适合作为其存储结构。</p>
<p>转置矩阵：保证行序优先，需要排序n^2（方便后续计算）</p>
<p>​                    改进：加两个数组，一个记录转置前每一行有几个元素，一个记录转制后每一行第一个元素在转制后三元组顺序表的位置</p>
</li>
</ul>
<p>稀疏矩阵的三种不同的存储方法，采用哪种方法要看程序具体要实现的功能：<br>如果想完成例如矩阵的转置这样的操作，宜采用三元组顺序表；<br>如果想实现矩阵的乘法这样的功能，宜采用行逻辑链接的顺序表；<br>如果矩阵运算过程中（例如矩阵的加法），需要不断地插入非 0 元素或删除变为 0 的元素，宜采用十字链表法</p>
<p>使用三元组顺序表或十字链表作为稀疏矩阵中的物理结构，对元素的访问形式只能是顺序访问</p>
</li>
<li><h3 id="广义表"><a href="#广义表" class="headerlink" title="广义表"></a>广义表</h3><ul>
<li><p><strong>广义表</strong>一般记作 LS = (a1, a2, ···, an), n是它的长度，ai可以是单个元素(原子)，也可以是广义表(子表)，当广义表非空时，称第一个元素a1为LS的表头，称其余元素组成的表为LS的表尾。注意：表头是元素(可以是原子，也可以是广表)，表尾一定是广义表。[<a href="https://zh.wikipedia.org/wiki/%E5%B9%BF%E4%B9%89%E8%A1%A8#cite_note-1">1]</a>E=(a, E)是一个递归的表。D=(( ),(e),(a,(b,c,d)))是多层次的广义表，长度为3，深度为3。例：((a),a)的表头是(a)，表尾是(a)，((a))的表头是(a)，表尾是( )。</p>
</li>
<li><p>广义表(((a,b,(),c),d),e,((f),g))的长度是____,深度是____？</p>
<p>广义表长度是数第一层括号内的逗号数目可以看到,只有一个元素,就是((a,b,(),c),d),e,((f),g)，所以长度是1，深度是数括号数目,深度是4。</p>
</li>
<li><p>a1表头，（a2，a3.。。。）表尾</p>
<p>当广义表的元素是一个数据元素时，称其为原子，否则称为广义表的子表</p>
</li>
<li><p>广义表允许共享子表</p>
</li>
<li><p>广义表允许递归定义eg：G=(a,G)</p>
</li>
<li><p>链式结构表示</p>
<ul>
<li>原子节点，列表节点（union），tag表示表结点还是原子节点</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="第六章-树与二叉树"><a href="#第六章-树与二叉树" class="headerlink" title="第六章 树与二叉树"></a>第六章 树与二叉树</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul>
<li><p>满二叉树：深度为k，有2<sup>k</sup>-1个节点</p>
</li>
<li><p>完全二叉树（顺序二叉树）：深度为k，编号与满二叉树一致，叶子节点只能在倒数两层上，2<sup>k</sup>-1&gt;n&gt;2<sup>k-1</sup>-1，节点i的双亲节点为log <sub>2</sub> i向下取整</p>
<p>完全二叉树的n<sub>1</sub>=0或1</p>
</li>
</ul>
<h3 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h3><p>n<sub>0</sub>=n<sub>2</sub>+1 根节点+双节点</p>
<p>n=n<sub>0</sub>+n<sub>1</sub>+n<sub>2</sub></p>
<h3 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h3><ul>
<li>顺序存储：非完全二叉树浪费空间</li>
<li>链式存储：二叉，三叉（包括指向双亲节点的指针）</li>
</ul>
<h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><p>先序，中序，后序</p>
<p>递归算法</p>
<p>中序遍历的非递归算法 栈</p>
<p><font color=red>后序遍历非递归算法</font></p>
<p>层序遍历 队列</p>
<ul>
<li><p>确定二叉树</p>
<ul>
<li>带空子树的序列可唯一确定二叉树</li>
<li>中序后序两个序列：<ul>
<li>根据后序找根节点，在中序划分左右子树，然后重复</li>
</ul>
</li>
<li>先序中序两个序列<ul>
<li>根据前序找根节点，在中序划分左右子树，然后重复</li>
</ul>
</li>
</ul>
</li>
<li><p>二叉树深度</p>
</li>
</ul>
<h3 id="线索二叉树"><a href="#线索二叉树" class="headerlink" title="线索二叉树"></a>线索二叉树</h3><ul>
<li>节点增加标志域ltag rtag，ltag=0代表左链域指示左孩子，ltag=1代表前驱，rtag=0右孩子，rtag=1后继节点</li>
<li>原理是将原来的空指针合理利用（2*n-（n-1））</li>
<li>线索添加参照遍历序列</li>
<li>遍历方法：以中序为例：有后继找后继，无后继找右子孙的最左子孙</li>
</ul>
<h3 id="树的结构"><a href="#树的结构" class="headerlink" title="树的结构"></a>树的结构</h3><ul>
<li>双亲表示法/顺序表示法，一个数组存储节点数据和双亲的位置<ul>
<li>结构：<ul>
<li>节点：data，parent位置下标</li>
<li>节点数组，根的位置r，节点数n</li>
</ul>
</li>
</ul>
</li>
<li>孩子表示法/链接表表示法，节点包括数据和孩子的指针（节点数量固定或者非固定）<ul>
<li>结构<ul>
<li>表结点：child，next指针</li>
<li>数组节点：data，firstchild指针</li>
<li>数组，根位置r，节点数n</li>
</ul>
</li>
</ul>
</li>
<li>孩子链表表示法/单链表表示法，有点类似图的邻接表表示法，把弧节点换成孩子节点</li>
<li>带双亲的孩子链表表示法，节点包括了双亲结点的位置</li>
<li>孩子兄弟表示法/二叉链表，节点：左孩子；节点值；右兄弟，相当于转换成二叉树<ul>
<li>结构<ul>
<li>firchild，nextsibling，data</li>
</ul>
</li>
</ul>
</li>
<li>树转化为二叉树：1. 加线：在兄弟之间加线 2. 抹线：把除了左孩子以外其他孩子的线去掉</li>
<li>二叉树转换成树：1. 加线：若p是左孩子，则把p的沿分支所有右孩子与p的双亲相连 2. 抹线：抹掉原来二叉树双亲与右孩子的连线</li>
<li>森林转化为二叉树：1.每棵树转化为二叉树 2. 根节点相连 3. 以第一棵树的根节点为根节点旋转得到目标二叉树</li>
<li>二叉树转化为森林：1.根节点沿右侧所有右孩子连线抹掉，得到多颗二叉树 2.树还原二叉树</li>
<li>树的遍历<ul>
<li>先根遍历（先序）<ul>
<li>访问根节点</li>
<li>访问每一棵子树</li>
</ul>
</li>
<li>后根遍历（相当于转化成二叉树以后的中序遍历）<ul>
<li>遍历子树</li>
<li>访问节点</li>
</ul>
</li>
</ul>
</li>
<li>森林的遍历<ul>
<li>先序遍历<ul>
<li>访问根节点</li>
<li>访问每一棵子树</li>
<li>访问其他树</li>
</ul>
</li>
<li>中序遍历<ul>
<li>遍历子树</li>
<li>访问节点</li>
<li>访问其他树</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="哈弗曼树（最优二叉树）"><a href="#哈弗曼树（最优二叉树）" class="headerlink" title="哈弗曼树（最优二叉树）"></a>哈弗曼树（最优二叉树）</h3><ul>
<li>树的路径长度PL：从root到每一个节点的路径长度之和（完全二叉树最小，单支二叉树最大）</li>
<li>树的带权路径长度WPL：每个叶子的权与该叶子的路径长度之和</li>
<li>在有n个相同叶子的二叉树中，wpl最小的称为<b>最优二叉树</b><ul>
<li>哈弗曼树的特点<ul>
<li>完全二叉树不一定是哈夫曼树</li>
<li>在哈夫曼树中，权值大的节点离根节点比较近</li>
<li>哈弗曼树不唯一，但WPL相同</li>
<li>不存在度为1的节点</li>
</ul>
</li>
<li>哈夫曼算法（构造哈夫曼树）<ul>
<li>选两个根节点权值最小的叶子作为左右子树构成一棵新的二叉树，根节点权值为左右子树权值之和</li>
<li>重复上述过程</li>
</ul>
</li>
<li>哈夫曼编码（最小冗余码）<ul>
<li>统计出现频率，作为叶子节点权值，构造哈弗曼树</li>
<li>左分支标0，右分支标1，形成二进制串</li>
<li>特点：任一编码不是其他编码的前缀</li>
<li>编码从叶子到根，译码从根到叶子</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>31</p>
<p>二叉树的先序遍历序列和后序遍历序列正好相反：高度等于其节点数<a href="https://zhidao.baidu.com/question/746019821869617732.html">https://zhidao.baidu.com/question/746019821869617732.html</a></p>
<h2 id="第七章-图"><a href="#第七章-图" class="headerlink" title="第七章 图"></a>第七章 图</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul>
<li>连通图：任意两个顶点都有路径</li>
<li>连通分量（极大连通图）</li>
<li>生成树（极小连通图）</li>
</ul>
<h3 id="存储结构-1"><a href="#存储结构-1" class="headerlink" title="存储结构"></a>存储结构</h3><ol>
<li><p>数组表示法：一个一维，一个二维，可以加权值</p>
<img src="/images/截屏2019-12-03下午2.35.09.png" alt="截屏2019-12-03下午2.35.09" style="zoom:50%;" /></li>
<li><p>邻接表表示法</p>
<p>邻接表，逆邻接表（出入度）</p>
<img src="/images/截屏2019-12-03下午2.39.20.png" alt="截屏2019-12-03下午2.39.20" style="zoom:50%;" /></li>
<li><p>十字链表表示法（有向图）</p>
<img src="/Users/akunda/Desktop/hexo/source/images/截屏2019-12-03下午2.41.12.png" alt="截屏2019-12-03下午2.41.12" style="zoom:50%;" /></li>
<li><p>邻接多重表（无向图）</p>
<p>每条弧节点包括：标志域（是否被搜索过），该边依附的两个顶点在顶点数组里的位置，指向下一条依附于两个顶点的边的指针</p>
<img src="/images/截屏2019-12-03下午2.42.43.png" alt="截屏2019-12-03下午2.42.43" style="zoom:50%;" /></li>
</ol>
<h3 id="图的遍历"><a href="#图的遍历" class="headerlink" title="图的遍历"></a>图的遍历</h3><ol>
<li><p>深度优先遍历</p>
<p>递归，堆栈</p>
<img src="/images/截屏2019-12-03下午6.25.27.png" alt="截屏2019-12-03下午6.25.27" style="zoom:50%;" /></li>
<li><p>广度优先遍历</p>
</li>
</ol>
  <img src="/images/截屏2019-12-03下午6.30.30.png" alt="截屏2019-12-03下午6.30.30" style="zoom:50%;" />

<h3 id="图的连通性"><a href="#图的连通性" class="headerlink" title="图的连通性"></a>图的连通性</h3><ul>
<li><p>连通分量</p>
</li>
<li><p>生成树，dfs，bfs生成树</p>
</li>
<li><p>有向图强连通图，顺着一遍，逆着一遍，取交集</p>
</li>
<li><p>网的最小生成树</p>
<p>mst性质</p>
<ul>
<li>prim算法    分成u，v-u，把点依次纳入u中<img src="/images/截屏2019-12-10下午8.25.48.png" alt="截屏2019-12-10下午8.25.48" style="zoom:50%;" /></li>
<li>kruskai算法：把边按照从小到大依次加入，保证不形成回路</li>
</ul>
</li>
</ul>
<h3 id="有向无环图（DAG图）"><a href="#有向无环图（DAG图）" class="headerlink" title="有向无环图（DAG图）"></a>有向无环图（DAG图）</h3><ul>
<li>AOV图</li>
<li>拓扑排序（不能有回路DAG）先输出没有入度的<ul>
<li>顶点表示活动，弧表示约束关系</li>
<li>拓扑排序产生计划</li>
</ul>
</li>
<li>AOE网<ul>
<li><p>顶点表示事件，弧表示活动，权表示活动时间</p>
</li>
<li><p>只有一个源点和汇点</p>
</li>
<li><p>关键路径（最长路径）包括的活动叫关键活动</p>
</li>
<li><p>活动最早开始时间e（最长路径，max{前一个活动+弧长}），最晚开始时间l，活动余量l-e，关键活动l-e=0</p>
<p>最早发生时间顺推max最迟逆推min</p>
</li>
<li><p>按拓扑排序计算</p>
</li>
</ul>
</li>
</ul>
<h3 id="最短路径"><a href="#最短路径" class="headerlink" title="最短路径"></a>最短路径</h3><ul>
<li>dijkstra路径长度递增法 O(n<sup>2</sup>) 类似prim算法</li>
<li>floyd算法O(n<sup>3</sup>)</li>
</ul>
<h2 id="第九章-查找"><a href="#第九章-查找" class="headerlink" title="第九章 查找"></a>第九章 查找</h2><p>静态查找表，动态查找表（可以增加删除）</p>
<p>ASL平均查找长度</p>
<p>动态查找表：表结构在查找过程中动态生成。eg二叉排序树，哈希表</p>
<h3 id="顺序表查找（数组）"><a href="#顺序表查找（数组）" class="headerlink" title="顺序表查找（数组）"></a>顺序表查找（数组）</h3><p>哨兵技术：（消除越界判定的开销）把给定查找的元素放在第一个，然后从最后一个开始往前查找，从而保证不会越界</p>
<p>ASL=(n+1)/2</p>
<p>O(n)</p>
<h3 id="折半查找法"><a href="#折半查找法" class="headerlink" title="折半查找法"></a>折半查找法</h3><p>有序顺序表（递增）</p>
<p>low mid high</p>
<ul>
<li><p>判定low&lt;=high</p>
<p>mid=[(low+high)/2]</p>
<p>左边查找：low不变，high=mid-1</p>
<p>右边查找：high不变，low=mid+1</p>
</li>
</ul>
<p>判定树：描述折半查找过程的二叉树，对于某一个节点N，从根节点到N的路径上包含的所有节点，实际上对应于在查找节点N时查找过的所有元素，查找次数=树的层数</p>
<p>O(log(n))</p>
<p>asl=1*1+2*2+3*4+4*8+5*…</p>
<h3 id="分块查找法"><a href="#分块查找法" class="headerlink" title="分块查找法"></a>分块查找法</h3><p>分成很多块，块与块之间有序，块内无序；于是先折半查找，再顺序查找；需要借助索引表（包括每一个块的起始位置和最大值）</p>
<p> ASL’blk=(b+1)/2+(s+1)/2=(s2+2s+n)/(2s)</p>
<p>s=√n效率最高</p>
<h3 id="二叉排序树查找法"><a href="#二叉排序树查找法" class="headerlink" title="二叉排序树查找法"></a>二叉排序树查找法</h3><ul>
<li><p>二叉排序树T：</p>
<ul>
<li><p>T左子树所有节点值小于T根节点的值</p>
<p>T右子树所有节点值大于T根节点的值</p>
<p>T左右子树均为二叉排序树</p>
</li>
</ul>
<p>对二叉排序树进行中序遍历，输出为递增序列</p>
</li>
<li><p>向二叉排序树插入数据</p>
<p>相当于在查找失败时插入</p>
</li>
<li><p>向二叉排序树删除数据</p>
<p>根据删除节点的子树情况分四种讨论（这里删除的节点是双亲节点的左子树）</p>
<ul>
<li><p>左空右空：直接删除</p>
</li>
<li><p>左空右不空：将右子树接到双亲结点的左子树上</p>
</li>
<li><p>左不空右空：将左子树接到双亲结点的左子树上</p>
</li>
<li><p><font color=red>左不空右不空</font>：</p>
<p>P为删除节点，F为双亲结点，S为P最右边的没有右子树的节点</p>
<ul>
<li>法1 P的左子树接到F左，P右子树接到S右</li>
<li>法2 S代替P，S左子树代替原来的S</li>
</ul>
</li>
</ul>
</li>
<li><p>平衡二叉树T（AVL树）：</p>
<p>T左右子树深度只差不超过1</p>
<p>T左右子树均为平衡二叉树</p>
</li>
<li><p>创建平衡二叉树</p>
<p>依次插入元素，如果不平衡了，对最小不平衡子树进行平衡化处理</p>
<ul>
<li>最小不平衡二叉树：以距离新插入节点最近的，平衡因子&gt;1的节点为根的子树</li>
</ul>
<p>根据市区平衡的插入位置分类</p>
<ul>
<li>LL：单向右旋，右旋右靠 <img src="http://img.blog.csdn.net/20170713212023464?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdGlhbnl1eGluZ3h1YW4=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></li>
<li>RR：单向左旋<img src="http://img.blog.csdn.net/20170713213413602?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdGlhbnl1eGluZ3h1YW4=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></li>
<li>LR：左旋右旋<img src="http://img.blog.csdn.net/20170713215031006?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdGlhbnl1eGluZ3h1YW4=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></li>
<li>RL：右旋左旋<img src="http://img.blog.csdn.net/20170713214216909?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdGlhbnl1eGluZ3h1YW4=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></li>
</ul>
<p>LL , LR ，RR ，RL其实已经为我们提供了最后哪个结点作为新的根指明了方向。如 LR 型最后的根结点为原来的根的左孩子的右孩子，RL 型最后的根结点为原来的根的右孩子的左孩子。只要记住这四种情况，可以很快地推导出所有的情况。</p>
<p><a href="https://zhuanlan.zhihu.com/p/56066942">https://zhuanlan.zhihu.com/p/56066942</a></p>
<p>O(log(n))</p>
</li>
</ul>
<h3 id="哈希查找法（散列）"><a href="#哈希查找法（散列）" class="headerlink" title="哈希查找法（散列）"></a>哈希查找法（散列）</h3><ul>
<li><p>哈希函数H(key)将key与在哈希表L中的存储位置对应起来</p>
</li>
<li><p>影响散列查找时间效率的主要因素：与散列表长和散列表中实际元素个数均相关asl=元素个数/哈希表长</p>
</li>
<li><p>构造哈希函数：</p>
<p>基本原则：均匀，避免冲突情况的过度集中，预期哈希查找的时间效率能达到最佳</p>
<p>常见方法：</p>
<ul>
<li><p>直接定址法</p>
<p>H(key)=a*key+b</p>
</li>
<li><p>数字分析法</p>
<p>事先分析关键字的每一位，从中选取若干随机位构成哈希地址</p>
</li>
<li><p>平方取中法</p>
<p>取关键字平方后中间若干位作为哈希地址</p>
</li>
<li><p>折叠法</p>
<p>将关键字分成位数相同的若干个段，将各段求和作为哈希地址</p>
</li>
<li><p>余数法</p>
<p>H(key)=key mod p (p&lt;=m) m为哈希表长，p为质数，或不含小于20质因数的合数</p>
</li>
</ul>
</li>
<li><p>解决冲突的方法</p>
<ul>
<li><p>开放地址法</p>
<p>在H(key)为起点，取一个增量di作为下一个探测的位置</p>
<p>即H<sub>i</sub>(key)=(H(key)+di) mod m   m为哈希表长</p>
<p>di取法</p>
<ul>
<li>线性探测，di取1，2，3……m-1</li>
<li>二次探测，di=1<sup>2</sup>，-1<sup>2</sup>，2<sup>2</sup>，-2<sup>2</sup>……+-k<sup>2</sup>   (k&lt;=m/2)</li>
<li>伪随机探测</li>
</ul>
</li>
<li><p>再哈希法</p>
<p>使用其他哈希函数RH计算关键字key的下一个地址直到不再发生冲突</p>
</li>
<li><p>链地址法</p>
<p>将关键字的同义词存储在各自的单链表中</p>
</li>
<li><p>公共溢出区法</p>
<p>当遇到冲突时，统一将所有同义词存储到“公共溢出区”</p>
</li>
</ul>
</li>
</ul>
<p>哈希的装填因子a=n/m n为关键字数，m为表长</p>
<h2 id="第十章-内部排序（在内存中排序）"><a href="#第十章-内部排序（在内存中排序）" class="headerlink" title="第十章 内部排序（在内存中排序）"></a>第十章 内部排序（在内存中排序）</h2><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><h4 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h4><p>不断插入新的元素使之有序，要确定位置，移动后面元素的位置</p>
<p>不断将要插入的元素放到一个额外存储空间内，使得这个元素的位置空出来，从后往前比较</p>
<ul>
<li><p>最好：正序：比较n-1次，移动0次</p>
</li>
<li><p>最坏：逆序：比较（2+3+4+n）移动（2+1）+（3+1）+++（n+1）</p>
</li>
<li><p>分类</p>
<ul>
<li><p>折半插入排序</p>
<p>顺序查找定位变为折半查找定位，比较次数变成nlogn，移动次数不变</p>
</li>
<li><p>2-路插入排序</p>
<p>需要辅助数组n</p>
<p>首尾视为循环，比较次数不变，平均移动次数减半</p>
</li>
<li><p>表插入排序</p>
<p>运用循环静态链表，不断修改指针域</p>
</li>
<li><p>希尔排序</p>
<p>不停分隔子序列，序列内部直接插入排序，最后整个排序</p>
<p>记第i步序列分成的组数为di，总趟数为m，则</p>
<ul>
<li>dm=1</li>
<li>i&lt;j, di&gt;dj</li>
<li>i&lt;j, i!=j, di,dj最大公约数为1</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="交换排序"><a href="#交换排序" class="headerlink" title="交换排序"></a>交换排序</h3><h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><p>走一趟就确定最后的一个元素</p>
<h4 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4><p>思想：low high，把low放到合适位置，并把以low划分为两个子表</p>
<p>low&lt;high时</p>
<p>​    向左移动high，将首次遇到的小于L[low]的L[high]与L[low]交换</p>
<p>​    向右移动low，将首次遇到的大于L[high]的L[low]与L[high]交换</p>
<p>形成了一棵二叉树，O(n)-O(logn)</p>
<p>辅助空间log(n)（递归啊）</p>
<h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><p>选择最大元素与最后一个元素交换</p>
<h4 id="简单选择排序"><a href="#简单选择排序" class="headerlink" title="简单选择排序"></a>简单选择排序</h4><p>顺序查找确定最大元素</p>
<h4 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h4><ul>
<li><p>堆（大顶堆）：构建完全二叉树</p>
<p>a<sub>i</sub>&gt;=a<sub>2i</sub>, a<sub>i</sub>&gt;=a<sub>2i+1</sub></p>
</li>
<li><p>调整堆：树的左右子树都为堆，但是仅根不满足堆的条件，将其转化为堆</p>
<ul>
<li>思想：将树根与左右子树的最大值交换，重复上述步骤，直到为堆</li>
</ul>
</li>
<li><p>创建堆：从最大序号的非叶子节点开始逐步到根进行调整堆，时间复杂度n</p>
</li>
<li><p>堆排序算法：将L转化为大顶堆，将堆的根与最后一个叶子（L最后一个元素）交换，然后除最后一个叶子重复上述步骤，最后层序遍历得到递增序列</p>
</li>
<li><p>T&lt;O(nlogn)，空间复杂度O(1)</p>
</li>
</ul>
<h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><ul>
<li>思想：先把L（n）看做有n个子表，然后相邻表合并，重复</li>
<li>分析：可以用二叉树表示，T&lt;O(nlogn), S=O(n)</li>
</ul>
<h3 id="基数排序法"><a href="#基数排序法" class="headerlink" title="基数排序法"></a>基数排序法</h3><ul>
<li>多关键字排序<ul>
<li>MSD最主位优先排序，从前往后，需要分割序列</li>
<li>LSD最次位优先排序，从后往前，不需要分割，而且只能用稳定排序算法</li>
</ul>
</li>
<li>基数排序：将每一个位视作一单关键字，采用LSD排序（桶，队列）<ul>
<li>思想：入桶,出桶重复多边</li>
<li>T=2nd, S=基数*元素个数</li>
</ul>
</li>
</ul>
<ul>
<li><p>稳定排序：冒泡排序，插入排序，归并排序，基数排序，希尔排序</p>
</li>
<li><p>不稳定排序：选择排序，快速排序，堆排序</p>
</li>
<li><p><a href="https://www.cnblogs.com/codingmylife/archive/2012/10/21/2732980.html">https://www.cnblogs.com/codingmylife/archive/2012/10/21/2732980.html</a></p>
</li>
<li><table>
<thead>
<tr>
<th>排序方法</th>
<th>最好情况</th>
<th>平均时间</th>
<th>最坏情况</th>
<th>辅助存储</th>
<th>稳定性</th>
</tr>
</thead>
<tbody><tr>
<td>简单排序</td>
<td>O(n)</td>
<td>O(n2)</td>
<td>O(n2)</td>
<td>O(1)</td>
<td>稳定*</td>
</tr>
<tr>
<td>快速排序</td>
<td>O(nlgn )</td>
<td>O(nlgn)</td>
<td>O(n2)有序，变成冒泡排序</td>
<td>O(lgn)</td>
<td>不稳定</td>
</tr>
<tr>
<td>堆排序</td>
<td>O(nlgn )</td>
<td>O(nlgn )</td>
<td>O(nlgn)</td>
<td>O(1)</td>
<td>不稳定</td>
</tr>
<tr>
<td>归并排序</td>
<td>O(nlgn )</td>
<td>O(nlgn )</td>
<td>O(nlgn)</td>
<td>O(n) n</td>
<td>稳定</td>
</tr>
<tr>
<td>基数排序</td>
<td>O(d(n+rd))</td>
<td>O(d(n+rd))</td>
<td>O(d(n+rd))</td>
<td>O(rd)</td>
<td>稳定</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>简单选择</td>
<td>O(n2)</td>
<td>O(n2)</td>
<td>O(n2)</td>
<td>O(1)</td>
<td>不稳定*</td>
</tr>
<tr>
<td>直接插入</td>
<td>O(n)正序，比较n-1，移动0</td>
<td>O(n2)</td>
<td>O(n2)逆序，比较i2-&gt;n求和，移动i3-&gt;n+1求和</td>
<td>O(1)哨兵</td>
<td>稳定</td>
</tr>
<tr>
<td>折半插入</td>
<td>O(nlgn )</td>
<td>O(nlgn )</td>
<td>O(nlgn)</td>
<td>O(1)</td>
<td>稳定</td>
</tr>
</tbody></table>
</li>
<li><p>有序表的合并</p>
<p>最好min{m,n}最坏n+m-1</p>
</li>
</ul>
]]></content>
      <categories>
        <category>cs</category>
      </categories>
      <tags>
        <tag>ds</tag>
      </tags>
  </entry>
  <entry>
    <title>OS3pieces读书笔记</title>
    <url>/2022/06/04/OS3pieces%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<blockquote>
</blockquote>
<span id="more"></span>

<h1 id="virtualize"><a href="#virtualize" class="headerlink" title="virtualize"></a>virtualize</h1><h2 id="process"><a href="#process" class="headerlink" title="process"></a>process</h2><h3 id="process-a-running-program"><a href="#process-a-running-program" class="headerlink" title="process: a running program"></a>process: a running program</h3><ul>
<li>APIs<ul>
<li>create:<br>load-&gt;stack-&gt;heap-&gt;relate IO-&gt;start main</li>
<li>fork:<br>copy parent process<br>returns parent? pid_of_children : 0</li>
<li>wait<br>parent wait for children</li>
<li>exec<br>execution</li>
</ul>
</li>
<li>status: running ready wait</li>
<li>data structures: process list, struct proc</li>
</ul>
<p>machine state: memory, registers</p>
<h3 id="limited-direct-execution"><a href="#limited-direct-execution" class="headerlink" title="limited direct execution"></a>limited direct execution</h3><ul>
<li>user mode, kernel mode, system call, trap(system call contains a trap instruction)</li>
<li>switch<ul>
<li>wait for system calls</li>
<li>a timer</li>
</ul>
</li>
</ul>
<h3 id="schedule"><a href="#schedule" class="headerlink" title="schedule"></a>schedule</h3><p>T<del>turnaround</del> = T<del>completion</del> - T<del>arrival</del></p>
<p>T<del>response</del> = T<del>firstrun</del> - T<del>arrival</del></p>
<ul>
<li>FIFO/FCFS convoy effect bad</li>
<li>SJF 当任务不是同时发生时 bad</li>
<li>STCF/PSJF preempt</li>
<li>RR time-slicing</li>
<li>MLFQ 多级反馈队列<ul>
<li>Rule 1: If Priority(A) &gt; Priority(B), A runs (B doesn’t).</li>
<li>Rule 2: If Priority(A) = Priority(B), A &amp; B run in RR.</li>
<li>Rule 3: When a job enters the system, it is placed at the highest priority (the topmost queue).</li>
<li>Rule 4: Once a job uses up its time allotment at a given level (regardless of how many times it has given up the CPU), its priority is reduced (i.e., it moves down one queue).</li>
<li>Rule 5: After some time period S, move all the jobs in the system to the topmost queue.</li>
</ul>
</li>
<li>lottery: counter and ticket</li>
<li>stride: take a stride and increase pass value</li>
</ul>
<h2 id="memory"><a href="#memory" class="headerlink" title="memory"></a>memory</h2><blockquote>
<p>every address generated by a user program is a virtual address</p>
<p>eg. 打印出来的都是虚拟地址<img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h3211p9vj7j20ps07kdgi.jpg" alt="截屏2022-06-09 15.32.54"></p>
<p>location of code  : 0x1095afe50<br>location of heap  : 0x1096008c0<br>location of stack : 0x7fff691aea64</p>
</blockquote>
<p>address space: code, stack, heap, other(statically-initialized var)</p>
<ul>
<li>memory API<ul>
<li>malloc: 参数 size_t, 表示分配的字节数<br>注意 strlen(s)+1</li>
<li>free: 参数必须是 malloc 返回的指针</li>
<li>常见错误</li>
</ul>
</li>
</ul>
<p>address translation: from va to pa</p>
<ul>
<li>dynamic relocation(by hardware): runtime<ul>
<li>base and bound in MMU(memory management unit)<br>base: calculate pa<br>bouds: protection, saves size <em>or</em> pa of end</li>
</ul>
</li>
<li>static relocation(by software, before dynamic relocation): loader<ul>
<li>rewrite addresses, no protection</li>
</ul>
</li>
</ul>
<h3 id="segementation-分段"><a href="#segementation-分段" class="headerlink" title="segementation 分段"></a>segementation 分段</h3><p>different sections can have different base and bound</p>
<ul>
<li>va translation: va-&gt; segment + offset</li>
<li>stack grow backwards: add a <strong>bit</strong> to identify grow positive or not</li>
<li>protection: add permission bits</li>
<li>空间浪费<ul>
<li>internal fragment: segment 内部</li>
<li>external fragment: segment 之间, 主要原因是段的大小不一样<br>选用合适的 free-list 算法<br>free-space need coalescing(合并)<br>allocator add <strong>header block</strong> before a allocated region, which contains the size (explain why free() dont need size arg)<ul>
<li>fit 算法: <ul>
<li>best fit</li>
<li>worst fit</li>
<li>first fit</li>
<li>next fit</li>
<li>segregated lists</li>
<li>buddy allocation 2^N^ easy to coalescing</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="paging-fixed-sized-segment-分页"><a href="#paging-fixed-sized-segment-分页" class="headerlink" title="paging: fixed-sized segment 分页"></a>paging: fixed-sized segment 分页</h3><p>page for virtual, page frame for physical</p>
<ul>
<li><p>page table: per-process data structure, stored in memory<br>va-&gt; virtual page number + offset<br>vpn–virtual page table–&gt; page frame number<br>pa -&gt; pfn + offset</p>
<p>indexed by vpn<br><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h35ihvn8stj20qi03mjrj.jpg" alt="page table entry (PTE)"></p>
</li>
</ul>
<p>translation lookaside buffer TLB: in mmu, just a cache</p>
<ul>
<li>先更新 tlb, 再查询 tlb</li>
<li>结构: vpn pfn flag_bits asid(pid)</li>
</ul>
<p>too much tables!</p>
<ul>
<li><p>bigger pages: internal fragment, mostly page size is 4KB</p>
</li>
<li><p>paging and segment: table for segment, 不需要再记录 invalid entry, 从而减少page tables大小</p>
</li>
<li><p>多级分页表<br><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h35ixabi99j20t40i0gnm.jpg" alt="截屏2022-06-12 16.08.08"></p>
<p>va tanslation<br><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h35iy18xscj20kq04umx9.jpg" alt="截屏2022-06-12 16.08.53"></p>
</li>
</ul>
<h3 id="page-fault"><a href="#page-fault" class="headerlink" title="page fault"></a>page fault</h3><p>OS(sfotware!): page fault handler</p>
<p>TLB -&gt; not hit -&gt; page table register -&gt; page table -(swap space)-&gt; PTE -&gt; PFN -&gt; PA</p>
<p>swap darmon: high watermark, low watermark</p>
<h3 id="page-out"><a href="#page-out" class="headerlink" title="page out"></a>page out</h3><p>average memory access time(AMAT)</p>
<ul>
<li><p>FIFO: simple</p>
</li>
<li><p>random: simple</p>
</li>
<li><p>LRU(least recently used): not good when big loop</p>
<ul>
<li><p>approximating LRU</p>
<p>当一个 page 被使用时, use bit = 1<br>clock hand: 当page out 时, 查看当前指向的 page, 如果 use bit == 1, set page bit = 0, move on<br>如果 use bit == 0, page out</p>
</li>
</ul>
</li>
</ul>
<p>dirty bit: 应该优先 page out clean page 而不是 dirty page</p>
<p>clustering grouping</p>
<p>page0 is invalid, explain null pointer</p>
<p>COW(copy on write): when copy, read: address, write: copy</p>
<h3 id="LRU"><a href="#LRU" class="headerlink" title="LRU"></a>LRU</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LRUCache</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">LRUCache</span>(<span class="keyword">int</span> capacity) : <span class="built_in">cap</span>(capacity) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (map.<span class="built_in">find</span>(key) == map.<span class="built_in">end</span>()) 	</span><br><span class="line">          <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">auto</span> key_value = *map[key];</span><br><span class="line">        cache.<span class="built_in">erase</span>(map[key]);</span><br><span class="line">        cache.<span class="built_in">push_front</span>(key_value);</span><br><span class="line">        map[key] = cache.<span class="built_in">begin</span>();</span><br><span class="line">        <span class="keyword">return</span> key_value.second;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (map.<span class="built_in">find</span>(key) == map.<span class="built_in">end</span>()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cache.<span class="built_in">size</span>() == cap) &#123;</span><br><span class="line">              map.<span class="built_in">erase</span>(cache.<span class="built_in">back</span>().first);</span><br><span class="line">              cache.<span class="built_in">pop_back</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            cache.<span class="built_in">erase</span>(map[key]);</span><br><span class="line">        &#125;</span><br><span class="line">        cache.<span class="built_in">push_front</span>(&#123;key, value&#125;);</span><br><span class="line">        map[key] = cache.<span class="built_in">begin</span>();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> cap;</span><br><span class="line">    list&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; cache;</span><br><span class="line">    unordered_map&lt;<span class="keyword">int</span>, list&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;::iterator&gt; map;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="LFU"><a href="#LFU" class="headerlink" title="LFU"></a>LFU</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> cnt, time, key, value;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Node</span>(<span class="keyword">int</span> _cnt, <span class="keyword">int</span> _time, <span class="keyword">int</span> _key, <span class="keyword">int</span> _value): <span class="built_in">cnt</span>(_cnt), <span class="built_in">time</span>(_time), <span class="built_in">key</span>(_key), <span class="built_in">value</span>(_value) &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Node&amp; rhs) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> cnt == rhs.cnt ? time &lt; rhs.time : cnt &lt; rhs.cnt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LFUCache</span> &#123;</span></span><br><span class="line">    <span class="comment">// 缓存容量，时间戳</span></span><br><span class="line">    <span class="keyword">int</span> capacity, time;</span><br><span class="line">    unordered_map&lt;<span class="keyword">int</span>, Node&gt; key_table;</span><br><span class="line">    set&lt;Node&gt; S;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">LFUCache</span>(<span class="keyword">int</span> _capacity) &#123;</span><br><span class="line">        capacity = _capacity;</span><br><span class="line">        time = <span class="number">0</span>;</span><br><span class="line">        key_table.<span class="built_in">clear</span>();</span><br><span class="line">        S.<span class="built_in">clear</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> it = key_table.<span class="built_in">find</span>(key);</span><br><span class="line">        <span class="keyword">if</span> (it == key_table.<span class="built_in">end</span>()) </span><br><span class="line">          <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">        Node cache = it -&gt; second;</span><br><span class="line">        S.<span class="built_in">erase</span>(cache);</span><br><span class="line"></span><br><span class="line">        cache.cnt += <span class="number">1</span>;</span><br><span class="line">        cache.time = ++time;</span><br><span class="line"></span><br><span class="line">        S.<span class="built_in">insert</span>(cache);</span><br><span class="line">        it -&gt; second = cache;</span><br><span class="line">        <span class="keyword">return</span> cache.value;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (capacity == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">auto</span> it = key_table.<span class="built_in">find</span>(key);</span><br><span class="line">        <span class="keyword">if</span> (it == key_table.<span class="built_in">end</span>()) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (key_table.<span class="built_in">size</span>() == capacity) &#123;</span><br><span class="line">                key_table.<span class="built_in">erase</span>(S.<span class="built_in">begin</span>() -&gt; key);</span><br><span class="line">                S.<span class="built_in">erase</span>(S.<span class="built_in">begin</span>());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Node cache = <span class="built_in">Node</span>(<span class="number">1</span>, ++time, key, value);</span><br><span class="line">            key_table.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(key, cache));</span><br><span class="line">            S.<span class="built_in">insert</span>(cache);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            Node cache = it -&gt; second;</span><br><span class="line">            S.<span class="built_in">erase</span>(cache);</span><br><span class="line">            cache.cnt += <span class="number">1</span>;</span><br><span class="line">            cache.time = ++time;</span><br><span class="line">            cache.value = value;</span><br><span class="line">            S.<span class="built_in">insert</span>(cache);</span><br><span class="line">            it -&gt; second = cache;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="concurrency"><a href="#concurrency" class="headerlink" title="concurrency"></a>concurrency</h1><h2 id="thread"><a href="#thread" class="headerlink" title="thread"></a>thread</h2><p>thread: share same address space<br>own PC, registers, stack</p>
<p>API</p>
<ul>
<li>```c<br>int pthread_create(<br>pthread_t * thread,<br>const pthread_attr_t * attr,//null<br>void * (<em>start_routine)(void</em>),<br>void * arg);<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- &#96;&#96;&#96;c</span><br><span class="line">  int pthread_join(</span><br><span class="line">  pthread_t thread, </span><br><span class="line">  void **value_ptr);&#x2F;&#x2F;return value</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="lock"><a href="#lock" class="headerlink" title="lock"></a>lock</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">pthread_mutex_t</span> lock = PTHREAD_MUTEX_INITIALIZER;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> rc = pthread_mutex_init(&amp;lock, <span class="literal">NULL</span>);</span><br><span class="line">assert(rc==<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">Pthread_mutex_lock(<span class="keyword">pthread_mutex_t</span> *mutex)&#123;</span><br><span class="line">  <span class="keyword">int</span> rc = pthread_mutex_lock(mutex);</span><br><span class="line">  assert(rc==<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="controlling-interrupts"><a href="#controlling-interrupts" class="headerlink" title="controlling interrupts"></a>controlling interrupts</h3><p>禁止中断, 适合单处理器系统</p>
<h3 id="test-and-set-atomatic-instruction"><a href="#test-and-set-atomatic-instruction" class="headerlink" title="test and set atomatic instruction"></a>test and set atomatic instruction</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">TestAndSet</span><span class="params">(<span class="keyword">int</span> *ptr, <span class="keyword">int</span> <span class="keyword">new</span>)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> old = *ptr;</span><br><span class="line">  *ptr = <span class="keyword">new</span>;</span><br><span class="line">  <span class="keyword">return</span> old;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//testandset 为原子指令</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> __<span class="title">lock_t</span>&#123;</span><span class="keyword">int</span> flag;&#125; <span class="keyword">lock_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">lock_t</span> *lock)</span></span>&#123;</span><br><span class="line">  lock-&gt;flag = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lock</span><span class="params">(<span class="keyword">lock_t</span> *lock)</span></span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(TestAndSet(&amp;lock-&gt;flag, <span class="number">1</span>) == <span class="number">1</span>)</span><br><span class="line">    ;<span class="comment">//spin</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unlock</span><span class="params">(<span class="keyword">lock_t</span> *lock)</span></span>&#123;</span><br><span class="line">  lock-&gt;flag = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="compare-and-swap"><a href="#compare-and-swap" class="headerlink" title="compare and swap"></a>compare and swap</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">CompareAndSwap</span><span class="params">(<span class="keyword">int</span> *ptr, <span class="keyword">int</span> expect, <span class="keyword">int</span> <span class="keyword">new</span>)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> actual = *ptr;</span><br><span class="line">  <span class="keyword">if</span>(actual == expected)</span><br><span class="line">    *ptr = <span class="keyword">new</span>;</span><br><span class="line">  <span class="keyword">return</span> actual;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lock</span><span class="params">(<span class="keyword">lock_t</span> *lock)</span></span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(CompareAndSwap(&amp;lock-&gt;flag, <span class="number">0</span>, <span class="number">1</span>) == <span class="number">1</span>)</span><br><span class="line">    ;<span class="comment">//spin</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="load-linked-and-store-conditional-LL-SC"><a href="#load-linked-and-store-conditional-LL-SC" class="headerlink" title="load-linked and store-conditional (LL/SC)"></a>load-linked and store-conditional (LL/SC)</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LoadLinked</span><span class="params">(<span class="keyword">int</span> *ptr)</span></span>&#123;<span class="keyword">return</span> *ptr&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">StoreConditional</span><span class="params">(<span class="keyword">int</span> *ptr, <span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(no one has updated *ptr since the LoadLinked to <span class="keyword">this</span> address)&#123;</span><br><span class="line">    *ptr = value;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lock</span><span class="params">(<span class="keyword">lock_t</span> *lock)</span></span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">while</span>(LoadLinked(&amp;lock-&gt;flag, <span class="number">1</span>) == <span class="number">1</span>)</span><br><span class="line">      ;<span class="comment">//spin</span></span><br><span class="line">    <span class="keyword">if</span>(StoreConditional(&amp;lock-&gt;flag, <span class="number">1</span>) == <span class="number">1</span>)</span><br><span class="line">      <span class="keyword">return</span> ;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="fetch-and-add-ticket-and-turn"><a href="#fetch-and-add-ticket-and-turn" class="headerlink" title="fetch and add(ticket and turn)"></a>fetch and add(ticket and turn)</h3><p>保证公平性</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">FetchAndAdd</span><span class="params">(<span class="keyword">int</span> *ptr)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> old = *ptr;</span><br><span class="line">  *ptr = old+<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> old;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> __<span class="title">lock_t</span>&#123;</span></span><br><span class="line">  <span class="keyword">int</span> ticket;</span><br><span class="line">  <span class="keyword">int</span> turn;</span><br><span class="line">&#125; <span class="keyword">lock_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lock</span><span class="params">(<span class="keyword">lock_t</span> *lock)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> mytyrn = FetchAndAdd(&amp;lock-&gt;ticket);</span><br><span class="line">  <span class="keyword">while</span>(lock-&gt;turn != myturn)</span><br><span class="line">    ;<span class="comment">//spin</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unlock</span><span class="params">(<span class="keyword">lock_t</span> *lock)</span></span>&#123;</span><br><span class="line">  FetchAndAdd(&amp;lock-&gt;turn);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="yield-持续-spinn-导致效率为-1-N"><a href="#yield-持续-spinn-导致效率为-1-N" class="headerlink" title="yield(持续 spinn 导致效率为 1/N)"></a>yield(持续 spinn 导致效率为 1/N)</h3><p><code>yield()</code>放弃 cpu</p>
<h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> __<span class="title">lock_t</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> flag;</span><br><span class="line">    <span class="keyword">int</span> guard;</span><br><span class="line">    <span class="keyword">queue_t</span> *q;</span><br><span class="line">&#125; <span class="keyword">lock_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lock_init</span><span class="params">(<span class="keyword">lock_t</span> *m)</span></span>&#123;</span><br><span class="line">    m-&gt;flag = <span class="number">0</span>;</span><br><span class="line">    m-&gt;guard = <span class="number">0</span>;</span><br><span class="line">    queue_init(m-&gt;q);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lock</span><span class="params">(<span class="keyword">lock_t</span> *m)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(TesAndSet(&amp;m-&gt;guard, <span class="number">1</span>) == <span class="number">1</span>)</span><br><span class="line">    ;<span class="comment">//spin</span></span><br><span class="line">    <span class="keyword">if</span>(m-&gt;flag == <span class="number">0</span>)&#123;</span><br><span class="line">        m-&gt;flag = <span class="number">1</span>;</span><br><span class="line">        m-&gt;guard = <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        queue_add(m-&gt;q, gettid());</span><br><span class="line">     	  setpark();<span class="comment">//put thread to sleep</span></span><br><span class="line">      	<span class="comment">//If another thread calls unpark before park is actually called, the subsequent park returns immediately instead of sleeping</span></span><br><span class="line">        m-&gt;guard = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unlock</span><span class="params">(<span class="keyword">lock_t</span> *m)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(TesAndSet(&amp;m-&gt;guard, <span class="number">1</span>) == <span class="number">1</span>)</span><br><span class="line">    ;<span class="comment">//spin</span></span><br><span class="line">    <span class="keyword">if</span>(queue_empty(m-&gt;q))</span><br><span class="line">        m-&gt;flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        unpark(queue_remove(m-&gt;q));</span><br><span class="line">    m-&gt;guard = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="two-phase-locks"><a href="#two-phase-locks" class="headerlink" title="two-phase locks"></a>two-phase locks</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mutex_lock</span><span class="params">(<span class="keyword">int</span> *mutex)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> v;</span><br><span class="line">    <span class="keyword">if</span>(atomic_bit_test_and_set(mutex, <span class="number">31</span>) == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    atomic_increment(mutex);</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(atomic_bit_test_and_set(mutex, <span class="number">31</span>)==<span class="number">0</span>)&#123;</span><br><span class="line">            atomic_decrement(mutex);</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        v = *mutex;</span><br><span class="line">        <span class="keyword">if</span>(v&gt;=<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        futex_wait(mutex, v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mutex_unlock</span> <span class="params">(<span class="keyword">int</span> *mutex)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* Adding 0x80000000 to the counter results</span></span><br><span class="line"><span class="comment">    there are not other interested threads */</span> </span><br><span class="line">    <span class="keyword">if</span> (atomic_add_zero (mutex, <span class="number">0x80000000</span>))</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">/* There are other threads waiting for this wake one of them up. */</span></span><br><span class="line">    futex_wake (mutex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="lock-based-data-structure"><a href="#lock-based-data-structure" class="headerlink" title="lock based data structure"></a>lock based data structure</h2><p>thread safe</p>
<h3 id="counter"><a href="#counter" class="headerlink" title="counter"></a>counter</h3><p>sloppy counter</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> __<span class="title">counter_t</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> global;</span><br><span class="line">    <span class="keyword">pthread_mutex_t</span> glock;</span><br><span class="line">    <span class="keyword">int</span> local[NUMCPUS];</span><br><span class="line">    <span class="keyword">pthread_mutex_t</span> llock[NUMCPUS];</span><br><span class="line">    <span class="keyword">int</span> threshold;</span><br><span class="line">&#125; <span class="keyword">counter_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">counter_t</span> *c, <span class="keyword">int</span> threshold)</span></span>&#123;</span><br><span class="line">    c-&gt;threshold = threshold;</span><br><span class="line">    c-&gt;global = <span class="number">0</span>;</span><br><span class="line">    pthread_mutex_init(&amp;c-&gt;glock, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;NUMCPUS; i++)&#123;</span><br><span class="line">        c-&gt;local[i] = <span class="number">0</span>;</span><br><span class="line">        pthread_mutex_init(&amp;c-&gt;llock[i], <span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">counter_t</span> *c, <span class="keyword">int</span> threadID, <span class="keyword">int</span> amt)</span></span>&#123;</span><br><span class="line">    <span class="comment">//amt amount</span></span><br><span class="line">    pthread_mutex_lock(&amp;c-&gt;llock[threadID]);</span><br><span class="line">    c-&gt;local[threadID] += amt;</span><br><span class="line">    <span class="keyword">if</span>(c-&gt;local[threadID] &gt;= c-&gt;threshold)&#123;</span><br><span class="line">        pthread_mutex_lock(&amp;c-&gt;glock);</span><br><span class="line">        c-&gt;global += c-&gt;local[threadID];</span><br><span class="line">        pthread_mutex_unlock(&amp;c-&gt;glock);</span><br><span class="line">        c-&gt;local[threadID] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    pthread_mutex_unlock(&amp;c-&gt;llock[threadID]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">counter_t</span> *c)</span></span>&#123;</span><br><span class="line">    pthread_mutex_lock(&amp;c-&gt;glock);</span><br><span class="line">    <span class="keyword">int</span> val = c-&gt;global;</span><br><span class="line">    pthread_mutex_unlock(&amp;c-&gt;glock);</span><br><span class="line">    <span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>关键在于 threshold 值</p>
<p>s=1 即为无 sloppy lock</p>
<h3 id="linked-list"><a href="#linked-list" class="headerlink" title="linked list"></a>linked list</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> __<span class="title">node_t</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> key;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> __<span class="title">node_t</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; <span class="keyword">node_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> __<span class="title">list_t</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">node_t</span> *head;</span><br><span class="line">    <span class="keyword">pthread_mutex_t</span> lock;</span><br><span class="line">&#125;<span class="keyword">list_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">List_Init</span><span class="params">(<span class="keyword">list_t</span> *l)</span></span>&#123;</span><br><span class="line">    l-&gt;head = <span class="literal">NULL</span>;</span><br><span class="line">    pthread_mutex_init(&amp;l-&gt;lock, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">List_Insert</span><span class="params">(<span class="keyword">list_t</span> *l, <span class="keyword">int</span> key)</span></span>&#123;</span><br><span class="line">    <span class="keyword">node_t</span> *<span class="keyword">new</span> = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">node_t</span>));</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">new</span>==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        perror(<span class="string">&quot;malloc&quot;</span>);</span><br><span class="line">        pthread_mutex_unlock(&amp;l-&gt;lock);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">new</span>-&gt;key = key;</span><br><span class="line">  	</span><br><span class="line">  	pthread_mutex_lock(&amp;l-&gt;lock);</span><br><span class="line">    <span class="keyword">new</span>-&gt;next = l-&gt;head;</span><br><span class="line">    l-&gt;head = <span class="keyword">new</span>;</span><br><span class="line">    pthread_mutex_unlock(&amp;l-&gt;lock);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">List_Lookup</span><span class="params">(<span class="keyword">list_t</span> *l, <span class="keyword">int</span> key)</span></span>&#123;</span><br><span class="line">  	<span class="keyword">int</span> rv = <span class="number">-1</span>;</span><br><span class="line">    pthread_mutex_lock(&amp;l-&gt;lock);</span><br><span class="line">    <span class="keyword">node_t</span> *curr = l-&gt;head;</span><br><span class="line">    <span class="keyword">while</span>(curr)&#123;</span><br><span class="line">        <span class="keyword">if</span>(curr-&gt;key == key)&#123;</span><br><span class="line">            rv=<span class="number">0</span>;</span><br><span class="line">						<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        curr = curr-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    pthread_mutex_unlock(&amp;l-&gt;lock);</span><br><span class="line">    <span class="keyword">return</span> rv;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> __<span class="title">node_t</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> value;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> __<span class="title">node_t</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; <span class="keyword">node_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> __<span class="title">queue_t</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">node_t</span> *head;</span><br><span class="line">    <span class="keyword">node_t</span> *tail;</span><br><span class="line">    <span class="keyword">pthread_mutex_t</span> head_lock;</span><br><span class="line">    <span class="keyword">pthread_mutex_t</span> tail_lock;</span><br><span class="line">&#125;<span class="keyword">queue_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Queue_Init</span><span class="params">(<span class="keyword">queue_t</span> *q)</span></span>&#123;</span><br><span class="line">    <span class="keyword">node_t</span> *tmp = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">node_t</span>));</span><br><span class="line">    tmp-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    q-&gt;head = q-&gt;tail = tmp;</span><br><span class="line">    pthread_mutex_init(&amp;q-&gt;head_lock, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_mutex_init(&amp;q-&gt;tail_lock, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Queue_Enqueue</span><span class="params">(<span class="keyword">queue_t</span> *q, <span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">    <span class="keyword">node_t</span> *tmp = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">node_t</span>));</span><br><span class="line">    assert(tmp!=<span class="literal">NULL</span>);</span><br><span class="line">    tmp-&gt;value = value;</span><br><span class="line">    tmp-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    pthread_mutex_lock(&amp;q-&gt;tail_lock);</span><br><span class="line">    q-&gt;tail-&gt;next = tmp;</span><br><span class="line">    q-&gt;tail = tmp;</span><br><span class="line">    pthread_mutex_unlock(&amp;q-&gt;tail_lock);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Queue_Dequeue</span><span class="params">(<span class="keyword">queue_t</span> *q, <span class="keyword">int</span> *value)</span></span>&#123;</span><br><span class="line">    pthread_mutex_lock(&amp;q-&gt;head_lock);</span><br><span class="line">    <span class="keyword">node_t</span> *tmp = q-&gt;head;</span><br><span class="line">    <span class="keyword">node_t</span> *new_head = tmp-&gt;next;</span><br><span class="line">    <span class="keyword">if</span>(new_head == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        pthread_mutex_unlock(&amp;q-&gt;head_lock);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    *value = new_head-&gt;value;</span><br><span class="line">    q-&gt;head = new_head;</span><br><span class="line">    pthread_mutex_unlock(&amp;q-&gt;head_lock);</span><br><span class="line">    <span class="built_in">free</span>(tmp);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="hash-table"><a href="#hash-table" class="headerlink" title="hash table"></a>hash table</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUCKETS 101</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> __<span class="title">hash_t</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">list_t</span> lists[BUCKETS];</span><br><span class="line">&#125;<span class="keyword">hash_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hash_init</span><span class="params">(<span class="keyword">hash_t</span> *h)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;BUCKETS; i++)</span><br><span class="line">        List_Init(&amp;h-&gt;lists[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hash_insert</span><span class="params">(<span class="keyword">hash_t</span> *h, <span class="keyword">int</span> key)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> bucket = key%BUCKETS;</span><br><span class="line">    <span class="keyword">return</span> List_Insert(&amp;h-&gt;lists[bucket], key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hash_lookup</span><span class="params">(<span class="keyword">hash_t</span> *h, <span class="keyword">int</span> key)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> bucket = key%BUCKETS;</span><br><span class="line">    <span class="keyword">return</span> List_Lookup(&amp;h-&gt;lists[bucket], key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="condition-variables"><a href="#condition-variables" class="headerlink" title="condition variables"></a>condition variables</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> done = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">pthread_mutex_t</span> m = PTHREAD_MUTEX_INITIALIZER;</span><br><span class="line"><span class="keyword">pthread_cond_t</span> c = PTHREAD_COND_INITIALIZER;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">thr_exit</span><span class="params">()</span></span>&#123;</span><br><span class="line">    pthread_mutex_lock(&amp;m);</span><br><span class="line">    done = <span class="number">1</span>;</span><br><span class="line">    pthread_cond_signal(&amp;c);</span><br><span class="line">    pthread_mutex_unlock(&amp;m);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">child</span><span class="params">(<span class="keyword">void</span> *arg)</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;child\n&quot;</span>);</span><br><span class="line">    thr_exit();</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">thr_join</span><span class="params">()</span></span>&#123;</span><br><span class="line">    pthread_mutex_lock(&amp;m);</span><br><span class="line">    <span class="keyword">while</span>(done == <span class="number">0</span>)</span><br><span class="line">        pthread_cond_wait(&amp;c, &amp;m);</span><br><span class="line">    pthread_mutex_unlock(&amp;m);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;parent beigin\n&quot;</span>);</span><br><span class="line">    <span class="keyword">pthread_t</span> p;</span><br><span class="line">    pthread_create(&amp;p, <span class="literal">NULL</span>, child, <span class="literal">NULL</span>);</span><br><span class="line">    thr_join();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;parent end\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Pthread_cond_wait: put sleep, release lock, when return acquire lock</p>
<h3 id="生产者消费者模型"><a href="#生产者消费者模型" class="headerlink" title="生产者消费者模型"></a>生产者消费者模型</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 10</span></span><br><span class="line"><span class="keyword">int</span> buffer[MAX];</span><br><span class="line"><span class="keyword">int</span> fill = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> use = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">    buffer[fill] = value;</span><br><span class="line">    fill = (fill+<span class="number">1</span>)%MAX;</span><br><span class="line">    count++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp = buffer[use];</span><br><span class="line">    use = (use+<span class="number">1</span>)%MAX;</span><br><span class="line">    count--;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">cond_t</span> empty, fill;</span><br><span class="line"><span class="keyword">mutux_t</span> m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">producer</span><span class="params">(<span class="keyword">void</span> *arg)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;loops; i++)&#123;</span><br><span class="line">        pthread_mutex_lock(&amp;m);</span><br><span class="line">        <span class="keyword">while</span>(count == MAX)</span><br><span class="line">            pthread_cond_wait(&amp;empty, &amp;m);</span><br><span class="line">        put(i);</span><br><span class="line">        pthread_cond_signal(&amp;fill);</span><br><span class="line">        pthread_mutex_unlock(&amp;m);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">consumer</span><span class="params">(<span class="keyword">void</span> *arg)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;loops; i++)&#123;</span><br><span class="line">        pthread_mutex_lock(&amp;m);</span><br><span class="line">        <span class="keyword">while</span>(count==<span class="number">0</span>)</span><br><span class="line">            pthread_cond_wait(&amp;fill, &amp;m);</span><br><span class="line">        <span class="keyword">int</span> tmp = get();</span><br><span class="line">        pthread_cond_signal(&amp;empty);</span><br><span class="line">        pthread_mutex_unlock(&amp;m);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, tmp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="semaphores-信号量"><a href="#semaphores-信号量" class="headerlink" title="semaphores 信号量"></a>semaphores 信号量</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;semaphore.h&gt;</span></span></span><br><span class="line"><span class="keyword">sem_t</span> s;</span><br><span class="line">sem_init(&amp;s, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line"><span class="comment">//arg1 semaphore, arg2 flags usually null, arg3 initial value</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sem_wait</span><span class="params">(<span class="keyword">sem_t</span> s)</span></span>&#123;</span><br><span class="line">  <span class="comment">//decrement</span></span><br><span class="line">  <span class="comment">//sem &gt;= 0 return</span></span><br><span class="line">  <span class="comment">//else wait</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sem_post</span><span class="params">(<span class="keyword">sem_t</span> s)</span></span>&#123;</span><br><span class="line">  <span class="comment">//increment</span></span><br><span class="line">  <span class="comment">//wake sleep threads</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="binary-semaphores-lock"><a href="#binary-semaphores-lock" class="headerlink" title="binary semaphores: lock"></a>binary semaphores: lock</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">sem_t</span> s;</span><br><span class="line">sem_init(&amp;s, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">sem_wait(&amp;s);</span><br><span class="line"><span class="comment">//critical section</span></span><br><span class="line">sem_post(&amp;s);</span><br></pre></td></tr></table></figure>

<p>注意初始化为 1</p>
<h4 id="as-condition-variables"><a href="#as-condition-variables" class="headerlink" title="as condition variables"></a>as condition variables</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">sem_t</span> s;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span>* <span class="title">child</span><span class="params">(<span class="keyword">void</span> *arg)</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;child\n&quot;</span>);</span><br><span class="line">    sem_post(&amp;s);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line">    sem_init(&amp;s, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;parent begin\n&quot;</span>);</span><br><span class="line">    <span class="keyword">pthread_t</span> c;</span><br><span class="line">    pthread_create(c, <span class="literal">NULL</span>, child, <span class="literal">NULL</span>);</span><br><span class="line">    sem_wait(&amp;s);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;parent end\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意初始化为 0</p>
<h4 id="生产者消费者"><a href="#生产者消费者" class="headerlink" title="生产者消费者"></a>生产者消费者</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 10</span></span><br><span class="line"><span class="keyword">int</span> buffer[MAX];</span><br><span class="line"><span class="keyword">int</span> fill = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> use = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">    buffer[fill] = value;</span><br><span class="line">    fill = (fill+<span class="number">1</span>)%MAX;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp = buffer[use];</span><br><span class="line">    use = (use+<span class="number">1</span>)%MAX;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">sem_t</span> empty;<span class="comment">//MAX</span></span><br><span class="line"><span class="keyword">sem_t</span> full;<span class="comment">//0</span></span><br><span class="line"><span class="keyword">sem_t</span> mutex;<span class="comment">//1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">producer</span><span class="params">(<span class="keyword">void</span> *arg)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;loops; i++)&#123;</span><br><span class="line">        sem_wait(&amp;empty);</span><br><span class="line">        sem_wait(&amp;mutex);</span><br><span class="line">        put(i);</span><br><span class="line">        sem_post(&amp;mutex);</span><br><span class="line">        sem_post(&amp;full)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">consumer</span><span class="params">(<span class="keyword">void</span> *arg)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, tmp=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (tmp!=<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        sem_wait(&amp;full);</span><br><span class="line">        sem_wait(&amp;mutex);</span><br><span class="line">        tmp = get();</span><br><span class="line">        sem_post(&amp;mutex);</span><br><span class="line">        sem_post(&amp;empty);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, tmp);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line">    sem_init(&amp;empty, <span class="number">0</span>, MAX);</span><br><span class="line">    sem_init(&amp;full, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    sem_init(&amp;mutex, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="读写锁"><a href="#读写锁" class="headerlink" title="读写锁"></a>读写锁</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> __<span class="title">rwlock_t</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">sem_t</span> lock;</span><br><span class="line">    <span class="keyword">sem_t</span> writelock;</span><br><span class="line">    <span class="keyword">int</span> readers;</span><br><span class="line">&#125;<span class="keyword">rwlock_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rwlock_init</span><span class="params">(<span class="keyword">rwlock_t</span> *rw)</span></span>&#123;</span><br><span class="line">    rw-&gt;readers = <span class="number">0</span>;</span><br><span class="line">    sem_init(&amp;rw-&gt;lock, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    sem_init(&amp;rw-&gt;writelock, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rwlock_acquire_readlock</span><span class="params">(<span class="keyword">rwlock_t</span> *rw)</span></span>&#123;</span><br><span class="line">    sem_wait(&amp;rw-&gt;lock);</span><br><span class="line">    rw-&gt;readers++;</span><br><span class="line">    <span class="keyword">if</span>(rw-&gt;readers == <span class="number">1</span>)</span><br><span class="line">        sem_wait(&amp;rw-&gt;writelock);</span><br><span class="line">    sem_post(&amp;rw-&gt;lock);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rwlock_release_readlock</span><span class="params">(<span class="keyword">rwlock_t</span> *rw)</span></span>&#123;</span><br><span class="line">    sem_wait(&amp;rw-&gt;lock);</span><br><span class="line">    rw-&gt;readers--;</span><br><span class="line">    <span class="keyword">if</span>(rw-&gt;readers == <span class="number">0</span>)</span><br><span class="line">        sem_post(&amp;rw-&gt;writelock);</span><br><span class="line">    sem_post(&amp;rw-&gt;lock);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rwlock_acquire_writelock</span><span class="params">(<span class="keyword">rwlock_t</span> *rw)</span></span>&#123;</span><br><span class="line">    sem_wait(&amp;rw-&gt;writelock);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rwlock_release_writelock</span><span class="params">(<span class="keyword">rwlock_t</span> *rw)</span></span>&#123;</span><br><span class="line">    sem_post(&amp;rw-&gt;writelock);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="dining-philosophers"><a href="#dining-philosophers" class="headerlink" title="dining philosophers"></a>dining philosophers</h4><h2 id="common-problems"><a href="#common-problems" class="headerlink" title="common problems"></a>common problems</h2><ul>
<li>非死锁<ul>
<li>违反原子性</li>
<li>违反顺序性(状态量)</li>
</ul>
</li>
<li>死锁<ul>
<li>mutual exclusion<ul>
<li>atomic operation</li>
</ul>
</li>
<li>hold and wait<ul>
<li>acquiring all locks at once, atomically</li>
</ul>
</li>
<li>no preemption<ul>
<li>repeat trying</li>
</ul>
</li>
<li>circular wait<ul>
<li>always acquiring l1 before l2</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="基于事件的并发"><a href="#基于事件的并发" class="headerlink" title="基于事件的并发"></a>基于事件的并发</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">select</span> <span class="params">(<span class="keyword">int</span> nfds, <span class="comment">//number of file descriptions</span></span></span></span><br><span class="line"><span class="function"><span class="params">            fd_set *<span class="keyword">restrict</span> readfds,</span></span></span><br><span class="line"><span class="function"><span class="params">            fd_set *<span class="keyword">restrict</span> writefds,</span></span></span><br><span class="line"><span class="function"><span class="params">            fd_set *<span class="keyword">restrict</span> errorfds,</span></span></span><br><span class="line"><span class="function"><span class="params">            struct timeval *<span class="keyword">restrict</span> timeout)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">    fd_set readFDs;</span><br><span class="line">    FD_ZERO(&amp;readFDs);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> fd;</span><br><span class="line">    <span class="keyword">for</span>(fd=minFD; fd&lt;maxFD; fd++)</span><br><span class="line">      FD_SET(fd, &amp;readFDs);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> rc = select(maxFD+<span class="number">1</span>, &amp;readFDs, null, null, null);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> fd;</span><br><span class="line">    <span class="keyword">for</span>(fd=minFD; fd&lt;maxFD; fd++)</span><br><span class="line">      <span class="keyword">if</span>(FD_ISSET(fd, &amp;readFDs))</span><br><span class="line">        processFD(fd);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="异步-io-asynchronous-io"><a href="#异步-io-asynchronous-io" class="headerlink" title="异步 io(asynchronous io)"></a>异步 io(asynchronous io)</h3><p>AIO control block</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">aiocb</span> &#123;</span> </span><br><span class="line">  <span class="keyword">int</span> aio_fildes; <span class="comment">/* File descriptor */</span> </span><br><span class="line">  <span class="keyword">off_t</span> aio_offset; <span class="comment">/* File offset */</span> </span><br><span class="line">  <span class="keyword">volatile</span> <span class="keyword">void</span> * aio_buf； <span class="comment">/* Location of buffer */</span> </span><br><span class="line">  <span class="keyword">size_t</span> aio_nbytes; <span class="comment">/* Length of transfer */</span> &#125;;</span><br></pre></td></tr></table></figure>



<h1 id="persistence"><a href="#persistence" class="headerlink" title="persistence"></a>persistence</h1><p>##IO device</p>
<p>register: status, command, data</p>
<p>PIO: programmed io(main cpu is involved in data movement)</p>
<p>use interrupt to avoid spin(device fast: poll, device slow: interrupt)</p>
<h3 id="DMA-direct-memory-access"><a href="#DMA-direct-memory-access" class="headerlink" title="DMA(direct memory access)"></a>DMA(direct memory access)</h3><h3 id="device-communication"><a href="#device-communication" class="headerlink" title="device communication"></a>device communication</h3><p>IO instruction</p>
<p>memory mapped io</p>
<h3 id="device-driver"><a href="#device-driver" class="headerlink" title="device driver"></a>device driver</h3><h2 id="hard-disk-drives"><a href="#hard-disk-drives" class="headerlink" title="hard disk drives"></a>hard disk drives</h2><h3 id="interface"><a href="#interface" class="headerlink" title="interface"></a>interface</h3><p>platter 硬盘的一个面</p>
<p>spindle 旋转中心RPM(rotations per minute 7200-15000)</p>
<p>track 一个圈</p>
<p>sector track 的一部分(扇形)512B </p>
<p>disk arm disk head 读写探针, one per surface</p>
<h3 id="how-to-io"><a href="#how-to-io" class="headerlink" title="how to io"></a>how to io</h3><ol>
<li>move to track (seek time)</li>
<li>move to sector(rotational delay)</li>
</ol>
<p>track buffer(cache)</p>
<h4 id="when-writing"><a href="#when-writing" class="headerlink" title="when writing"></a>when writing</h4><ul>
<li>write back caching</li>
<li>write through</li>
</ul>
<h3 id="disk-scheduling"><a href="#disk-scheduling" class="headerlink" title="disk scheduling"></a>disk scheduling</h3><ul>
<li><p>SSTF(shortest seek time first)</p>
</li>
<li><p>elevator(scan)</p>
<ul>
<li>F-SCAN, freezed queue when doing a sweep</li>
<li>C-SCAN, circular scan, the algorithm sweeps from outer-to-inner, and then inner-to-outer, etc</li>
</ul>
</li>
<li><p>SPTF(shortest positioning time first, SATF, shortest access time first)</p>
</li>
</ul>
<h2 id="RAIDs-redundant-arrays-of-inexpensive-disks"><a href="#RAIDs-redundant-arrays-of-inexpensive-disks" class="headerlink" title="RAIDs(redundant arrays of inexpensive disks)"></a>RAIDs(redundant arrays of inexpensive disks)</h2><p>指标: capacity, reliability, performance</p>
<h3 id="raids-0-striping"><a href="#raids-0-striping" class="headerlink" title="raids 0: striping"></a>raids 0: striping</h3><p>无备份, 全平行</p>
<p>sequencial read NS</p>
<p>sequencial write NS</p>
<p>random read NR</p>
<p>random wirte NR</p>
<p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h6c7p2fje4j20qy070wf0.jpg" alt="截屏2022-09-19 20.59.36"></p>
<h3 id="raids-1-mirroring"><a href="#raids-1-mirroring" class="headerlink" title="raids 1: mirroring"></a>raids 1: mirroring</h3><p>raid10 and raid01</p>
<p>sequencial read NS/2</p>
<p>sequencial write NS/2</p>
<p>random read NR</p>
<p>random wirte NR/2</p>
<img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h6c7reblzgj20ak0h8aau.jpg" alt="截屏2022-09-19 21.01.50" style="zoom:33%;" />

<h2 id="raids4-奇偶校验"><a href="#raids4-奇偶校验" class="headerlink" title="raids4 奇偶校验"></a>raids4 奇偶校验</h2><p>sequencial read S(N-1)</p>
<p>sequencial write S(N-1)</p>
<p>random read R(N-1)</p>
<p>random wirte R/2</p>
<p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h6c7yphl70j20ie06q3yo.jpg" alt="截屏2022-09-19 21.08.52"></p>
<h2 id="raid-5-循环奇偶校验"><a href="#raid-5-循环奇偶校验" class="headerlink" title="raid 5 循环奇偶校验"></a>raid 5 循环奇偶校验</h2><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h6c80ryadrj20jo07uglv.jpg" alt="截屏2022-09-19 21.10.54"></p>
<p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h6c813n1ogj20ya0dm408.jpg" alt="截屏2022-09-19 21.11.12"></p>
<h2 id="file-and-directories"><a href="#file-and-directories" class="headerlink" title="file and directories"></a>file and directories</h2><p>inode number –&gt; low-level name</p>
<p>file descripter</p>
<p>standard input, output, error</p>
<h3 id="link"><a href="#link" class="headerlink" title="link"></a>link</h3><h4 id="hard-link"><a href="#hard-link" class="headerlink" title="hard link"></a>hard link</h4><p>The way link works is that it simply creates another name in the directory you are creating the link to, and refers it to the same inode number</p>
<p>reference count</p>
<p>only file, cannot dir</p>
<p>only existed file</p>
<h4 id="symbolic-link"><a href="#symbolic-link" class="headerlink" title="symbolic link"></a>symbolic link</h4><p>hold path name</p>
<h2 id="file-system"><a href="#file-system" class="headerlink" title="file system"></a>file system</h2><p>block: 4K</p>
<p>inode(index node): 256B</p>
<p>free list</p>
<p>inode bitmap, data bitmap</p>
<p>indirect pointer</p>
]]></content>
  </entry>
  <entry>
    <title>git</title>
    <url>/2019/11/18/git/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="e2606ccd2221491fc5b09553b6a305694f6129f5903fe308b80a657b3ae15a11"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>program</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>effective_cpp读书笔记</title>
    <url>/2022/09/24/effective-cpp%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="3ee4eb7c7de67dfedc8f718657d0ae68831e91706607b6b17df416ba144236a5"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>java</title>
    <url>/2020/01/25/java/</url>
    <content><![CDATA[<h1 id="Java-背景"><a href="#Java-背景" class="headerlink" title="Java 背景"></a>Java 背景</h1><blockquote>
<p>简单介绍java的基础知识</p>
</blockquote>
<span id="more"></span>

<ul>
<li><p>Java SE(Java Platform,Standard Edition)，应该先说这个，因为这个是标准版本。<br>Java EE (Java Platform，Enterprise Edition)，java 的企业版本<br>Java ME(Java Platform，Micro Edition)，java的微型版本, 移动设备和嵌入式</p>
<p>JavaSE 可以开发和部署在桌面、服务器、嵌入式环境和实时环境中使用的 Java 应用程序。是EE，和ME的基础。一般就是指JDK（Java Development Kit<strong>（</strong>JDK）是<a href="https://zh.wikipedia.org/wiki/%E6%98%87%E9%99%BD%E9%9B%BB%E8%85%A6">太阳微系统</a>针对<a href="https://zh.wikipedia.org/wiki/Java">Java</a>开发人员发布的免费<a href="https://zh.wikipedia.org/wiki/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E5%8C%85">软件开发工具包</a>（SDK，Software development kit））。就是Java的基础语法（变量、方法、类之间的调用、关系，继承、接口、线程之类的），工具包（java.util.*  ）,或者其他的一些封装</p>
<p>PS：</p>
<ol>
<li><p>java程序设计语言</p>
</li>
<li><p>JVM java虚拟机</p>
</li>
<li><p>java API类库</p>
</li>
<li><p>辅助工具如javac</p>
<p>1+2+3+4=jdk（java开发的环境），2+3=jre（java运行的环境）</p>
</li>
</ol>
<p>JavaEE，其实是一套规范，就是用java语言做企业开发（目前看来就是开发一些动态网站，或者对外提供调用服务的网站，或者其他没接触过的。。。）中的一整套规范，比如类怎么封装，网页的请求要用什么方法处理，语言编码一类的处理，拦截器啊什么的定义，请求返回得有什么信息。。。（具体看servlet的接口就知道了）<br>比如：tomcat就是按照这套规范开发的容器软件，还有什么weblogic，JBoss、Resin等等<br>正因为我们开发网站（使用JSP，Servelet。。或者封装了这些的框架：SSH。。。）可以放在tomcat，也可以放在JBoss。。。。，因为都是按照一个规范开发的东西，实际使用的还是JavaSE的那些东西，多出来的就是EE的一些规范类的封装代码。</p>
<p>JavaME 是微型版本，顾名思义，使用在手机啊，小设备啊上面的Java版本，特点就是小，相比JavaSE精简了很大一部分东西，（增加了一些小设备上的专有API，？？？这个不是很确定），<br>我在2009年培训的时候，这个还写过游戏，还用在移动啊什么的开发上，可是后来你们应该知道了。。。安卓时代来临了。</p>
<p>安卓中既然用的是Java，那么Java的语法应该都是适用的。所以SE是核心基础。其他的都是使用方法方式不同。</p>
<p>文件名必须与公共的类名一致，文件后缀为.java<br>如果有多个类，且没有public类，文件名可与任一类名相同<br>一个JAVA源文件最多只能有一个public类<br>如果一个Java源文件包含多个class，那么编译后会产生多个.class文件</p>
</li>
</ul>
<h1 id="java基础"><a href="#java基础" class="headerlink" title="java基础"></a>java基础</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><ul>
<li><p>工具</p>
<p>javac 编译, java 运行, jdb 调试</p>
</li>
<li><p>版本</p>
<p>java SE 桌面, java EE 服务器, java ME 嵌入式移动设备</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">xxx</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    ......;</span><br><span class="line">    <span class="keyword">int</span>[] array = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">7</span>];<span class="comment">//数组定义</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">double</span> value : myList) &#123;</span><br><span class="line">    	sum += value;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>JVM</p>
<p>java源码编译后生成.class 文件, 由字节码构成</p>
</li>
<li><p>源文件.java -&gt; 编译后.class</p>
</li>
<li><p>栈: 方法调用和局部变量</p>
</li>
<li><p>堆: 所有的对象</p>
</li>
<li><p>i/o</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="comment">//构造函数Scanner的参数类型也可为java.io.File</span></span><br><span class="line"><span class="comment">//这是Scanner就从文件而不是标准输入流读取数据</span></span><br><span class="line"><span class="keyword">double</span> d = scanner.nextDouble( ); </span><br><span class="line">方法：</span><br><span class="line">    nextByte( )、nextShort( )、nextInt( )</span><br><span class="line">    nextLong( )、nextFloat( )、nextDouble( )</span><br><span class="line">    next( ) 读入一个字符串</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>标识符: 标识符是由字母、数字、下划线(_)、美元符号($)组成的字符序列, 标识符必须以字母、下划线(_)、美元符号($)开头。不能以数字开头。</p>
</li>
</ul>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ul>
<li><p>整数: byte 8, short 16, int 32, long 64</p>
</li>
<li><p>小数: float 32, double 64</p>
</li>
<li><p>boolean 未明确定义, char 16</p>
</li>
<li><p>数组也是对象</p>
</li>
<li><p>主数据包装</p>
<p>Boolean Character Byte Short Integer Long Float Double</p>
<p><code>Integer wrap = new Integer(i);</code></p>
<p><code>int unwrap = wrap.intValue();</code></p>
<p><code>int x = Integer.parseInt(&quot;2&quot;);</code></p>
</li>
<li><p>默认int double, 比如<code>char c = (char)12;</code> 必须强制类型转换</p>
</li>
<li><p>1e2 是double类型, 1e2f是float类型</p>
</li>
<li><p>switch(exp), exp结果只呢个为byte, char, short, int , enum 等不大于int的类型</p>
</li>
<li><p>bool-exp ? exp-true : exp-false</p>
</li>
<li><p>ASCII : \u0041 \u后面必须是4位16进制数</p>
</li>
</ul>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ul>
<li>对象作为参数, 传入的是对象(指针)的拷贝</li>
<li>实例变量(类中声明)不定义会有初始值(0, null), 局部变量不会有, 编译会报错</li>
<li>对象比较: == 是否指向同一对象, .equals() 完全相等</li>
</ul>
<h2 id="实用类"><a href="#实用类" class="headerlink" title="实用类"></a>实用类</h2><h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><p><code>ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;();</code></p>
<p>不能使用[]</p>
<p>如何引入 ArrayList?</p>
<ol>
<li><code>import java.util.ArrayList;</code></li>
<li><code>java.util.ArrayList&lt;String&gt; list = new java.util.ArrayList&lt;String&gt;()</code></li>
</ol>
<h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><table>
<thead>
<tr>
<th><strong>访问权限</strong></th>
<th><strong>本类</strong></th>
<th><strong>本包</strong></th>
<th><strong>子类</strong></th>
<th><strong>它包</strong></th>
</tr>
</thead>
<tbody><tr>
<td>public</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>protected</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td>X</td>
</tr>
<tr>
<td>包级(默认)</td>
<td>√</td>
<td>√</td>
<td>X</td>
<td>X</td>
</tr>
<tr>
<td>private</td>
<td>√</td>
<td>X</td>
<td>X</td>
<td>X</td>
</tr>
</tbody></table>
<p>所有类都继承自Object, Object 不是抽象类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//object 方法</span></span><br><span class="line">equals();</span><br><span class="line">getClass();</span><br><span class="line">hashCode(); <span class="comment">//唯一 id</span></span><br><span class="line">toString();</span><br></pre></td></tr></table></figure>

<p><code>public class classson extends classfather&#123;&#125;</code></p>
<p>调用父类方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">super</span>.method();</span><br><span class="line">  ...;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>权限:</p>
<p>public 会被继承, private 不会被继承</p>
</li>
<li><p>final 修饰方法: 不可被覆盖</p>
</li>
<li><p>覆盖 override: 参数一样, 返回类型一样或者是之前返回类型的子类, 权限需要更开放(public 不能覆盖成 private)</p>
</li>
<li><p>重载 overload: 参数不一样, 返回可以不一样, 但不能只改变返回类型, 权限任意改变</p>
</li>
<li><p>覆盖特性：一旦父类中的实例方法被子类覆盖，同时用父类型的引用变量引用了子类对象，这时不能通过这个父类型引用变量去访问被覆盖的父类方法(即这时被覆盖的父类方法不可再被发现)。因为实例方法具有多态性（晚期绑定）</p>
<p>在子类类体函数中可以使用super调用被覆盖的父类方法。</p>
<p>˜隐藏特性：指父类的变量（实例变量、静态变量）和静态方法在子类被重新定义，但由于类的变量和静态方法没有多态性，因此通过父类型引用变量访问的一定是父类变量、静态方法(即被隐藏的可再发现)。</p>
</li>
<li><p>根据引用判断还是根据确实类型判断?</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;father&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Son son = <span class="keyword">new</span> Son();</span><br><span class="line">        Father father = son;</span><br><span class="line">        son.m();</span><br><span class="line">        father.m();</span><br><span class="line">        <span class="comment">//father.m_only(); 无法通过编译</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;son&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m_only</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;son only&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出: son son</p>
</li>
<li><p>强制类型转换:  <code>Dog d = (Dog)o;</code><br>检查是否可以转换: <code>if(o isstanceof Dog)</code></p>
</li>
<li><p>不支持多重继承, 请使用接口</p>
</li>
</ul>
<h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>父类引用 = 子类对象</p>
<p>那么我们可以根据以上情况总结出多态成员访问的特点：<br><strong>成员变量</strong><br>编译看左边(父类),运行看左边(父类)<br><strong>成员方法</strong><br>编译看左边(父类)，运行看右边(子类)。动态绑定<br><strong>静态方法</strong><br>编译看左边(父类)，运行看左边(父类)。<br>(静态和类相关，算不上重写，所以，访问还是左边的)<br><strong>只有非静态的成员方法,编译看左边,运行看右边</strong></p>
<p><strong>不能使用子类特有的成员属性和子类特有的成员方法。</strong></p>
<p>因此一旦引用变量o指向了B类型对象（A o = new B()），<br>o.m()调用的永远是B的m，再也无法通过o调用A的m，哪怕强制转换都不行:((A)o).m();调用的还是B的m</p>
<h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><p><code>abstract public class abclass&#123;&#125;</code> 必须被继承</p>
<ul>
<li>抽象方法: <code>public abstract void func();</code> 不可以在非抽象类中声明抽象方法, 必须被<strong>覆盖</strong>, 函数体为空</li>
</ul>
<h3 id="接口-interface"><a href="#接口-interface" class="headerlink" title="接口 interface"></a>接口 interface</h3><p><code>public class sonClass extends fatherClass implements interfaceClass1, interfaceClass2</code></p>
<p>纯的抽象类</p>
<p>继承接口以后必须要实现接口的抽象方法</p>
<p>接口中的所有数据字段隐含为public static final</p>
<p>接口体中的所有方法隐含为public abstract</p>
<p>一个接口可以继承多个接口</p>
<p>eg. Comparable 接口, 实现public int compareTo(Object o);</p>
<h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>新建数组不会实例化数组内容</p>
<p>只有在没有任何构造函数时, 编译器才会自动生成无参构造函数</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gpvddcdaxyj311k0f4wun.jpg" alt="截屏2021-04-25 上午1.56.01"></p>
<p>父类的构造函数必须在子类之前完成</p>
<p>调用父类构造函数<code>super();</code>, 且必须为第一个语句<br>调用其他本身的构造函数<code>this();</code>, 且必须为第一个语句<br>但不能同时调用</p>
<h3 id="初始化块"><a href="#初始化块" class="headerlink" title="初始化块"></a>初始化块</h3><p>•初始化块是Java类中可以出现的第四种成员（前三种包括属性、方法、构造函数），分为实例初始化块和静态初始化块。</p>
<p>•实例初始化模块（instance initialization block，IIB）是一个用大括号括住的语句块，直接嵌套于类体中，不在方法内。</p>
<p>•它的作用就像把它放在了类中每个构造方法的最开始位置。用于初始化对象。<strong>实例初始化块先于构造函数执行</strong></p>
<p>•作用：如果多个构造方法共享一段代码，并且每个构造方法不会调用其他构造方法，那么可以把这段公共代码放在初始化模块中。</p>
<p>•一个类可以有多个初始化模块，模块按照在类中出现的顺序执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> numOfObjects;</span><br><span class="line">  <span class="keyword">private</span> String title</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">(String title)</span></span>&#123;</span><br><span class="line">    numOfObjects++;</span><br><span class="line">    <span class="keyword">this</span>.title = title;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">    numOfObjects++;</span><br><span class="line">    <span class="keyword">this</span>.id = id</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> numOfObjects;</span><br><span class="line">  <span class="keyword">private</span> String title</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">(String title)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.title = title;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.id = id</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  &#123;</span><br><span class="line">    numOfObjects++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行次序</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> id = <span class="number">0</span>;		<span class="comment">//执行次序：1</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;		<span class="comment">//执行次序：4</span></span><br><span class="line">    <span class="keyword">this</span>.id = id		</span><br><span class="line">  &#125;</span><br><span class="line">  &#123;</span><br><span class="line">     <span class="comment">//实例初始化块			//执行次序：2</span></span><br><span class="line">  &#125;</span><br><span class="line">  &#123;</span><br><span class="line">     <span class="comment">//实例初始化块			//执行次序：3</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> id = <span class="number">0</span>;	<span class="comment">//执行次序：1</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">	 <span class="keyword">this</span>.id = id 		    		</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line">     <span class="comment">//静态初始化块			//执行次序：2</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line">     <span class="comment">//静态初始化块			//执行次序：3</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="super"><a href="#super" class="headerlink" title="super"></a>super</h3><p>super不能用于静态上下文（即静态方法和静态初始化块里不能使用super），this也不能用于静态上下文</p>
<p>super.data（如果父类属性在子类可访问）</p>
<p>super.method(parameters)（如果父类方法在子类可访问）</p>
<p>不能使用super.super.p()这样的super链</p>
<p>如果子类中没有显式地调用父类的构造函数，那么将自动调用父类不带参数的构造函数，因为编译器会偷偷地在子类构造函数第一条语句前加上super() ；</p>
<h3 id="final"><a href="#final" class="headerlink" title="final"></a>final</h3><p>final 变量: 不能被改变</p>
<p>final 方法: 不能被覆盖</p>
<p>final class: 不能被继承</p>
<h3 id="静态"><a href="#静态" class="headerlink" title="静态"></a>静态</h3><p><code>Math.abs();</code></p>
<p>静态方法无法调用非静态变量, 不能调用非静态方法</p>
<p>静态变量: 每个类一个</p>
<p>静态变量会在该类任何对象初始化前初始化<br>静态变量会在该类任何静态方法执行前就初始化</p>
<p>常量 = final + static 必须初始化</p>
<h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">  MyClass a = <span class="keyword">new</span> MyClass();</span><br><span class="line">  ...</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>抛出的异常数量要与 catch 相匹配</p>
<p>catch 从小到大</p>
<h2 id="i-o"><a href="#i-o" class="headerlink" title="i/o"></a>i/o</h2><h3 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h3><p>Serializable 接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ObjectOutputStream os = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;filename&quot;</span>));</span><br><span class="line">os.writeObject(...);</span><br><span class="line">os.close();</span><br></pre></td></tr></table></figure>

<p>跳过序列化: transient</p>
<h3 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Son</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FileWriter writer = <span class="keyword">new</span> FileWriter(<span class="string">&quot;filename&quot;</span>);</span><br><span class="line">            writer.write(<span class="string">&quot;str&quot;</span>);</span><br><span class="line">            writer.close();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><ol>
<li>实现 Runnable 类</li>
<li><code>Thread thread = new Thread(runnable);</code></li>
<li><code>thread.start();</code></li>
</ol>
<p>Runnable 类<br><code>public void run()&#123;...&#125;</code></p>
<p><code>synchronized</code> 修饰方法, 只能被单一线程存取</p>
<h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySocketDemo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Socket socket = <span class="keyword">new</span> Socket(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8899</span>);</span><br><span class="line">        </span><br><span class="line">        InputStreamReader stream = <span class="keyword">new</span> InputStreamReader(socket.getInputStream());</span><br><span class="line">        BufferedReader reader = <span class="keyword">new</span> BufferedReader(stream);</span><br><span class="line">        String msg = reader.readLine();</span><br><span class="line">        </span><br><span class="line">        PrintWriter writer = <span class="keyword">new</span> PrintWriter(socket.getOutputStream());</span><br><span class="line">        writer.println(<span class="string">&quot;msg&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        ServerSocket sever = <span class="keyword">new</span> ServerSocket(<span class="number">8899</span>);</span><br><span class="line">        Socket severSocket = sever.accept();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><h3 id="Collections"><a href="#Collections" class="headerlink" title="Collections"></a>Collections</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ToBeCompared</span></span>&#123;</span><br><span class="line">  ArrayList&lt;Song&gt; songList = <span class="keyword">new</span> ArrayList&lt;Song&gt;();</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Comparer</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Song</span>&gt;</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Song one, Song two)</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> one.xxxx/compareTo(two.xxx);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">go</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Comparer com = <span class="keyword">new</span> Comparer();</span><br><span class="line">    Collections.sort(songList, com);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>Class&lt;? extends Person&gt; clz2;</code><br>引用clz2可以指向Person及其子类的类型信息</p>
<h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><p>JAR: java archive</p>
<p><code>java -jar xxx.jar</code></p>
<h1 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h1><ul>
<li><p>Math.random()生成 0-1 的值</p>
</li>
<li><p>数字格式化 <code>String s = String.format(&quot;%,.2f aha&quot;, 492.23);</code></p>
</li>
<li><p>package就是cpp中的namespace<br>package语句必须出现在.java文件第一行，前面不能有注释行也不能有空白行，该.java文件里定义的所有内容（类、接口、枚举）都属于package所定义的包里。如果.java文件第一行没有package语句，则该文件定义的所有内容位于default包（缺省名字空间），但不推荐。</p>
</li>
<li><p>hashcode <a href="https://zhuanlan.zhihu.com/p/78249480">https://zhuanlan.zhihu.com/p/78249480</a></p>
</li>
<li><p>数组长度为length而不是length()</p>
</li>
<li></li>
</ul>
]]></content>
      <categories>
        <category>language</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>markdown</title>
    <url>/2019/11/18/markdown/</url>
    <content><![CDATA[<p>链接格式：[显示文字](网址)</p>
<p>页内跳转</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[你是谁](#傻狍子)</span><br><span class="line">### 傻狍子</span><br><span class="line"></span><br><span class="line">&lt;a href&#x3D;&quot;#233&quot;&gt;我想笑&lt;&#x2F;a&gt;</span><br><span class="line">&lt;span name &#x3D; &quot;233&quot;&gt;233&lt;&#x2F;span&gt;</span><br></pre></td></tr></table></figure>



<p>不要用base64！！！！</p>
<p>上标&lt;sup&gt;&lt;/sup&gt;</p>
<p>下标&lt;sub&gt;&lt;/sub&gt;</p>
<p>简单地 <sub> 格式化 </sub></p>
<span id="more"></span>

<p><img src="https://cdn.sspai.com/2019/05/24/89bba4dfdfb49b8d3c129ce1157a54b1.png" alt="img"></p>
<p>表格:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">| 左对齐 | 右对齐 | 居中对齐 |</span><br><span class="line">| :-----| ----: | :----: |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br></pre></td></tr></table></figure>

<p>流程图:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">st&#x3D;&gt;start: start</span><br><span class="line">op&#x3D;&gt;operation: operation</span><br><span class="line">cd&#x3D;&gt;condition: yes or no</span><br><span class="line">e&#x3D;&gt;end: end</span><br><span class="line">st-&gt;op-&gt;cd</span><br><span class="line">cd(yes)-&gt;e</span><br><span class="line">cd(no)-&gt;op</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">st&#x3D;&gt;start: start</span><br><span class="line">op&#x3D;&gt;operation: operation</span><br><span class="line">cd&#x3D;&gt;condition: yes or no</span><br><span class="line">e&#x3D;&gt;end: end</span><br><span class="line">st-&gt;op-&gt;cd</span><br><span class="line">cd(yes)-&gt;e</span><br><span class="line">cd(no)-&gt;op</span><br></pre></td></tr></table></figure>

<p><a href="https://www.jianshu.com/p/1ce5772560c1">语法1</a></p>
<p><a href="https://www.cnblogs.com/hongdada/p/9776547.html#%E4%B8%8B%E6%A0%87">语法 2</a></p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gjnxhtcc77j30i20b4mz9.jpg" alt="image-20201013192453713"></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">&quot;黑体&quot;</span>&gt;</span></span>我是黑体字<span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">&quot;微软雅黑&quot;</span>&gt;</span></span>我是微软雅黑<span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">&quot;STCAIYUN&quot;</span>&gt;</span></span>我是华文彩云<span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">red</span>&gt;</span></span>我是红色<span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">#008000</span>&gt;</span></span>我是绿色<span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">Blue</span>&gt;</span></span>我是蓝色<span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span>=<span class="string">5</span>&gt;</span></span>我是尺寸<span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">&quot;黑体&quot;</span> <span class="attr">color</span>=<span class="string">green</span> <span class="attr">size</span>=<span class="string">5</span>&gt;</span></span>我是黑体，绿色，尺寸为5<span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p><font face="黑体">我是黑体字</font><br><font face="微软雅黑">我是微软雅黑</font><br><font face="STCAIYUN">我是华文彩云</font><br><font color=red>我是红色</font><br><font color=#008000>我是绿色</font><br><font color=Blue>我是蓝色</font><br><font size=5>我是尺寸</font><br><font face="黑体" color=green size=5>我是黑体，绿色，尺寸为5</font></p>
<p>绘图</p>
<p><a href="https://blog.csdn.net/lis_12/article/details/80693975">https://blog.csdn.net/lis_12/article/details/80693975</a></p>
]]></content>
      <categories>
        <category>language</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>qt</title>
    <url>/2021/04/24/qt/</url>
    <content><![CDATA[<blockquote>
<p>qt 入门教程</p>
</blockquote>
<span id="more"></span>

<h1 id="Qt-入门"><a href="#Qt-入门" class="headerlink" title="Qt 入门"></a>Qt 入门</h1><h2 id="what-is-Qt"><a href="#what-is-Qt" class="headerlink" title="what is Qt"></a>what is Qt</h2><p>Qt是一个1991年由Qt Company开发的跨平台C++图形用户界面应用程序开发框架。它既可以开发GUI程序，也可用于开发非GUI程序，比如控制台工具和服务器。Qt是面向对象的框架，使用特殊的代码生成扩展（称为元对象编译器(Meta Object Compiler, moc)）以及一些宏，Qt很容易扩展，并且允许真正地组件编程。基本上，Qt 同X Window上的 Motif，Openwin，GTK 等图形界 面库和 Windows 平台上的MFC，OWL，VCL，ATL 是同类型的东西。</p>
<h2 id="how-to-use-Qt"><a href="#how-to-use-Qt" class="headerlink" title="how to use Qt"></a>how to use Qt</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><a href="qt.io">Qt 官网</a></p>
<p>在 Qt 官网<a href="https://www.qt.io/download">下载</a> Qt 及其 IDE QtCreator</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpv2g5txzij30uu0b2gnm.jpg" alt="截屏2021-04-24 下午7.38.05"></p>
<p>用 MaintenanceTool 下载对应版本和额外的组件.</p>
<p>用 QtCreator 进行开发</p>
<h2 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h2><p>进入 QtCreator 后新建项目可以看到以下选项</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpv2lgzoqtj30vk0dg402.jpg" alt="截屏2021-04-24 下午7.43.14"></p>
<p>Qt Widgets Application 是新建窗口项目</p>
<p>Qt Console Application 是新建命令行项目</p>
<p>下面以窗口项目进行演示</p>
<h3 id="窗口项目"><a href="#窗口项目" class="headerlink" title="窗口项目"></a>窗口项目</h3><h4 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h4><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpv2pcvrpsj30dg0a6q3t.jpg" alt="截屏2021-04-24 下午7.46.59"></p>
<p>下面依次介绍一个 Qt 项目的目录</p>
<ul>
<li><p>.pro</p>
<p><code>QT       += core gui</code> 等是代表模块的加载, 如果需要新的模块比如编写 socket 网络内容需要添加如<code>QT       += network</code></p>
<p>之后的目录代码如<code>SOURCES +=     main.cpp mainwindow.cpp</code>是项目文件配置, 一般是自动补充的.</p>
</li>
<li><p>Headers/</p>
<p>保存项目头文件(.h)</p>
</li>
<li><p>Sources/</p>
<p>保存项目文件(.cpp)</p>
</li>
<li><p>Forms/</p>
<p>设计界面</p>
</li>
<li><p>Other/</p>
<p>其他文件</p>
</li>
</ul>
<p>代码主要保存在 Sources 和 Headers 文件夹中, ui 设计在 Forms 文件夹中</p>
<h4 id="main-文件与类"><a href="#main-文件与类" class="headerlink" title="main 文件与类"></a>main 文件与类</h4><p>main.cpp </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;mainwindow.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QApplication&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">QApplication <span class="title">a</span><span class="params">(argc, argv)</span></span>;<span class="comment">//新应用</span></span><br><span class="line">    MainWindow w;              <span class="comment">//新窗口</span></span><br><span class="line">    w.<span class="built_in">show</span>();                  <span class="comment">//窗口显示</span></span><br><span class="line">    <span class="keyword">return</span> a.<span class="built_in">exec</span>();           <span class="comment">//应用执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>mainwindow.h</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MAINWINDOW_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAINWINDOW_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QMainWindow&gt;</span></span></span><br><span class="line"></span><br><span class="line">QT_BEGIN_NAMESPACE</span><br><span class="line"><span class="keyword">namespace</span> Ui &#123; <span class="class"><span class="keyword">class</span> <span class="title">MainWindow</span>;</span> &#125;</span><br><span class="line">QT_END_NAMESPACE</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainWindow</span> :</span> <span class="keyword">public</span> QMainWindow</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line">    <span class="comment">//继承 QObject 类的宏, 在 Qt 中, 所有组件都继承 QObject 类</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MainWindow</span>(QWidget *parent = <span class="literal">nullptr</span>);</span><br><span class="line">    <span class="comment">//构造函数</span></span><br><span class="line">    ~<span class="built_in">MainWindow</span>();</span><br><span class="line">  	<span class="comment">//析构函数</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    Ui::MainWindow *ui;</span><br><span class="line">  	<span class="comment">//ui 对象指针</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// MAINWINDOW_H</span></span></span><br></pre></td></tr></table></figure>

<p>mainwindow.cpp</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;mainwindow.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;ui_mainwindow.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">MainWindow::<span class="built_in">MainWindow</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QMainWindow</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::MainWindow)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">//建立 ui</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MainWindow::~<span class="built_in">MainWindow</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="按钮实例"><a href="#按钮实例" class="headerlink" title="按钮实例"></a>按钮实例</h4><p>下面演示实现一个按钮功能</p>
<ol>
<li><p>在 mainwindow.ui 中拖入 qpushbutton, 在右侧属性栏可以对组件属性进行编辑(比如文字, 大小等)<br><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpv38m0izgj30rm0dojsw.jpg" alt="截屏2021-04-24 下午8.05.27"></p>
</li>
<li><p>如果要对 button 实现点击功能, 可以右键按钮-&gt;转到槽-&gt;clicked(), 就会添加对应的槽函数(可以理解为点击后执行的函数)<br>具体实现机理请查阅 “<strong>Qt 信号与槽</strong>“</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MainWindow::on_pushButton_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>如果要用代码实现对这个按钮进行操作, 比如设置显示文字, 可以参考如下代码</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MainWindow::on_pushButton_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ui-&gt;pushButton-&gt;<span class="built_in">setText</span>(<span class="string">&quot;text&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这个例子是为了说明, 如果要访问这个按钮需要使用 ui 指针</span></span><br><span class="line"><span class="comment">//注意有的时候 ui-&gt;后可能没有对应组件, 一般是新组件未加载, 可以编译一边来解决</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p>以上就是基本的 Qt 使用方式.</p>
]]></content>
      <categories>
        <category>language</category>
      </categories>
      <tags>
        <tag>qt</tag>
      </tags>
  </entry>
  <entry>
    <title>cpp 从入门到汇编</title>
    <url>/2022/01/12/cpp/</url>
    <content><![CDATA[<blockquote>
<p>简介: cpp 简要指北</p>
</blockquote>
<ul>
<li><p>mac 下的 c++ 头文件位置 /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX xx.xx.sdk/usr/include/c++</p>
<span id="more"></span></li>
</ul>
<h1 id="inline"><a href="#inline" class="headerlink" title="inline"></a>inline</h1><p>When the program executes the function call instruction the <strong>CPU stores the memory address of the instruction following the function call, copies the arguments of the function on the stack and finally transfers control to the specified function</strong>. The CPU then <strong>executes the function code, stores the function return value in a predefined memory location/register and returns control to the calling function</strong>.  This overhead occurs for small functions because execution time of small function is less than the switching time.</p>
<p>Inline function is a function that <strong>is expanded in line when it is called.</strong> When the inline function is called whole code of the inline function gets inserted or substituted at the point of inline function call. This substitution is performed by the <strong>C++ compiler at compile time.</strong> Inline function may increase efficiency if it is small.<br>The syntax for defining the function inline is:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">inline return-type function-name(parameters)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; function code</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<p>Remember, inlining is only a request to the compiler, not a command. Compiler can ignore the request for inlining. <strong>Compiler may not perform inlining</strong> in such circumstances like:<br>\1) If a function contains a loop. (for, while, do-while)<br>\2) If a function contains static variables.<br>\3) If a function is recursive.<br>\4) If a function return type is other than void, and the return statement doesn’t exist in function body.<br>\5) If a function contains switch or goto statement.</p>
<p><strong>Inline functions provide following advantages:</strong><br>\1) Function call overhead doesn’t occur.<br>\2) It also saves the overhead of push/pop variables on the stack when function is called.<br>\3) It also saves overhead of a return call from a function.<br>\4) When you inline a function, you may enable compiler to perform context specific optimization on the body of function. Such optimizations are not possible for normal function calls. Other optimizations can be obtained by considering the flows of calling context and the called context.<br>\5) Inline function may be useful (if it is small) for embedded systems because inline can yield less code than the function call preamble and return.</p>
<p><strong>Inline function disadvantages:</strong><br>\1) The <strong>added variables from the inlined function consumes additional registers</strong>, After in-lining function if variables number which are going to use register increases than they may create overhead on register variable resource utilization. This means that when inline function body is substituted at the point of function call, total number of variables used by the function also gets inserted. So the number of register going to be used for the variables will also get increased. So if after function inlining variable numbers increase drastically then it would surely cause an overhead on register utilization.</p>
<p>\2) If you use too many inline functions then the size of the binary executable file will be large, because of the <strong>duplication of same code</strong>.</p>
<p>\3) Too much inlining can also reduce your <strong>instruction cache hit rate</strong>, thus reducing the speed of instruction fetch from that of cache memory to that of primary memory.</p>
<p>\4) Inline function may increase <strong>compile time</strong> overhead if someone changes the code inside the inline function then all the calling location has to be recompiled because compiler would require to replace all the code once again to reflect the changes, otherwise it will continue with old functionality.</p>
<p>\5) Inline functions may not be useful for many embedded systems. Because in embedded systems code size is more important than speed.</p>
<p>\6) Inline functions might cause <strong>thrashing内存抖动</strong> because inlining might increase size of the binary executable file. Thrashing in memory causes performance of computer to degrade.</p>
<p><strong>Inline function and classes:</strong><br>It is also possible to define the inline function inside the class. <strong>In fact, all the functions defined inside the class are implicitly inline.</strong> Thus, all the restrictions of inline functions are also applied here. If you need to explicitly declare inline function in the class then just declare the function inside the class and define it outside the class using inline keyword.<br>For example:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">S</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">square</span><span class="params">(<span class="keyword">int</span> s)</span> <span class="comment">// redundant use of inline</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>The above style is considered as a bad programming style. The best programming style is to just write the prototype of function inside the class and specify it as an inline in the function definition.<br>For example:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">S</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">square</span><span class="params">(<span class="keyword">int</span> s)</span></span>; <span class="comment">// declare the function</span></span><br><span class="line">&#125;;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">S::square</span><span class="params">(<span class="keyword">int</span> s)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>What is wrong with macro?</strong></p>
<p>C++ compiler <strong>checks the argument types of inline functions and necessary conversions</strong> are performed correctly. Preprocessor macro is not capable for doing this. One other thing is that the <strong>macros are managed by preprocessor and inline functions are managed by C++ compiler.</strong></p>
<p>Remember: It is true that all the functions defined inside the class are implicitly inline and C++ compiler will perform inline call of these functions, <strong>but C++ compiler cannot perform inlining if the function is virtual</strong>. The reason is call to a <strong>virtual function is resolved at runtime instead of compile time.</strong> Virtual means wait until runtime and inline means during compilation, if the compiler doesn’t know which function will be called, how it can perform inlining?</p>
<h1 id="整形提升-Integer-Promotions"><a href="#整形提升-Integer-Promotions" class="headerlink" title="整形提升 Integer Promotions"></a><a href="https://en.cppreference.com/w/c/language/conversion">整形提升 Integer Promotions</a></h1><p>integer promotion is the implicit conversion of a value of any integer type with <em>rank</em> less or equal to <em>rank</em> of int or of a <a href="https://en.cppreference.com/w/c/language/bit_field">bit field</a> of type _Bool, int, signed int, unsigned int, to the value of type int or unsigned int.</p>
<p>If int can represent the entire range of values of the original type (or the range of values of the original bit field), the value is converted to type int. Otherwise the value is converted to unsigned int.</p>
<p>Integer promotions preserve the value, including the sign:</p>
<h1 id="thread"><a href="#thread" class="headerlink" title="thread"></a><a href="https://zhuanlan.zhihu.com/p/389140084">thread</a></h1><p>本篇主要对<code>C++11</code>中的线程<code>std::thread</code>作全面的梳理和总结，方便以后在工作中参考和使用。</p>
<h2 id="1-std-thread介绍及示例"><a href="#1-std-thread介绍及示例" class="headerlink" title="1.std::thread介绍及示例"></a>1.<code>std::thread</code>介绍及示例</h2><p>首先说明一下，对于以前的编译器， 若要使用<code>C++11</code>的特性，编译时要设定参数如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-std=c++11</span><br></pre></td></tr></table></figure>

<p>这里先写一个简单的线程示例程序。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">thread_one</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">thread_two</span><span class="params">(<span class="keyword">int</span> num, string&amp; str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;num:&quot;</span> &lt;&lt; num &lt;&lt; <span class="string">&quot;,name:&quot;</span> &lt;&lt; str &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">thread <span class="title">tt</span><span class="params">(thread_one)</span></span>;</span><br><span class="line">    tt.<span class="built_in">join</span>();</span><br><span class="line">    string str = <span class="string">&quot;luckin&quot;</span>;</span><br><span class="line">    <span class="function">thread <span class="title">yy</span><span class="params">(thread_two, <span class="number">88</span>, ref(str))</span></span>;   </span><br><span class="line">  	<span class="comment">//这里要注意是以引用的方式调用参数</span></span><br><span class="line">    yy.<span class="built_in">detach</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过代码，我们创建了一个<code>tt</code>线程对象，其参数是函数<code>thread_one</code>，创建完成后被执行，**<code>tt.join()</code>是等待子线程执行完成之后，主线程才继续执行，此时主线程会释放掉执行完成后的子线程的资源**。</p>
<p>对于线程对象<code>yy</code>，我们传入了调用函数的两个参数，这里在线程<code>yy</code>执行时，主线程不想等待子线程，故<strong>使用了<code>yy.detach()</code>将子线程从主线程中分离出来，这样主线程就对子线程没有控制权了，子线程执行完成后会自己释放掉资源</strong>。</p>
<h2 id="2-std-thread重要函数梳理"><a href="#2-std-thread重要函数梳理" class="headerlink" title="2.std::thread重要函数梳理"></a>2.<code>std::thread</code>重要函数梳理</h2><blockquote>
<p>thread() noexcept：默认构造函数，创建一个空的<code>thread</code>执行对象；<br>explicit thread(Fn&amp;&amp;fn, Args&amp;&amp;…args)：初始化构造函数，创建一个带函数调用参数的<code>thread</code>，这个<strong>线程是可<code>joinable</code>的</strong>；<br>thread(const thread&amp;) = delete：拷贝构造函数被禁用，意味着<code>thread</code>对象不可拷贝构造；<br>thread(thread&amp;&amp; x) noexcept：<strong>移动构造函数</strong>，调用成功之后，<code>x</code>不代表任何<code>thread</code>执行对象；</p>
</blockquote>
<p>其构造函数的使用示例如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f1</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;=====Thread:&quot;</span> &lt;&lt; n &lt;&lt; <span class="string">&quot;======&quot;</span> &lt;&lt; endl;</span><br><span class="line">      this_thread::<span class="built_in">sleep_for</span>(chrono::<span class="built_in">microseconds</span>(<span class="number">10</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f2</span><span class="params">(<span class="keyword">int</span>&amp; n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;thread two executing&quot;</span> &lt;&lt; endl;</span><br><span class="line">      ++n;</span><br><span class="line">      this_thread::<span class="built_in">sleep_for</span>(chrono::<span class="built_in">microseconds</span>(<span class="number">10</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">    thread t1;    <span class="comment">//这是一个空的线程对象，还不是一个线程</span></span><br><span class="line">    <span class="function">thread <span class="title">t2</span><span class="params">(f1, n + <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="function">thread <span class="title">t3</span><span class="params">(f2, ref(n))</span></span>;</span><br><span class="line">    <span class="function">thread <span class="title">t4</span><span class="params">(move(t3))</span></span>;    <span class="comment">//t3不再是一个线程</span></span><br><span class="line">    t2.<span class="built_in">join</span>();</span><br><span class="line">    t4.<span class="built_in">join</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;the result n is:&quot;</span> &lt;&lt; n &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-thread中几个重要的成员函数"><a href="#3-thread中几个重要的成员函数" class="headerlink" title="3.thread中几个重要的成员函数"></a>3.<code>thread</code>中几个重要的成员函数</h2><ul>
<li><code>get_id()</code>：获取线程的ID，它将返回一个类型为<code>std::thread::id</code>的对象。</li>
<li><code>joinable()</code>：检查线程是否可被<code>join</code>。</li>
</ul>
<p><strong>对于<code>join</code>这里值得注意</strong>：</p>
<p>在任意一个时间点上，线程是可结合<code>joinable</code>或者可分离<code>detached</code>的。<strong>一个可结合线程是可以被其它线程回收资源和杀死结束的，而对于<code>detached</code>状态的线程，其资源不能被其它线程回收和杀死，只能等待线程结束才能由系统自动释放</strong>。由默认构造函数创建的线程是不能被<code>join</code>的；另外，若某个线程已执行完任务，但是没有被<code>join</code>的话，该线程依然会被认为是一个活动的执行线程，因此是可以被<code>join</code>的。</p>
<ul>
<li><code>detach()</code>：将当前线程对象所代表的执行实例与此线程对象分离，使得线程可以单独执行。</li>
<li><code>swap()</code>：交换两个线程对象所代表的底层句柄，参数是两个线程对象；</li>
<li><code>std::this_thread::getid()</code>：获取当前线程的ID；</li>
<li><code>std::this_thread::yield()</code>：当前线程放弃执行，操作系统调度另一线程继续执行；</li>
<li><code>sleep_until()</code>：线程休眠至某个指定的时刻，才被重新唤醒；</li>
<li><code>sleep_for()</code>： 线程休眠某个指定的时间片，才被重新唤醒；</li>
</ul>
<h2 id="4-thread中的互斥量"><a href="#4-thread中的互斥量" class="headerlink" title="4.thread中的互斥量"></a>4.<code>thread</code>中的互斥量</h2><p>在多个线程同时访问共享资源时，就需要对资源进行加锁互斥访问，<code>thread</code>提供了四种不同的互斥量：</p>
<ul>
<li><strong>独占式互斥量</strong>：<code>std::mutex</code> 。独占工互斥量加解锁是成对的，同一个线程内独占式互斥量在没有解锁的情况下，再次对其加锁是不正确的，会得到一个未定义的行为。</li>
<li><strong>递归式互斥量</strong>：<code>std::recursive_mutex</code>。递归式互斥量是在同一个线程内互斥量没有解锁的情况下可以再次对其加锁，但其加解锁的次数需要保持一致。这种互斥量平时用得比较少。</li>
<li>允许超时的独占式互斥量：<code>std::timed_mutex</code></li>
<li>允许超时的递归式互斥量：<code>std::recursive_timed_mutex</code></li>
</ul>
<p>下面的代码示例了独占式互斥量的用法：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> g_num = <span class="number">0</span>;</span><br><span class="line">mutex g_mutex;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">thread1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    g_mutex.<span class="built_in">lock</span>();</span><br><span class="line">    g_num = <span class="number">50</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i)</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;thread1:&quot;</span> &lt;&lt; g_num &lt;&lt; endl;</span><br><span class="line">    g_mutex.<span class="built_in">unlock</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">thread2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    lock_guard&lt;mutex&gt;<span class="built_in">lg</span>(g_mutex);   <span class="comment">//用这种方式更安全</span></span><br><span class="line">    g_num = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; ++j)</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;thread2:&quot;</span> &lt;&lt; g_num &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">thread <span class="title">t1</span><span class="params">(thread1)</span></span>;</span><br><span class="line">    <span class="function">thread <span class="title">t2</span><span class="params">(thread2)</span></span>;</span><br><span class="line">    t1.<span class="built_in">join</span>();</span><br><span class="line">    t2.<span class="built_in">join</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>若线程1对共享资源的访问时间较长，这时线程2可能等不了那么久，故设定一个超时时间 ，在超时时间内若线程1中的互斥量还没有解锁，线程2就不等了，继续向下执行，这就是允许超时的互斥量。对于允许超时的互斥量，我们需要用<code>unique_lock</code>来包装。</p>
<p>下面代码示例了允许超时的互斥量的用法：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">timed_mutex g_timed_mutex;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">thread1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">unique_lock&lt;timed_mutex&gt; <span class="title">t1</span><span class="params">(g_timed_mutex)</span></span>;</span><br><span class="line">    <span class="built_in">Sleep</span>(<span class="number">200</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;thread1&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">thread2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">unique_lock&lt;timed_mutex&gt; <span class="title">t1</span><span class="params">(g_timed_mutex, chrono::milliseconds(<span class="number">1000</span>))</span></span>;<span class="comment">//设置超时时间为1秒</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;thread2&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">thread <span class="title">t1</span><span class="params">(thread1)</span></span>;</span><br><span class="line">    <span class="built_in">Sleep</span>(<span class="number">100</span>);   <span class="comment">//让线程1先启动</span></span><br><span class="line">    <span class="function">thread <span class="title">t2</span><span class="params">(thread2)</span></span>;</span><br><span class="line">    t1.<span class="built_in">join</span>();</span><br><span class="line">    t2.<span class="built_in">join</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>



<p>本文到此结束！</p>
<h1 id="virtual-function-in-compiling"><a href="#virtual-function-in-compiling" class="headerlink" title="virtual function in compiling"></a><a href="https://stackoverflow.com/questions/3211262/what-does-a-compiled-c-class-look-like">virtual function in compiling</a></h1><blockquote>
<p>three steps:</p>
<p> create vtb, declare vp, assign vp in constructor</p>
</blockquote>
<p>The classes are (more or less) constructed as regular structs. The methods are (more or less…) <strong>converted into functions which first parameter is “this”. References to the class variables are done as an offset to “this”.</strong></p>
<p>As far as inheritance, lets quote from the C++ FAQ LITE, which is mirrored here <a href="http://www.parashift.com/c++-faq-lite/virtual-functions.html#faq-20.4">http://www.parashift.com/c++-faq-lite/virtual-functions.html#faq-20.4</a> . This chapter shows how Virtual functions are called in the real hardware (what does the compile make in machine code.)</p>
<p>Let’s work an example. Suppose class Base has 5 virtual functions: <code>virt0()</code> through <code>virt4()</code>.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Your original C++ source code</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> arbitrary_return_type <span class="title">virt0</span><span class="params">(...arbitrary params...)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> arbitrary_return_type <span class="title">virt1</span><span class="params">(...arbitrary params...)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> arbitrary_return_type <span class="title">virt2</span><span class="params">(...arbitrary params...)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> arbitrary_return_type <span class="title">virt3</span><span class="params">(...arbitrary params...)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> arbitrary_return_type <span class="title">virt4</span><span class="params">(...arbitrary params...)</span></span>;</span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>Step #1</strong>: the compiler builds a <strong>static table containing 5 function-pointers</strong>, burying that table into static memory somewhere. Many (not all) compilers define this table while compiling the .cpp that defines Base’s first non-inline virtual function. We call that table the <strong>v-table</strong>; let’s pretend its technical name is <code>Base::__vtable</code>. If a function pointer fits into one machine word on the target hardware platform, <code>Base::__vtable</code> will end up consuming 5 hidden words of memory. Not 5 per instance, not 5 per function; just 5. It might look something like the following pseudo-code(伪代码):</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Pseudo-code (not C++, not C) for a static table defined within file Base.cpp</span></span><br><span class="line"><span class="comment">// Pretend FunctionPtr is a generic pointer to a generic member function</span></span><br><span class="line"><span class="comment">// (Remember: this is pseudo-code, not C++ code)</span></span><br><span class="line">FunctionPtr Base::__vtable[<span class="number">5</span>] = &#123;</span><br><span class="line">  &amp;Base::virt0, &amp;Base::virt1, &amp;Base::virt2, &amp;Base::virt3, &amp;Base::virt4</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>Step #2</strong>: the compiler adds a <strong>hidden pointer</strong> (typically also a machine-word) to each <strong>object of class Base</strong>. This is called the <strong>v-pointer</strong>. Think of this hidden pointer as a hidden data member, as if the compiler rewrites your class to something like this:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Your original C++ source code</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  ...</span><br><span class="line">  FunctionPtr* __vptr;  ← supplied by the compiler, hidden from the programmer</span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>Step #3</strong>: the compiler <strong>initializes <code>this-&gt;__vptr</code> within each constructor</strong>. The idea is to cause each object’s v-pointer to point at its class’s v-table, as if it adds the following instruction in each constructor’s init-list:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Base::<span class="built_in">Base</span>(...arbitrary params...)</span><br><span class="line">  : __vptr(&amp;Base::__vtable[<span class="number">0</span>])  ← supplied by the compiler, hidden from the programmer</span><br><span class="line">  ...</span><br><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Now let’s work out a derived class. Suppose your C++ code defines class Der that inherits from class Base. The compiler repeats steps #1 and #3 (but not #2). In step #1, the compiler creates a hidden v-table, keeping the same function-pointers as in <code>Base::__vtable</code> but <strong>replacing those slots that correspond to overrides</strong>. For instance, if Der overrides <code>virt0()</code> through <code>virt2()</code> and inherits the others as-is, Der’s v-table might look something like this (pretend Der doesn’t add any new virtuals):</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Pseudo-code (not C++, not C) for a static table defined within file Der.cpp</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Pretend FunctionPtr is a generic pointer to a generic member function</span></span><br><span class="line"><span class="comment">// (Remember: this is pseudo-code, not C++ code)</span></span><br><span class="line">FunctionPtr Der::__vtable[<span class="number">5</span>] = &#123;</span><br><span class="line">  &amp;Der::virt0, &amp;Der::virt1, &amp;Der::virt2, &amp;Base::virt3, &amp;Base::virt4</span><br><span class="line">&#125;;                                        </span><br></pre></td></tr></table></figure>

<p>In step #3, the compiler adds a similar pointer-assignment at the beginning of each of Der’s constructors. The idea is to change each Der object’s v-pointer so it points at its class’s v-table. (This is not a second v-pointer; it’s the same v-pointer that was defined in the base class, Base; remember, the compiler does not repeat step #2 in class Der.)</p>
<p>Finally, let’s see how the compiler implements a call to a virtual function. Your code might look like this:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Your original C++ code</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mycode</span><span class="params">(Base* p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  p-&gt;<span class="built_in">virt3</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The compiler has no idea whether this is going to call <code>Base::virt3()</code> or <code>Der::virt3()</code> or perhaps the <code>virt3()</code> method of another derived class that doesn’t even exist yet. It only knows for sure that you are calling <code>virt3()</code> which happens to be the function in slot #3 of the v-table. It rewrites that call into something like this:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Pseudo-code that the compiler generates from your C++</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mycode</span><span class="params">(Base* p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  p-&gt;__vptr[<span class="number">3</span>](p);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<hr>
<p>I strongly recommend every C++ developer to read the FAQ. It might take several weeks (as it’s hard to read and long) but it will teach you a lot about C++ and what can be done with it.</p>
<h1 id="连续声明"><a href="#连续声明" class="headerlink" title="连续声明"></a>连续声明</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Paddle* p1, * p2;</span><br></pre></td></tr></table></figure>

<p>指针!</p>
<h1 id="class-and-typename"><a href="#class-and-typename" class="headerlink" title="class and typename"></a>class and typename</h1><ul>
<li><p>in template they are the same</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="comment">/* class or function declaration */</span>;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span>    <span class="comment">/* class or function declaration */</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>typename unique</p>
<p>由于 C++ 允许在类内定义类型别名，且其使用方法与通过类型名访问类成员的方法相同。故而，在类定义不可知的时候，编译器无法知晓类似 <code>Type::foo</code> 的写法具体指的是一个类型还是类内成员。</p>
</li>
<li><p>class unique</p>
<p>?</p>
</li>
</ul>
<h1 id="class-memory-layout"><a href="#class-memory-layout" class="headerlink" title="class memory layout"></a><a href="https://www.programmerall.com/article/1953260633/">class memory layout</a></h1><p><strong>Elements in Class</strong></p>
<ol start="0">
<li>Member variables  </li>
<li>Member function  </li>
<li>Static member variable  </li>
<li>Static member function  </li>
<li>Virtual function  </li>
<li>Pure virtual function</li>
</ol>
<p><strong>Factors affecting object size</strong></p>
<ol start="0">
<li><strong>Member variables</strong>   </li>
<li><strong>Virtual function table pointer (_vftptr)</strong>  </li>
<li><strong>Virtual base table pointer*<em>（_vbtptr）*</em></strong>  </li>
<li><strong><a href="https://www.cnblogs.com/kekec/archive/2012/10/31/2748955.html">Memory alignment</a></strong></li>
</ol>
<p>A plain (non <code>virtual</code>) member function is just like a C function (except that it has <code>this</code> as an implicit, often first, parameter). For example your <code>getA</code> method is implemented like the following C function (outside of the object, e.g. in the <a href="http://en.wikipedia.org/wiki/Code_segment">code segment</a> of the binary executable) :</p>
<p>A <a href="http://en.wikipedia.org/wiki/Virtual_function">virtual member function</a> is generally implemented thru a <em>vtable</em> (<a href="http://en.wikipedia.org/wiki/Virtual_method_table">virtual method table</a>). An object with some virtual member functions (including destructor) has generally as its first (implicit) member field a pointer to such a table (generated elsewhere by the compiler).</p>
<h2 id="Single-class"><a href="#Single-class" class="headerlink" title="Single class"></a>Single class</h2><p>(1). <strong>Empty</strong> class</p>
<p><img src="https://www.programmerall.com/images/785/e7/e737e5eb9a1c03ff81c9e04e70c32a81.png" alt="img"></p>
<p>sizeof(CNull)=1（Used to identify the object）</p>
<p>(2). Class with only <strong>member variables</strong></p>
<p><img src="https://www.programmerall.com/images/408/de/dea7e81d5b7972d759cccc5da7f88478.png" alt="img"></p>
<p>int nVarSize = sizeof(CVariable) = 12</p>
<p> <img src="https://www.programmerall.com/images/129/14/14959f5ed9b3f3e9a5106169d2547209.png" alt="img"></p>
<p>Memory layout:</p>
<p><img src="https://www.programmerall.com/images/820/c7/c76f79fd497923d9b5d377591ef4e804.png" alt="img"></p>
<p>(3). Classes with <strong>only virtual functions</strong></p>
<p><img src="https://www.programmerall.com/images/130/27/274775992046eccf696cb609eafcdaf2.png" alt="img"></p>
<p>int nVFuntionSize = sizeof(CVFuction) = 4 (virtual table pointer)</p>
<p> <img src="https://www.programmerall.com/images/302/9d/9d317cdcaa5b510d03529b341031a956.png" alt="img"></p>
<p>Memory layout:</p>
<p><img src="https://www.programmerall.com/images/128/ac/ac58a7dd9d3b88dfe416c7b770a4bb50.png" alt="img"></p>
<p>(4). Classes with <strong>member variables and virtual functions</strong></p>
<p><img src="https://www.programmerall.com/images/572/a0/a010936b8c9773211780b86f48773404.png" alt="img"> </p>
<p>int nParentSize = sizeof(CParent) = 8</p>
<p><img src="https://www.programmerall.com/images/465/fd/fd9fc47b84bf351085ba51338b854451.png" alt="img"></p>
<p>Memory layout:</p>
<p><img src="https://www.programmerall.com/images/563/95/952f09c0147c160ab2c4a4b5dc4ef16b.png" alt="img"></p>
<h2 id="Single-inheritance"><a href="#Single-inheritance" class="headerlink" title="Single inheritance"></a>Single inheritance</h2><p> (including member variables, virtual functions, and virtual function coverage)</p>
<p><img src="https://www.programmerall.com/images/463/63/637fd62d36bca5ad4de15057a7868faf.png" alt="img"></p>
<p>int nChildSize = sizeof(CChildren) = 12</p>
<p>The result displayed in vc (Note: There is also a virtual function CChildren::g1 that is not displayed):</p>
<p><img src="https://www.programmerall.com/images/281/2c/2c830db2a2dcf19b468848f786904069.png" alt="img"></p>
<p>Memory layout:</p>
<p><img src="https://www.programmerall.com/images/417/c3/c3ab0cf99399434a3a5c5597e59220f1.png" alt="img"></p>
<h2 id="Multiple-inheritan"><a href="#Multiple-inheritan" class="headerlink" title="Multiple inheritan"></a>Multiple inheritan</h2><p>(including member variables, virtual functions, and virtual function coverage)</p>
<p><img src="https://www.programmerall.com/images/841/ef/ef1a3a8b9024df6ecf162d29188de151.png" alt="img"></p>
<p>int nChildSize = sizeof(CChildren) = 20</p>
<p>The result displayed in vc (Note: There are two virtual functions CChildren::f2, CChildren::h2 is not displayed,this Pointer <strong>adjustor</strong>[Adjusted value] Did not print out):</p>
<p><img src="https://www.programmerall.com/images/577/c8/c8c325fef2beb55ccac85749d915e8a9.png" alt="img"></p>
<p>Memory layout:</p>
<p><img src="https://www.programmerall.com/images/482/74/740ccc3c414613726d1db0580fc3a8f2.png" alt="img"></p>
<h2 id="Inheritance-with-a-depth-of-2"><a href="#Inheritance-with-a-depth-of-2" class="headerlink" title="Inheritance with a depth of 2"></a>Inheritance with a depth of 2</h2><p>(including member variables, virtual functions, and virtual function coverage)</p>
<p> <img src="https://www.programmerall.com/images/501/38/383f54f27decf91277086e6652af8c4d.png" alt="img"></p>
<p>int nGrandSize = sizeof(CGrandChildren) = 24</p>
<p>The result displayed in vc (note: there are three virtual functions CGrandChildren::f2, CChildren::h2, CGrandChildren::f3 are not displayed,thisPointer<strong>adjustor</strong>[Adjusted value] Did not print out):</p>
<p><img src="https://www.programmerall.com/images/160/62/62a008de8fedc9d4319acf0342aaf0c8.png" alt="img"></p>
<p>Memory layout:</p>
<p><img src="https://www.programmerall.com/images/628/44/445528602bc7a24ece6a57ec1ec4fd94.png" alt="img"></p>
<h2 id="Repeated-inheritance"><a href="#Repeated-inheritance" class="headerlink" title="Repeated inheritance"></a>Repeated inheritance</h2><p>(including member variables, virtual functions, and virtual function coverage)</p>
<p> <img src="https://www.programmerall.com/images/357/9d/9de5e626ef9f14eb6a2cf25960fe015d.png" alt="img"></p>
<p>int nGrandSize = sizeof(CGrandChildren) = 28</p>
<p><img src="https://www.programmerall.com/images/701/d7/d7ac32dcd9aad3cd190e6aa5567f852d.png" alt="img"></p>
<p>Memory layout:</p>
<p><img src="https://www.programmerall.com/images/519/a3/a3f697becdc21542f80c4bd6bc850d5f.png" alt="img"></p>
<p>Since there are two copies of m_nAge in the content, we cannot directly access this variable through pGrandChildrenA-&gt;m_nAge,</p>
<p>There will be ambiguity in this way, the compiler cannot know that it should accessCChildren1M_nAge in, orCChildren2M_nAge in.</p>
<p>In order to identify the unique m_nAge, you need to <strong>bring the class name of its scope</strong>. as follows:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> pGrandChildrenA-&gt;CChildren1::m_nAge = <span class="number">1</span>;</span><br><span class="line"><span class="number">2</span> pGrandChildrenA-&gt;CChildren2::m_nAge = <span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<h2 id="Single-virtual-inheritance"><a href="#Single-virtual-inheritance" class="headerlink" title="Single virtual inheritance"></a>Single virtual inheritance</h2><blockquote>
<h3 id="The-diamond-problem-what-is-virtual-inheritance"><a href="#The-diamond-problem-what-is-virtual-inheritance" class="headerlink" title="The diamond problem(what is  virtual inheritance)"></a>The diamond problem(what is  virtual inheritance)</h3><p><em>Virtual inheritance</em> is a C++ technique that ensures that only one copy of a base class’s member variables are inherited by second-level derivatives (a.k.a. grandchild derived classes). Without virtual inheritance, if two classes B and C inherit from class A, and class D inherits from both B and C, then D will contain two copies of A’s member variables: one via B, and one via C. These will be accessible independently, using scope resolution.</p>
<p><strong>Instead, if classes B and C inherit virtually from class A, then objects of class D will contain only one set of the member variables from class A.</strong></p>
<p>As you probably guessed, this technique is useful when you have to deal with multiple inheritance and it’s a way to solve the infamous diamond inheritance.</p>
</blockquote>
<p>(including member variables, virtual functions, and virtual function coverage)</p>
<p> <img src="https://www.programmerall.com/images/309/fa/fa03df3f4df6647d00fb266caddf236d.png" alt="img"></p>
<p>int nChildSize = sizeof(CChildren) = 20</p>
<p>Memory layout:</p>
<p> <img src="https://www.programmerall.com/images/892/93/932b1f306be323fcb69c19b34985264c.png" alt="img"></p>
<h2 id="Multiple-virtual-inheritance"><a href="#Multiple-virtual-inheritance" class="headerlink" title="Multiple virtual inheritance"></a>Multiple virtual inheritance</h2><p>(including member variables, virtual functions, and virtual function coverage)</p>
<p>(1) virtual CParent1, CParent2</p>
<p><img src="https://www.programmerall.com/images/646/cb/cbbb0345c42eb7c2ce22540a52bb5386.png" alt="img"></p>
<p>int nChildSize = sizeof(CChildren) = 24</p>
<p>Memory layout:</p>
<p><img src="https://www.programmerall.com/images/262/54/544e4b44be0ec086d33844a6afcf181e.png" alt="img"></p>
<p>(2) CParent1, virtual CParent2</p>
<p><img src="https://www.programmerall.com/images/577/4d/4dd9dcff81dff8a38dc924e5e46dc919.png" alt="img"></p>
<p>int nChildSize = sizeof(CChildren) = 24</p>
<p>Memory layout:</p>
<p><img src="https://www.programmerall.com/images/771/d3/d37a0c66a3119294621f0b068f014f83.png" alt="img"></p>
<p>(3) virtual CParent1, virtual CParent2</p>
<p><img src="https://www.programmerall.com/images/45/25/25019c36b47c9ecc7567c51b816b37dd.png" alt="img"></p>
<p>int nChildSize = sizeof(CChildren) = 28</p>
<p>Memory layout:</p>
<p><img src="https://www.programmerall.com/images/516/ed/ed9f7705303bbc56c83fc2e6239a1f44.png" alt="img"></p>
<p><a href="https://stackoverflow.com/questions/3324721/virtual-tables-and-virtual-pointers-for-multiple-virtual-inheritance-and-type-ca">to see more</a></p>
<h2 id="Diamond-virtual-multiple-inheritance"><a href="#Diamond-virtual-multiple-inheritance" class="headerlink" title="Diamond virtual multiple inheritance"></a>Diamond virtual multiple inheritance</h2><p>(including member variables, virtual functions, and virtual function coverage)</p>
<p><img src="https://www.programmerall.com/images/824/2e/2ea97acff318efac0811a600f20d0ad8.png" alt="img"></p>
<p>int nGrandChildSize = sizeof(CGrandChildren) = 36</p>
<p>Memory layout:</p>
<p><img src="https://www.programmerall.com/images/676/21/21aba026ce6774a216e93f7c81690614.png" alt="img"></p>
<h1 id="sizeof"><a href="#sizeof" class="headerlink" title="sizeof"></a>sizeof</h1><p>Depending on the computer architecture, a <a href="https://en.wikipedia.org/wiki/Byte">byte</a> may consist of 8 <em>or more</em> bits, the exact number being recorded in <a href="https://en.cppreference.com/w/cpp/types/climits">CHAR_BIT</a>.</p>
<p><strong>sizeof(empty object) = 1</strong></p>
<p><strong>The following <code>sizeof</code> expressions always evaluate to 1:</strong></p>
<ul>
<li><strong>sizeof(char)</strong></li>
<li><strong>sizeof(signed char)</strong></li>
<li><strong>sizeof(unsigned char)</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Empty</span> &#123;</span>&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Base</span> &#123;</span> <span class="keyword">int</span> a; &#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Derived</span> :</span> Base &#123; <span class="keyword">int</span> b; &#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Bit</span> &#123;</span> <span class="keyword">unsigned</span> bit: <span class="number">1</span>; &#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Empty e;</span><br><span class="line">    Derived d;</span><br><span class="line">    Base&amp; b = d;</span><br><span class="line">    [[maybe_unused]] Bit bit;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">10</span>];</span><br><span class="line">    std::cout </span><br><span class="line">      &lt;&lt; <span class="string">&quot;1) size of empty class:              &quot;</span> &lt;&lt; <span class="keyword">sizeof</span> e        &lt;&lt; <span class="string">&#x27;\n&#x27;</span> <span class="comment">//1</span></span><br><span class="line">      &lt;&lt; <span class="string">&quot;2) size of pointer:                  &quot;</span> &lt;&lt; <span class="keyword">sizeof</span> &amp;e       &lt;&lt; <span class="string">&#x27;\n&#x27;</span> <span class="comment">//8</span></span><br><span class="line"><span class="comment">//    &lt;&lt; &quot;3) size of function:                 &quot; &lt;&lt; sizeof(void())  &lt;&lt; &#x27;\n&#x27; // error</span></span><br><span class="line"><span class="comment">//    &lt;&lt; &quot;4) size of incomplete type:          &quot; &lt;&lt; sizeof(int[])   &lt;&lt; &#x27;\n&#x27; // error</span></span><br><span class="line"><span class="comment">//    &lt;&lt; &quot;5) size of bit field:                &quot; &lt;&lt; sizeof bit.bit  &lt;&lt; &#x27;\n&#x27; // error</span></span><br><span class="line">      &lt;&lt; <span class="string">&quot;6) size of Bit class:                &quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">sizeof</span></span>(Bit)     &lt;&lt; <span class="string">&#x27;\n&#x27;</span> <span class="comment">//4</span></span><br><span class="line">      &lt;&lt; <span class="string">&quot;7) size of array of 10 int:          &quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>[<span class="number">10</span>]) &lt;&lt; <span class="string">&#x27;\n&#x27;</span> <span class="comment">//40</span></span><br><span class="line">      &lt;&lt; <span class="string">&quot;8) size of array of 10 int (2):      &quot;</span> &lt;&lt; <span class="keyword">sizeof</span> a        &lt;&lt; <span class="string">&#x27;\n&#x27;</span> <span class="comment">//40</span></span><br><span class="line">      &lt;&lt; <span class="string">&quot;9) length of array of 10 int:        &quot;</span> &lt;&lt; ((<span class="keyword">sizeof</span> a) / (<span class="keyword">sizeof</span> *a))   &lt;&lt; <span class="string">&#x27;\n&#x27;</span><span class="comment">// 10</span></span><br><span class="line">      &lt;&lt; <span class="string">&quot;A) length of array of 10 int (2):    &quot;</span> &lt;&lt; ((<span class="keyword">sizeof</span> a) / (<span class="keyword">sizeof</span> a[<span class="number">0</span>])) &lt;&lt; <span class="string">&#x27;\n&#x27;</span><span class="comment">// 10</span></span><br><span class="line">      &lt;&lt; <span class="string">&quot;B) size of the Derived:              &quot;</span> &lt;&lt; <span class="keyword">sizeof</span> d        &lt;&lt; <span class="string">&#x27;\n&#x27;</span><span class="comment">// 8</span></span><br><span class="line">      &lt;&lt; <span class="string">&quot;C) size of the Derived through Base: &quot;</span> &lt;&lt; <span class="keyword">sizeof</span> b        &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;<span class="comment">// 4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="uml"><a href="#uml" class="headerlink" title="uml"></a>uml</h1><img src="https://upload-images.jianshu.io/upload_images/5336514-d05e8edc42eb1469.png?imageMogr2/auto-orient/strip|imageView2/2/w/512/format/webp" alt="img" style="zoom:33%;" />

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+表示 public</span><br><span class="line">-表示 private  </span><br><span class="line">#表示 protected </span><br><span class="line">~表示 default,也就是包权限  </span><br><span class="line">_下划线表示 static  </span><br><span class="line">斜体表示抽象  </span><br></pre></td></tr></table></figure>

<h1 id="initialization"><a href="#initialization" class="headerlink" title="initialization"></a>initialization</h1><p>Depending on context, the initializer may invoke:</p>
<ul>
<li><p><a href="https://en.cppreference.com/w/cpp/language/value_initialization">Value initialization</a>, e.g. <a href="http://en.cppreference.com/w/cpp/string/basic_string">std::string</a> s{};<br>This is the initialization performed when an object is constructed with an <strong>empty</strong> initializer.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">T1</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> mem1;</span><br><span class="line">    std::string mem2;</span><br><span class="line">&#125;; <span class="comment">// implicit default constructor</span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">T2</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> mem1;</span><br><span class="line">    std::string mem2;</span><br><span class="line">    <span class="built_in">T2</span>(<span class="keyword">const</span> T2&amp;) &#123; &#125; <span class="comment">// user-provided copy constructor</span></span><br><span class="line">&#125;;                    <span class="comment">// no default constructor</span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">T3</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> mem1;</span><br><span class="line">    std::string mem2;</span><br><span class="line">    <span class="built_in">T3</span>() &#123; &#125; <span class="comment">// user-provided default constructor</span></span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">std::string s&#123;&#125;; <span class="comment">// class =&gt; default-initialization, the value is &quot;&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n&#123;&#125;;                <span class="comment">// scalar =&gt; zero-initialization, the value is 0</span></span><br><span class="line">    <span class="keyword">double</span> f = <span class="built_in"><span class="keyword">double</span></span>();    <span class="comment">// scalar =&gt; zero-initialization, the value is 0.0</span></span><br><span class="line">    <span class="keyword">int</span>* a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>](); <span class="comment">// array =&gt; value-initialization of each element</span></span><br><span class="line">                            <span class="comment">//          the value of each element is 0</span></span><br><span class="line">    T1 t1&#123;&#125;;                <span class="comment">// class with implicit default constructor =&gt;</span></span><br><span class="line">                            <span class="comment">//     t1.mem1 is zero-initialized, the value is 0</span></span><br><span class="line">                            <span class="comment">//     t1.mem2 is default-initialized, the value is &quot;&quot;</span></span><br><span class="line"><span class="comment">//  T2 t2&#123;&#125;;                // error: class with no default constructor</span></span><br><span class="line">    T3 t3&#123;&#125;;                <span class="comment">// class with user-provided default constructor =&gt;</span></span><br><span class="line">                            <span class="comment">//     t3.mem1 is default-initialized to indeterminate value</span></span><br><span class="line">                            <span class="comment">//     t3.mem2 is default-initialized, the value is &quot;&quot;</span></span><br><span class="line">    <span class="function">std::vector&lt;<span class="keyword">int</span>&gt; <span class="title">v</span><span class="params">(<span class="number">3</span>)</span></span>;  <span class="comment">// value-initialization of each element</span></span><br><span class="line">                            <span class="comment">// the value of each element is 0</span></span><br><span class="line">    <span class="keyword">delete</span>[] a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><a href="https://en.cppreference.com/w/cpp/language/direct_initialization">Direct initialization</a>, e.g. <a href="http://en.cppreference.com/w/cpp/string/basic_string">std::string</a> s(“hello”);<br>Initializes an object from explicit set of constructor arguments.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Foo</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> mem;</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">Foo</span><span class="params">(<span class="keyword">int</span> n)</span> : mem(n) &#123;</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">std::string <span class="title">s1</span><span class="params">(<span class="string">&quot;test&quot;</span>)</span></span>; <span class="comment">// constructor from const char*</span></span><br><span class="line">    <span class="function">std::string <span class="title">s2</span><span class="params">(<span class="number">10</span>, <span class="string">&#x27;a&#x27;</span>)</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="function">std::unique_ptr&lt;<span class="keyword">int</span>&gt; <span class="title">p</span><span class="params">(<span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">1</span>))</span></span>; <span class="comment">// OK: explicit constructors allowed</span></span><br><span class="line"><span class="comment">//  std::unique_ptr&lt;int&gt; p = new int(1); // error: constructor is explicit</span></span><br><span class="line"> </span><br><span class="line">    <span class="function">Foo <span class="title">f</span><span class="params">(<span class="number">2</span>)</span></span>; <span class="comment">// f is direct-initialized:</span></span><br><span class="line">              <span class="comment">// constructor parameter n is copy-initialized from the rvalue 2</span></span><br><span class="line">              <span class="comment">// f.mem is direct-initialized from the parameter n</span></span><br><span class="line"><span class="comment">//  Foo f2 = 2; // error: constructor is explicit</span></span><br><span class="line"> </span><br><span class="line">    std::cout &lt;&lt; s1 &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; s2 &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; *p &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; f.mem  &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><a href="https://en.cppreference.com/w/cpp/language/copy_initialization">Copy initialization</a>, e.g. <a href="http://en.cppreference.com/w/cpp/string/basic_string">std::string</a> s = “hello”;<br>Initializes an object from another object.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">A</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">operator</span> <span class="title">int</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="number">12</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">B</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="built_in">B</span>(<span class="keyword">int</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::string s = <span class="string">&quot;test&quot;</span>;        <span class="comment">// OK: constructor is non-explicit</span></span><br><span class="line">    std::string s2 = std::<span class="built_in">move</span>(s); <span class="comment">// this copy-initialization performs a move</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//  std::unique_ptr&lt;int&gt; p = new int(1); // error: constructor is explicit</span></span><br><span class="line">    <span class="function">std::unique_ptr&lt;<span class="keyword">int</span>&gt; <span class="title">p</span><span class="params">(<span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">1</span>))</span></span>;  <span class="comment">// OK: direct-initialization</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">3.14</span>;    <span class="comment">// floating-integral conversion</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> b = n; <span class="comment">// const doesn&#x27;t matter</span></span><br><span class="line">    <span class="keyword">int</span> c = b;       <span class="comment">// ...either way</span></span><br><span class="line"> </span><br><span class="line">    A a;</span><br><span class="line">    B b0 = <span class="number">12</span>;</span><br><span class="line"><span class="comment">//  B b1 = a;       // &lt; error: conversion from &#x27;A&#x27; to non-scalar type &#x27;B&#x27; requested</span></span><br><span class="line">    B b2&#123;a&#125;;        <span class="comment">// &lt; identical, calling A::operator int(), then B::B(int)</span></span><br><span class="line">    B b3 = &#123;a&#125;;     <span class="comment">// &lt;</span></span><br><span class="line">    <span class="keyword">auto</span> b4 = B&#123;a&#125;; <span class="comment">// &lt;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//  b0 = a;         // &lt; error, assignment operator overload needed </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><a href="https://en.cppreference.com/w/cpp/language/list_initialization">List initialization</a>, e.g. <a href="http://en.cppreference.com/w/cpp/string/basic_string">std::string</a> s{‘a’, ‘b’, ‘c’};<br>Initializes an object from <em>braced-init-list</em>.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Foo</span> &#123;</span></span><br><span class="line">    std::vector&lt;<span class="keyword">int</span>&gt; mem = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;; <span class="comment">// list-initialization of a non-static member</span></span><br><span class="line">    std::vector&lt;<span class="keyword">int</span>&gt; mem2;</span><br><span class="line">    <span class="built_in">Foo</span>() : mem2&#123;<span class="number">-1</span>, <span class="number">-2</span>, <span class="number">-3</span>&#125; &#123;&#125; <span class="comment">// list-initialization of a member in constructor</span></span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">std::pair&lt;std::string, std::string&gt; f(std::pair&lt;std::string, std::string&gt; p)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;p.second, p.first&#125;; <span class="comment">// list-initialization in return statement</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n0&#123;&#125;;     <span class="comment">// value-initialization (to zero)</span></span><br><span class="line">    <span class="keyword">int</span> n1&#123;<span class="number">1</span>&#125;;    <span class="comment">// direct-list-initialization</span></span><br><span class="line">    std::string s1&#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>&#125;; <span class="comment">// initializer-list constructor call</span></span><br><span class="line">    std::string s2&#123;s1, <span class="number">2</span>, <span class="number">2</span>&#125;;           <span class="comment">// regular constructor call</span></span><br><span class="line">    std::string s3&#123;<span class="number">0x61</span>, <span class="string">&#x27;a&#x27;</span>&#125;; <span class="comment">// initializer-list ctor is preferred to (int, char)</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">int</span> n2 = &#123;<span class="number">1</span>&#125;; <span class="comment">// copy-list-initialization</span></span><br><span class="line">    <span class="keyword">double</span> d = <span class="keyword">double</span>&#123;<span class="number">1.2</span>&#125;; <span class="comment">// list-initialization of a prvalue, then copy-init</span></span><br><span class="line">    <span class="keyword">auto</span> s4 = std::string&#123;<span class="string">&quot;HelloWorld&quot;</span>&#125;; <span class="comment">// same as above, no temporary created since C++17</span></span><br><span class="line"> </span><br><span class="line">    std::map&lt;<span class="keyword">int</span>, std::string&gt; m = &#123; <span class="comment">// nested list-initialization</span></span><br><span class="line">           &#123;<span class="number">1</span>, <span class="string">&quot;a&quot;</span>&#125;,</span><br><span class="line">           &#123;<span class="number">2</span>, &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>&#125; &#125;,</span><br><span class="line">           &#123;<span class="number">3</span>, s1&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"> </span><br><span class="line">    std::cout &lt;&lt; <span class="built_in">f</span>(&#123;<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>&#125;).first <span class="comment">// list-initialization in function call</span></span><br><span class="line">              &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"> </span><br><span class="line">    const int (&amp;ar)[2] = &#123;1,2&#125;; // binds a lvalue reference to a temporary array</span><br><span class="line">    <span class="keyword">int</span>&amp;&amp; r1 = &#123;<span class="number">1</span>&#125;; <span class="comment">// binds a rvalue reference to a temporary int</span></span><br><span class="line"><span class="comment">//  int&amp; r2 = &#123;2&#125;; // error: cannot bind rvalue to a non-const lvalue ref</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//  int bad&#123;1.0&#125;; // error: narrowing conversion</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> uc1&#123;<span class="number">10</span>&#125;; <span class="comment">// okay</span></span><br><span class="line"><span class="comment">//  unsigned char uc2&#123;-1&#125;; // error: narrowing conversion</span></span><br><span class="line"> </span><br><span class="line">    Foo f;</span><br><span class="line"> </span><br><span class="line">    std::cout &lt;&lt; n0 &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; n1 &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; n2 &lt;&lt; <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">              &lt;&lt; s1 &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; s2 &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; s3 &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> p: m)</span><br><span class="line">        std::cout &lt;&lt; p.first &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; p.second &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> n: f.mem)</span><br><span class="line">        std::cout &lt;&lt; n &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> n: f.mem2)</span><br><span class="line">        std::cout &lt;&lt; n &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><a href="https://en.cppreference.com/w/cpp/language/aggregate_initialization">Aggregate initialization</a>, e.g. char a[3] = {‘a’, ‘b’};<br>Initializes an aggregate from braced-init-list.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Foo</span> &#123;</span></span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">int</span> j;</span><br><span class="line">        <span class="keyword">int</span> a[<span class="number">3</span>];</span><br><span class="line">    &#125; b;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    S s1 = &#123; <span class="number">1</span>, &#123; <span class="number">2</span>, <span class="number">3</span>, &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125; &#125; &#125;;</span><br><span class="line">    S s2 = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;; <span class="comment">// same, but with brace elision 括号省略</span></span><br><span class="line">    S s3&#123;<span class="number">1</span>, &#123;<span class="number">2</span>, <span class="number">3</span>, &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125; &#125; &#125;; <span class="comment">// same, using direct-list-initialization syntax</span></span><br><span class="line">    S s4&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;; <span class="comment">// error until CWG 1270:</span></span><br><span class="line">                            <span class="comment">// brace elision only allowed with equals sign</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">int</span> ar[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;; <span class="comment">// ar is int[3]</span></span><br><span class="line">    <span class="keyword">int</span> ab[] (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">// (C++20) ab is int[3]</span></span><br><span class="line"><span class="comment">//  char cr[3] = &#123;&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;&#125;; // too many initializer clauses</span></span><br><span class="line">    <span class="keyword">char</span> cr[<span class="number">3</span>] = &#123;<span class="string">&#x27;a&#x27;</span>&#125;; <span class="comment">// array initialized as &#123;&#x27;a&#x27;, &#x27;\0&#x27;, &#x27;\0&#x27;&#125;</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">int</span> ar2d1[<span class="number">2</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">1</span>, <span class="number">2</span>&#125;, &#123;<span class="number">3</span>, <span class="number">4</span>&#125;&#125;; <span class="comment">// fully-braced 2D array: &#123;1, 2&#125;</span></span><br><span class="line">                                        <span class="comment">//                        &#123;3, 4&#125;</span></span><br><span class="line">    <span class="keyword">int</span> ar2d2[<span class="number">2</span>][<span class="number">2</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;; <span class="comment">// brace elision: &#123;1, 2&#125;</span></span><br><span class="line">                                    <span class="comment">//                &#123;3, 4&#125;</span></span><br><span class="line">    <span class="keyword">int</span> ar2d3[<span class="number">2</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">1</span>&#125;, &#123;<span class="number">2</span>&#125;&#125;;   <span class="comment">// only first column: &#123;1, 0&#125;</span></span><br><span class="line">                                    <span class="comment">//                    &#123;2, 0&#125;</span></span><br><span class="line"> </span><br><span class="line">    std::array&lt;<span class="keyword">int</span>, 3&gt; std_ar2&#123; &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125; &#125;;  <span class="comment">// std::array is an aggregate</span></span><br><span class="line">    std::array&lt;<span class="keyword">int</span>, 3&gt; std_ar1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;; <span class="comment">// brace-elision okay</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//  int ai[] = &#123; 1, 2.0 &#125;; // narrowing conversion from double to int:</span></span><br><span class="line">                           <span class="comment">// error in C++11, okay in C++03</span></span><br><span class="line"> </span><br><span class="line">    std::string ars[] = &#123;std::<span class="built_in">string</span>(<span class="string">&quot;one&quot;</span>), <span class="comment">// copy-initialization</span></span><br><span class="line">                         <span class="string">&quot;two&quot;</span>,              <span class="comment">// conversion, then copy-initialization</span></span><br><span class="line">                         &#123;<span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;e&#x27;</span>&#125; &#125;; <span class="comment">// list-initialization</span></span><br><span class="line">    <span class="class"><span class="keyword">union</span> <span class="title">U</span> &#123;</span></span><br><span class="line">        <span class="keyword">int</span> a;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">char</span>* b;</span><br><span class="line">    &#125;;</span><br><span class="line">    U u1 = &#123;<span class="number">1</span>&#125;; <span class="comment">// OK, first member of the union</span></span><br><span class="line"><span class="comment">//  U u2 = &#123; 0, &quot;asdf&quot; &#125;; // error: too many initializers for union</span></span><br><span class="line"><span class="comment">//  U u3 = &#123; &quot;asdf&quot; &#125;; // error: invalid conversion to int</span></span><br><span class="line"> </span><br><span class="line">    [](<span class="keyword">auto</span>...) &#123; std::<span class="built_in">puts</span>(<span class="string">&quot;Garbage unused variables... Done.&quot;</span>); &#125; (</span><br><span class="line">        s1, s2, s3, s4, ar, ab, cr, ar2d1, ar2d2, ar2d3, std_ar2, std_ar1, u1</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// aggregate</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">base1</span> &#123;</span> <span class="keyword">int</span> b1, b2 = <span class="number">42</span>; &#125;;</span><br><span class="line"><span class="comment">// non-aggregate</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">base2</span> &#123;</span></span><br><span class="line">  <span class="built_in">base2</span>() : <span class="built_in">b3</span>(<span class="number">42</span>) &#123;&#125;</span><br><span class="line">  <span class="keyword">int</span> b3;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// aggregate in C++17</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">derived</span> :</span> base1, base2 &#123; <span class="keyword">int</span> d; &#125;;</span><br><span class="line">derived d1&#123; &#123;<span class="number">1</span>, <span class="number">2</span>&#125;, &#123; &#125;, <span class="number">4</span>&#125;; <span class="comment">// d1.b1 = 1, d1.b2 = 2,  d1.b3 = 42, d1.d = 4</span></span><br><span class="line">derived d2&#123; &#123;    &#125;, &#123; &#125;, <span class="number">4</span>&#125;; <span class="comment">// d2.b1 = 0, d2.b2 = 42, d2.b3 = 42, d2.d = 4</span></span><br></pre></td></tr></table></figure></li>
<li><p><a href="https://en.cppreference.com/w/cpp/language/reference_initialization">Reference initialization</a>, e.g. char&amp; c = a[0];<br>Binds a reference to an object.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> mi;</span><br><span class="line">    <span class="keyword">const</span> std::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&amp; mp; <span class="comment">// reference member</span></span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">(<span class="keyword">int</span>)</span> </span>&#123;&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">A</span> &#123;</span>&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">B</span> :</span> A &#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">operator</span> <span class="keyword">int</span>&amp;() &#123; <span class="keyword">return</span> n; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function">B <span class="title">bar</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">B</span>(); &#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//int&amp; bad_r;      // error: no initializer</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span>&amp; ext_r; <span class="comment">// OK</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//  Lvalues</span></span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span>&amp; r1 = n;                    <span class="comment">// lvalue reference to the object n</span></span><br><span class="line">    <span class="function"><span class="keyword">const</span> <span class="keyword">int</span>&amp; <span class="title">cr</span><span class="params">(n)</span></span>;               <span class="comment">// reference can be more cv-qualified</span></span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">int</span>&amp; cv&#123;n&#125;;            <span class="comment">// any initializer syntax can be used</span></span><br><span class="line">    <span class="keyword">int</span>&amp; r2 = r1;                   <span class="comment">// another lvalue reference to the object n</span></span><br><span class="line"><span class="comment">//  int&amp; bad = cr;                  // error: less cv-qualified</span></span><br><span class="line">    <span class="keyword">int</span>&amp; r3 = <span class="keyword">const_cast</span>&lt;<span class="keyword">int</span>&amp;&gt;(cr); <span class="comment">// const_cast is needed</span></span><br><span class="line"> </span><br><span class="line">    <span class="built_in"><span class="keyword">void</span></span> (&amp;rf)(<span class="keyword">int</span>) = foo; <span class="comment">// lvalue reference to function</span></span><br><span class="line">    <span class="keyword">int</span> ar[<span class="number">3</span>];</span><br><span class="line">    <span class="built_in"><span class="keyword">int</span></span> (&amp;ra)[<span class="number">3</span>] = ar;     <span class="comment">// lvalue reference to array</span></span><br><span class="line"> </span><br><span class="line">    B b;</span><br><span class="line">    A&amp; base_ref = b;        <span class="comment">// reference to base subobject</span></span><br><span class="line">    <span class="keyword">int</span>&amp; converted_ref = b; <span class="comment">// reference to the result of a conversion</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//  Rvalues</span></span><br><span class="line"><span class="comment">//  int&amp; bad = 1;        // error: cannot bind lvalue ref to rvalue</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span>&amp; cref = <span class="number">1</span>; <span class="comment">// bound to rvalue</span></span><br><span class="line">    <span class="keyword">int</span>&amp;&amp; rref = <span class="number">1</span>;      <span class="comment">// bound to rvalue</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">const</span> A&amp; cref2 = <span class="built_in">bar</span>(); <span class="comment">// reference to A subobject of B temporary</span></span><br><span class="line">    A&amp;&amp; rref2 = <span class="built_in">bar</span>();      <span class="comment">// same</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">int</span>&amp;&amp; xref = <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&amp;&amp;&gt;(n); <span class="comment">// bind directly to n</span></span><br><span class="line"><span class="comment">//  int&amp;&amp; copy_ref = n;                 // error: can&#x27;t bind to an lvalue</span></span><br><span class="line">    <span class="keyword">double</span>&amp;&amp; copy_ref = n;              <span class="comment">// bind to an rvalue temporary with value 1.0</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//  Restrictions on temporary lifetimes</span></span><br><span class="line">    std::ostream&amp; buf_ref = std::<span class="built_in">ostringstream</span>() &lt;&lt; <span class="string">&#x27;a&#x27;</span>; <span class="comment">// the ostringstream temporary</span></span><br><span class="line">                      <span class="comment">// was bound to the left operand of operator&lt;&lt;</span></span><br><span class="line">                      <span class="comment">// but its lifetime ended at the semicolon</span></span><br><span class="line">                      <span class="comment">// so buf_ref is a dangling reference</span></span><br><span class="line"> </span><br><span class="line">    S a &#123;<span class="number">1</span>, &#123;<span class="number">2</span>, <span class="number">3</span>&#125; &#125;;         <span class="comment">// temporary pair &#123;2, 3&#125; bound to the reference member</span></span><br><span class="line">                              <span class="comment">// a.mp and its lifetime is extended to match </span></span><br><span class="line">                              <span class="comment">// the lifetime of object a</span></span><br><span class="line">    S* p = <span class="keyword">new</span> S&#123;<span class="number">1</span>, &#123;<span class="number">2</span>, <span class="number">3</span>&#125; &#125;; <span class="comment">// temporary pair &#123;2, 3&#125; bound to the reference</span></span><br><span class="line">                              <span class="comment">// member p-&gt;mp, but its lifetime ended at the semicolon</span></span><br><span class="line">                              <span class="comment">// p-&gt;mp is a dangling reference</span></span><br><span class="line">    <span class="keyword">delete</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="types-in-cpp"><a href="#types-in-cpp" class="headerlink" title="types in cpp"></a>types in cpp</h1><ul>
<li><p>Object types</p>
<ul>
<li><p>Scalars<br>scalars are primitive objects which contain <strong>a single value</strong> and are not composed of other C++ objects. </p>
<ol>
<li><p>arithmetic (integral, float)</p>
</li>
<li><p>pointers: <code>T *</code> for any type <code>T</code></p>
</li>
<li><p>enum</p>
</li>
<li><p>pointer-to-member</p>
</li>
<li><p><code>nullptr_t</code></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(std::<span class="keyword">nullptr_t</span> nullp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// Passed a null pointer</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>Arrays: <code>T[]</code> or <code>T[N]</code> for any complete, non-reference type <code>T</code></p>
</li>
<li><p>Classes: <code>class Foo</code> or <code>struct Bar</code></p>
<ol>
<li>Trivial classes</li>
<li>Aggregates</li>
<li>POD classes</li>
<li>(etc. etc.)</li>
</ol>
</li>
<li><p>Unions: <code>union Zip</code></p>
</li>
</ul>
</li>
<li><p>References types: <code>T &amp;</code>, <code>T &amp;&amp;</code> for any object or free-function type <code>T</code></p>
</li>
<li><p>Function types</p>
<ul>
<li>Free functions: <code>R foo(Arg1, Arg2, ...)</code></li>
<li>Member functions: <code>R T::foo(Arg1, Arg2, ...)</code></li>
</ul>
</li>
<li><p><code>void</code></p>
</li>
</ul>
<p>POD-classes, POD-unions, scalar types, and arrays of such types are collectively called <em><strong>POD-types.</strong></em></p>
<h1 id="aggregates-and-POD-plain-old-data"><a href="#aggregates-and-POD-plain-old-data" class="headerlink" title="aggregates and POD(plain old data)"></a><a href="https://stackoverflow.com/questions/4178175/what-are-aggregates-and-pods-and-how-why-are-they-special">aggregates and POD(plain old data)</a></h1><h2 id="c-03"><a href="#c-03" class="headerlink" title="c++03"></a>c++03</h2><ul>
<li><p>An aggregate is </p>
<ol>
<li>an array or </li>
<li>a class (clause 9) with <strong>no user-declared constructors (12.1), no private or protected non-static data members (clause 11), no base classes (clause 10), and no virtual functions (10.3).</strong></li>
</ol>
<ul>
<li>An aggregate class can have a user-declared/user-defined copy-assignment operator and/or destructor</li>
<li>An array is an aggregate even if it is an array of non-aggregate class type.</li>
<li>This does not mean an aggregate class cannot have constructors, in fact it can have a default constructor and/or a copy constructor as long as they are <strong>implicitly declared by the compiler</strong>, and not explicitly by the user</li>
</ul>
</li>
<li><p>aggregate feature</p>
<p>They, unlike non-aggregate classes, can be initialized with curly braces <code>&#123;&#125;</code>.</p>
<p>We should understand that memberwise initialization with braces implies that the class is nothing more than the sum of its members.</p>
</li>
<li><p>POD</p>
<p>A POD-struct is an aggregate class that has <strong>no non-static data members of type non-POD-struct, non-POD-union (or array of such types) or reference,</strong> and <strong>has no user-defined copy assignment operator and no user-defined destructor</strong>. Similarly, a POD-union is an aggregate union that has no non-static data members of type non-POD-struct, non-POD-union (or array of such types) or reference, and has no user-defined copy assignment operator and no user-defined destructor. A POD class is a class that is either a POD-struct or a POD-union.</p>
<p>An aggregate class is called a POD if <strong>it has no user-defined copy-assignment operator and destructor and none of its nonstatic members is a non-POD class, array of non-POD, or a reference</strong>.</p>
</li>
</ul>
<h2 id="c-11"><a href="#c-11" class="headerlink" title="c++11"></a>c++11</h2><p>A POD struct is a non-union class that is both a trivial class and a standard-layout class, and has no non-static data members of type non-POD struct, non-POD union (or array of such types). Similarly, a POD union is a union that is both a trivial class and a standard layout class, and has no non-static data members of type non-POD struct, non-POD union (or array of such types). A POD class is a class that is either a POD struct or a POD union.</p>
<ul>
<li><p>trivial classes</p>
<p>Basically this means that a copy or move constructor is trivial if it is not user-provided, the class has nothing virtual in it, and this property holds recursively for all the members of the class and for the base class.</p>
</li>
<li><p>standard layout</p>
<p>The standard mentions that these are useful for communicating with other languages, and that’s because a standard-layout class has the same memory layout of the equivalent C struct or union.</p>
</li>
</ul>
<h1 id="const-in-function"><a href="#const-in-function" class="headerlink" title="const in function"></a>const in function</h1><p>A “const function”, denoted with the keyword <code>const</code> after a function declaration, <strong>makes it a compiler error for this class function to change a member variable of the class</strong>. However, reading of a class variables is okay inside of the function, but writing inside of this function will generate a compiler error.</p>
<p>Another way of thinking about such “const function” is by viewing a class function as a normal function taking an implicit <code>this</code> pointer. So a method <code>int Foo::Bar(int random_arg)</code> (<strong>without the const</strong> at the end) results in a function like <code>int Foo_Bar(Foo* this, int random_arg)</code>, and a call such as <code>Foo f; f.Bar(4)</code> will internally correspond to something like <code>Foo f; Foo_Bar(&amp;f, 4)</code>. Now adding the const at the end (<code>int Foo::Bar(int random_arg) const</code>) can then be understood as a declaration <strong>with a const this pointer</strong>: <code>int Foo_Bar(const Foo* this, int random_arg)</code>. Since the type of <code>this</code> in such case is const, no modifications of member variables are possible.</p>
<h1 id="const-in-pointer"><a href="#const-in-pointer" class="headerlink" title="const in pointer"></a>const in pointer</h1><ul>
<li><code>int*</code> - pointer to int</li>
<li><code>int const *</code> - pointer to const int</li>
<li><code>int * const</code> - const pointer to int</li>
<li><code>int const * const</code> - const pointer to const int</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ci = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> i2 = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span>* pi1 = &amp;ci;</span><br><span class="line"><span class="keyword">int</span>* <span class="keyword">const</span> pi2 = &amp;i;</span><br><span class="line">*pi1 = <span class="number">2</span>;<span class="comment">//error read only</span></span><br><span class="line">*pi2 = <span class="number">3</span>;</span><br><span class="line">pi2 = &amp;i2;<span class="comment">//error cannot assign</span></span><br><span class="line">pi1 = &amp;i;</span><br><span class="line">*pi1 = <span class="number">2</span>;<span class="comment">//error read only</span></span><br></pre></td></tr></table></figure>



<h1 id="traits"><a href="#traits" class="headerlink" title="traits"></a><a href="https://www.internalpointers.com/post/quick-primer-type-traits-modern-cpp">traits</a></h1><p><strong>Type traits</strong> are a clever technique used in C++ template metaprogramming that gives you the ability to inspect and transform the properties of <em>types</em>.</p>
<p>For example, given a generic type <code>T</code> — it could be <code>int</code>, <code>bool</code>, <code>std::vector</code> or whatever you want — with type traits you can ask the compiler some questions: is it an integer? Is it a function? Is it a pointer? Or maybe a class? Does it have a destructor? Can you copy it? Will it throw exceptions? … and so on. This is extremely useful in <strong>conditional compilation</strong>, where you instruct the compiler to pick the right path according to the type in input. We will see an example shortly.</p>
<p>The beauty of these techniques is that everything takes place at <em>compile time</em> with no runtime penalties: it’s template metaprogramming, after all. </p>
<h1 id="typedef-in-stl"><a href="#typedef-in-stl" class="headerlink" title="typedef in stl"></a>typedef in stl</h1><p>private 底下的那些，主要就是因为原类型名完整写出来太长，于是取个短名字。</p>
<p>public  底下那些，除了名字长以外，通常还有很重要一个原因：就是标准规定实现某种类型（典型的如容器，比如本例的 std::map），需要对外提供这些类型。最典型如图中的“iterator”和“const_iterator”，就是因为STL中的（正经）容器，需要对外提供“迭代器”类型和“常量迭代器”类型。 这样，当有一天你需要遍历一个 容器，比如map时，你才可以方便地这样写：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> ( std::map&lt;std::string, <span class="keyword">int</span>&gt;::const_iterator it = m.<span class="built_in">cbegin</span>(); it != m.<span class="built_in">cend</span>(); ++it)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure>

<p>那个 const_iterator 哪来的？就是在 map&lt;K, V&gt; 里定义的那个 typedef 。<br>链接：<a href="https://www.zhihu.com/question/441345616/answer/1699499726">https://www.zhihu.com/question/441345616/answer/1699499726</a></p>
<h1 id="ADL-argument-dependent-lookup"><a href="#ADL-argument-dependent-lookup" class="headerlink" title="ADL argument-dependent lookup"></a>ADL argument-dependent lookup</h1><p>Argument-dependent lookup, also known as ADL, or Koenig lookup [<a href="https://en.cppreference.com/w/cpp/language/adl#cite_note-1">1]</a>, is the set of rules for looking up the unqualified function names in <a href="https://en.cppreference.com/w/cpp/language/operator_other">function-call expressions</a>, including implicit function calls to <a href="https://en.cppreference.com/w/cpp/language/operators">overloaded operators</a>. These function names are looked up in the namespaces of their arguments in addition to the scopes and namespaces considered by the usual <a href="https://en.cppreference.com/w/cpp/language/lookup">unqualified name lookup</a>.</p>
<p>Argument-dependent lookup makes it possible to use operators defined in a different namespace. Example:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Test\n&quot;</span>; <span class="comment">// There is no operator&lt;&lt; in global namespace, but ADL</span></span><br><span class="line">                           <span class="comment">// examines std namespace because the left argument is in</span></span><br><span class="line">                           <span class="comment">// std and finds std::operator&lt;&lt;(std::ostream&amp;, const char*)</span></span><br><span class="line">    <span class="keyword">operator</span>&lt;&lt;(std::cout, <span class="string">&quot;Test\n&quot;</span>); <span class="comment">// same, using function call notation</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">// however,</span></span><br><span class="line">    std::cout &lt;&lt; endl; <span class="comment">// Error: &#x27;endl&#x27; is not declared in this namespace.</span></span><br><span class="line">                       <span class="comment">// This is not a function call to endl(), so ADL does not apply</span></span><br><span class="line"> </span><br><span class="line">    <span class="built_in">endl</span>(std::cout); <span class="comment">// OK: this is a function call: ADL examines std namespace</span></span><br><span class="line">                     <span class="comment">// because the argument of endl is in std, and finds std::endl</span></span><br><span class="line"> </span><br><span class="line">    (endl)(std::cout); <span class="comment">// Error: &#x27;endl&#x27; is not declared in this namespace.</span></span><br><span class="line">                       <span class="comment">// The sub-expression (endl) is not a function call expression</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="dependent-name-amp-name-binding"><a href="#dependent-name-amp-name-binding" class="headerlink" title="dependent name &amp; name binding"></a><a href="https://en.cppreference.com/w/cpp/language/dependent_name">dependent name</a> &amp; name binding</h1><p>inside the definition of a <a href="https://en.cppreference.com/w/cpp/language/templates">template</a> (both <a href="https://en.cppreference.com/w/cpp/language/class_template">class template</a> and <a href="https://en.cppreference.com/w/cpp/language/function_template">function template</a>), the meaning of some constructs may differ from one instantiation to another. In particular, types and expressions may <strong>depend on types of type template parameters and values of non-type template parameters.</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">X</span> :</span> B&lt;T&gt; <span class="comment">// &quot;B&lt;T&gt;&quot; is dependent on T</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">typename</span> T::A* pa; <span class="comment">// &quot;T::A&quot; is dependent on T</span></span><br><span class="line">                       <span class="comment">// (see below for the meaning of this use of &quot;typename&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(B&lt;T&gt;* pb)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">int</span> i = B&lt;T&gt;::i; <span class="comment">// &quot;B&lt;T&gt;::i&quot; is dependent on T</span></span><br><span class="line">        pb-&gt;j++; <span class="comment">// &quot;pb-&gt;j&quot; is dependent on T</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>name binding</p>
<p>为模板显式或隐式使用的每个名字寻找其声明 的过程称为名字绑定</p>
<p>模板中使用的名字分为依赖性名字 dependent name, 非依赖性名字</p>
<ul>
<li><p>dependent name<br>依赖于模板参数的名字, 在实例化点完成绑定<br>默认情况下, 编译器假定 dependent name 不是类型名, 如果需要, 必须用 typename 显式声明</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Container&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fct</span><span class="params">(Container&amp; c)</span></span>&#123;</span><br><span class="line">  Container::value_type v1 = c[<span class="number">7</span>];<span class="comment">//error</span></span><br><span class="line">  <span class="keyword">typename</span> Container::value_type v2 = c[<span class="number">9</span>];<span class="comment">//coorect</span></span><br><span class="line">  <span class="keyword">auto</span> v3 = c[<span class="number">11</span>];<span class="comment">//correct</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//或者使用别名</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">using</span> Value_type&lt;T&gt; = <span class="keyword">typename</span> T::value_type;</span><br></pre></td></tr></table></figure></li>
<li><p>independent name<br>不依赖于模板参数的名字, 在定义点完成绑定</p>
</li>
</ul>
</li>
</ul>
<h1 id="qualified-name"><a href="#qualified-name" class="headerlink" title="qualified name"></a>qualified name</h1><p>A <em>qualified</em> name is a name that appears on the right hand side of the scope resolution operator <code>::</code> (see also <a href="https://en.cppreference.com/w/cpp/language/identifiers#Qualified_identifiers">qualified identifiers</a>).</p>
<h1 id="nested-class"><a href="#nested-class" class="headerlink" title="nested class"></a>nested class</h1><p>A nested class is a class which is declared in another enclosing class. A nested class is a member and as such has the same access rights as any other member. </p>
<h1 id="typename"><a href="#typename" class="headerlink" title="typename"></a>typename</h1><p><a href="https://stackoverflow.com/questions/610245/where-and-why-do-i-have-to-put-the-template-and-typename-keywords">Where and why do I have to put the “template” and “typename” keywords?</a></p>
<p>(See <a href="https://stackoverflow.com/a/17579889/4561887">here also for my C++11 answer</a>)</p>
<p>In order to parse a C++ program, the compiler needs to know whether certain names are types or not. The following example demonstrates that:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">t * f;</span><br></pre></td></tr></table></figure>

<p>How should this be parsed? For many languages a compiler doesn’t need to know the meaning of a name in order to parse and basically know what action a line of code does. In C++, the above however can yield vastly different interpretations depending on what <code>t</code> means. If it’s a type, then it will be a declaration of a pointer <code>f</code>. However if it’s not a type, it will be a multiplication. So the C++ Standard says at paragraph (3/7):</p>
<blockquote>
<p>Some names denote types or templates. In general, <strong>whenever a name is encountered it is necessary to determine whether that name denotes one of these entities</strong> before continuing to parse the program that contains it. The process that determines this is called <strong>name lookup.</strong></p>
</blockquote>
<p>How will the compiler find out what a name <code>t::x</code> refers to, if <code>t</code> refers to a template type parameter? <code>x</code> could be a static int data member that could be multiplied or could equally well be a nested class or typedef that could yield to a declaration. <strong>If a name has this property - that it can’t be looked up until the actual template arguments are known - then it’s called a *dependent name* (it “depends” on the template parameters).</strong></p>
<p>You might recommend to just wait till the user instantiates the template:</p>
<blockquote>
<p><em>Let’s wait until the user instantiates the template, and then later find out the real meaning of <code>t::x \* f;</code>.</em></p>
</blockquote>
<p>This will work and actually is allowed by the Standard as a possible implementation approach. These compilers basically copy the template’s text into an internal buffer, and only when an instantiation is needed, they parse the template and possibly detect errors in the definition. But instead of bothering the template’s users (poor colleagues!) with errors made by a template’s author, other implementations choose to check templates early on and give errors in the definition as soon as possible, before an instantiation even takes place.</p>
<p>So there has to be a way to tell the compiler that certain names are types and that certain names aren’t.</p>
<h1 id="The-“typename”-keyword"><a href="#The-“typename”-keyword" class="headerlink" title="The “typename” keyword"></a>The “typename” keyword</h1><p>The answer is: <em>We</em> decide how the compiler should parse this. If <code>t::x</code> is a dependent name, then we need to prefix it by <code>typename</code> to tell the compiler to parse it in a certain way. The Standard says at (14.6/2):</p>
<blockquote>
<p>A name used in a template declaration or definition and that is dependent on a template-parameter <strong>is assumed not to name a type</strong> unless the applicable name lookup finds a type name or the name is qualified by the keyword typename.</p>
</blockquote>
<p>There are many names for which <code>typename</code> is not necessary, because the compiler can, with the applicable name lookup in the template definition, figure out how to parse a construct itself - for example with <code>T *f;</code>, when <code>T</code> is a type template parameter. But for <code>t::x * f;</code> to be a declaration, it must be written as <code>typename t::x *f;</code>. If you omit the keyword and the name is taken to be a non-type, but when instantiation finds it denotes a type, the usual error messages are emitted by the compiler. Sometimes, the error consequently is given at definition time:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// t::x is taken as non-type, but as an expression the following misses an operator between the two names or a semicolon separating them.</span></span><br><span class="line">t::x f;</span><br></pre></td></tr></table></figure>

<p><em>The syntax allows <code>typename</code> only before qualified names</em> - it is therefor taken as granted that unqualified names are always known to refer to types if they do so.</p>
<p>A similar gotcha exists for names that denote templates, as hinted at by the introductory text.</p>
<h1 id="The-“template”-keyword"><a href="#The-“template”-keyword" class="headerlink" title="The “template” keyword"></a>The “template” keyword</h1><p>Remember the initial quote above and how the Standard requires special handling for templates as well? Let’s take the following innocent-looking example:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">boost::function&lt; <span class="built_in"><span class="keyword">int</span></span>() &gt; f;</span><br></pre></td></tr></table></figure>

<p>It might look obvious to a human reader. Not so for the compiler. Imagine the following arbitrary definition of <code>boost::function</code> and <code>f</code>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> boost &#123; <span class="keyword">int</span> function = <span class="number">0</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </span><br><span class="line">  <span class="keyword">int</span> f = <span class="number">0</span>;</span><br><span class="line">  boost::function&lt; <span class="built_in"><span class="keyword">int</span></span>() &gt; f; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>That’s actually a <strong>valid <em>expression</em></strong>! It uses the less-than operator to compare <code>boost::function</code> against zero (<code>int()</code>), and then uses the greater-than operator to compare the resulting <code>bool</code> against <code>f</code>. However as you might well know, <code>boost::function</code> <a href="http://www.boost.org/doc/libs/1_54_0/doc/html/function.html">in real life</a> is a template, so the compiler knows (14.2/3):</p>
<blockquote>
<p>After name lookup (3.4) finds that a name is a template-name, if this name is followed by a &lt;, the &lt; is always taken as the beginning of a template-argument-list and never as a name followed by the less-than operator.</p>
</blockquote>
<p>Now we are back to the same problem as with <code>typename</code>. What if we can’t know yet whether the name is a template when parsing the code? We will need to insert <code>template</code> immediately before the template name, as specified by <code>14.2/4</code>. This looks like:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">t::<span class="keyword">template</span> f&lt;<span class="keyword">int</span>&gt;(); <span class="comment">// call a function template</span></span><br></pre></td></tr></table></figure>

<p>Template names can not only occur after a  <code>::</code>  but also after a <code>-&gt;</code> or <code>.</code> in a class member access. You need to insert the keyword there too:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>-&gt;<span class="keyword">template</span> f&lt;<span class="keyword">int</span>&gt;(); <span class="comment">// call a function template</span></span><br></pre></td></tr></table></figure>

<h1 id="Dependencies"><a href="#Dependencies" class="headerlink" title="Dependencies"></a>Dependencies</h1><p>For the people that have thick Standardese books on their shelf and that want to know what exactly I was talking about, I’ll talk a bit about how this is specified in the Standard.</p>
<p>In template declarations some constructs have different meanings depending on what template arguments you use to instantiate the template: Expressions may have different types or values, variables may have different types or function calls might end up calling different functions. Such constructs are generally said to <em>depend</em> on template parameters.</p>
<p>The Standard defines precisely the rules by whether a construct is dependent or not. It separates them into logically different groups: One catches types, another catches expressions. Expressions may depend by their value and/or their type. So we have, with typical examples appended:</p>
<ul>
<li>Dependent types (e.g: a type template parameter <code>T</code>)</li>
<li>Value-dependent expressions (e.g: a non-type template parameter <code>N</code>)</li>
<li>Type-dependent expressions (e.g: a cast to a type template parameter <code>(T)0</code>)</li>
</ul>
<p>Most of the rules are intuitive and are built up recursively: For example, a type constructed as <code>T[N]</code> is a dependent type if <code>N</code> is a value-dependent expression or <code>T</code> is a dependent type. The details of this can be read in section <code>(14.6.2/1</code>) for dependent types, <code>(14.6.2.2)</code> for type-dependent expressions and <code>(14.6.2.3)</code> for value-dependent expressions.</p>
<h1 id="Dependent-names"><a href="#Dependent-names" class="headerlink" title="Dependent names"></a>Dependent names</h1><p>The Standard is a bit unclear about what <em>exactly</em> is a <em>dependent name</em>. On a simple read (you know, the principle of least surprise), all it defines as a <em>dependent name</em> is the special case for function names below. But since clearly <code>T::x</code> also needs to be looked up in the instantiation context, it also needs to be a dependent name (fortunately, as of mid C++14 the committee has started to look into how to fix this confusing definition).</p>
<p>To avoid this problem, I have resorted to a simple interpretation of the Standard text. Of all the constructs that denote dependent types or expressions, a subset of them represent names. Those names are therefore “dependent names”. A name can take different forms - the Standard says:</p>
<blockquote>
<p>A name is a use of an identifier (2.11), operator-function-id (13.5), conversion-function-id (12.3.2), or template-id (14.2) that denotes an entity or label (6.6.4, 6.1)</p>
</blockquote>
<p>An identifier is just a plain sequence of characters / digits, while the next two are the <code>operator +</code> and <code>operator type</code> form. The last form is <code>template-name &lt;argument list&gt;</code>. All these are names, and by conventional use in the Standard, a name can also include qualifiers that say what namespace or class a name should be looked up in.</p>
<p>A value dependent expression <code>1 + N</code> is not a name, but <code>N</code> is. The subset of all dependent constructs that are names is called <em>dependent name</em>. Function names, however, may have different meaning in different instantiations of a template, but unfortunately are not caught by this general rule.</p>
<h1 id="Dependent-function-names"><a href="#Dependent-function-names" class="headerlink" title="Dependent function names"></a>Dependent function names</h1><p>Not primarily a concern of this article, but still worth mentioning: Function names are an exception that are handled separately. An identifier function name is dependent not by itself, but by the type dependent argument expressions used in a call. In the example <code>f((T)0)</code>, <code>f</code> is a dependent name. In the Standard, this is specified at <code>(14.6.2/1)</code>.</p>
<h1 id="Additional-notes-and-examples"><a href="#Additional-notes-and-examples" class="headerlink" title="Additional notes and examples"></a>Additional notes and examples</h1><p>In enough cases we need both of <code>typename</code> and <code>template</code>. Your code should look like the following</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> Tail&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">UnionNode</span> :</span> <span class="keyword">public</span> Tail &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> U&gt; <span class="class"><span class="keyword">struct</span> <span class="title">inUnion</span> &#123;</span></span><br><span class="line">        <span class="keyword">typedef</span> <span class="keyword">typename</span> Tail::<span class="keyword">template</span> inUnion&lt;U&gt; dummy;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>The keyword <code>template</code> doesn’t always have to appear in the last part of a name. It can appear in the middle before a class name that’s used as a scope, like in the following example</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typename</span> t::<span class="keyword">template</span> iterator&lt;<span class="keyword">int</span>&gt;::value_type v;</span><br></pre></td></tr></table></figure>

<p>In some cases, the keywords are forbidden, as detailed below</p>
<ul>
<li><p>On the name of a dependent base class you are not allowed to write <code>typename</code>. It’s assumed that the name given is a class type name. This is true for both names in the base-class list and the constructor initializer list:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">derive_from_Has_type</span> :</span> <span class="comment">/* typename */</span> SomeBase&lt;T&gt;::type </span><br><span class="line">&#123; &#125;;</span><br></pre></td></tr></table></figure></li>
<li><p>In using-declarations it’s not possible to use <code>template</code> after the last <code>::</code>, and the C++ committee <a href="http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_closed.html#109">said</a> not to work on a solution.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">derive_from_Has_type</span> :</span> SomeBase&lt;T&gt; &#123;</span><br><span class="line">   <span class="keyword">using</span> SomeBase&lt;T&gt;::<span class="keyword">template</span> type; <span class="comment">// error</span></span><br><span class="line">   <span class="keyword">using</span> <span class="keyword">typename</span> SomeBase&lt;T&gt;::type; <span class="comment">// typename *is* allowed</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="size-t"><a href="#size-t" class="headerlink" title="size_t"></a><a href="https://jeremybai.github.io/blog/2014/09/10/size-t">size_t</a></h1><p>每一个标准C实现应该选择足够大的无符号整形来代表该平台上最大可能出现的对象大小。</p>
<p>适当地使用size_t还会使你的代码变得如同自带文档。当你看到一个对象声明为size_t类型，你马上就知道它代表字节大小或数组索引，而不是错误代码或者是一个普通的算术值。</p>
<h1 id="compiler-default"><a href="#compiler-default" class="headerlink" title="compiler default"></a>compiler default</h1><h2 id="default-constructor"><a href="#default-constructor" class="headerlink" title="default constructor"></a>default constructor</h2><p>If no user-declared constructors of any kind are provided for a class type (struct, class, or union), the compiler will always declare a default constructor as an <code>inline public</code> member of its class.</p>
<p>it has the same effect as a user-defined constructor with <strong>empty body and empty initializer list.</strong></p>
<h2 id="destructor"><a href="#destructor" class="headerlink" title="destructor"></a>destructor</h2><p>If no user-declared prospective (since C++20)destructor is provided for a <a href="https://en.cppreference.com/w/cpp/language/class">class type</a> (struct, class, or union), the compiler will always declare a destructor as an <code>inline public</code> member of its class.</p>
<p>This implicitly-defined destructor has an <strong>empty body.</strong></p>
<h2 id="copy-constructor"><a href="#copy-constructor" class="headerlink" title="copy constructor"></a>copy constructor</h2><p>This implicitly-declared copy constructor has the form T::T(const T&amp;) if all of the following are true:</p>
<ul>
<li>each direct and virtual base <code>B</code> of <code>T</code> has a copy constructor whose parameters are const B&amp; or const volatile B&amp;;</li>
<li>each non-static data member <code>M</code> of <code>T</code> of class type or array of class type has a copy constructor whose parameters are const M&amp; or const volatile M&amp;.</li>
</ul>
<p>For non-union class types (class and struct), the constructor performs full member-wise copy of the object’s <strong>bases and non-static members</strong>, in their initialization order, using direct initialization. </p>
<h2 id="copy-assignment"><a href="#copy-assignment" class="headerlink" title="copy assignment"></a>copy assignment</h2><p>For non-union class types (class and struct), the operator performs member-wise copy assignment of the object’s <strong>bases and non-static members</strong>, in their initialization order, using <strong>built-in assignment for the scalars and copy assignment operator for class types</strong>.</p>
<h2 id="move-assignment"><a href="#move-assignment" class="headerlink" title="move assignment"></a>move assignment</h2><p>For non-union class types (class and struct), the move assignment operator performs full member-wise move assignment of the object’s direct <strong>bases and immediate non-static members</strong>, in their declaration order, using <strong>built-in assignment for the scalars, memberwise move-assignment for arrays, and move assignment operator for class types</strong> (called non-virtually).</p>
<h1 id="UNIX-Linux-GNU"><a href="#UNIX-Linux-GNU" class="headerlink" title="UNIX Linux GNU"></a>UNIX Linux GNU</h1><ul>
<li>UNIX 非开源 AT&amp;T</li>
<li>BSD 为 UNIX 一个开源版本</li>
<li>GNU(GNU is not UNIX) 开源软件项目</li>
<li>Linux Linus 写的内核, 属于类 UNIX, 兼容 POSIX</li>
</ul>
<h1 id="运算符重载-operator-overload"><a href="#运算符重载-operator-overload" class="headerlink" title="运算符重载 operator overload"></a><a href="https://en.cppreference.com/w/cpp/language/operators">运算符重载 operator overload</a></h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">T</span>&#123;</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    std::string s;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">T</span>(T &amp;t):<span class="built_in">i</span>(t.i), <span class="built_in">s</span>(t.s)&#123;&#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//copy assignment</span></span><br><span class="line">    T&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> T&amp; other)&#123;<span class="keyword">return</span> *<span class="keyword">this</span>;&#125;</span><br><span class="line">    <span class="comment">//move assignment</span></span><br><span class="line">    T&amp; <span class="keyword">operator</span>=(T&amp;&amp; other)&#123;<span class="keyword">return</span> *<span class="keyword">this</span>;&#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//stream extraction</span></span><br><span class="line">    <span class="keyword">friend</span> std::ostream&amp; <span class="keyword">operator</span>&lt;&lt;(std::ostream&amp; os, <span class="keyword">const</span> T&amp; obj);</span><br><span class="line">    <span class="comment">//stream insertion</span></span><br><span class="line">    <span class="keyword">friend</span> std::istream&amp; <span class="keyword">operator</span>&gt;&gt;(std::istream&amp; is, <span class="keyword">const</span> T&amp; obj);</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//prefix ++</span></span><br><span class="line">    T&amp; <span class="keyword">operator</span> ++()&#123;<span class="keyword">return</span> *<span class="keyword">this</span>;&#125;</span><br><span class="line">    <span class="comment">//postfix ++</span></span><br><span class="line">    T <span class="keyword">operator</span> ++(<span class="keyword">int</span>)&#123;</span><br><span class="line">        T old = *<span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">operator</span>++();</span><br><span class="line">        <span class="keyword">return</span> old;</span><br><span class="line">    &#125;</span><br><span class="line">    T&amp; <span class="keyword">operator</span> --()&#123;<span class="keyword">return</span> *<span class="keyword">this</span>;&#125;</span><br><span class="line">    <span class="comment">//postfix --</span></span><br><span class="line">    T <span class="keyword">operator</span> --(<span class="keyword">int</span>)&#123;</span><br><span class="line">        T old = *<span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">operator</span>--();</span><br><span class="line">        <span class="keyword">return</span> old;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//+, +=</span></span><br><span class="line">    T&amp; <span class="keyword">operator</span>+=(<span class="keyword">const</span> T&amp; rhs)&#123;<span class="keyword">return</span> *<span class="keyword">this</span>;&#125;</span><br><span class="line">    <span class="keyword">friend</span> T <span class="keyword">operator</span>+(T lhs, <span class="keyword">const</span> T&amp; rhs)&#123;</span><br><span class="line">        lhs += rhs;</span><br><span class="line">        <span class="keyword">return</span> lhs;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//comparison &lt; first</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt; (<span class="keyword">const</span> T&amp; lhs, <span class="keyword">const</span> T&amp; rhs)&#123; <span class="comment">/* do actual comparison */</span> &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&gt; (<span class="keyword">const</span> T&amp; lhs, <span class="keyword">const</span> T&amp; rhs)&#123; <span class="keyword">return</span> rhs &lt; lhs; &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;=(<span class="keyword">const</span> T&amp; lhs, <span class="keyword">const</span> T&amp; rhs)&#123; <span class="keyword">return</span> !(lhs &gt; rhs); &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&gt;=(<span class="keyword">const</span> T&amp; lhs, <span class="keyword">const</span> T&amp; rhs)&#123; <span class="keyword">return</span> !(lhs &lt; rhs); &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> T&amp; lhs, <span class="keyword">const</span> T&amp; rhs)&#123; <span class="comment">/* do actual comparison */</span> &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span>!=(<span class="keyword">const</span> T&amp; lhs, <span class="keyword">const</span> T&amp; rhs)&#123; <span class="keyword">return</span> !(lhs == rhs); &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//function call</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;&#125;</span><br><span class="line">  </span><br><span class="line">  	<span class="comment">//pointer</span></span><br><span class="line">    T&amp; <span class="keyword">operator</span>*() &#123;<span class="keyword">return</span> *<span class="keyword">this</span>;&#125;</span><br><span class="line">    T* <span class="keyword">operator</span>-&gt;()&#123;<span class="keyword">return</span> &amp;(<span class="keyword">operator</span>*());&#125;</span><br><span class="line">  </span><br><span class="line">  	<span class="comment">//type cast</span></span><br><span class="line">  	<span class="function"><span class="keyword">operator</span> <span class="title">int</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> i;&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line">std::ostream&amp; <span class="keyword">operator</span>&lt;&lt;(std::ostream&amp; os, <span class="keyword">const</span> T&amp; obj)&#123;<span class="keyword">return</span> os;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line">std::istream&amp; <span class="keyword">operator</span>&gt;&gt;(std::istream&amp; is, <span class="keyword">const</span> T&amp; obj)&#123;<span class="keyword">return</span> is;&#125;</span><br></pre></td></tr></table></figure>

<p>注:</p>
<ul>
<li><p>&lt;&lt; &gt;&gt; 运算符重载</p>
<p>These operators must be overloaded as a global function. And if we want to allow them to access private data members of the class, we must make them friend. </p>
<p><strong>Why these operators must be overloaded as global?</strong><br>In operator overloading, if an operator <strong>is overloaded as a member, then it must be a member of the object on the left side of the operator</strong>. For example, consider the statement “ob1 + ob2” (let ob1 and ob2 be objects of two different classes). To make this statement compile, we must overload ‘+’ in a class of ‘ob1’ or make ‘+’ a global function.<br>The operators ‘&lt;&lt;‘ and ‘&gt;&gt;’ are called like ‘cout &lt;&lt; ob1’ and ‘cin &gt;&gt; ob1’. So if we want to make them a member method, then they must be made members of ostream and istream classes, which is not a good option most of the time. Therefore, these operators are overloaded as global functions with two parameters, cout and object of user-defined class.</p>
</li>
<li><p>public or private?</p>
</li>
<li><p>(+, +=)Binary operators are typically implemented as non-members to maintain symmetry (for example, when adding a complex number and an integer, if <code>operator+</code> is a member function of the complex type, then only complex+integer would compile, and not integer+complex).Since for every binary arithmetic operator there exists a corresponding compound assignment operator, canonical forms of binary operators are implemented in terms of their compound assignments:</p>
</li>
<li><p>Standard algorithms such as <a href="http://en.cppreference.com/w/cpp/algorithm/sort">std::sort</a> and containers such as <a href="http://en.cppreference.com/w/cpp/container/set">std::set</a> expect operator&lt; to be defined, by default</p>
</li>
<li><p>++ –++</p>
<p>++lvalue ⇒ lvalue+=1 ⇒ lvalue = lvalue+1</p>
<p>y=x++ ⇒ y=(t=x, x=x+1, t)</p>
</li>
</ul>
<h1 id="自引用-this"><a href="#自引用-this" class="headerlink" title="自引用 this"></a>自引用 this</h1><p>状态更新函数, 一种很有用的技术是令他们返回已更新对象的返回值</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">Date&amp; <span class="title">Date::add_year</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(d==<span class="number">29</span> &amp;&amp; m==<span class="number">2</span> &amp;&amp; !<span class="built_in">leapyear</span>(y+n))&#123;</span><br><span class="line">    d=<span class="number">1</span>;</span><br><span class="line">    m=<span class="number">3</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  y+=n;</span><br><span class="line">  <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在类 X 的 nonconst 成员函数中, this 的类型时 X*</p>
<p>在类 X 的 const 成员函数中, this 的类型时 const X*</p>
<h1 id="explicit"><a href="#explicit" class="headerlink" title="explicit"></a>explicit</h1><p><code>explicit</code>的作用是用来声明类构造函数是显示调用的，而非隐式调用，所以只用于修饰单参构造函数。因为无参构造函数和多参构造函数本身就是显示调用的。再加上<code>explicit</code>关键字也没有什么意义。</p>
<h1 id="internal-linkage"><a href="#internal-linkage" class="headerlink" title="internal linkage"></a>internal linkage</h1><p>When you write an implementation file (<code>.cpp</code>, <code>.cxx</code>, etc) your compiler generates a <strong>translation unit</strong>. This is the source file from your implementation plus all the headers you <code>#include</code> in it.</p>
<p><em>Internal linkage</em> refers to everything only <strong>in scope of a translation unit</strong>.</p>
<p><em>External linkage</em> refers to things that exist beyond a particular translation unit. In other words, <strong>accessible through the whole program</strong>, which is the combination of all translation units (or object files).</p>
<p>You can explicitly control the linkage of a symbol by using the <code>extern</code> and <code>static</code> keywords. If the linkage is not specified then the default linkage is <code>extern</code> (external linkage) for non-<code>const</code> symbols and <code>static</code> (internal linkage) for <code>const</code> symbols.</p>
<p>Note that instead of using <code>static</code> (internal linkage), it is better to use <a href="https://stackoverflow.com/questions/154469/unnamed-anonymous-namespaces-vs-static-functions"><em>anonymous</em> namespaces</a> into which you can also put <code>class</code>es. Though they allow <code>extern</code> linkage, anonymous namespaces are unreachable from other translation units, making linkage <em>effectively</em> <code>static</code>.</p>
<h1 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h1><p>重载解析与函数声明的次序无关</p>
<p>重载解析过程中不考虑函数的返回类型, 独立于上下文</p>
<h1 id="对象与引用"><a href="#对象与引用" class="headerlink" title="对象与引用"></a>对象与引用</h1><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><h3 id="临时对象"><a href="#临时对象" class="headerlink" title="临时对象"></a>临时对象</h3><p>除非我们把临时对象绑定到引用上或者用它初始化一个命名对象, 否则大多数时候在临时对象所在的完整表达式末尾, 他就被销毁了</p>
<h3 id="普通对象"><a href="#普通对象" class="headerlink" title="普通对象"></a>普通对象</h3><p>对象(object) –&gt; 一段内存空间</p>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><h3 id="左值引用"><a href="#左值引用" class="headerlink" title="左值引用"></a>左值引用</h3><p>有身份的对象的引用</p>
<h3 id="右值引用"><a href="#右值引用" class="headerlink" title="右值引用"></a><a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n2027.html">右值引用</a></h3><p>可移动的对象的引用</p>
<h2 id="左值右值引用"><a href="#左值右值引用" class="headerlink" title="左值右值引用"></a>左值右值引用</h2><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gxbenbxsxmj30e60323yf.jpg" alt="image-20211212221135490"></p>
<p>有身份 i</p>
<p>可移动 m</p>
<p>The original definition of lvalues and rvalues from the earliest days of C is as follows: <strong>An <em>lvalue</em> is an expression <code>e</code> that may appear on the left or on the right hand side of an assignment, whereas an <em>rvalue</em> is an expression that can only appear on the right hand side of an assignment.</strong></p>
<p>An <em>lvalue</em> is an expression that refers to a <strong>memory location</strong> and allows us to take the address of that <strong>memory location</strong> <strong>via the <code>&amp;</code> operator</strong>. An <em>rvalue</em> is an expression that is not an lvalue.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">X <span class="title">foo</span><span class="params">()</span></span>;</span><br><span class="line">X x;</span><br><span class="line"><span class="comment">// perhaps use x in various ways</span></span><br><span class="line">x = <span class="built_in">foo</span>();</span><br></pre></td></tr></table></figure>

<p>其中<code>x = foo()</code>包括以下步骤</p>
<ul>
<li>clones the resource from the temporary returned by <code>foo</code>,</li>
<li>destructs the resource held by <code>x</code> and replaces it with the clone,</li>
<li>destructs the temporary and thereby releases its resource.</li>
</ul>
<p>move action is aimed to swap the resource instead of clone it</p>
<p>you can overload in different ways</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">(X&amp; x)</span></span>; <span class="comment">// lvalue reference overload</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">(X&amp;&amp; x)</span></span>; <span class="comment">// rvalue reference overload</span></span><br><span class="line"></span><br><span class="line">X x;</span><br><span class="line"><span class="function">X <span class="title">foobar</span><span class="params">()</span></span>;</span><br><span class="line"><span class="built_in">foo</span>(x); <span class="comment">// argument is lvalue: calls foo(X&amp;)</span></span><br><span class="line"><span class="built_in">foo</span>(<span class="built_in">foobar</span>()); <span class="comment">// argument is rvalue: calls foo(X&amp;&amp;)</span></span><br><span class="line"></span><br><span class="line">X&amp; X::<span class="keyword">operator</span>=(X <span class="keyword">const</span> &amp; rhs); <span class="comment">// classical implementation</span></span><br><span class="line">X&amp; X::<span class="keyword">operator</span>=(X&amp;&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// Move semantics: exchange content between this and rhs</span></span><br><span class="line">  <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">string var &#123;<span class="string">&quot;hello&quot;</span>&#125;;</span><br><span class="line"><span class="function">string <span class="title">f</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">string&amp; r1&#123;var&#125;;</span><br><span class="line">string&amp; r2&#123;<span class="built_in">f</span>()&#125;;<span class="comment">//error f() is rvalue</span></span><br><span class="line">string&amp; r3&#123;<span class="string">&quot;hello&quot;</span>&#125;;<span class="comment">//error 不允许绑定到临时变量</span></span><br><span class="line"></span><br><span class="line">string&amp;&amp; rr1&#123;<span class="built_in">f</span>()&#125;;</span><br><span class="line">string&amp;&amp; rr2&#123;var&#125;;<span class="comment">//error var is lvalue</span></span><br><span class="line">string&amp;&amp; rr3&#123;<span class="string">&quot;hello&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> string&amp; cr1 &#123;<span class="string">&quot;hello&quot;</span>&#125;;</span><br></pre></td></tr></table></figure>

<p>除非我们把临时对象绑定到引用上或者用它初始化一个命名对象, 否则大多数时候在临时对象所在的完整表达式末尾, 他就被销毁了</p>
<p>临时量可以用作 const 引用或者命名对象的初始化器(见why rvalue is allowed to passed by const reference)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fs</span><span class="params">(string&amp; s1, string&amp; s2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> string&amp; cs = s1+s2;<span class="comment">//ok</span></span><br><span class="line">    string ss = s1+s2;<span class="comment">//ok</span></span><br><span class="line"></span><br><span class="line">    string&amp; s = s1+s2;<span class="comment">//error</span></span><br><span class="line">		<span class="comment">//non-const lvalue reference to type &#x27;basic_string&lt;...&gt;&#x27; cannot bind to a temporary of type &#x27;basic_string&lt;...&gt;&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="why-rvalue-is-allowed-to-passed-by-const-reference"><a href="#why-rvalue-is-allowed-to-passed-by-const-reference" class="headerlink" title="why rvalue is allowed to passed by const reference"></a><a href="https://herbsutter.com/2008/01/01/gotw-88-a-candidate-for-the-most-important-const/">why rvalue is allowed to passed by const reference</a></h1><p>C++ deliberately specifies that <strong>binding a temporary object to a reference <em>to const</em> on the stack lengthens the lifetime of the temporary to the lifetime of the reference itself</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Example 1 legal</span></span><br><span class="line"><span class="function">string <span class="title">f</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="string">&quot;abc&quot;</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">g</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">const</span> string&amp; s = <span class="built_in">f</span>();</span><br><span class="line">  cout &lt;&lt; s &lt;&lt; endl;    <span class="comment">// can we still use the &quot;temporary&quot; object? yes</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Example 2 illegal</span></span><br><span class="line"><span class="function">string <span class="title">f</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="string">&quot;abc&quot;</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">g</span><span class="params">()</span> </span>&#123;</span><br><span class="line">string&amp; s = <span class="built_in">f</span>();       <span class="comment">// still legal? no</span></span><br><span class="line">  cout &lt;&lt; s &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Example 3</span></span><br><span class="line"></span><br><span class="line"><span class="function">Derived <span class="title">factory</span><span class="params">()</span></span>; <span class="comment">// construct a Derived object</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">g</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> Base&amp; b = <span class="built_in">factory</span>(); <span class="comment">// calls Derived::Derived here</span></span><br><span class="line">  <span class="comment">// … use b …</span></span><br><span class="line">&#125; <span class="comment">// calls Derived::~Derived directly here — not Base::~Base + virtual dispatch!</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//example to explain eg3</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">base</span> &#123;</span></span><br><span class="line">    ~<span class="built_in">base</span>() &#123; std::cout &lt;&lt; <span class="string">&quot;base&quot;</span>&lt;&lt;endl; &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">derived</span> :</span> base &#123;</span><br><span class="line">    ~<span class="built_in">derived</span>() &#123; std::cout &lt;&lt; <span class="string">&quot;derived&quot;</span>&lt;&lt;endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">derived <span class="title">f</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;f&quot;</span>&lt;&lt;endl;</span><br><span class="line">    derived d;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;f&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    base * p = <span class="keyword">new</span> derived;</span><br><span class="line">    <span class="keyword">delete</span> p;</span><br><span class="line">    <span class="keyword">const</span> base&amp; c = <span class="built_in">f</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//output: </span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">base</span></span><br><span class="line"><span class="comment">f</span></span><br><span class="line"><span class="comment">f</span></span><br><span class="line"><span class="comment">derived</span></span><br><span class="line"><span class="comment">base</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//~base 不是虚函数, 说明 c 的销毁直接调用 ~derived, </span></span><br><span class="line"><span class="comment">//而不是~base + virtual dispatch</span></span><br><span class="line"><span class="comment">//所以例子3 说明的就是 temporary binded to const ref 析构函数直接调用 temporary 类型的析构函数</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>only lvalues can be bound to references to non-const.</p>
<h1 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h1><p>使用=进行初始化可能会发生窄化转换, 使用初始化列表不会, 所以推荐使用初始化列表, 但是 auto 不推荐, 因为会得到 list 类型.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">X a1 &#123;v&#125;;</span><br><span class="line">X a2 = &#123;v&#125;;</span><br><span class="line">X a3 = v;</span><br><span class="line"><span class="function">X <span class="title">a4</span><span class="params">(v)</span></span>;</span><br><span class="line"><span class="comment">//newß</span></span><br><span class="line">CTest*  pTest = <span class="keyword">new</span>  <span class="built_in">CTest</span>();</span><br></pre></td></tr></table></figure>

<p>缺少初始化容器</p>
<ul>
<li>全局变量, 局部 static 变量, static 成员会执行{} 初始化</li>
<li>局部变量, 堆对象, 除非位于默认构造函数中, 否则不会进行默认初始化</li>
</ul>
<h1 id="raw-string"><a href="#raw-string" class="headerlink" title="raw string"></a>raw string</h1><p>C++11 引入了原始字符串。最基本的用法是<code>R&quot;(...)&quot;</code>，由<code>R</code>开头，双引号内包围着<code>(...)</code>，实际的字符序列是小括号内的内容，小括号是字符序列的定界符。当然，左小括号和右小括号是首位对应的。</p>
<p>“原始”（raw）体现在字符串里的字符一就是一，二就是二，不会给你转义。也就是说，传统的<code>&quot;\\n&quot;</code>除了字符串结尾符，仅包含换行符，而原始字符串<code>R&quot;(\\n)&quot;</code>则包含反斜杠和字符<code>n</code>，这是明显的不同。</p>
<p>从现在来看，貌似已经很好的解决问题了，但如果字符序列里包含<code>)&quot;</code>，如<code>R&quot;(坐标: &quot;(x,y)&quot;)&quot;</code>，此时编译器是懵的，因为<code>&quot;(</code>对应了两个<code>)&quot;</code>。在这种情况下，我们可以选择其他定界符，如，<code>R&quot;&amp;(坐标: &quot;(x,y)&quot;)&amp;&quot;</code>。语法如下：<code>R&quot;delim(...)delim&quot;</code>，<code>delim</code>的选取比较灵活，最长不超过16个字符，且不为小括号、空白、控制字符和反斜杠。</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gxad138yhzj30rk0igwgr.jpg" alt="image-20211212003002953"></p>
<h1 id="变量与类型"><a href="#变量与类型" class="headerlink" title="变量与类型"></a>变量与类型</h1><ul>
<li>类型 type: 定义一组可能的值以及一组操作</li>
<li>对象 object: 存放某类型的内存空间</li>
<li>值 value: 一组二进制位, 含义由其类型决定</li>
<li>变量 variable: 是一个命名的对象</li>
</ul>
<h1 id="函数对象-函子"><a href="#函数对象-函子" class="headerlink" title="函数对象(函子)"></a>函数对象(函子)</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Less_than</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">const</span> T val;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Less_than</span>(<span class="keyword">const</span> T&amp; v) :<span class="built_in">val</span>(v)&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> T&amp; x)</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> x&lt;val;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//function call</span></span><br><span class="line"></span><br><span class="line">Less_than&lt;<span class="keyword">int</span>&gt; lti &#123;<span class="number">42</span>&#125;;</span><br><span class="line"><span class="built_in">lti</span>(<span class="number">36</span>);</span><br></pre></td></tr></table></figure>

<h1 id="模板-template"><a href="#模板-template" class="headerlink" title="模板 template"></a>模板 template</h1><p>模板类声明</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vector</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">      <span class="built_in">Vector</span>(<span class="keyword">int</span> s);</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>模板函数声明</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">Vector&lt;T&gt;::<span class="built_in">Vector</span>(<span class="keyword">int</span> s)&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="enum"><a href="#enum" class="headerlink" title="enum"></a>enum</h1><p>使用 enum class 定义枚举类型时不能与 int 类型互相转换,  运算只有&gt; &lt; ==, 而且 enum class 的枚举值名字位于 enum 局部作用域内</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="keyword">class</span> <span class="title">Traffic_light</span> &#123;</span>red, yellow, green&#125;;</span><br><span class="line">Traffic_light l = Traffic_light::red;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Warning</span> &#123;</span>green, yellow, orange, red&#125;;</span><br><span class="line">Warning w = green;</span><br></pre></td></tr></table></figure>

<h1 id="literal-type"><a href="#literal-type" class="headerlink" title="literal type"></a><a href="https://en.cppreference.com/w/cpp/named_req/LiteralType">literal type</a></h1><p>Literal types are the types of <a href="https://en.cppreference.com/w/cpp/language/constexpr"><code>constexpr</code> variables</a> and they can be constructed, manipulated, and returned from <a href="https://en.cppreference.com/w/cpp/language/constexpr"><code>constexpr</code> functions</a>.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">A</span> &#123;</span> <span class="function"><span class="keyword">constexpr</span> <span class="title">A</span><span class="params">(<span class="keyword">int</span>)</span> </span>= <span class="keyword">delete</span>; <span class="keyword">char</span> c; &#125;;  <span class="comment">// A is a literal type</span></span><br><span class="line"><span class="keyword">constexpr</span> A v = std::bit_cast&lt;A&gt;(<span class="string">&#x27;0&#x27;</span>);  <span class="comment">// OK in C++20</span></span><br><span class="line">                                        <span class="comment">// v has literal type and thus can be constexpr</span></span><br></pre></td></tr></table></figure>



<h1 id="constexpr"><a href="#constexpr" class="headerlink" title="constexpr"></a><a href="https://en.cppreference.com/w/cpp/language/constexpr">constexpr</a></h1><p>编译时求值</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="keyword">double</span> <span class="title">func1</span><span class="params">(<span class="keyword">double</span> i)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="keyword">double</span> <span class="title">func2</span><span class="params">(<span class="keyword">double</span> i)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">12</span>+<span class="number">13</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> I = <span class="number">17</span>;</span><br><span class="line">    <span class="keyword">int</span> var = <span class="number">17</span>;</span><br><span class="line"><span class="comment">//    constexpr double x1 = sqrt(I);</span></span><br><span class="line"><span class="comment">//    constexpr double x2 = sqrt(var);</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">double</span> x3 = <span class="built_in">sqrt</span>(I);</span><br><span class="line">    <span class="keyword">constexpr</span> <span class="keyword">double</span> x4 = <span class="number">17</span>+<span class="number">18</span>;</span><br><span class="line">    <span class="keyword">constexpr</span> <span class="keyword">double</span> x5 = I;</span><br><span class="line"><span class="comment">//    constexpr double x6 = var;</span></span><br><span class="line">    <span class="keyword">constexpr</span> <span class="keyword">double</span> x7 = <span class="built_in">func1</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">constexpr</span> <span class="keyword">double</span> x8 = <span class="built_in">func2</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">constexpr</span> <span class="keyword">double</span> x9 = <span class="built_in">func1</span>(I);</span><br><span class="line"><span class="comment">//    constexpr double x10 = func1(var);</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//注释掉的代码为错误代码</span></span><br></pre></td></tr></table></figure>



<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">int</span> <span class="title">array_size1</span> <span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Error, constant expression required in array declaration</span></span><br><span class="line"><span class="comment">//???</span></span><br><span class="line"><span class="keyword">int</span> array[<span class="built_in">array_size1</span>(<span class="number">10</span>)];    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="keyword">int</span> <span class="title">array_size2</span> <span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; </span><br><span class="line">  <span class="keyword">return</span> x+<span class="number">1</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// OK, constexpr functions can be evaluated at compile time</span></span><br><span class="line"><span class="comment">// and used in contexts that require constant expressions. </span></span><br><span class="line"><span class="keyword">int</span> array[<span class="built_in">array_size2</span>(<span class="number">10</span>)];     </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S</span> &#123;</span></span><br><span class="line">  <span class="built_in">S</span>() &#123; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">constexpr</span> <span class="title">S</span><span class="params">(<span class="keyword">int</span>)</span> </span>&#123; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">constexpr</span> <span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">f</span><span class="params">()</span> </span>&#123;  <span class="comment">// Error, f must not be virtual.</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">55</span>;</span><br><span class="line">  &#125;       </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">NL</span> &#123;</span></span><br><span class="line">  ~<span class="built_in">NL</span>() &#123; &#125;  <span class="comment">// The user-provided destructor (even if it is trivial) </span></span><br><span class="line">             <span class="comment">// makes the type a non-literal type.</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> NL <span class="title">f1</span><span class="params">()</span> </span>&#123;  <span class="comment">// Error, return type of f1 must be a literal type.</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">NL</span>();</span><br><span class="line">&#125;       </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="keyword">int</span> <span class="title">f2</span><span class="params">(NL)</span> </span>&#123;  <span class="comment">// Error, the parameter type NL is not a literal type.</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">55</span>; </span><br><span class="line">&#125;                 </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> S <span class="title">f3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">S</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> &#123;</span> val = <span class="built_in">f3</span>() &#125;;  <span class="comment">// Error, initialization of the return value in f3()</span></span><br><span class="line">                      <span class="comment">// uses a non-constexpr constructor.</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="keyword">void</span> <span class="title">f4</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;  <span class="comment">// Error, return type should not be void.</span></span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="keyword">int</span> <span class="title">f5</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="comment">// Error, function body contains more than</span></span><br><span class="line">  <span class="keyword">if</span> (x&lt;<span class="number">0</span>)                <span class="comment">// return statement.</span></span><br><span class="line">    x = -x;</span><br><span class="line">  <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="c-v-qualified-class"><a href="#c-v-qualified-class" class="headerlink" title="c-v qualified class"></a><a href="https://en.cppreference.com/w/cpp/language/cv">c-v qualified class</a></h1><p>const and volatile class</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// non cv_qualified </span></span><br><span class="line"><span class="keyword">int</span> first; </span><br><span class="line"><span class="keyword">char</span> *second; </span><br><span class="line"></span><br><span class="line"><span class="comment">// cv-qualified </span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> third; </span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">char</span> * fourth; </span><br></pre></td></tr></table></figure>

<p>For any type <code>T</code> (including incomplete types), other than <a href="https://en.cppreference.com/w/cpp/language/functions">function type</a> or <a href="https://en.cppreference.com/w/cpp/language/reference">reference type</a>, there are three more distinct types in the C++ type system: <em>const-qualified</em> <code>T</code>, <em>volatile-qualified</em> <code>T</code>, and <em>const-volatile-qualified</em> <code>T</code>.</p>
<ul>
<li><em><strong>const object</strong></em> - an object whose type is <em>const-qualified</em>, or a non-mutable subobject of a const object. <strong>Such object cannot be modified: attempt to do so directly is a compile-time error</strong>, and attempt to do so indirectly (e.g., by modifying the const object through a reference or pointer to non-const type) results in undefined behavior.</li>
<li><em><strong>volatile object</strong></em> - an object whose type is <em>volatile-qualified</em>, or a subobject of a volatile object, or a mutable subobject of a const-volatile object. Every access (read or write operation, member function call, etc.) made through a glvalue(A <em>glvalue expression</em> is either lvalue or xvalue.) expression of volatile-qualified type is treated as a visible side-effect for the <a href="https://en.cppreference.com/w/cpp/language/as_if">purposes of optimization</a> (that is, within a single thread of execution, volatile accesses cannot be optimized out or reordered with another visible side effect that is <a href="https://en.cppreference.com/w/cpp/language/eval_order">sequenced-before</a> or sequenced-after the volatile access. This makes volatile objects suitable for communication with a <a href="https://en.cppreference.com/w/cpp/utility/program/signal">signal handler</a>, but not with another thread of execution, see <a href="https://en.cppreference.com/w/cpp/atomic/memory_order">std::memory_order</a>). Any attempt to refer to a volatile object through a <a href="https://en.cppreference.com/w/cpp/language/value_category#glvalue">glvalue</a> of non-volatile type (e.g. through a reference or pointer to non-volatile type) results in undefined behavior.</li>
<li><em><strong>const volatile object</strong></em> - an object whose type is <em>const-volatile-qualified</em>, a non-mutable subobject of a const volatile object, a const subobject of a volatile object, or a non-mutable volatile subobject of a const object. Behaves as both a const object and as a volatile object.</li>
</ul>
<h1 id="accumulation"><a href="#accumulation" class="headerlink" title="accumulation"></a>accumulation</h1><p><code>#include &lt;numeric&gt;</code></p>
<h1 id="c-11-vscode"><a href="#c-11-vscode" class="headerlink" title="c++11 vscode"></a>c++11 vscode</h1><p>“clang.cxxflags”: [“-std=c++14”]</p>
<p>setting.json</p>
<p><strong>C++ Clang Command Adapter</strong> 删除!!!!<br>原因应该是这个插件不继承c_cpp_properties.json中设置的C++版本</p>
<h1 id="mid"><a href="#mid" class="headerlink" title="mid"></a>mid</h1><p><code>mid = (l+r)/2;</code></p>
<p><code>mid = l+(r-l)/2;</code></p>
<p>防溢出</p>
<h1 id="std-vector-lt-bool-gt"><a href="#std-vector-lt-bool-gt" class="headerlink" title="std::vector&lt;bool&gt;"></a><a href="http://blog.csdn.net/haolexiao/article/details/56837445">std::vector&lt;bool&gt;</a></h1><p>vector<bool>并不是一个STL容器，不是一个STL容器，不是一个STL容器！</p>
<p>首先<strong>vector&lt; bool&gt; 并不是一个通常意义上的<a href="https://www.zhihu.com/search?q=vector%E5%AE%B9%E5%99%A8&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:148258487%7D">vector容器</a><strong>，这个源自于历史遗留问题。 早在C++98的时候，就有vector&lt; bool&gt;这个类型了，但是因为当时为了考虑到节省空间的想法，</strong>所以vector&lt; bool&gt;里面不是一个Byte一个Byte储存的，它是一个bit一个bit储存的！</strong></p>
<p>因为C++没有直接去给一个bit来操作，所以用operator[]的时候，正常容器返回的应该是一个对应元素的引用，但是对于vector&lt; bool&gt;实际上访问的是一个”proxy reference”而不是一个”true reference”，返回的是”std::vector&lt; bool&gt;:reference”类型的对象。 而一般情况情况下</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="keyword">bool</span>&gt; c&#123; <span class="literal">false</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">true</span>, <span class="literal">false</span> &#125;; </span><br><span class="line"><span class="keyword">bool</span> b = c[<span class="number">0</span>]; </span><br><span class="line"><span class="keyword">auto</span> d = c[<span class="number">0</span>]; </span><br></pre></td></tr></table></figure>

<p>对于b的初始化它其实暗含了一个隐式的类型转换。</p>
<p><strong>此时 auto 代表的是一个右值引用</strong></p>
<p>而对于d，它的类型并不是bool，而是一个vector&lt; bool&gt;中的一个内部类。     </p>
<p>而此时如果修改d的值，c中的值也会跟着修改</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">d = true;</span><br><span class="line">for(auto i:c)</span><br><span class="line">    cout&lt;&lt;i&lt;&lt;&quot; &quot;;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line">//上式会输出1 1 0 1 0</span><br></pre></td></tr></table></figure>

<p>而如果c被销毁，d就会变成一个悬垂指针，再对d操作就属于未定义行为。</p>
<p>而为什么说vector&lt; bool&gt;不是一个标准容器，就是因为它不能支持一些容器该有的基本操作，诸如取地址给指针初始化操作</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="keyword">bool</span>&gt; c&#123; <span class="literal">false</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">true</span>, <span class="literal">false</span> &#125;; </span><br><span class="line">&amp;tmp = c[<span class="number">0</span>];	<span class="comment">//错误，不能编译，对于引用来说，因为c[0]不是一个左值 </span></span><br><span class="line"><span class="keyword">bool</span> *p = &amp;c[<span class="number">0</span>];	<span class="comment">//错误，不能编译，因为无法将一个临时量地址给绑定到指针 ``` </span></span><br></pre></td></tr></table></figure>

<p>The <a href="http://en.cppreference.com/w/cpp/container/vector">std::vector</a>&lt;bool&gt; specialization defines <a href="http://en.cppreference.com/w/cpp/container/vector">std::vector</a>&lt;bool&gt;::reference as a publicly-accessible nested class. <a href="http://en.cppreference.com/w/cpp/container/vector">std::vector</a>&lt;bool&gt;::reference proxies the behavior of references to a single bit in <a href="http://en.cppreference.com/w/cpp/container/vector">std::vector</a>&lt;bool&gt;.</p>
<p>The primary use of <a href="http://en.cppreference.com/w/cpp/container/vector">std::vector</a>&lt;bool&gt;::reference is to provide an l-value that can be returned from <code>operator[]</code>.</p>
<p>Any reads or writes to a vector that happen via a <a href="http://en.cppreference.com/w/cpp/container/vector">std::vector</a>&lt;bool&gt;::reference potentially read or write to the entire underlying vector.</p>
<h1 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> i : array)&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="varient-type-in-for-range-loop"><a href="#varient-type-in-for-range-loop" class="headerlink" title="varient type in for range loop"></a><a href="https://blog.petrzemek.net/2016/08/17/auto-type-deduction-in-range-based-for-loops/">varient type in for range loop</a></h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">std::vector&lt;<span class="keyword">bool</span>&gt; v&#123;<span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> x : v) &#123;</span><br><span class="line">  x = <span class="literal">true</span>; <span class="comment">// Changes the element inside v!</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>After the loop ends, <code>v</code> will contain <code>true, true, true</code>, which is clearly something you would not expect. See <a href="https://isocpp.org/blog/2012/11/on-vectorbool">this blog post</a> for more details. Here, instead of using <code>auto</code>, it is better to explicitly specify the type (<code>bool</code>). With <code>bool</code>, it will work as expected: the contents of the vector will be left unchanged.</p>
<p>Using just <code>auto</code> will not work when iterating over ranges containing move-only types, such as <a href="http://en.cppreference.com/w/cpp/memory/unique_ptr"><code>std::unique_ptr</code></a>. As <code>auto</code> creates a copy of each element in the range, the compilation will fail because move-only types cannot be copied.</p>
<h3 id="const-auto-dont-use"><a href="#const-auto-dont-use" class="headerlink" title="const auto (dont use)"></a>const auto (dont use)</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> x : range)</span><br></pre></td></tr></table></figure>

<p>The use of <code>const auto</code> may suggest that you want to work with an immutable copy of each element. However, when would you want this? Why not use <code>const auto&amp;</code>? Why creating a copy when you will not be able to change it? And, even if you wanted this, from a code-review standpoint, it looks like you forgot to put <code>&amp;</code> after <code>auto</code>. Therefore, I see <strong>no reason</strong> for using <code>const auto</code>. Use <code>const auto&amp;</code> instead.</p>
<h3 id="auto-amp"><a href="#auto-amp" class="headerlink" title="auto&amp;"></a>auto&amp;</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span>&amp; x : range)</span><br></pre></td></tr></table></figure>

<p>Use <code>auto&amp;</code> <strong>when you want to modify elements in the range in non-generic code</strong>. The first part of the previous sentence should be clear as <code>auto&amp;</code> will create references to the original elements in the range. To see why this code should not be used in generic code (e.g. inside templates), take a look at the following function template:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Sets all elements in the given range to the given value.</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Range, <span class="keyword">typename</span> Value&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set_all_to</span><span class="params">(Range&amp; range, <span class="keyword">const</span> Value&amp; value)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; x : range) &#123;    </span><br><span class="line">    x = value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>It will work. Well, most of the time. Until someone tries to use it on the dreaded <code>std::vector&lt;bool&gt;</code>. Then, the example will fail to compile because dereferencing an iterator of <code>std::vector&lt;bool&gt;</code> yields a temporary proxy object, which cannot bind to an lvalue reference (<code>auto&amp;</code>). As we will see shortly, the solution is to use “one more <code>&amp;</code>” when writing generic code.</p>
<p>(error: non-const lvalue reference to type ‘__bit_reference&lt;…&gt;’ cannot bind to a temporary of type ‘__bit_reference&lt;…&gt;’)</p>
<h3 id="const-auto-amp-read-only"><a href="#const-auto-amp-read-only" class="headerlink" title="const auto&amp; (read only)"></a>const auto&amp; (read only)</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span>&amp; x : range)</span><br></pre></td></tr></table></figure>

<p>Use <code>const auto&amp;</code> <strong>when you want read-only access to elements in the range</strong>, even in generic code. This is the number one choice for iterating over a range when all you want to is read its elements. <strong>No copies are made</strong> and the compiler can verify that you indeed do not modify the elements.</p>
<p>Nevertheless, keep in mind that even though you will not be able to modify the elements in the range directly, you may still be able to modify them indirectly. For example, when the elements in the range are <a href="https://en.wikipedia.org/wiki/Smart_pointer">smart pointers</a>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Person</span> &#123;</span></span><br><span class="line">std::string name;  <span class="comment">// ...</span></span><br><span class="line">&#125;; </span><br><span class="line">std::vector&lt;std::unique_ptr&lt;Person&gt;&gt; v;<span class="comment">// ...</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span>&amp; x : v) &#123;</span><br><span class="line">	x-&gt;name = <span class="string">&quot;John Doe&quot;</span>; <span class="comment">// This will change the name of all people in v.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>In such situations, you have to pay close attention to what you are doing because the compiler will not help you, even if you write <code>const auto&amp;</code>.</p>
<h3 id="auto-amp-amp"><a href="#auto-amp-amp" class="headerlink" title="auto&amp;&amp;"></a>auto&amp;&amp;</h3><blockquote>
<p><a href="https://isocpp.org/blog/2012/11/universal-references-in-c11-scott-meyers">see more for &amp;&amp;</a></p>
<p>The essence of the issue is that “<code>&amp;&amp;</code>” in a type declaration sometimes means rvalue reference, but sometimes it means <em>either</em> rvalue reference <em>or</em> lvalue reference. As such, some occurrences of “<code>&amp;&amp;</code>” in source code may actually have the meaning of “<code>&amp;</code>”, i.e., have the syntactic <em>appearance</em> of an rvalue reference (“<code>&amp;&amp;</code>”), but the <em>meaning</em> of an lvalue reference (“<code>&amp;</code>”). References where this is possible are more flexible than either lvalue references or rvalue references. Rvalue references may bind only to rvalues, for example, and lvalue references, in addition to being able to bind to lvalues, may bind to rvalues only under restricted circumstances.[1] In contrast, references declared with “<code>&amp;&amp;</code>” that may be either lvalue references or rvalue references may bind to <em>anything</em>. Such unusually flexible references deserve their own name. I call them <em>universal references</em>.</p>
<p><strong>If a variable or parameter is declared to have type <code>T&amp;&amp;</code> for some deduced(推断) type <code>T</code>, that variable or parameter is a <em>universal reference</em>.</strong></p>
<p>In practice, almost all universal references are parameters to <strong>function templates</strong>.Because the type deduction rules for **<code>auto</code>-**declared variables are essentially the same as for templates, it’s also possible to have <code>auto</code>-declared universal references.</p>
<p>i.e. auto&amp;&amp; </p>
<p>i.e. template&lt;typename T&gt; void f(T&amp;&amp; param)</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp;&amp; x : range)</span><br></pre></td></tr></table></figure>

<p>Use <code>auto&amp;&amp;</code> <strong>when you want to modify elements in the range in generic code</strong>. To elaborate, <code>auto&amp;&amp;</code> is a <a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4164.pdf">forwarding reference</a>, also known as a <a href="https://isocpp.org/blog/2012/11/universal-references-in-c11-scott-meyers">universal reference</a>. It behaves as follows:</p>
<ul>
<li>When initialized with an <a href="http://en.cppreference.com/w/cpp/language/value_category">lvalue</a>, it creates an <a href="http://en.cppreference.com/w/cpp/language/reference">lvalue reference</a>.</li>
<li>When initialized with an <a href="http://en.cppreference.com/w/cpp/language/value_category">rvalue</a>, it creates an <a href="http://en.cppreference.com/w/cpp/language/reference">rvalue reference</a>.</li>
</ul>
<p>A detailed explanation of forwarding references is outside of scope of the present post. For more details, see <a href="https://isocpp.org/blog/2012/11/universal-references-in-c11-scott-meyers">this article</a> by Scott Meyers. Anyway, the use of <code>auto&amp;&amp;</code> allows us to write generic loops that can also modify elements of ranges yielding proxy objects, such as our friend (or foe?) <a href="http://en.cppreference.com/w/cpp/container/vector_bool"><code>std::vector&lt;bool&gt;</code></a>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Sets all elements in the given range to the given value.// Now working even with std::vector&lt;bool&gt;.</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Range, <span class="keyword">typename</span> Value&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set_all_to</span><span class="params">(Range&amp; range, <span class="keyword">const</span> Value&amp; value)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span>&amp;&amp; x : range) &#123; </span><br><span class="line">    <span class="comment">// Notice &amp;&amp; instead of &amp;.    </span></span><br><span class="line">    x = value;  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Now, you may wonder: if <code>auto&amp;&amp;</code> works even in generic code, why should I ever use <code>auto&amp;</code>? As Howard Hinnant puts it, liberate use of <code>auto&amp;&amp;</code> results in so-called <a href="http://stackoverflow.com/a/13130795/2580955">confuscated code</a>: code that unnecessarily confuses people. My advice is to use <code>auto&amp;</code> in non-generic code and <code>auto&amp;&amp;</code> only in generic code(generic programming 泛型编程).</p>
<p>By the way, there was a <a href="http://open-std.org/jtc1/sc22/wg21/docs/papers/2014/n3853.htm">proposal for C++1z</a> to allow writing just <code>for (x : range)</code>, which would be translated into <code>for (auto&amp;&amp; x : range)</code>. Such range-based for loops were called <a href="http://stackoverflow.com/questions/25468486/what-are-terse-ranged-based-for-loops">terse</a>. However, this proposal was <a href="https://botondballo.wordpress.com/2014/11/23/trip-report-c-standards-meeting-in-urbana-champaign-november-2014/">removed from consideration</a> and will not be part of C++.</p>
<h3 id="const-auto-amp-amp-dont-use"><a href="#const-auto-amp-amp-dont-use" class="headerlink" title="const auto&amp;&amp;(dont use)"></a>const auto&amp;&amp;(dont use)</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span>&amp;&amp; x : range)</span><br></pre></td></tr></table></figure>

<p>This variant will bind only to rvalues, which you will not be able to modify or move because of the <code>const</code>. This makes it less than useless. Hence, there is <strong>no reason</strong> for choosing this variant over <code>const auto&amp;</code>.</p>
<h3 id="decltype-auto"><a href="#decltype-auto" class="headerlink" title="decltype(auto)"></a>decltype(auto)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for(decltype(auto) x : range) &#x2F;&#x2F; C++14</span><br></pre></td></tr></table></figure>

<p><a href="https://en.wikipedia.org/wiki/C++14">C++14</a> introduced <a href="https://en.wikipedia.org/wiki/C++14#Alternate_type_deduction_on_declaration"><code>decltype(auto)</code></a>. It means: apply automatic type deduction, but use <a href="http://en.cppreference.com/w/cpp/language/decltype"><code>decltype</code></a> rules. Whereas <code>auto</code> strips down top-level <a href="http://en.cppreference.com/w/cpp/language/cv">cv qualifiers</a> and references, <code>decltype</code> preserves them.</p>
<blockquote>
<p>see more for auto and decltype</p>
</blockquote>
<p>As is stated in <a href="https://isocpp.org/wiki/faq/cpp14-language#decltype-auto">this C++ FAQ</a>, <code>decltype(auto)</code> is primarily useful for deducing the return type of forwarding functions and similar wrappers. However, it is not intended to be a widely used feature beyond that. And indeed, <a href="http://stackoverflow.com/questions/38421392/range-based-for-loop-with-decltypeauto">there seems to be <strong>no reason</strong> for using it in range-based for loops</a>.</p>
<h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>To summarize:</p>
<ul>
<li>Use <code>auto</code> when you want to work with a <strong>copy</strong> of elements in the range.(<strong>except for bool,</strong> use bool instead of auto)</li>
<li>Use <code>auto&amp;</code> when you want to <strong>modify elements in the range in non-generic code.</strong></li>
<li>Use <code>auto&amp;&amp;</code> when you want to <strong>modify elements in the range in generic code.</strong></li>
<li>Use <code>const auto&amp;</code> when you want <strong>read-only</strong> access to elements in the range (even in generic code).</li>
</ul>
<p>Other variants are generally less useful.</p>
<h1 id="decltype"><a href="#decltype" class="headerlink" title="decltype"></a><a href="https://en.cppreference.com/w/cpp/language/decltype">decltype</a></h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;type_traits&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">A</span> &#123;</span> <span class="keyword">double</span> x; &#125;;</span><br><span class="line"><span class="keyword">const</span> A* a;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">decltype</span>(a-&gt;x) y;       <span class="comment">// type of y is double (declared type)</span></span><br><span class="line"><span class="keyword">decltype</span>((a-&gt;x)) z = y; <span class="comment">// type of z is const double&amp; (lvalue expression)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U&gt;</span><br><span class="line">auto add(T t, U u) -&gt; decltype(t + u) </span><br><span class="line"><span class="comment">// return type depends on template parameters</span></span><br><span class="line"><span class="comment">// return type can be deduced since C++14</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> t + u;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">int</span>&amp; <span class="title">getRef</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>* p)</span> </span>&#123; <span class="keyword">return</span> *p; &#125;</span><br><span class="line"><span class="built_in"><span class="keyword">static_assert</span></span>(std::is_same_v&lt;<span class="keyword">decltype</span>(getRef), <span class="keyword">const</span> <span class="keyword">int</span>&amp;(<span class="keyword">const</span> <span class="keyword">int</span>*)&gt;);</span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">getRefFwdBad</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>* p)</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">getRef</span>(p); &#125;</span><br><span class="line"><span class="built_in"><span class="keyword">static_assert</span></span>(std::is_same_v&lt;<span class="keyword">decltype</span>(getRefFwdBad), <span class="built_in"><span class="keyword">int</span></span>(<span class="keyword">const</span> <span class="keyword">int</span>*)&gt;,</span><br><span class="line">    <span class="string">&quot;Just returning auto isn&#x27;t perfect forwarding.&quot;</span>);</span><br><span class="line"><span class="function"><span class="keyword">decltype</span>(<span class="keyword">auto</span>) <span class="title">getRefFwdGood</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>* p)</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">getRef</span>(p); &#125;</span><br><span class="line"><span class="built_in"><span class="keyword">static_assert</span></span>(std::is_same_v&lt;<span class="keyword">decltype</span>(getRefFwdGood), <span class="keyword">const</span> <span class="keyword">int</span>&amp;(<span class="keyword">const</span> <span class="keyword">int</span>*)&gt;,</span><br><span class="line">    <span class="string">&quot;Returning decltype(auto) perfectly forwards the return type.&quot;</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Alternatively:</span></span><br><span class="line">auto getRefFwdGood1(const int* p) -&gt; decltype(getRef(p)) &#123; return getRef(p); &#125;</span><br><span class="line"><span class="built_in"><span class="keyword">static_assert</span></span>(std::is_same_v&lt;<span class="keyword">decltype</span>(getRefFwdGood1), <span class="keyword">const</span> <span class="keyword">int</span>&amp;(<span class="keyword">const</span> <span class="keyword">int</span>*)&gt;,</span><br><span class="line">    <span class="string">&quot;Returning decltype(return expression) also perfectly forwards the return type.&quot;</span>);</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">33</span>;</span><br><span class="line">    <span class="keyword">decltype</span>(i) j = i * <span class="number">2</span>;</span><br><span class="line"> </span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;i and j are the same type? &quot;</span> &lt;&lt; std::boolalpha</span><br><span class="line">              &lt;&lt; std::is_same_v&lt;<span class="keyword">decltype</span>(i), <span class="keyword">decltype</span>(j)&gt; &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"> </span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;i = &quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;, &quot;</span></span><br><span class="line">              &lt;&lt; <span class="string">&quot;j = &quot;</span> &lt;&lt; j &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">auto</span> f = [](<span class="keyword">int</span> a, <span class="keyword">int</span> b) -&gt; <span class="keyword">int</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> a * b;</span><br><span class="line">    &#125;;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">decltype</span>(f) g = f; <span class="comment">// the type of a lambda function is unique and unnamed</span></span><br><span class="line">    i = <span class="built_in">f</span>(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">    j = <span class="built_in">g</span>(<span class="number">3</span>, <span class="number">3</span>);</span><br><span class="line"> </span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;i = &quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;, &quot;</span></span><br><span class="line">              &lt;&lt; <span class="string">&quot;j = &quot;</span> &lt;&lt; j &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="reverse-iterator"><a href="#reverse-iterator" class="headerlink" title="reverse iterator"></a>reverse iterator</h1><p><code>std::reverse_iterator</code> produces a new iterator that moves from the end to the beginning of the sequence defined by the underlying bidirectional iterator.</p>
<p><img src="https://upload.cppreference.com/mwiki/images/3/39/range-rbegin-rend.svg" alt="range-rbegin-rend.svg"></p>
<h1 id="c-amp-h文件-h文件里不要定义变量，可以声明！！"><a href="#c-amp-h文件-h文件里不要定义变量，可以声明！！" class="headerlink" title=".c&amp;.h文件 .h文件里不要定义变量，可以声明！！"></a><a href="https://www.cnblogs.com/laojie4321/archive/2012/03/30/2425015.html">.c&amp;.h文件</a> .h文件里不要定义变量，可以声明！！</h1><ul>
<li><p>一个经典错误。3a222<br>在a.h头文件中定义变量temp并初始化，即显式初始化。int temp = 0；</p>
<p>a.c b.c文件中都包含了a.h头文件，则在编译时会出现：multiple definition of `a’的错误。</p>
<p>a.h中定义变量temp，不初始化为0即为不显示初始化。</p>
<p>不显示初始化不出错原因：<br>—— 不显式的初始化，在C语言中（C++中不是这样的），则先假定为声明，多次声明是没错的，最后才是定义。</p>
</li>
</ul>
<h1 id="内置变量"><a href="#内置变量" class="headerlink" title="内置变量"></a>内置变量</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bool:         所占字节数：1    最大值：1        最小值：0</span><br><span class="line">char:         所占字节数：1    最大值：        最小值：?</span><br><span class="line">signed char:     所占字节数：1    最大值：        最小值：?</span><br><span class="line">unsigned char:     所占字节数：1    最大值：?        最小值：</span><br><span class="line">wchar_t:     所占字节数：4    最大值：2147483647        最小值：-2147483648</span><br><span class="line">short:         所占字节数：2    最大值：32767        最小值：-32768</span><br><span class="line">int:         所占字节数：4    最大值：2147483647    最小值：-2147483648</span><br><span class="line">unsigned:     所占字节数：4    最大值：4294967295    最小值：0</span><br><span class="line">long:         所占字节数：8    最大值：9223372036854775807    最小值：-9223372036854775808</span><br><span class="line">unsigned long:     所占字节数：8    最大值：18446744073709551615    最小值：0</span><br><span class="line">double:     所占字节数：8    最大值：1.79769e+308    最小值：2.22507e-308</span><br><span class="line">long double:     所占字节数：16    最大值：1.18973e+4932    最小值：3.3621e-4932</span><br><span class="line">float:         所占字节数：4    最大值：3.40282e+38    最小值：1.17549e-38</span><br><span class="line">size_t:     所占字节数：8    最大值：18446744073709551615    最小值：0</span><br><span class="line">string:     所占字节数：24</span><br></pre></td></tr></table></figure>


<h1 id="Extern"><a href="#Extern" class="headerlink" title="Extern"></a>Extern</h1><p>用extern来<strong>声明</strong>在别的文件中已经存在的变量和函数，而且格式必须严格一致（比如数组不等价于指针）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> x;</span><br></pre></td></tr></table></figure>

<p>其实相当于只声明, 不定义.</p>
<ul>
<li><strong>static</strong> 存储类指示编译器在程序的生命周期内保持局部变量的存在，而不需要在每次它进入和离开作用域时进行创建和销毁。因此，使用 static 修饰局部变量可以在函数调用之间保持局部变量的值。</li>
</ul>
<h1 id="传参"><a href="#传参" class="headerlink" title="传参"></a>传参</h1><table>
<thead>
<tr>
<th align="left">调用类型</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><a href="https://www.runoob.com/cplusplus/cpp-function-call-by-value.html">传值调用</a></td>
<td align="left">该方法把参数的实际值复制给函数的形式参数。在这种情况下，修改函数内的形式参数对实际参数没有影响。</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cplusplus/cpp-function-call-by-pointer.html">指针调用</a></td>
<td align="left">该方法把参数的地址复制给形式参数。在函数内，该地址用于访问调用中要用到的实际参数。这意味着，修改形式参数会影响实际参数。</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cplusplus/cpp-function-call-by-reference.html">引用调用</a></td>
<td align="left">该方法把参数的引用复制给形式参数。在函数内，该引用用于访问调用中要用到的实际参数。这意味着，修改形式参数会影响实际参数。</td>
</tr>
</tbody></table>
<ul>
<li>参数可以有默认值</li>
</ul>
<h1 id="lambda表达式"><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a>lambda表达式</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">[capture](parameters)-&gt;return_type&#123;body&#125;</span><br></pre></td></tr></table></figure>

<p>每当你定义一个<code>lambda</code>表达式后，编译器会自动生成一个匿名类（这个类当然重载了<code>()</code>运算符），我们称为闭包类型（closure type）。那么在运行时，这个<code>lambda</code>表达式就会返回一个匿名的闭包实例，其实一个右值。所以，我们上面的<code>lambda</code>表达式的结果就是一个个闭包。闭包的一个强大之处是其可以通过传值或者引用的方式捕捉其封装作用域内的变量，前面的方括号就是用来定义捕捉模式以及变量，我们又将其称为<code>lambda</code>捕捉块。</p>
<p>捕获列表[]: [&amp;]通过引用捕获, [=]通过值捕获, [this]成员通过引用捕获</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">10</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">auto</span> add_x = [x](<span class="keyword">int</span> a) &#123; <span class="keyword">return</span> a + x; &#125;;  <span class="comment">// 复制捕捉x</span></span><br><span class="line">    <span class="keyword">auto</span> multiply_x = [&amp;x](<span class="keyword">int</span> a) &#123; <span class="keyword">return</span> a * x; &#125;;  <span class="comment">// 引用捕捉x</span></span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; <span class="built_in">add_x</span>(<span class="number">10</span>) &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; <span class="built_in">multiply_x</span>(<span class="number">10</span>) &lt;&lt; endl;</span><br><span class="line">    <span class="comment">// 输出：20 100</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">C</span>, <span class="keyword">class</span> <span class="title">Oper</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">for_all</span><span class="params">(C&amp; c, Oper op)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; x:c)</span><br><span class="line">        <span class="built_in">op</span>(*x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vetcor&lt;unique_ptr&lt;Shape&gt;&gt; v;</span><br><span class="line">for_all(v, [](Shape&amp; s)&#123;s.<span class="built_in">draw</span>();&#125;)</span><br><span class="line"></span><br><span class="line">[=]()-&gt;<span class="keyword">int</span>&#123;<span class="keyword">if</span>(y) <span class="keyword">return</span> <span class="number">1</span>; <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">2</span>;&#125;</span><br></pre></td></tr></table></figure>

<h1 id="虚函数-虚基类"><a href="#虚函数-虚基类" class="headerlink" title="虚函数 虚基类"></a>虚函数 虚基类</h1><p><img src="https://jacktang816.github.io/img/cpp/virtualFunction/vptrLocation.png" alt="img"></p>
<h2 id="虚函数"><a href="#虚函数" class="headerlink" title="虚函数"></a>虚函数</h2><p>➢ 编译程序为有虚函数的类创建一个虚函数入口地址表VFT， </p>
<p>➢ 表首地址存放在对象的起始单元中。</p>
<p>➢ 当对象调用虚函数时，通过其起始单元得到VFT首址，</p>
<p>动态绑定到相应的函数成员。</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gxacrfe7eaj30pa09q75b.jpg" alt="截屏2021-11-12 上午11.43.14"></p>
<p>vtbl (virtual function table) 指明了每个类在运行时应该调用 which 虚函数</p>
<p>每个类有一个自己的vtbl</p>
<p>开销: 每个对象需要一个额外的指针即指向 vtbl 的指针, 每个类需要一个 vtbl</p>
<p><a href="https://stackoverflow.com/questions/3324721/virtual-tables-and-virtual-pointers-for-multiple-virtual-inheritance-and-type-ca">https://stackoverflow.com/questions/3324721/virtual-tables-and-virtual-pointers-for-multiple-virtual-inheritance-and-type-ca</a></p>
<p><strong>question:</strong></p>
<p>I am little confused about vptr and representation of objects in the memory, and hope you can help me understand the matter better.</p>
<ol>
<li>Consider <code>B</code> inherits from <code>A</code> and both define virtual functions <code>f()</code>. From what I learned the representation of an object of class B in the memory looks like this:<code>[ vptr | A | B ]</code> and the <code>vtbl</code> that <code>vptr</code> points to contains <code>B::f()</code>. I also understood that casting the object from <code>B</code> to <code>A</code> does nothing except ignoring the <code>B</code> part at the end of the object. Is it true? Doesn’t this behavior is wrong? We want that object of type <code>A</code> to execute <code>A::f()</code> method and not <code>B::f()</code>.</li>
<li>Are there a number of <code>vtables</code> in the system as the number of classes?</li>
<li>How will a <code>vtable</code> of class that inherits from two or more classes look like? How will the object of C be represented in the memory?</li>
<li>Same as question 3 but with virtual inheritance.</li>
</ol>
<p><strong>answer:</strong></p>
<p>The following is true for GCC (and it seems true for LLVM <a href="https://llvm.org/docs/CompilerWriterInfo.html#abi">link</a>), but may also be true for the compiler you’re using. All these is implementation-dependent, and is not governed by C++ standard. However, GCC write its own binary standard document, <a href="http://static.coldattic.info/cxx-abi/abi.html">Itanium ABI</a>.</p>
<p>I tried to explain basic concepts of how virtual tables are laid out in more simple words as a part of my <a href="http://coldattic.info/post/3/">article about virtual function performance in C++</a>, which you may find useful. Here are answers to your questions:</p>
<ol>
<li><p>A more correct way to depict internal representation of the object is:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">| vptr | ======= | ======= |  &lt;-- your object</span><br><span class="line">       |----A----|         |</span><br><span class="line">       |---------B---------|</span><br></pre></td></tr></table></figure>

<p><code>B</code> <em>contains</em> its base class <code>A</code>, <strong>it just adds a couple of his own members after its end.</strong></p>
<p>Casting from <code>B*</code> to <code>A*</code> indeed does nothing, it returns the same pointer, and <code>vptr</code> remains the same. But, in a nutshell, <strong>virtual functions are not always called via vtable</strong>. Sometimes they’re called just like the other functions.</p>
<p>Here’s more detailed explanation. You should distinguish two ways of calling member function:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">A a, *aptr;</span><br><span class="line">a.<span class="built_in">func</span>();         <span class="comment">// the call to A::func() is precompiled!</span></span><br><span class="line">aptr-&gt;A::<span class="built_in">func</span>();  <span class="comment">// ditto</span></span><br><span class="line">aptr-&gt;<span class="built_in">func</span>();     <span class="comment">// calls virtual function through vtable.</span></span><br><span class="line">                  <span class="comment">// It may be a call to A::func() or B::func().</span></span><br></pre></td></tr></table></figure>

<p>The thing is that it’s known <em>at compile time</em> how the function will be called: via vtable or just will be a usual call. And the thing is that <strong>the type of a casting expression is known at compile time</strong>, and therefore the compiler chooses the right function at compile time.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">B b, *bptr;          </span><br><span class="line"><span class="keyword">static_cast</span>&lt;A&gt;(b)::<span class="built_in">func</span>(); <span class="comment">//calls A::func, because the type</span></span><br><span class="line">   <span class="comment">// of static_cast&lt;A&gt;(b) is A!</span></span><br></pre></td></tr></table></figure>

<p>It doesn’t even look inside vtable in this case!</p>
</li>
<li><p>Generally, no. A class can have several vtables if it inherits from several bases, each having its own vtable. Such set of virtual tables forms a “virtual table group” (see pt. 3).</p>
<p>Class also needs a set of construction vtables, to correctly distpatch virtual functions when constructing bases of a complex object. You can read further in <a href="http://static.coldattic.info/cxx-abi/abi.html#vtable-ctor">the standard I linked</a>.</p>
</li>
<li><p>Here’s an example. Assume <strong><code>C</code> inherits from <code>A</code> and <code>B</code></strong>, each class defining <code>virtual void func()</code>, as well as <code>a</code>,<code>b</code> or <code>c</code> virtual function relevant to its name.</p>
<p>The <code>C</code> will have a vtable group of two vtables. It will share one vtable with <code>A</code> (the vtable where the own functions of the current class go is called “primary”), and a vtable for <code>B</code> will be appended:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">| C::<span class="built_in">func</span>()   |   <span class="built_in">a</span>()  |  <span class="built_in">c</span>()  || C::<span class="built_in">func</span>()  |   <span class="built_in">b</span>()   |</span><br><span class="line">|---- vtable <span class="keyword">for</span> A ----|        |---- vtable <span class="keyword">for</span> B ----| </span><br><span class="line">|--- <span class="string">&quot;primary virtual table&quot;</span> --||- <span class="string">&quot;secondary vtable&quot;</span> -|</span><br><span class="line">|-------------- <span class="keyword">virtual</span> table group <span class="keyword">for</span> C -------------|</span><br></pre></td></tr></table></figure>

<p>The representation of object in memory will look nearly the same way its vtable looks like. Just add a <code>vptr</code> before every vtable in a group, and you’ll have a rough estimate how the data are laid out inside the object. You may read about it in the <a href="http://static.coldattic.info/cxx-abi/abi.html#layout">relevant section</a> of the GCC binary standard.</p>
</li>
<li><p>Virtual bases (some of them) are laid out at the end of vtable group. This is done because each class should have only one virtual base, and if they were mingled with “usual” vtables, then compiler couldn’t re-use parts of constructed vtables to making those of derived classes. This would lead to computing unnecessary offsets and would decrease performance.</p>
<p>Due to such a placement, virtual bases also introduce into their vtables additional elements: <code>vcall</code> offset (<strong>to get address of a final overrider when jumping from the pointer to a virtual base inside a complete object</strong> to the beginning of the class that overrides the virtual function) for each virtual function defined there. Also each virtual base adds <code>vbase</code> offsets, w<strong>hich are inserted into vtable of the derived class; they allow to find where the data of the virtual base begin</strong> (it can’t be precompiled since the actual address depends on the hierarchy: virtual bases are at the end of object, and the shift from beginning varies depending on how many non-virtual classes the current class inherits.).</p>
</li>
</ol>
<p>Woof, I hope I didn’t introduce much unnecessary complexity. In any case, you may refer to the original standard, or to any document of your own compiler.</p>
<h2 id="虚基类"><a href="#虚基类" class="headerlink" title="虚基类"></a>虚基类</h2><p>Virtual inheritance is there to solve this problem(菱形继承). When you specify virtual when inheriting your classes, you’re telling the compiler that you only want a single instance.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span> <span class="keyword">public</span>: <span class="function"><span class="keyword">void</span> <span class="title">Foo</span><span class="params">()</span> </span>&#123;&#125; &#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> :</span> <span class="keyword">public</span> <span class="keyword">virtual</span> A &#123;&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> :</span> <span class="keyword">public</span> <span class="keyword">virtual</span> A &#123;&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> :</span> <span class="keyword">public</span> B, <span class="keyword">public</span> C &#123;&#125;;</span><br></pre></td></tr></table></figure>



<h1 id="声明-定义"><a href="#声明-定义" class="headerlink" title="声明 定义"></a>声明 定义</h1><p>区分声明与定义</p>
<p>1、一种是需要建立存储空间的。例如：int a 在声明的时候就已经建立了存储空间。</p>
<p>2、另一种是不需要建立存储空间的。 例如：extern int a 其中变量a是在别的文件中定义的</p>
<p>声明是向编译器介绍名字－－标识符。它告诉编译器“这个函数或变量在某处可找到。</p>
<p>而定义是说：“在这里建立变量”或“在这里建立函数”。它为名字分配存储空间。无论定义的是函数还是变量，编译器都要为它们在定义点分配存储空间。对于变量，编译器确定变量的大小，然后在内存中开辟空间来保存其数据，对于函数，编译器会生成代码，这些代码最终也要占用一定的内存。</p>
<p><strong>基本类型变量的声明和定义是同时产生的, 对于对象来说则是分开的</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">A a; <span class="comment">//对象声明</span></span><br><span class="line">a = <span class="keyword">new</span> <span class="built_in">A</span>(); <span class="comment">//对象定义(初始化)</span></span><br></pre></td></tr></table></figure>

<p>所谓定义就是（编译器）创建一个对象，为这个对象分配一块内存，并给它取上一个名字，这个名字就是就是我们经常所说的变量名或对象名。</p>
<p>声明有2重含义：</p>
<p>（1） 告诉编译器，这个名字已经匹配到一块内存上，下面的代码用到变量或者对象是在别的地方定义的。声明可以出现多次。</p>
<p>（2） 告诉编译器，这个名字已经被预定了，别的地方再也不能用它来作为变量名或对象名。</p>
<p><em><strong>*定义和声明的最重要区别就是：*</strong></em></p>
<p><em><strong>*定义创建对象并为这个对象分配了内存，声明没有分配内存。*</strong></em></p>
<p>函数原型: 在<a href="https://zh.wikipedia.org/wiki/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1">计算机编程</a>中，<strong>函数原型</strong>（英语：<strong>Function prototype</strong>）或<strong>函数接口</strong>（英语：<strong>Function interface</strong>）是用于指定函数的名称和<a href="https://zh.wikipedia.org/wiki/%E7%B1%BB%E5%9E%8B%E7%89%B9%E5%BE%81">类型特征</a>（<a href="https://zh.wikipedia.org/wiki/%E5%85%83%E6%95%B0">元数</a>，参数的<a href="https://zh.wikipedia.org/wiki/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B">数据类型</a>和返回值类型）的一种省略了函数体的<a href="https://zh.wikipedia.org/wiki/%E5%AD%90%E7%A8%8B%E5%BA%8F">函数</a><a href="https://zh.wikipedia.org/w/index.php?title=%E5%A3%B0%E6%98%8E&action=edit&redlink=1">声明</a>。</p>
<h1 id="strcut和class的区别"><a href="#strcut和class的区别" class="headerlink" title="strcut和class的区别"></a><a href="(https://www.jianshu.com/p/409f931c17d9)">strcut和class的区别</a></h1><ol>
<li>默认的继承访问权。class默认的是private,strcut默认的是public(union 也是 public)。</li>
<li>默认访问权限：struct作为数据结构的实现体，它默认的数据访问控制是public的，而class作为对象的实现体，它默认的成员变量访问控制是private的。</li>
<li>“class”这个关键字还用于定义模板参数，就像“typename”。但关建字“struct”不用于定义模板参数</li>
<li>class和struct在使用大括号{ }上的区别<br>关于使用大括号初始化<br>1.）class和struct如果定义了构造函数的话，都不能用大括号进行初始化<br>2.）如果没有定义构造函数，struct可以用大括号初始化。<br>3.）如果没有定义构造函数，且所有成员变量全是public的话，class可以用大括号初始化</li>
</ol>
<h1 id="namespace"><a href="#namespace" class="headerlink" title="namespace"></a>namespace</h1><p>类的头文件应该是自己形成一个命名空间, 然后 cpp <strong>文件因为是相当于在类外进行定义</strong>所以要使用命名空间指明函数定义</p>
<h1 id="explicit-implicit"><a href="#explicit-implicit" class="headerlink" title="explicit implicit"></a>explicit implicit</h1><p>上面的代码中, “CxString string2 = 10;” 这句为什么是可以的呢? 在C++中, 如果的<strong>构造函数只有一个参数</strong>时, 那么在编译的时候就会有一个<strong>缺省的转换操作:将该构造函数对应数据类型的数据转换为该类对象.</strong> 也就是说 “CxString string2 = 10;” 这段代码, 编译器自动将整型转换为CxString类对象, 实际上等同于下面的操作:</p>
<p><code>CxString string2(10);</code></p>
<p>即隐式转换</p>
<p>当使用 explicit 关键字修饰构造函数以后, 就能避免这种操作</p>
<p>默认情况下构造函数都是 implicit 的</p>
<h1 id="friend-友元"><a href="#friend-友元" class="headerlink" title="friend 友元"></a>friend 友元</h1><p>原则上, 类的私有（private）和受保护（protected）成员不能从声明它们的同一类外部访问。但是, 此规则不适用于友元 “friends”。</p>
<p>以friend关键字修饰的函数或类称为友元函数或友元类。</p>
<p><strong>友元函数</strong>是可以直接访问类的私有成员的非成员函数。它是定义在类外的普通函数，它不属于任何类，但需要在类的定义中加以声明，声明时只需在友元的名称前加上关键字friend，其格式如下：</p>
<p>  <code> friend 类型 函数名(形式参数);</code></p>
<p><strong>友元类</strong>的所有成员函数都是另一个类的友元函数，都可以访问另一个类中的隐藏信息（包括私有成员和保护成员）。    </p>
<p>　　当希望一个类可以存取另一个类的私有成员时，可以将该类声明为另一类的友元类。定义友元类的语句格式如下：</p>
<p><code>friend class 类名;</code></p>
<p>其中：friend和class是关键字，类名必须是程序中的一个已定义过的类。</p>
<p><strong>使用友元类时注意</strong>：</p>
<p>　　1、友元关系不能被继承。</p>
<p>　　2、友元关系是单向的，不具有交换性。若类B是类A的友元，类A不一定是类B的友元，要看在类中是否有相应的声明。</p>
<p>　　3、友元关系具有非传递性。若类B是类A的友元，类C是B的友元，类C不一定是类A的友元，同样要看类中是否有相应的申明。</p>
<h1 id="public-protect-private-继承"><a href="#public-protect-private-继承" class="headerlink" title="public protect private 继承"></a>public protect private 继承</h1><p>类继承方式 -&gt; 基类成员的访问权限</p>
<p><strong>继承无法访问父变量的 private 成员</strong></p>
<p><strong>访问权限</strong></p>
<p><strong>private</strong>：私有成员</p>
<p>仅可被本类的函数成员访问</p>
<p>不能被派生类、其它类和普通函数访问</p>
<p><strong>protected</strong>：受保护成员</p>
<p>可被本类和派生类的函数成员访问</p>
<p>不能被其它类函数成员和普通函数访问</p>
<p><strong>public</strong>：公有成员</p>
<p>可被任何函数成员和普通函数访问</p>
<p><strong>继承权限</strong><br><strong>public继承</strong><br>派生类通过public继承，基类的各种权限不变 。<br>派生类的成员函数，可以访问基类的public成员、protected成员，但是无法访问基类的private成员。<br>派生类的实例变量，可以访问基类的public成员，但是无法访问protected、private成员，仿佛基类的成员之间加到了派生类一般。<br>可以将public继承看成派生类将基类的public,protected成员囊括到派生类，但是不包括private成员。</p>
<p><strong>protected继承</strong><br> 派生类通过protected继承，基类的public成员在派生类中的权限变成了protected 。protected和private不变。<br>派生类的成员函数，可以访问基类的public成员、protected成员，但是无法访问基类的private成员。<br>派生类的实例变量，无法访问基类的任何成员，因为基类的public成员在派生类中变成了protected。<br>可以将protected继承看成派生类将基类的public,protected成员囊括到派生类，全部作为派生类的protected成员，但是不包括private成员。<br>private成员是基类内部的隐私，除了友元，所有人员都不得窥探。派生类的友元，都不能访问</p>
<p><strong>private继承</strong><br>派生类通过private继承，基类的所有成员在派生类中的权限变成了private。<br>派生类的成员函数，可以访问基类的public成员、protected成员，但是无法访问基类的private成员。<br>派生类的实例变量，无法访问基类的任何成员，因为基类的所有成员在派生类中变成了private。<br>可以将private继承看成派生类将基类的public,protected成员囊括到派生类，全部作为派生类的private成员，但是不包括private成员。<br>private成员是基类内部的隐私，除了友元，所有人员都不得窥探。派生类的友元，都不能访问</p>
<p><strong>总结：继承修饰符，就像是一种筛子，将基类的成员筛到派生类。public、protected、private，就是筛子的眼。</strong><br><strong>通过public继承，所有基类成员（除了private），public、protected都到了派生类里面，public筛眼比较大，不会改变访问权限。</strong><br><strong>通过protected继承，所有基类成员（除了private），public、protected都到了派生类里面，protected筛眼大小适中，所有过来的成员都变成了protected。</strong><br><strong>通过private继承，所有基类成员（除了private），public、protected都到了派生类里面，private筛眼最小，所有过来的成员都变成了private。</strong></p>
<h1 id="隐式转换和显式转换"><a href="#隐式转换和显式转换" class="headerlink" title="隐式转换和显式转换"></a>隐式转换和显式转换</h1><p>隐式转换: 比如 double = int, 或者调用构造函数的那种(见explicit implicit)</p>
<p>显式转换: 又称强制类型转换. 比如 int(), static_cast</p>
<p>保护值不被改变的隐式类型转换称为”提升”, 如整型提升</p>
<p>浮点到整数发生截断, -1.6 → -1</p>
<h1 id="返回引用"><a href="#返回引用" class="headerlink" title="返回引用"></a>返回引用</h1><p>当返回的值不是引用型时，编译器会专门给返回值分配出一块内存的</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">T <span class="title">function1</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="function">T <span class="title">t</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">  <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line">T x = <span class="built_in">function1</span>();</span><br></pre></td></tr></table></figure>

<p>这里的过程是：<br>1.创建命名对象t<br>2.<strong>拷贝构造一个无名的临时对象，并返回这个临时对象</strong><br>3.由临时对象拷贝构造对象x<br>4.T x=function1();这句语句结束时，析构临时对象<br>这里一共生成了3个对象，一个命名对象t，一个临时对象作为返回值，一个命名对象x。</p>
<p>返回引用, 其实就是返回了一个对象的引用, 新对象 = 返回的引用, 调用了拷贝构造函数</p>
<h1 id="静态数据成员"><a href="#静态数据成员" class="headerlink" title="静态数据成员"></a>静态数据成员</h1><p>静态成员变量必须?要在类外部定义(c++11 整型可在内), 因为要在对象创建之前就分配内存</p>
<p>They can’t be initialised inside the class, but they can be initialised outside the class, in a source file:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// inside the class</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Thing</span> &#123;</span></span><br><span class="line">    <span class="keyword">static</span> string RE_ANY;</span><br><span class="line">    <span class="keyword">static</span> string RE_ANY_RELUCTANT;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// in the source file</span></span><br><span class="line">string Thing::RE_ANY = <span class="string">&quot;([^\\n]*)&quot;</span>;</span><br><span class="line">string Thing::RE_ANY_RELUCTANT = <span class="string">&quot;([^\\n]*?)&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>Essentially it’s because <code>x</code> exists independently of the number of <em>instances</em> of <code>A</code> that are created.</p>
<p>So storage for <code>x</code> needs to be defined somewhere - you can’t rely on an instance of <code>A</code> to do that, and that’s what</p>
<p>in exactly one translation unit, does.</p>
<p>When the <code>const</code> qualifier is present, the static variable can be considered as a constant expression. Initializing it in the class definition goes to that effect. It’s just some constant value, may not even need any storage.</p>
<p>But in the other case, it’s not a constant expression. It definitely needs storage. And as @Bathsheba points out, it needs to be defined in only one translation unit (pre-C++17). Generally speaking, a declaration that contains an initializer is also a definition. So it just can’t be initialized when declared.</p>
<h1 id="缺省参数-默认参数"><a href="#缺省参数-默认参数" class="headerlink" title="缺省参数 (默认参数)"></a>缺省参数 (默认参数)</h1><p>带缺省值的参数必须放在参数列表的最后面。因为传参是从右向左的(<em>arguments</em> are pushed onto the stack from <em>right to left</em>)。</p>
<p>即默认参数往右必须全是默认参数</p>
<p>缺省参数不能同时在函数声明和定义中出现，只能二者留其一。</p>
<h1 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h1><p>在构造函数体前初始化：只读成员、引用成员、对象成员, 包括在声明时初始化和在列表中初始化</p>
<h1 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h1><p>从小到大可以分为五级：</p>
<p>① 作用于表达式内 (常量) </p>
<p>② 作用于函数成员内 (函数参数、局部变量、局部类型) </p>
<p>③ 作用于类或派生类内 (数据/函数/类型 成员) </p>
<p>④ 作用于基类内 (数据/函数/类型 成员) </p>
<p>⑤ 作用于虚基类内 (数据/函数/类型 成员)</p>
<p>虚基类 &gt; 基类 &gt; 类/派生类 &gt; 成员函数 &gt; 表达式内</p>
<h1 id="成员指针"><a href="#成员指针" class="headerlink" title="成员指针"></a>成员指针</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Class Student &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> number;</span><br><span class="line">……</span><br><span class="line">&#125;；</span><br><span class="line"></span><br><span class="line"><span class="function">Student <span class="title">xu</span><span class="params">(<span class="number">123</span>,<span class="string">&quot;Xuxiangyang&quot;</span>,<span class="number">100</span>)</span></span>;</span><br><span class="line"><span class="function">Student <span class="title">zhang</span><span class="params">(<span class="number">456</span>,”Zhangsan”,<span class="number">99</span>)</span></span>;</span><br><span class="line"><span class="keyword">int</span> *p=&amp;xu.number; <span class="comment">// p 指向对象 xu中的number</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Student::*q = &amp;Student::number; <span class="comment">// q 数据成员指针</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//int Student::*q; q= &amp;Student::number;</span></span><br><span class="line">cout &lt;&lt; xu.*q&lt;&lt;endl; <span class="comment">// cout &lt;&lt; xu.number &lt;&lt;endl; </span></span><br><span class="line">cout &lt;&lt; zhang.*q &lt;&lt;endl;</span><br><span class="line"><span class="keyword">int</span> *p = &amp;Student::number; <span class="comment">//无法从 Student::* 转换为 int ***</span></span><br></pre></td></tr></table></figure>

<p>对于普通指针变量来说，其值是它所指向的地址，0表示空指针。<br>而对于数据成员指针变量来说，其值是数据成员所在地址相对于对象起始地址的偏移值，空指针用-1表示</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">X</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VALUE_OF_PTR(p)     (*(long*)&amp;p)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> X::*p = <span class="number">0</span>;  <span class="comment">// VALUE_OF_PTR(p) == -1</span></span><br><span class="line">    p = &amp;X::a;      <span class="comment">// VALUE_OF_PTR(p) == 0</span></span><br><span class="line">    p = &amp;X::b;      <span class="comment">// VALUE_OF_PTR(p) == 4</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="堆与栈"><a href="#堆与栈" class="headerlink" title="堆与栈"></a><a href="https://blog.csdn.net/hairetz/article/details/4141043">堆与栈</a></h1><p><a href="https://zhuanlan.zhihu.com/p/344377490">https://zhuanlan.zhihu.com/p/344377490</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">void</span>* p0;</span><br><span class="line">    <span class="keyword">void</span>* p1;</span><br><span class="line">    <span class="keyword">void</span>* p2;</span><br><span class="line">    <span class="keyword">void</span>* p3;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">void</span>* p4;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">void</span>* p5;</span><br><span class="line">    <span class="keyword">void</span>* p6;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">void</span>* pi;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span>* pc = <span class="string">&quot;123&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    string* s456 = <span class="keyword">new</span> string&#123;<span class="string">&quot;456&quot;</span>&#125;;</span><br><span class="line">    string s123 = <span class="string">&quot;123&quot;</span>;</span><br><span class="line">    string s234 &#123;<span class="string">&quot;234&quot;</span>&#125;;</span><br><span class="line">    <span class="keyword">const</span> string cs123 = <span class="string">&quot;123&quot;</span>;</span><br><span class="line">    <span class="keyword">const</span> string cs234 = <span class="string">&quot;234&quot;</span>;</span><br><span class="line">    <span class="keyword">static</span> string ss456 = <span class="string">&quot;456&quot;</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    p0 = pc;</span><br><span class="line">    p1 = s456;</span><br><span class="line">    p2 = &amp;s123;</span><br><span class="line">    p3 = &amp;s234;</span><br><span class="line">    p4 = &amp;cs123;</span><br><span class="line">    p5 = &amp;cs234;</span><br><span class="line">    p6 = &amp;ss456;</span><br><span class="line">    pi = &amp;i;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;p0&lt;&lt;endl&lt;&lt;p1&lt;&lt;endl&lt;&lt;p2&lt;&lt;endl&lt;&lt;p3&lt;&lt;endl&lt;&lt;p4&lt;&lt;endl&lt;&lt;p5&lt;&lt;endl&lt;&lt;p6&lt;&lt;endl&lt;&lt;pi&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">0x10b906e21    char* pc = &quot;123&quot;</span></span><br><span class="line"><span class="comment">0x10b9071b8    static string ss456 = &quot;456&quot;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">0x600002b1d120 string* s456 = new string&#123;&quot;456&quot;&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">0x7ff7b45fc900 string s123&#123;&quot;123&quot;&#125;</span></span><br><span class="line"><span class="comment">0x7ff7b45fc8e8 string s234&#123;&quot;234&quot;&#125;</span></span><br><span class="line"><span class="comment">0x7ff7b45fc8d0 const string cs123 = &quot;123&quot;</span></span><br><span class="line"><span class="comment">0x7ff7b45fc8b8 const string cs234 = &quot;234&quot;</span></span><br><span class="line"><span class="comment">0x7ff7bda118d4 const int i = 1</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">可以看出 <span class="keyword">static</span> 和字符串常量在一个位置</span><br></pre></td></tr></table></figure>



<h2 id="预备知识—程序的内存分配"><a href="#预备知识—程序的内存分配" class="headerlink" title="预备知识—程序的内存分配"></a>预备知识—程序的内存分配</h2><p><img src="https://pic1.zhimg.com/80/v2-6b739f63e83c84d07db2b7badcbe472c_1440w.jpg" alt="img"></p>
<p> 一个由C/C++编译的程序占用的内存分为以下几个部分 </p>
<p>关于 bss 和数据段的区别<a href="https://zhuanlan.zhihu.com/p/28659560">https://zhuanlan.zhihu.com/p/28659560</a></p>
<p><strong>data段</strong> :用于存放在编译阶段(而非运行时)就能确定的数据，可读可写。也是通常所说的静态存储区，赋了初值的全局变量、常量和静态变量都存放在这个域。</p>
<p>而<strong>bss段</strong>不在可执行文件中，由系统初始化。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> ar[<span class="number">30000</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">......</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ar[<span class="number">300000</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>发现程序2编译之后所得的可执行文件比程序1大得多。</p>
<p>区别很明显，程序1位于bss段，程序2位于data段，两者的区别在于：</p>
<p>全局的未初始化变量存在于bss段中，具体体现为一个占位符，全局的已初始化变量存于data段中，而函数内的自动变量都在栈上分配空间。</p>
<p>bss不占用可执行文件空间，其内容由操作系统初始化（清零），裸机程序需要自行手动清零。</p>
<p>而data段则需要占用可执行文件空间，其内容由程序初始化，因此造成了上述情况。</p>
<p><strong>注意</strong>：</p>
<p>bss段（未手动初始化的数据）并不给该段的数据分配空间，只是记录数据所需空间的大小。</p>
<p>data段（已手动初始化的数据）为数据分配空间，数据保存在目标文件中。</p>
<p>data段包含经过初始化的全局变量以及它们的值。</p>
<p>BSS段的大小从可执行文件中得到，然后链接器得到这个大小的内存块，紧跟在数据段后面。当这个内存区进入程序的地址空间后全部清零，包含data和bss段的整个区段此时通常称为数据区。</p>
<ol>
<li><p><strong>Code Segment（代码区）</strong></p>
<p>也称Text Segment，存放可执行程序的机器码。</p>
<p><strong>Data Segment (数据区）</strong></p>
<p>存放已初始化的全局和静态变量， 常量数据（如<a href="https://www.zhihu.com/search?q=%E5%AD%97%E7%AC%A6%E4%B8%B2&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22article%22,%22sourceId%22:344377490%7D">字符串</a>常量）。</p>
<p><strong>BSS（Block started by symbol)</strong> better save space</p>
<p>存放未初始化的全局和静态变量。（默认设为0）</p>
<p><strong>Heap（堆）</strong></p>
<p>从低地址向高地址增长。容量大于栈，程序中动态分配的内存在此区域。</p>
<p><strong>Stack（栈）</strong></p>
<p>从高地址向低地址增长。由编译器自动管理分配。程序中的局部变量、函数参数值、返回变量等存在此区域。</p>
</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main.cpp  </span></span><br><span class="line"><span class="keyword">int</span>  a  =  <span class="number">0</span>;  全局初始化区  </span><br><span class="line"><span class="keyword">char</span>  *p1;  全局未初始化区  </span><br><span class="line"><span class="built_in">main</span>()  </span><br><span class="line">&#123;  </span><br><span class="line">  <span class="keyword">int</span>  b;  栈  </span><br><span class="line">  <span class="keyword">char</span>  s[]  =  <span class="string">&quot;abc&quot;</span>;  栈  </span><br><span class="line">  <span class="keyword">char</span>  *p2;  栈  </span><br><span class="line">  <span class="keyword">char</span>  *p3  =  <span class="string">&quot;123456&quot;</span>;  <span class="number">123456</span>/<span class="number">0</span>在常量区，p3在栈上。  </span><br><span class="line">  <span class="keyword">static</span>  <span class="keyword">int</span>  c  =<span class="number">0</span>；  全局（静态）初始化区  </span><br><span class="line">  p1  =  (<span class="keyword">char</span>  *)<span class="built_in">malloc</span>(<span class="number">10</span>);  </span><br><span class="line">  p2  =  (<span class="keyword">char</span>  *)<span class="built_in">malloc</span>(<span class="number">20</span>);  </span><br><span class="line">  <span class="comment">//分配得来得10和20字节的区域就在堆区。  </span></span><br><span class="line">  <span class="built_in">strcpy</span>(p1,  <span class="string">&quot;123456&quot;</span>);  <span class="comment">//123456/0放在常量区，编译器可能会将它与p3所指向的&quot;123456&quot;优化成一个地方。  </span></span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<h2 id="堆和栈的理论知识"><a href="#堆和栈的理论知识" class="headerlink" title="堆和栈的理论知识"></a>堆和栈的理论知识</h2><h3 id="申请方式"><a href="#申请方式" class="headerlink" title="申请方式"></a>申请方式</h3><ul>
<li>stack:<br>由系统自动分配。 例如，声明在函数中一个局部变量  int  b;  系统自动在栈中为b开辟空间  </li>
<li>heap:<br>需要程序员自己申请，并指明大小，在c中malloc函数<br>如p1  =  (char  *)malloc(10);<br>在C++中用new运算符<br>如p2  =  new  char[10];<br><strong>但是注意p1、p2本身是在栈中的。</strong>  </li>
</ul>
<h3 id="申请后系统的响应"><a href="#申请后系统的响应" class="headerlink" title="申请后系统的响应"></a>申请后系统的响应</h3><ul>
<li>栈：只要栈的剩余空间大于所申请空间，系统将为程序提供内存，否则将报异常提示栈溢出。  </li>
<li>堆：首先应该知道操作系统有一个记录空闲内存地址的链表，当系统收到程序的申请时，会遍历该链表，寻找第一个空间大于所申请空间的堆结点，然后将该结点从空闲结点链表中删除，并将该结点的空间分配给程序 ，另外，对于大多数系统，会在这块内存空间中的首地址处记录本次分配的大小，这样，代码中的delete语句才能正确的释放本内存空间。<br>另外，由于找到的堆结点的大小不一定正好等于申请的大小，系统会自动的将多余的那部 分重新放入空闲链表中。  </li>
</ul>
<h3 id="申请大小的限制"><a href="#申请大小的限制" class="headerlink" title="申请大小的限制"></a>申请大小的限制</h3><ul>
<li>栈：在Windows下,栈是向低地址扩展的数据结构，是一块连续的内存的区域。这句话的意思是栈顶的地址和栈的最大容量是系统预先规定好的，在WINDOWS下，栈的大小是2M（也有的说是1M，总之是一个编译时就确定的常数），如果申请的空间超过栈的剩余空间时，将提示overflow。因此，能从栈获得的空间较小。  </li>
<li>堆：堆是向高地址扩展的数据结构，是不连续的内存区域。这是由于系统是用链表来存储空闲内存地址的，自然是不连续的，而链表的遍历方向是由低地址向高地址。堆的大小受限于计算机系统中有效的虚拟内存。由此可见，堆获得的空间比较灵活，也比较大。  </li>
</ul>
<h3 id="申请效率的比较："><a href="#申请效率的比较：" class="headerlink" title="申请效率的比较："></a>申请效率的比较：</h3><ul>
<li>栈由系统自动分配，速度较快。但程序员是无法控制的。  </li>
<li>堆是由new分配的内存，一般速度比较慢，而且容易产生内存碎片,不过用起来最方便.<br>另外，在WINDOWS 下，最好的方式是用VirtualAlloc分配内存，他不是在堆，也不是在栈, 是直接在进程的地址空间中保留一块内存，虽然用起来最不方便。但是速度快，也最灵活。 </li>
</ul>
<h3 id="堆和栈中的存储内容"><a href="#堆和栈中的存储内容" class="headerlink" title="堆和栈中的存储内容"></a>堆和栈中的存储内容</h3><ul>
<li>栈：在函数调用时，第一个进栈的是主函数中的下一条指令（函数调用语句的下一条可执行语句）的地址，然后是函数的各个参数，在大多数的C编译器中，参数是由右往左入栈的，然后是函数中的局部变量。注意静态变量是不入栈的。<br>当本次函数调用结束后，局部变量先出栈，然后是参数，最后栈顶指针指向最开始存的地址，也就是主函数中的下一条指令，程序由该点继续运行。  </li>
<li>堆：一般是在堆的头部用一个字节存放堆的大小。堆中的具体内容由程序员安排。  </li>
</ul>
<h3 id="存取效率的比较"><a href="#存取效率的比较" class="headerlink" title="存取效率的比较"></a>存取效率的比较</h3><p> char  s1[]  =  “aaaaaaaaaaaaaaa”;<br> char  *s2  =  “bbbbbbbbbbbbbbbbb”;<br> aaaaaaaaaaa是在运行时刻赋值的；<br> 而bbbbbbbbbbb是在编译时就确定的；<br> 但是，在以后的存取中，在栈上的数组比指针所指向的字符串(例如堆)快。<br> 比如： </p>
 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"> </span>&#123;  </span><br><span class="line">   <span class="keyword">char</span>  a  =  <span class="number">1</span>;  </span><br><span class="line">   <span class="keyword">char</span>  c[]  =  <span class="string">&quot;1234567890&quot;</span>;</span><br><span class="line">   <span class="keyword">char</span>  *p  =<span class="string">&quot;1234567890&quot;</span>; </span><br><span class="line">   a  =  c[<span class="number">1</span>];  </span><br><span class="line">   a  =  p[<span class="number">1</span>];  </span><br><span class="line">   <span class="keyword">return</span>;  </span><br><span class="line"> &#125; </span><br></pre></td></tr></table></figure>

<p> 对应的汇编代码 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10:  a  &#x3D;  c[1];  </span><br><span class="line">00401067  8A  4D  F1  mov  cl,byte  ptr  [ebp-0Fh]  </span><br><span class="line">0040106A  88  4D  FC  mov  byte  ptr  [ebp-4],cl  </span><br><span class="line">11:  a  &#x3D;  p[1];  </span><br><span class="line">0040106D  8B  55  EC  mov  edx,dword  ptr  [ebp-14h]  </span><br><span class="line">00401070  8A  42  01  mov  al,byte  ptr  [edx+1]  </span><br><span class="line">00401073  88  45  FC  mov  byte  ptr  [ebp-4],al  </span><br></pre></td></tr></table></figure>


<p>第一种在读取时直接就把字符串中的元素读到寄存器cl中，而第二种则要先把指针值读到edx中，再根据edx读取字符，显然慢了。  </p>
<h2 id="各自优点"><a href="#各自优点" class="headerlink" title="各自优点"></a>各自优点</h2><h3 id="堆（heap）"><a href="#堆（heap）" class="headerlink" title="堆（heap）"></a><strong>堆（heap）</strong></h3><p>堆是一个内存空间，这个内存控件可以由程序员分配和释放，当然部分语言自带 GC（ Garbage Collection 垃圾回收），部分堆内存可以由 GC 回收。</p>
<p>堆是程序在运行的时候<strong>请求操作系统分配给自己内存</strong>。由于从操作系统管理的内存分配，所以在分配和销毁时都要占用时间，因此用堆的效率相对栈来说略低。但是堆的优点在于，<strong>编译器不必知道要从堆里分配多少内存空间，也不必知道存储的数据要在堆里停留多长的时间</strong>，因此用堆保存数据时会得到更大的灵活性。因此，为达到这种灵活性，在堆里分配存储空间时会花掉相对更长的时间，这也是效率低于栈的原因。</p>
<h3 id="栈（stack）"><a href="#栈（stack）" class="headerlink" title="栈（stack）"></a><strong>栈（stack）</strong></h3><p>栈是由<strong>编译器自动分配和释放</strong>的，存放函数的参数值，局部变量的值等。也请注意，这里说的栈 不是数据结构中的栈，大家千万不要混淆。这里请注意，栈是由由系统自动分配。</p>
<p>栈的优势是，<strong>存取速度比堆要快，仅次于寄存器</strong>，栈数据可以共享。但缺点是，存在栈中的数据大小与生存期必须是确定的，缺乏灵活性。</p>
<h1 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a><a href="https://blog.csdn.net/ydar95/article/details/69822540">类型转换</a></h1><blockquote>
<p>const_cast , static_cast , dynamic_cast , reinterpret_cast</p>
</blockquote>
<h2 id="C风格的强制转换"><a href="#C风格的强制转换" class="headerlink" title="C风格的强制转换"></a>C风格的强制转换</h2><p>C风格的强制转换(Type Cast)容易理解,不管什么类型的转换都可以使用使用下面的方式.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">TypeName b = (TypeName)a;<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>当然,C++也是支持C风格的强制转换,但是C风格的强制转换可能带来一些隐患,让一些问题难以察觉.所以C++提供了一组可以用在不同场合的强制转换的函数.</p>
<h2 id="C-四种强制转换类型函数"><a href="#C-四种强制转换类型函数" class="headerlink" title="C++ 四种强制转换类型函数"></a>C++ 四种强制转换类型函数</h2><h3 id="const-cast"><a href="#const-cast" class="headerlink" title="const_cast"></a>const_cast</h3><p>1、常量指针被转化成非常量的指针，并且仍然指向原来的对象；<br>2、常量引用被转换成非常量的引用，并且仍然指向原来的对象；<br>3、const_cast一般用于修改指针。如const char *p形式。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 原始数组</span></span><br><span class="line">    <span class="keyword">int</span> ary[<span class="number">4</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印数据</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">        std::cout &lt;&lt; ary[i] &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 常量化数组指针</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span>*c_ptr = ary;</span><br><span class="line">    <span class="comment">//c_ptr[1] = 233;   //error</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过const_cast&lt;Ty&gt; 去常量</span></span><br><span class="line">    <span class="keyword">int</span> *ptr = <span class="keyword">const_cast</span>&lt;<span class="keyword">int</span>*&gt;(c_ptr);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改数据</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">        ptr[i] += <span class="number">1</span>;    <span class="comment">//pass</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印修改后的数据</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">        std::cout &lt;&lt; ary[i] &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*  out print</span></span><br><span class="line"><span class="comment">    1   2   3   4</span></span><br><span class="line"><span class="comment">    2   3   4   5</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>注意:对于在定义为常量的参数,使用const_cast可能会有不同的效果.类似代码如下</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> c_val = <span class="number">233</span>;  <span class="comment">//声明为常量类型</span></span><br><span class="line">    <span class="keyword">int</span> &amp;use_val = <span class="keyword">const_cast</span>&lt;<span class="keyword">int</span>&amp;&gt;(c_val); <span class="comment">//使用去const 引用</span></span><br><span class="line">    <span class="keyword">int</span> *ptr_val = <span class="keyword">const_cast</span>&lt;<span class="keyword">int</span>*&gt;(&amp;c_val);<span class="comment">//使用去const 指针</span></span><br><span class="line"></span><br><span class="line">    use_val = <span class="number">666</span>;  <span class="comment">//未定义行为</span></span><br><span class="line">    std::cout &lt;&lt; c_val &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; use_val &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; *ptr_val &lt;&lt; std::endl;</span><br><span class="line">    *ptr_val = <span class="number">110</span>; <span class="comment">//未定义行为</span></span><br><span class="line">    std::cout &lt;&lt; c_val &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; use_val &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; *ptr_val &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 在 vs2017 下 输出为</span></span><br><span class="line"><span class="comment">    233 666 666</span></span><br><span class="line"><span class="comment">    233 110 110</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>未定义行为:C++标准对此类行为没有做出明确规定.同一份代码在使用不同的编译器会有不同的效果.在 vs2017 下, 虽然代码中 <em>c_val , use_val , ptr_val</em> 看到的地址是一样的.但是c_val的值并没有改变.有可能在某种编译器实现后,这一份代码的<em>c_val</em> 会被改变.也有可能编译器对这类行为直接 <em>error</em> 或 <em>warning</em>.</p>
<h3 id="static-cast"><a href="#static-cast" class="headerlink" title="static_cast"></a>static_cast</h3><ol>
<li>static_cast 作用和<strong>C语言风格强制转换</strong>的效果基本一样，由于没有运行时类型检查来保证转换的安全性，所以这类型的强制转换和C语言风格的强制转换都有安全隐患。</li>
<li>用于类层次结构中基类（父类）和派生类（子类）之间指针或引用的转换。注意：进行上行转换（把派生类的指针或引用转换成基类表示）是安全的；进行下行转换（把基类指针或引用转换成派生类表示）时，由于没有动态类型检查，所以是不安全的。</li>
<li>用于基本数据类型之间的转换，如把int转换成char，把int转换成enum。这种转换的安全性需要开发者来维护。</li>
<li>static_cast不能转换掉原有类型的const、volatile、或者 __unaligned属性。(前两种可以使用const_cast 来去除)</li>
<li>在c++ primer 中说道：<strong>c++ 的任何的隐式转换都是使用 <em>static_cast</em></strong> 来实现。</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 常规的使用方法 */</span></span><br><span class="line"><span class="keyword">float</span> f_pi=<span class="number">3.141592f</span></span><br><span class="line"><span class="keyword">int</span>   i_pi=<span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(f_pi); <span class="comment">/// i_pi 的值为 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* class 的上下行转换 */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span>&#123;</span></span><br><span class="line">    <span class="comment">// something</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub</span>:</span><span class="keyword">public</span> Base&#123;</span><br><span class="line">    <span class="comment">// something</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  上行 Sub -&gt; Base</span></span><br><span class="line"><span class="comment">//编译通过，安全</span></span><br><span class="line">Sub sub;</span><br><span class="line">Base *base_ptr = <span class="keyword">static_cast</span>&lt;Base*&gt;(&amp;sub);  </span><br><span class="line"></span><br><span class="line"><span class="comment">//  下行 Base -&gt; Sub</span></span><br><span class="line"><span class="comment">//编译通过，不安全</span></span><br><span class="line">Base base;</span><br><span class="line">Sub *sub_ptr = <span class="keyword">static_cast</span>&lt;Sub*&gt;(&amp;base);    </span><br></pre></td></tr></table></figure>

<h3 id="dynamic-cast"><a href="#dynamic-cast" class="headerlink" title="dynamic_cast"></a>dynamic_cast</h3><p><em>dynamic_cast</em>强制转换,应该是这四种中最特殊的一个,因为他涉及到面向对象的多态性和程序运行时的状态,也与编译器的属性设置有关.所以不能完全使用C语言的强制转换替代,它也是最常有用的,最不可缺少的一种强制转换.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Base</span>() &#123;&#125;</span><br><span class="line">    ~<span class="built_in">Base</span>() &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;I&#x27;m Base&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">i_am_virtual_foo</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub</span>:</span> <span class="keyword">public</span> Base&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Sub</span>() &#123;&#125;</span><br><span class="line">    ~<span class="built_in">Sub</span>() &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;I&#x27;m Sub&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">i_am_virtual_foo</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Sub-&gt;Base&quot;</span> &lt;&lt; endl;</span><br><span class="line">    Sub * sub = <span class="keyword">new</span> <span class="built_in">Sub</span>();</span><br><span class="line">    sub-&gt;<span class="built_in">print</span>();</span><br><span class="line">    Base* sub2base = <span class="keyword">dynamic_cast</span>&lt;Base*&gt;(sub);</span><br><span class="line">    <span class="keyword">if</span> (sub2base != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        sub2base-&gt;<span class="built_in">print</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;&lt;sub-&gt;base&gt; sub2base val is: &quot;</span> &lt;&lt; sub2base &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl &lt;&lt; <span class="string">&quot;Base-&gt;Sub&quot;</span> &lt;&lt; endl;</span><br><span class="line">    Base *base = <span class="keyword">new</span> <span class="built_in">Base</span>();</span><br><span class="line">    base-&gt;<span class="built_in">print</span>();</span><br><span class="line">    Sub  *base2sub = <span class="keyword">dynamic_cast</span>&lt;Sub*&gt;(base);</span><br><span class="line">    <span class="keyword">if</span> (base2sub != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        base2sub-&gt;<span class="built_in">print</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt;<span class="string">&quot;&lt;base-&gt;sub&gt; base2sub val is: &quot;</span>&lt;&lt; base2sub &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> sub;</span><br><span class="line">    <span class="keyword">delete</span> base;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* vs2017 输出为下</span></span><br><span class="line"><span class="comment">Sub-&gt;Base</span></span><br><span class="line"><span class="comment">I&#x27;m Sub</span></span><br><span class="line"><span class="comment">I&#x27;m Base</span></span><br><span class="line"><span class="comment">&lt;sub-&gt;base&gt; sub2base val is: 00B9E080   // 注:这个地址是系统分配的,每次不一定一样</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Base-&gt;Sub</span></span><br><span class="line"><span class="comment">I&#x27;m Base</span></span><br><span class="line"><span class="comment">&lt;base-&gt;sub&gt; base2sub val is: 00000000   // VS2017的C++编译器,对此类错误的转换赋值为nullptr</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>从上边的代码和输出结果可以看出:<br><strong>对于<em>从子类到基类的指针转换</em> ,dynamic_cast 成功转换,没有什么运行异常,且达到预期结果</strong><br><strong>而<em>从基类到子类的转换</em> , dynamic_cast 在转换时也没有报错,但是输出给 <em>base2sub</em> 是一个 <em>nullptr</em> ,说明dynami_cast 在程序运行时对类型转换对<em>“运行期类型信息”（Runtime type information，RTTI）</em>进行了检查.</strong><br>这个检查主要来自<em>虚函数(virtual function)</em> 在C++的面对对象思想中，虚函数起到了很关键的作用，当一个类中拥有至少一个虚函数，那么编译器就会构建出一个虚函数表(virtual method table)来指示这些函数的地址，假如继承该类的子类定义并实现了一个同名并具有同样函数签名（function siguature）的方法重写了基类中的方法，那么虚函数表会将该函数指向新的地址。此时多态性就体现出来了：当我们将基类的指针或引用指向子类的对象的时候，调用方法时，就会顺着虚函数表找到对应子类的方法而非基类的方法。<em>因此注意下代码中 Base 和 Sub 都有声明定义的一个虚函数 ” i_am_virtual_foo” ,我这份代码的 Base 和 Sub 使用 dynami_cast 转换时检查的运行期类型信息,可以说就是这个虚函数</em></p>
<h3 id="reinterpret-cast"><a href="#reinterpret-cast" class="headerlink" title="reinterpret_cast"></a>reinterpret_cast</h3><p><strong>reinterpret_cast 运算符并不会改变括号中运算对象的值，而是对该对象从位模式上进行重新解释”</strong></p>
<p>reinterpret_cast是强制类型转换符用来处理无关类型转换的，通常为操作数的位模式提供较低层次的重新解释！但是他仅仅是重新解释了给出的对象的比特模型，并没有进行二进制的转换！<br>他是用在任意的指针之间的转换，引用之间的转换，指针和足够大的int型之间的转换，整数到指针的转换，在下面的文章中将给出.<br>请看一个简单代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdint&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> *ptr = <span class="keyword">new</span> <span class="built_in"><span class="keyword">int</span></span>(<span class="number">233</span>);</span><br><span class="line">    <span class="keyword">uint32_t</span> ptr_addr = <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">uint32_t</span>&gt;(ptr);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;ptr 的地址: &quot;</span> &lt;&lt; hex &lt;&lt; ptr &lt;&lt; endl</span><br><span class="line">        &lt;&lt; <span class="string">&quot;ptr_addr 的值(hex): &quot;</span> &lt;&lt; hex &lt;&lt; ptr_addr &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">delete</span> ptr;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">ptr 的地址: 0061E6D8</span></span><br><span class="line"><span class="comment">ptr_addr 的值(hex): 0061e6d8</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>上述代码将指针ptr的地址的值转换成了 <em>unsigned int</em> 类型的ptr_addr 的整数值.<br>提供下IBM C++ 对 reinterpret_cast 推荐使用的地方<br>A pointer to any integral type large enough to hold it （指针转向足够大的整数类型）<br>A value of integral or enumeration type to a pointer （从整形或者enum枚举类型转换为指针）<br>A pointer to a function to a pointer to a function of a different type （从指向函数的指针转向另一个不同类型的指向函数的指针）<br>A pointer to an object to a pointer to an object of a different type （从一个指向对象的指针转向另一个不同类型的指向对象的指针）<br>A pointer to a member to a pointer to a member of a different class or type, if the types of the members are both function types or object types （从一个指向成员的指针转向另一个指向类成员的指针！或者是类型，如果类型的成员和函数都是函数类型或者对象类型）</p>
<p>下面这个例子来自 MSDN 的一个<a href="https://msdn.microsoft.com/en-us/library/e0w9f63b(VS.80).aspx">哈希函数辅助</a></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// expre_reinterpret_cast_Operator.cpp  </span></span><br><span class="line"><span class="comment">// compile with: /EHsc  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span>  </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Returns a hash code based on an address  </span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">short</span> <span class="title">Hash</span><span class="params">(<span class="keyword">void</span> *p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> val = <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">unsigned</span> <span class="keyword">int</span>&gt;(p);</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">unsigned</span> <span class="keyword">short</span>)(val ^ (val &gt;&gt; <span class="number">16</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++)</span><br><span class="line">        cout &lt;&lt; <span class="built_in">Hash</span>(a + i) &lt;&lt; endl;</span><br><span class="line">&#125;<span class="number">123456789101112131415</span></span><br></pre></td></tr></table></figure>

<h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>在使用强制转换的时候,请先考虑清楚我们真的需要使用强制转换和我们应该使用那种强制转换.<br>我这只是简单的介绍这四种强制转换的用途,以上是自己的理解,文章中肯定有各种问题错误,希望大家帮忙指出矫正,本文仅供参考.<br>谢谢阅读.</p>
<h1 id="Effective-c"><a href="#Effective-c" class="headerlink" title="Effective c++"></a>Effective c++</h1><h2 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h2><p>声明式: 告诉编译器某个东西的名称和类型</p>
<p>签名式(signature): 每个函数的声明揭示其签名式, 也就是参数和返回类型</p>
<p>定义式: 提供给编译器 一些声明式的细节, 对对象而言, 定义式是编译器为此对象拨发内存的地址; 对函数或者函数模板而言, 定义式提供了代码本体; 对于 class 而言定义式列出他们的成员</p>
<p>copy 构造函数定义了一个对象如何 passed by value</p>
<p>接口: 函数的签名或 class 内可访问的元素</p>
<h2 id="const-成员函数"><a href="#const-成员函数" class="headerlink" title="const 成员函数"></a>const 成员函数</h2><p>不会对这个类的对象的数据成员作出任何改变, 即在 const 成员函数中无法赋值</p>
<table>
<thead>
<tr>
<th>对象可否调用函数</th>
<th align="center">const 对象</th>
<th align="center">noconst 对象</th>
</tr>
</thead>
<tbody><tr>
<td>const 成员函数</td>
<td align="center">yes</td>
<td align="center">yes</td>
</tr>
<tr>
<td>noconst 成员函数</td>
<td align="center">no</td>
<td align="center">yes</td>
</tr>
</tbody></table>
<p>const 成员函数也不要提供修改途径(比如返回引用), 虽然可以通过编译</p>
<p>可以通过 <code>mutable</code> 在 const 函数中改变对象的数据</p>
<h2 id="构造函数-1"><a href="#构造函数-1" class="headerlink" title="构造函数"></a>构造函数</h2><p>在构造函数中赋值相当于先初始化再赋值, 有开销<br>所以要用初始化列表赋值, 对象成员的初始化是在进入构造函数本体之前</p>
<p>调用构造函数初始化成员</p>
<p>避免编译器自动生成的 copy 构造函数和 copy 运算符, 声明为 private</p>
<h2 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h2><p>析构函数的运作方式是, 最深层派生(most derived)的那个 class 其虚构函数最先被调用, 然后是调用其每一个 base class 的析构函数</p>
<p><strong>How does the compiler then call the base destructors?</strong></p>
<p>The process of destructing an object takes more operations than those you write inside the body of the destructor. When the compiler generates the code for the destructor, it adds extra code both before and after the user defined code.</p>
<p>Before the first line of a user defined destructor is called, <strong>the compiler injects code that will make the type of the object be that of the destructor being called.</strong> That is, right before <code>~derived</code> is entered, the compiler <strong>adds code that will modify the <code>vptr</code> to refer to the <code>vtable</code> of <code>derived</code>,</strong> so that effectively, the runtime type of the object <em>becomes</em> <code>derived</code> (*).</p>
<p>After the last line of your user defined code, <strong>the compiler injects calls to the member destructors as well as base destructor(s)</strong>. This is performed <strong><em>disabling</em> dynamic dispatch</strong>, which means that it will no longer come all the way down to the just executed destructor. <strong>It is the equivalent of adding <code>this-&gt;~mybase();</code></strong> for each base of the object (in reverse order of declaration of the bases) at the end of the destructor.</p>
<p>With virtual inheritance, things get a bit more complex, but overall they follow this pattern.</p>
<p><em>EDIT</em> (forgot the (<em>)): (</em>) The standard mandates in §12/3:</p>
<blockquote>
<p>When a virtual function is called directly or indirectly from a constructor (including from the mem-initializer for a data member) or from a destructor, and the object to which the call applies is the object under construction or destruction, the function called is the one defined in the constructor or destructor’s own class or in one of its bases, but not a function overriding it in a class derived from the constructor or destructor’s class, or overriding it in one of the other base classes of the most derived object.</p>
</blockquote>
<p>That requirement implies that the runtime type of the object is that of the class being constructed/destructed at this time, even if the original object that is being constructed/destructed is of a derived type. A simple test to verify this implementation can be:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">base</span> &#123;</span></span><br><span class="line">   <span class="keyword">virtual</span> ~<span class="built_in">base</span>() &#123; <span class="built_in">f</span>(); &#125;</span><br><span class="line">   <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123; std::cout &lt;&lt; <span class="string">&quot;base&quot;</span>; &#125;</span><br><span class="line">  <span class="comment">//call to virtual method &quot;base::f&quot; during destruction bypasses virtual dispatch</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">derived</span> :</span> base &#123;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123; std::cout &lt;&lt; <span class="string">&quot;derived&quot;</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   base * p = <span class="keyword">new</span> derived;</span><br><span class="line">   <span class="keyword">delete</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// output: base</span></span><br></pre></td></tr></table></figure>

<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>调用 base 的运算符</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Base::<span class="keyword">operator</span> = (target);</span><br></pre></td></tr></table></figure>



















]]></content>
      <categories>
        <category>language</category>
      </categories>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>stl</title>
    <url>/2022/01/16/stl/</url>
    <content><![CDATA[<blockquote>
</blockquote>
<span id="more"></span>

<h1 id="global-function"><a href="#global-function" class="headerlink" title="global function"></a>global function</h1><h2 id="remove"><a href="#remove" class="headerlink" title="remove"></a>remove</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">ForwardIterator</span>, <span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line">  <span class="function">ForwardIterator <span class="title">remove</span> <span class="params">(ForwardIterator first, ForwardIterator last, <span class="keyword">const</span> T&amp; val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  ForwardIterator result = first;</span><br><span class="line">  <span class="keyword">while</span> (first!=last) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!(*first == val)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (result!=first)</span><br><span class="line">        *result = <span class="built_in">move</span>(*first);</span><br><span class="line">      ++result;</span><br><span class="line">    &#125;</span><br><span class="line">    ++first;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Transforms the range <code>[first,last)</code> into a range with all the elements that compare equal to val removed, and returns an iterator to the new end of that range.</p>
<p><strong>size 不变</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  vector&lt;<span class="keyword">int</span>&gt; v &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">  <span class="keyword">auto</span> i = std::<span class="built_in">remove</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="number">1</span>);</span><br><span class="line">  v.<span class="built_in">push_back</span>(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">  cout&lt;&lt;*i&lt;&lt;endl;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">auto</span>&amp;&amp; i:v)</span><br><span class="line">      cout&lt;&lt;i&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">0</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">6</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h2 id="move-forward"><a href="#move-forward" class="headerlink" title="move forward"></a><a href="https://stackoverflow.com/questions/9671749/whats-the-difference-between-stdmove-and-stdforward">move forward</a></h2><p><code>std::move</code> takes an object and allows you to treat it as a temporary (an rvalue). Although it isn’t a semantic requirement, typically a function accepting a reference to an rvalue will invalidate it. When you see <code>std::move</code>, it indicates that the value of the object should not be used afterwards, but you can still assign a new value and continue using it.</p>
<p><code>std::forward</code> has a single use case: <strong>to cast a templated function parameter (inside the function) to the value category</strong> (lvalue or rvalue) the caller used to pass it. This allows rvalue arguments to be passed on as rvalues, and lvalues to be passed on as lvalues, a scheme called “perfect forwarding.”</p>
<p>To <a href="http://ideone.com/z5li7">illustrate</a>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">overloaded</span><span class="params">( <span class="keyword">int</span> <span class="keyword">const</span> &amp;arg )</span> </span>&#123; std::cout &lt;&lt; <span class="string">&quot;by lvalue\n&quot;</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">overloaded</span><span class="params">( <span class="keyword">int</span> &amp;&amp; arg )</span> </span>&#123; std::cout &lt;&lt; <span class="string">&quot;by rvalue\n&quot;</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt; <span class="keyword">typename</span> t &gt;</span><br><span class="line"><span class="comment">/* &quot;t &amp;&amp;&quot; with &quot;t&quot; being template param is special, and  adjusts &quot;t&quot; to be (for example) &quot;int &amp;&quot; or non-ref &quot;int&quot; so std::forward knows what to do. */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">forwarding</span><span class="params">( t &amp;&amp; arg )</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;via std::forward: &quot;</span>;</span><br><span class="line">    <span class="built_in">overloaded</span>( std::forward&lt;t&gt;(arg) );</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;via std::move: &quot;</span>;</span><br><span class="line">    <span class="built_in">overloaded</span>( std::<span class="built_in">move</span>(arg) ); <span class="comment">// conceptually this would invalidate arg</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;by simple passing: &quot;</span>;</span><br><span class="line">    <span class="built_in">overloaded</span>( arg );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;initial caller passes rvalue:\n&quot;</span>;</span><br><span class="line">    forwarding( <span class="number">5</span> );</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;initial caller passes lvalue:\n&quot;</span>;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">5</span>;</span><br><span class="line">    forwarding( x );</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">initial caller passes rvalue:</span></span><br><span class="line"><span class="comment">via std::forward: by rvalue</span></span><br><span class="line"><span class="comment">via std::move: by rvalue</span></span><br><span class="line"><span class="comment">by simple passing: by lvalue</span></span><br><span class="line"><span class="comment">initial caller passes lvalue:</span></span><br><span class="line"><span class="comment">via std::forward: by lvalue</span></span><br><span class="line"><span class="comment">via std::move: by rvalue</span></span><br><span class="line"><span class="comment">by simple passing: by lvalue</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>As Howard mentions, there are also similarities as both these functions simply cast to reference type. But outside these specific use cases (which cover 99.9% of the usefulness of rvalue reference casts), you should use <code>static_cast</code> directly and write a good explanation of what you’re doing.</p>
<p>简而言之, move 将一切值变为右值, forward 进行完美转发, 不改变右值或者左值</p>
<p>In C++11, a <a href="https://en.wikibooks.org/wiki/More_C%2B%2B_Idioms/Move_Constructor">move constructor</a> of <code>std::vector&lt;T&gt;</code> that <strong>takes an rvalue reference to an <code>std::vector&lt;T&gt;</code> can copy the pointer to the internal C-style array out of the rvalue into the new <code>std::vector&lt;T&gt;</code></strong>, then set the pointer inside the rvalue to null. Since the temporary will never again be used, no code will try to access the null pointer, and because the pointer is null, its memory is not deleted when it goes out of scope. Hence, the operation not only forgoes the expense of a deep copy, but is safe and invisible.</p>
<h2 id="iterator"><a href="#iterator" class="headerlink" title="iterator"></a>iterator</h2><blockquote>
<p>random-&gt;bidirectional-&gt;forward-&gt;input/output</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gyfngf8848j314i0rcdk2.jpg" alt="截屏2022-01-16 下午5.38.52"></p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; v &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt;::iterator i = v.<span class="built_in">begin</span>();</span><br><span class="line">    cout&lt;&lt;i.<span class="built_in">base</span>()&lt;&lt;endl;</span><br><span class="line">    ++i;</span><br><span class="line">    cout&lt;&lt;i.<span class="built_in">base</span>()&lt;&lt;endl;</span><br><span class="line">    i = v.<span class="built_in">end</span>();</span><br><span class="line">    cout&lt;&lt;i.<span class="built_in">base</span>()&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;v.<span class="built_in">end</span>()-v.<span class="built_in">begin</span>()&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*output</span></span><br><span class="line"><span class="comment">	0x600000141100</span></span><br><span class="line"><span class="comment">  0x600000141104</span></span><br><span class="line"><span class="comment">  0x600000141114</span></span><br><span class="line"><span class="comment">  5</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>to get int from iterator</p>
<p><code>it - vec.begin()</code></p>
<h3 id="rbegin"><a href="#rbegin" class="headerlink" title="rbegin"></a>rbegin</h3><p>Returns a <em>reverse iterator</em> pointing to the <strong>last element</strong> in the <a href="http://www.cplusplus.com/vector">vector</a></p>
<p><code>rbegin</code> points to the element right before the one that would be pointed to by member <a href="http://www.cplusplus.com/vector::end">end</a>.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="function">std::vector&lt;<span class="keyword">int</span>&gt; <span class="title">myvector</span> <span class="params">(<span class="number">5</span>)</span></span>;  <span class="comment">// 5 default-constructed ints</span></span><br><span class="line"></span><br><span class="line">  std::vector&lt;<span class="keyword">int</span>&gt;::reverse_iterator rit = myvector.<span class="built_in">rbegin</span>();</span><br><span class="line">  <span class="keyword">for</span> (; rit!= myvector.<span class="built_in">rend</span>(); ++rit)</span><br><span class="line">    <span class="comment">//do something</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="container"><a href="#container" class="headerlink" title="container"></a>container</h1><blockquote>
<p>common:</p>
<p>[first, last)</p>
<p>end return past-end</p>
<p>use &lt; to compare, strict weak ordering, a==b equals !(a&lt;b) &amp;&amp; !(b&lt;a)</p>
<p>if not find return end()</p>
</blockquote>
<h2 id="string"><a href="#string" class="headerlink" title="string"></a>string</h2><h3 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h3><p>s.length() == s.size()</p>
<p>+= string, char</p>
<p>append str</p>
<p>push_back char</p>
<p>strrev</p>
<p>insert position str</p>
<p>end()<br>Returns an iterator pointing to the <em>past-the-end</em> character of the string.</p>
<h2 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h2><blockquote>
<p>扩充容量: 2 倍</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="keyword">int</span>&gt; v&#123;&#125;;</span><br><span class="line">v.<span class="built_in">reserve</span>(<span class="number">1</span>);</span><br><span class="line">cout&lt;&lt;v.<span class="built_in">begin</span>().<span class="built_in">base</span>()&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;v.<span class="built_in">end</span>().<span class="built_in">base</span>()&lt;&lt;endl;</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">0</span>);</span><br><span class="line">cout&lt;&lt;v.<span class="built_in">begin</span>().<span class="built_in">base</span>()&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;v.<span class="built_in">end</span>().<span class="built_in">base</span>()&lt;&lt;endl;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">0x600000b48030</span></span><br><span class="line"><span class="comment">0x600000b48030</span></span><br><span class="line"><span class="comment">0x600000b48030</span></span><br><span class="line"><span class="comment">0x600000b48034</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//end() always return past end element</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="常用函数-1"><a href="#常用函数-1" class="headerlink" title="常用函数"></a>常用函数</h3><ul>
<li><p>v.back() 最后一个元素</p>
</li>
<li><p>二维 vector 初始化<br><code>vector&lt;vector&lt;int&gt;&gt;v (row, vector&lt;int&gt;(column, 0));</code></p>
</li>
</ul>
<h3 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h3><table>
<thead>
<tr>
<th align="right">default (1)</th>
<th><code>explicit vector (const allocator_type&amp; alloc = allocator_type()); </code></th>
</tr>
</thead>
<tbody><tr>
<td align="right">fill (2)</td>
<td><code>explicit vector (size_type n);        </code><br /><code>vector (size_type n, const value_type&amp; val, const allocator_type&amp; alloc = allocator_type());</code></td>
</tr>
<tr>
<td align="right">range (3)</td>
<td><code>template &lt;class InputIterator&gt;  vector (InputIterator first, InputIterator last, const allocator_type&amp; alloc = allocator_type()); </code></td>
</tr>
<tr>
<td align="right">copy (4)</td>
<td><code>vector (const vector&amp; x); </code><br /><code>vector (const vector&amp; x, const allocator_type&amp; alloc); </code></td>
</tr>
<tr>
<td align="right">move (5)</td>
<td><code>vector (vector&amp;&amp; x); </code><br /><code>vector (vector&amp;&amp; x, const allocator_type&amp; alloc); </code></td>
</tr>
<tr>
<td align="right">initializer list (6)</td>
<td><code>vector (initializer_list&lt;value_type&gt; il, const allocator_type&amp; alloc = allocator_type());</code></td>
</tr>
</tbody></table>
<h3 id="clear"><a href="#clear" class="headerlink" title="clear"></a>clear</h3><p>元素清空, size = 0</p>
<h3 id="erase"><a href="#erase" class="headerlink" title="erase"></a>erase</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">iterator <span class="title">erase</span> <span class="params">(const_iterator position)</span></span>;</span><br><span class="line"><span class="function">iterator <span class="title">erase</span> <span class="params">(const_iterator first, const_iterator last)</span></span>;</span><br></pre></td></tr></table></figure>

<p>[first, last)</p>
<h3 id="assign"><a href="#assign" class="headerlink" title="assign"></a>assign</h3><table>
<thead>
<tr>
<th align="right">range(1)</th>
<th><code>template &lt;class InputIterator&gt;  void assign (InputIterator first, InputIterator last); </code></th>
</tr>
</thead>
<tbody><tr>
<td align="right">fill (2)</td>
<td><code>void assign (size_type n, const value_type&amp; val); </code></td>
</tr>
<tr>
<td align="right">initializer list (3)</td>
<td><code>void assign (initializer_list&lt;value_type&gt; il);</code></td>
</tr>
</tbody></table>
<p>size change</p>
<h3 id="push-back"><a href="#push-back" class="headerlink" title="push_back"></a>push_back</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_back</span> <span class="params">(<span class="keyword">const</span> value_type&amp; val)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_back</span> <span class="params">(value_type&amp;&amp; val)</span></span>;</span><br></pre></td></tr></table></figure>

<p>The content of <em>val</em> is copied (or moved) to the new element.</p>
<h3 id="pop-back"><a href="#pop-back" class="headerlink" title="pop_back"></a>pop_back</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop_back</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<p>remove last element, –size</p>
<h3 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h3><table>
<thead>
<tr>
<th align="right">single element (1)</th>
<th><code>iterator insert (const_iterator position, const value_type&amp; val); </code></th>
</tr>
</thead>
<tbody><tr>
<td align="right">fill (2)</td>
<td><code>iterator insert (const_iterator position, size_type n, const value_type&amp; val); </code></td>
</tr>
<tr>
<td align="right">range (3)</td>
<td><code>template &lt;class InputIterator&gt; </code><br /><code>iterator insert (const_iterator position, InputIterator first, InputIterator last); </code></td>
</tr>
<tr>
<td align="right">move (4)</td>
<td><code>iterator insert (const_iterator position, value_type&amp;&amp; val); </code></td>
</tr>
<tr>
<td align="right">initializer list (5)</td>
<td><code>iterator insert (const_iterator position, initializer_list&lt;value_type&gt; il);</code></td>
</tr>
</tbody></table>
<p>The <a href="https://www.cplusplus.com/vector">vector</a> is extended by inserting new elements <strong><u>before</u> the element at the specified <em>position</em></strong></p>
<h3 id="swap"><a href="#swap" class="headerlink" title="swap"></a>swap</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span> <span class="params">(vector&amp; x)</span></span>;</span><br></pre></td></tr></table></figure>

<p>After the call to this member function, the elements in this container are those which were in <em>x</em> before the call, and the elements of <em>x</em> are those which were in this. <strong>All iterators, references and pointers</strong> <strong>remain valid</strong> for the swapped objects. 即指针的内容 <code>*itrator</code> 不会改变</p>
<h3 id="emplace"><a href="#emplace" class="headerlink" title="emplace"></a>emplace</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;class... Args&gt;</span><br><span class="line"><span class="function">iterator <span class="title">emplace</span> <span class="params">(const_iterator position, Args&amp;&amp;... args)</span></span>;</span><br></pre></td></tr></table></figure>

<p>The container is extended by inserting a new element at <em>position</em>. This new element is <strong>constructed in place using <em>args</em></strong> as the arguments for its construction.</p>
<p>++size</p>
<h3 id="emplace-back"><a href="#emplace-back" class="headerlink" title="emplace_back"></a>emplace_back</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;class... Args&gt;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">emplace_back</span> <span class="params">(Args&amp;&amp;... args)</span></span>;</span><br></pre></td></tr></table></figure>

<p>emplace at the end</p>
<h2 id="deque"><a href="#deque" class="headerlink" title="deque"></a>deque</h2><blockquote>
<p> <a href="https://www.cplusplus.com/deque">deques</a> are not guaranteed to store all its elements in contiguous storage locations (do not use pointer) most method similar to vector</p>
</blockquote>
<h3 id="push-front"><a href="#push-front" class="headerlink" title="push_front"></a>push_front</h3><h3 id="pop-front"><a href="#pop-front" class="headerlink" title="pop_front"></a>pop_front</h3><h3 id="emplace-front"><a href="#emplace-front" class="headerlink" title="emplace_front"></a>emplace_front</h3><h3 id="forward-list"><a href="#forward-list" class="headerlink" title="forward_list"></a>forward_list</h3><blockquote>
<p>only pointer to next node</p>
<p>special: </p>
<ul>
<li>before_begin iterator</li>
<li>push pop front only</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">cout&lt;&lt;&amp;*l.<span class="built_in">begin</span>()&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;&amp;*l.<span class="built_in">before_begin</span>()&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;&amp;*l.<span class="built_in">end</span>()&lt;&lt;endl;</span><br><span class="line">l.<span class="built_in">push_front</span>(<span class="number">0</span>);</span><br><span class="line">cout&lt;&lt;&amp;*l.<span class="built_in">begin</span>()&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;&amp;*l.<span class="built_in">before_begin</span>()&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;&amp;*l.<span class="built_in">end</span>()&lt;&lt;endl;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">0x8</span></span><br><span class="line"><span class="comment">0x7ff7b93b5900</span></span><br><span class="line"><span class="comment">0x8</span></span><br><span class="line"><span class="comment">0x600003bf4048</span></span><br><span class="line"><span class="comment">0x7ff7b93b5900</span></span><br><span class="line"><span class="comment">0x8</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>


</blockquote>
<h3 id="resize"><a href="#resize" class="headerlink" title="resize"></a>resize</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">resize</span> <span class="params">(size_type n)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">resize</span> <span class="params">(size_type n, <span class="keyword">const</span> value_type&amp; val)</span></span>;</span><br></pre></td></tr></table></figure>

<p>If <em>n</em> is smaller than the current number of elements in the container, the content is trimmed to contain only its <strong>first <em>n</em> elements</strong>, removing those beyonf (and destroying them).</p>
<p>If <em>n</em> is greater than the current number of elements in the container, the content is expanded by inserting at the end as many elements as needed to reach a size of <em>n</em> elements. If <em>val</em> is specified, the new elements are initialized as copies of <em>val</em>, otherwise, they are <strong>value-initialized.</strong></p>
<h3 id="splice-after"><a href="#splice-after" class="headerlink" title="splice_after"></a>splice_after</h3><table>
<thead>
<tr>
<th align="right">entire list (1)</th>
<th><strong><code>void splice_after (const_iterator position, forward_list&amp; fwdlst); void splice_after (const_iterator position, forward_list&amp;&amp; fwdlst); </code></strong></th>
</tr>
</thead>
<tbody><tr>
<td align="right">single element (2)</td>
<td><code>void splice_after (const_iterator position, forward_list&amp; fwdlst, const_iterator i); </code><br /><code>void splice_after (const_iterator position, forward_list&amp;&amp; fwdlst, const_iterator i);</code></td>
</tr>
<tr>
<td align="right">element range (3)</td>
<td><code>void splice_after (const_iterator position, forward_list&amp; fwdlst,                   const_iterator first, const_iterator last); </code><br /><code>void splice_after (const_iterator position, forward_list&amp;&amp; fwdlst,                   const_iterator first, const_iterator last);</code></td>
</tr>
</tbody></table>
<p>Transfers elements from <em>fwdlst</em> into the container inserting them <strong>after the element pointed by <em>position</em>.</strong></p>
<p>This effectively inserts those elements into the container and removes them from <em>fwdlst</em>, <strong>altering the sizes of both containers</strong>. The operation does not involve the construction or destruction of any element. They are transferred, no matter whether <em>fwdlst</em> is an lvalue or an rvalue, or whether the <code>value_type</code> supports move-construction or not.</p>
<p>The <em>first version (1)</em> transfers all the elements of <em>fwdlst</em> into the container.<br>The <em>second version (2)</em> transfers only the element pointed by <em>i</em> from <em>fwdlst</em> into the container.<br>The <em>third version (3)</em> transfers the range <code>(first,last)</code> from <em>fwdlst</em> into the container.</p>
<h3 id="remove-1"><a href="#remove-1" class="headerlink" title="remove"></a>remove</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span> <span class="params">(<span class="keyword">const</span> value_type&amp; val)</span></span>;</span><br></pre></td></tr></table></figure>

<p>Removes from the container all the elements that compare equal to <em>val</em>. This calls the destructor of these objects and reduces the container size by the number of elements removed.</p>
<h3 id="remove-if"><a href="#remove-if" class="headerlink" title="remove_if"></a>remove_if</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Predicate</span>&gt;</span> <span class="function"><span class="keyword">void</span> <span class="title">remove_if</span> <span class="params">(Predicate pred)</span></span>;</span><br></pre></td></tr></table></figure>

<p>Removes from the container all the elements for which <em>Predicate pred</em> returns <code>true</code>. This calls the destructor of these objects and reduces the container size by the number of elements removed.</p>
<p>Predicate should be function or class with () overloaded</p>
<h3 id="unique"><a href="#unique" class="headerlink" title="unique"></a>unique</h3><table>
<thead>
<tr>
<th align="right">(1)</th>
<th><code>void unique(); </code></th>
</tr>
</thead>
<tbody><tr>
<td align="right">(2)</td>
<td><code>template &lt;class BinaryPredicate&gt;  void unique (BinaryPredicate binary_pred);</code></td>
</tr>
</tbody></table>
<p>The version with no parameters <em>(1)</em>, removes all but the first element from every consecutive group of equal elements in the container.Thus, this function is especially useful for sorted lists.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">forward_list&lt;<span class="keyword">int</span>&gt; l&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>&#125;;</span><br><span class="line">l.<span class="built_in">unique</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> i : l)</span><br><span class="line">  cout&lt;&lt;i&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1 2 3 4 2 1</span></span><br></pre></td></tr></table></figure>

<p>for (2), notice that the function will call <code>binary_pred(*i,*(i-1))</code> for all pairs of elements (where <code>i</code> is an iterator to an element, starting from the second) and remove <code>i</code> from the <a href="https://www.cplusplus.com/forward_list">forward_list</a> if the predicate returns <code>true</code>.</p>
<h3 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h3><table>
<thead>
<tr>
<th align="right">(1)</th>
<th><code> void merge (forward_list&amp; fwdlst);</code><br /><code>void merge (forward_list&amp;&amp; fwdlst);</code></th>
</tr>
</thead>
<tbody><tr>
<td align="right">(2)</td>
<td><code>template &lt;class Compare&gt;  void merge (forward_list&amp; fwdlst, Compare comp); </code><br /><code>template &lt;class Compare&gt;  void merge (forward_list&amp;&amp; fwdlst, Compare comp);</code></td>
</tr>
</tbody></table>
<p>Merges <em>x</em> into the <a href="https://www.cplusplus.com/forward_list">forward_list</a> by transferring all of its elements at their respective ordered positions into the container (both containers shall already be ordered). This effectively removes all the elements in <em>x</em> (which becomes <a href="https://www.cplusplus.com/forward_list::empty">empty</a>), and inserts them into their ordered position within container</p>
<p>The template versions with two parameters (2), have the same behavior, but take a specific predicate (<em>comp</em>) to perform the comparison operation between elements. This comparison shall produce a <em>strict weak ordering</em> of the elements.</p>
<blockquote>
<p><em>strict weak ordering</em></p>
<p>== equeals !(a&lt;b) &amp;&amp; !(b&lt;a)</p>
</blockquote>
<p>This function requires that the <a href="https://www.cplusplus.com/forward_list">forward_list</a> containers have their elements already ordered by value (or by <em>comp</em>) before the call. For an alternative on unordered lists, see <a href="https://www.cplusplus.com/list::splice">list::splice</a>.</p>
<p>Assuming such ordering, each element of <em>x</em> is inserted at the position that corresponds to its value according to the <em>strict weak ordering</em> defined by <code>operator&lt;</code> or <em>comp</em>.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">forward_list&lt;<span class="keyword">int</span>&gt; l&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>&#125;;</span><br><span class="line">forward_list&lt;<span class="keyword">int</span>&gt; l2&#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">13</span>, <span class="number">0</span>&#125;;</span><br><span class="line">l.<span class="built_in">sort</span>();</span><br><span class="line">l2.<span class="built_in">sort</span>();</span><br><span class="line">l.<span class="built_in">merge</span>(l2);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> i : l)</span><br><span class="line">  cout&lt;&lt;i&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="comment">//0 1 1 2 2 2 3 4 10 13 20</span></span><br><span class="line"></span><br><span class="line">forward_list&lt;<span class="keyword">int</span>&gt; l&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>&#125;;</span><br><span class="line">forward_list&lt;<span class="keyword">int</span>&gt; l2&#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">13</span>, <span class="number">0</span>&#125;;</span><br><span class="line">l.<span class="built_in">merge</span>(l2);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> i : l)</span><br><span class="line">  cout&lt;&lt;i&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="comment">//1 2 2 3 4 2 1 10 20 13 0</span></span><br></pre></td></tr></table></figure>

<h3 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h3><table>
<thead>
<tr>
<th align="right">(1)</th>
<th><code> void sort();</code></th>
</tr>
</thead>
<tbody><tr>
<td align="right">(2)</td>
<td><code>template &lt;class Compare&gt;  void sort (Compare comp);</code></td>
</tr>
</tbody></table>
<p>strict weak ordering, stable, equivalent elements preserve the relative order they had before the call.</p>
<h3 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reverse</span><span class="params">()</span> <span class="keyword">noexcept</span></span>;</span><br></pre></td></tr></table></figure>

<h2 id="list"><a href="#list" class="headerlink" title="list"></a>list</h2><blockquote>
<p>special: doubly-linked lists</p>
</blockquote>
<h3 id="splice"><a href="#splice" class="headerlink" title="splice"></a>splice</h3><table>
<thead>
<tr>
<th align="right">entire list (1)</th>
<th><code>void splice (const_iterator position, list&amp; x); </code><br /><code>void splice (const_iterator position, list&amp;&amp; x); </code></th>
</tr>
</thead>
<tbody><tr>
<td align="right">single element (2)</td>
<td><code>void splice (const_iterator position, list&amp; x, const_iterator i);</code><br /><code>void splice (const_iterator position, list&amp;&amp; x, const_iterator i);</code></td>
</tr>
<tr>
<td align="right">element range (3)</td>
<td><code>void splice (const_iterator position, list&amp; x, const_iterator first, const_iterator last); </code><br /><code>void splice (const_iterator position, list&amp;&amp; x, const_iterator first, const_iterator last);</code></td>
</tr>
</tbody></table>
<h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><blockquote>
<p>special: key unique, Internally, the elements in a <code>map</code> are <strong>always sorted</strong> by its <em>key</em> following a specific <em>strict weak ordering</em> criterion indicated by its internal <a href="https://www.cplusplus.com/map::key_comp">comparison object</a> (of type <code>Compare</code>).</p>
<p>Maps are typically implemented as <em>binary search trees</em>.</p>
<p>begin() returns sorted first element</p>
</blockquote>
<h3 id=""><a href="#" class="headerlink" title="[]"></a>[]</h3><p>If <em>k</em> does not match the key of any element in the container, the function inserts a new element with that key and returns a reference to its mapped value. Notice that this <strong>always increases</strong> the <a href="https://www.cplusplus.com/unordered_map::size">container size</a> by one, even if no mapped value is assigned to the element (<strong>the element is constructed using its default constructor</strong>).</p>
<h3 id="insert-1"><a href="#insert-1" class="headerlink" title="insert"></a>insert</h3><table>
<thead>
<tr>
<th align="right">single element (1)</th>
<th><code>pair&lt;iterator,bool&gt; insert (const value_type&amp; val); </code><br /><code>template &lt;class P&gt; pair&lt;iterator,bool&gt; insert (P&amp;&amp; val); </code></th>
</tr>
</thead>
<tbody><tr>
<td align="right">with hint (2)</td>
<td><code>iterator insert (const_iterator position, const value_type&amp; val);</code><br /><code>template &lt;class P&gt; iterator insert (const_iterator position, P&amp;&amp; val);</code></td>
</tr>
<tr>
<td align="right">range (3)</td>
<td><code>template &lt;class InputIterator&gt;  void insert (InputIterator first, InputIterator last); </code></td>
</tr>
<tr>
<td align="right">initializer list (4)</td>
<td><code>void insert (initializer_list&lt;value_type&gt; il);</code></td>
</tr>
</tbody></table>
<p>Because element keys in a <a href="https://www.cplusplus.com/map">map</a> are unique, the insertion operation <strong>checks</strong> whether each inserted element has a key equivalent to the one of an element already in the container, and if so, the element is not inserted, <strong>returning an iterator to this existing element</strong> (if the function returns a value).</p>
<p>can also just use <code>[]</code></p>
<p>The function optimizes its insertion time if <em>position</em> points to the element that will <strong>follow</strong> the inserted element (or to the <a href="https://www.cplusplus.com/map::end">end</a>, if it would be the last).</p>
<p>Notice that this is just a hint and does not force the new element to be inserted at that position within the <a href="https://www.cplusplus.com/map">map</a> container (the elements in a <a href="https://www.cplusplus.com/map">map</a> always follow a specific order depending on their key).</p>
<p><a href="https://stackoverflow.com/questions/4342204/is-there-any-position-limitation-on-the-insert-hint-for-stdmap/4342257">hint</a></p>
<p>Insert with hint is logarithmic in general, but it is amortized constant time if t is inserted immediately before p.</p>
<p>So I’d say hinting on either side gives about the same result, and is always better than no hint at all. Choosing a poor hint position (such as the start) is worse than no hint at all.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">std::map&lt;Key,T,Compare,Allocator&gt;::extract</span><br><span class="line"><span class="comment">//return node_type</span></span><br><span class="line"><span class="comment">//parammeter: iterator or key</span></span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="comment">//used to change key, normally key is const</span></span><br><span class="line"><span class="comment">//extract, change key, insert(move())</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::map&lt;<span class="keyword">int</span>, <span class="keyword">char</span>&gt; cont&#123;&#123;<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>&#125;, &#123;<span class="number">2</span>, <span class="string">&#x27;b&#x27;</span>&#125;, &#123;<span class="number">3</span>, <span class="string">&#x27;c&#x27;</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">auto</span> print = [](std::pair&lt;<span class="keyword">const</span> <span class="keyword">int</span>, <span class="keyword">char</span>&gt;&amp; n) &#123; </span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; n.first &lt;&lt; <span class="string">&#x27;(&#x27;</span> &lt;&lt; n.second &lt;&lt; <span class="string">&#x27;)&#x27;</span>; </span><br><span class="line">    &#125;;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Start:&quot;</span>;</span><br><span class="line">    std::for_each(cont.<span class="built_in">begin</span>(), cont.<span class="built_in">end</span>(), print);</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// Extract node handle and change key</span></span><br><span class="line">    <span class="keyword">auto</span> nh = cont.<span class="built_in">extract</span>(<span class="number">1</span>);</span><br><span class="line">    nh.<span class="built_in">key</span>() = <span class="number">4</span>; </span><br><span class="line"> </span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;After extract and before insert:&quot;</span>;</span><br><span class="line">    std::for_each(cont.<span class="built_in">begin</span>(), cont.<span class="built_in">end</span>(), print);</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// Insert node handle back</span></span><br><span class="line">    cont.<span class="built_in">insert</span>(<span class="built_in">move</span>(nh));</span><br><span class="line"> </span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;End:&quot;</span>;</span><br><span class="line">    std::for_each(cont.<span class="built_in">begin</span>(), cont.<span class="built_in">end</span>(), print);</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Start: 1(a) 2(b) 3(c)</span></span><br><span class="line"><span class="comment">After extract and before insert: 2(b) 3(c)</span></span><br><span class="line"><span class="comment">End: 2(b) 3(c) 4(a)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">iterator <span class="title">find</span> <span class="params">(<span class="keyword">const</span> key_type&amp; k)</span></span>;</span><br><span class="line"><span class="function">const_iterator <span class="title">find</span> <span class="params">(<span class="keyword">const</span> key_type&amp; k)</span> <span class="keyword">const</span></span>;</span><br></pre></td></tr></table></figure>

<p>Searches the container for an element with a <em>key</em> equivalent to <em>k</em> and returns an iterator to it if found, otherwise it returns an iterator to <a href="https://www.cplusplus.com/map::end">map::end</a>.</p>
<h3 id="count"><a href="#count" class="headerlink" title="count"></a>count</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">size_type <span class="title">count</span> <span class="params">(<span class="keyword">const</span> key_type&amp; k)</span> <span class="keyword">const</span></span>;</span><br></pre></td></tr></table></figure>

<p>Searches the container for elements with a key equivalent to <em>k</em> and returns the number of matches.</p>
<p>Because all elements in a <a href="https://www.cplusplus.com/map">map</a> container are unique, the function can only return <em>1</em> (if the element is found) or zero (otherwise).</p>
<h3 id="lower-bound"><a href="#lower-bound" class="headerlink" title="lower_bound"></a>lower_bound</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">      <span class="function">iterator <span class="title">lower_bound</span> <span class="params">(<span class="keyword">const</span> key_type&amp; k)</span></span>;</span><br><span class="line"><span class="function">const_iterator <span class="title">lower_bound</span> <span class="params">(<span class="keyword">const</span> key_type&amp; k)</span> <span class="keyword">const</span></span>;</span><br></pre></td></tr></table></figure>

<p>Returns an iterator pointing to the first element in the container whose key is not considered to go before <em>k</em> (i.e., either it is equivalent or goes after).</p>
<p>&lt;=</p>
<h3 id="upper-bound"><a href="#upper-bound" class="headerlink" title="upper_bound"></a>upper_bound</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">     <span class="function">iterator <span class="title">upper_bound</span> <span class="params">(<span class="keyword">const</span> key_type&amp; k)</span></span>;</span><br><span class="line"><span class="function">const_iterator <span class="title">upper_bound</span> <span class="params">(<span class="keyword">const</span> key_type&amp; k)</span> <span class="keyword">const</span></span>;</span><br></pre></td></tr></table></figure>

<p>the function returns an iterator to the first element whose key is greater than <em>k</em>.</p>
<p>&gt;</p>
<h3 id="equal-range"><a href="#equal-range" class="headerlink" title="equal_range"></a>equal_range</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">pair&lt;const_iterator,const_iterator&gt; equal_range (const key_type&amp; k) const;</span><br><span class="line">pair&lt;iterator,iterator&gt;             equal_range (const key_type&amp; k);</span><br></pre></td></tr></table></figure>

<p>Returns the bounds of a range that includes all the elements in the container which have a <em>key</em> equivalent to <em>k</em>.</p>
<p>the range returned will contain a single element at most.</p>
<p>If no matches are found, the range returned has a length of zero, with both iterators pointing to the first element that has a key considered to go after <em>k</em> according to the container’s <a href="https://www.cplusplus.com/map::key_comp">internal comparison object</a> (<a href="https://www.cplusplus.com/map::key_comp">key_comp</a>).</p>
<p>map.equal_range().first =&gt; lower_bound</p>
<p>map.equal_range().second =&gt; upper_bound</p>
<p>not found, both upper_bound</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">map&lt;string, <span class="keyword">int</span>&gt; m &#123;&#125;;</span><br><span class="line">m[<span class="string">&quot;b&quot;</span>] = <span class="number">2</span>;</span><br><span class="line">m[<span class="string">&quot;e&quot;</span>] = <span class="number">3</span>;</span><br><span class="line">m[<span class="string">&quot;w&quot;</span>] = <span class="number">4</span>;</span><br><span class="line">cout&lt;&lt; m.<span class="built_in">equal_range</span>(<span class="string">&quot;e&quot;</span>).first-&gt;first &lt;&lt; m.<span class="built_in">equal_range</span>(<span class="string">&quot;e&quot;</span>).second-&gt;first &lt;&lt;endl;</span><br><span class="line">cout&lt;&lt; m.<span class="built_in">equal_range</span>(<span class="string">&quot;f&quot;</span>).first-&gt;first &lt;&lt; m.<span class="built_in">equal_range</span>(<span class="string">&quot;f&quot;</span>).second-&gt;first &lt;&lt;endl;</span><br><span class="line"><span class="comment">//ew</span></span><br><span class="line"><span class="comment">//ww</span></span><br></pre></td></tr></table></figure>

<h2 id="multimap"><a href="#multimap" class="headerlink" title="multimap"></a>multimap</h2><blockquote>
<p>multiple elements can have equivalent keys.</p>
<p>use equal_range to get all pairs for certain key</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">multi_map&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; map;</span><br><span class="line">map.<span class="built_in">insert</span>(std::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;(<span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line">map.<span class="built_in">erase</span>(key);</span><br><span class="line"><span class="function">iterator <span class="title">find</span><span class="params">( <span class="keyword">const</span> Key&amp; key )</span></span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="unordered-map"><a href="#unordered-map" class="headerlink" title="unordered_map"></a>unordered_map</h2><blockquote>
<p>special:</p>
<p>Internally, the elements in the <code>unordered_map</code> are not sorted in any particular order with respect to either their <em>key</em> or <em>mapped</em> values, but organized into <strong><em>buckets</em> depending on their hash values</strong> to allow for fast access to individual elements directly by their <em>key values</em> (with a constant average time complexity on average).</p>
</blockquote>
<h3 id="bucket"><a href="#bucket" class="headerlink" title="bucket"></a>bucket</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">size_type <span class="title">bucket</span> <span class="params">( <span class="keyword">const</span> key_type&amp; k )</span> <span class="keyword">const</span></span>;</span><br></pre></td></tr></table></figure>

<p>Returns the bucket number where the element with key <em>k</em> is located.</p>
<p>A bucket is a slot in the container’s internal hash table to which elements are assigned based on the hash value of their key. Buckets are numbered from <code>0</code> to <code>(bucket_count-1)</code>.</p>
<p>Individual elements in a bucket can be accessed by means of the range iterators returned by <a href="https://www.cplusplus.com/unordered_map::begin">unordered_map::begin</a> and <a href="https://www.cplusplus.com/unordered_map::end">unordered_map::end</a>.</p>
<h3 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h3><blockquote>
<p>hash container in stl:</p>
<ul>
<li><code>unordered_map</code></li>
<li><code>unordered_set</code></li>
<li><code>unordered_multimap</code></li>
<li><code>unordered_multiset</code></li>
</ul>
</blockquote>
<p><a href="https://stackoverflow.com/questions/17016175/c-unordered-map-using-a-custom-class-type-as-the-key">hash function for customed class</a></p>
<p>To be able to use <code>std::unordered_map</code> (or one of the other unordered associative containers) with a user-defined key-type, you need to define two things:</p>
<ol>
<li>A <strong>hash function</strong>; this must be a class that overrides <code>operator()</code> and calculates the hash value given an object of the key-type. One particularly straight-forward way of doing this is to specialize the <code>std::hash</code> template for your key-type.</li>
<li>A <strong>comparison function for equality</strong>; this is required because the hash cannot rely on the fact that the hash function will always provide a unique hash value for every distinct key (i.e., it needs to be able to deal with collisions), so it needs a way to compare two given keys for an exact match. You can implement this either as a class that overrides <code>operator()</code>, or as a specialization of <code>std::equal</code>, or – easiest of all – by overloading <code>operator==()</code> for your key type (as you did already).</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Key</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  std::string first;</span><br><span class="line">  std::string second;</span><br><span class="line">  <span class="keyword">int</span>         third;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> Key &amp;other) <span class="keyword">const</span></span><br><span class="line">  &#123; <span class="built_in"><span class="keyword">return</span></span> (first == other.first</span><br><span class="line">            &amp;&amp; second == other.second</span><br><span class="line">            &amp;&amp; third == other.third);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> std &#123;</span><br><span class="line">  <span class="keyword">template</span> &lt;&gt;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">hash</span>&lt;</span>Key&gt;</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="function">std::<span class="keyword">size_t</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> Key&amp; k)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">      <span class="keyword">using</span> std::<span class="keyword">size_t</span>;</span><br><span class="line">      <span class="keyword">using</span> std::hash;</span><br><span class="line">      <span class="keyword">using</span> std::string;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Compute individual hash values for first,</span></span><br><span class="line">      <span class="comment">// second and third and combine them using XOR</span></span><br><span class="line">      <span class="comment">// and bit shifting:</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> ((hash&lt;string&gt;()(k.first)</span><br><span class="line">               ^ (hash&lt;string&gt;()(k.second) &lt;&lt; <span class="number">1</span>)) &gt;&gt; <span class="number">1</span>)</span><br><span class="line">               ^ (hash&lt;<span class="keyword">int</span>&gt;()(k.third) &lt;&lt; <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//or just a new function object</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">KeyHasher</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="function">std::<span class="keyword">size_t</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> Key&amp; k)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">using</span> std::<span class="keyword">size_t</span>;</span><br><span class="line">    <span class="keyword">using</span> std::hash;</span><br><span class="line">    <span class="keyword">using</span> std::string;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ((hash&lt;string&gt;()(k.first)</span><br><span class="line">             ^ (hash&lt;string&gt;()(k.second) &lt;&lt; <span class="number">1</span>)) &gt;&gt; <span class="number">1</span>)</span><br><span class="line">             ^ (hash&lt;<span class="keyword">int</span>&gt;()(k.third) &lt;&lt; <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  std::unordered_map&lt;Key,std::string,KeyHasher&gt; m6 = &#123;</span><br><span class="line">    &#123; &#123;<span class="string">&quot;John&quot;</span>, <span class="string">&quot;Doe&quot;</span>, <span class="number">12</span>&#125;, <span class="string">&quot;example&quot;</span>&#125;,</span><br><span class="line">    &#123; &#123;<span class="string">&quot;Mary&quot;</span>, <span class="string">&quot;Sue&quot;</span>, <span class="number">21</span>&#125;, <span class="string">&quot;another&quot;</span>&#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="load-factor"><a href="#load-factor" class="headerlink" title="load_factor"></a>load_factor</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">load_factor</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">noexcept</span></span>;</span><br></pre></td></tr></table></figure>

<p>The load factor is the ratio between the number of elements in the container (its <a href="https://www.cplusplus.com/unordered_map::size">size</a>) and the number of buckets (<a href="https://www.cplusplus.com/unordered_map::bucket_count">bucket_count</a>)</p>
<p>load_factor = <a href="https://www.cplusplus.com/unordered_map::size">size</a> / <a href="https://www.cplusplus.com/unordered_map::bucket_count">bucket_count</a></p>
<blockquote>
<p><a href="https://stackoverflow.com/questions/14851249/whats-the-difference-between-the-rehash-and-reserve-methods-of-the-c-unor">see more for difference between rehash and reserve</a></p>
<p>The difference is in <em>purpose</em>, although both are doing something similar.</p>
<ul>
<li><code>rehash</code> takes an existing map and rebuilds a <em>new</em> size of buckets, rehashing in the process and redistributing elements into the new buckets.</li>
<li><code>reserve</code> guarantees you that if you don’t insert more than the reserved number of elements, there will be no rehashing (i.e. your iterators will remain valid).</li>
</ul>
<p>Those are two somewhat different things, albeit related. <code>rehash</code> doesn’t give you any guarantees, and <code>reserve</code> doesn’t express the purpose of rehashing. Use <code>rehash</code> if you think your map is inefficient, and <code>reserve</code> if you’re preparing for a lot of insertions.</p>
<p>As @Xeo points out, <code>reserve</code> is just a wrapper around <code>rehash</code>, though, taking into account the permissible load factor of the map.</p>
</blockquote>
<h3 id="rehash"><a href="#rehash" class="headerlink" title="rehash"></a>rehash</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rehash</span><span class="params">( size_type n )</span></span>;</span><br></pre></td></tr></table></figure>

<p>Sets the number of buckets in the container to <em>n</em> or more.</p>
<p>If <em>n</em> is greater than the current number of buckets in the container (<a href="https://www.cplusplus.com/unordered_map::bucket_count">bucket_count</a>), a rehash is forced. The new <a href="https://www.cplusplus.com/unordered_map::bucket_count">bucket count</a> can either be equal or greater than <em>n</em>.</p>
<p>If <em>n</em> is lower than the current number of buckets in the container (<a href="https://www.cplusplus.com/unordered_map::bucket_count">bucket_count</a>), the function may have no effect on the <a href="https://www.cplusplus.com/unordered_map::bucket_count">bucket count</a> and may not force a rehash.</p>
<p>A rehash is the reconstruction of the hash table: All the elements in the container are rearranged according to their hash value into the new set of buckets. This may alter the order of iteration of elements within the container.</p>
<p>Rehashes are automatically performed by the container whenever its <a href="https://www.cplusplus.com/unordered_map::load_factor">load factor</a> is going to surpass its <a href="https://www.cplusplus.com/unordered_map::max_load_factor">max_load_factor</a> in an operation.</p>
<p>Notice that this function expects the number of buckets as argument. A similar function exists, <a href="https://www.cplusplus.com/unordered_map::reserve">unordered_map::reserve</a>, that expects the number of elements in the container as argument.</p>
<h3 id="reserve"><a href="#reserve" class="headerlink" title="reserve"></a>reserve</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reserve</span> <span class="params">( size_type n )</span></span>;</span><br></pre></td></tr></table></figure>

<p>Sets the number of buckets in the container (<a href="https://www.cplusplus.com/unordered_map::bucket_count">bucket_count</a>) to the most appropriate to contain at least <em>n</em> elements.</p>
<p>If <em>n</em> is greater than the current <a href="https://www.cplusplus.com/unordered_map::bucket_count">bucket_count</a> multiplied by the <a href="https://www.cplusplus.com/unordered_map::max_load_factor">max_load_factor</a>, the container’s <a href="https://www.cplusplus.com/unordered_map::bucket_count">bucket_count</a> is increased and a <a href="https://www.cplusplus.com/unordered_map::rehash">rehash</a> is forced.</p>
<p>If <em>n</em> is lower than that, the function may have no effect.</p>
<h2 id="set"><a href="#set" class="headerlink" title="set"></a>set</h2><blockquote>
<p>special:</p>
<p>unique elements following a specific order.</p>
<p>The value of the elements in a <code>set</code> cannot be modified once in the container (the elements are <strong>always const</strong>), but they can be inserted or removed from the container.</p>
</blockquote>
<table>
<thead>
<tr>
<th align="right">single element (1)</th>
<th><code>pair&lt;iterator,bool&gt; insert (const value_type&amp; val);</code><br /><code>pair&lt;iterator,bool&gt; insert (value_type&amp;&amp; val);</code></th>
</tr>
</thead>
<tbody><tr>
<td align="right">with hint (2)</td>
<td><code>iterator insert (const_iterator position, const value_type&amp; val);</code><br /><code>iterator insert (const_iterator position, value_type&amp;&amp; val);</code></td>
</tr>
<tr>
<td align="right">range (3)</td>
<td><code>template &lt;class InputIterator&gt;  </code><br /><code>void insert (InputIterator first, InputIterator last); </code></td>
</tr>
<tr>
<td align="right">initializer list (4)</td>
<td><code>void insert (initializer_list&lt;value_type&gt; il);</code></td>
</tr>
</tbody></table>
<p>Extends the container by inserting new elements, effectively increasing the container <a href="https://www.cplusplus.com/set::size">size</a> by the number of elements inserted.</p>
<p>Because elements in a <a href="https://www.cplusplus.com/set">set</a> are unique, the insertion operation <strong>checks whether each inserted element is equivalent to an element already in the container,</strong> and if so, the element is not inserted, returning an iterator to this existing element (if the function returns a value).</p>
<p>For a similar container allowing for duplicate elements, see <a href="https://www.cplusplus.com/multiset">multiset</a>.</p>
<p>Internally, <a href="https://www.cplusplus.com/set">set</a> containers keep all their elements sorted following the criterion specified by its <a href="https://www.cplusplus.com/set::key_comp">comparison object</a>. The elements are always inserted in its respective position following this ordering.</p>
<p>The parameters determine how many elements are inserted and to which values they are initialized:</p>
<h2 id="multiset"><a href="#multiset" class="headerlink" title="multiset"></a>multiset</h2><blockquote>
<p>special:</p>
<p>following a specific order, and where multiple elements can have equivalent values.</p>
<p>the elements are always const</p>
</blockquote>
<h2 id="unordered-set"><a href="#unordered-set" class="headerlink" title="unordered_set"></a>unordered_set</h2><h2 id="底层实现"><a href="#底层实现" class="headerlink" title="底层实现"></a>底层实现</h2><h3 id="vector-1"><a href="#vector-1" class="headerlink" title="vector"></a>vector</h3><p>数组, 随机访问, 容量扩充两倍, 增删对象时会进行构造和析构操作</p>
<h3 id="list-1"><a href="#list-1" class="headerlink" title="list"></a>list</h3><p>双向链表, 快速增删</p>
<h3 id="deque-1"><a href="#deque-1" class="headerlink" title="deque"></a>deque</h3><p>中央控制器+多个缓冲区, 快速增删, 随机访问, 不支持在中间增删</p>
<h3 id="stack-queue"><a href="#stack-queue" class="headerlink" title="stack queue"></a>stack queue</h3><p>list 或 deque</p>
<h3 id="set-multiset-map-multimap"><a href="#set-multiset-map-multimap" class="headerlink" title="set, multiset, map, multimap"></a>set, multiset, map, multimap</h3><p>红黑树, sorted, 查找增删O(logn)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Key</span>,</span></span><br><span class="line"><span class="class">    <span class="keyword">class</span> <span class="title">Compare</span> =</span> std::less&lt;Key&gt;,</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Allocator</span> =</span> std::allocator&lt;Key&gt;</span><br><span class="line">&gt; <span class="class"><span class="keyword">class</span> <span class="title">set</span>;</span></span><br></pre></td></tr></table></figure>

<h3 id="unordered-set-unordered-map-and-multi"><a href="#unordered-set-unordered-map-and-multi" class="headerlink" title="unordered_set, unordered_map and multi~"></a>unordered_set, unordered_map and multi~</h3><p>hash 访问最慢是 O(n)</p>
<h1 id="algorithm"><a href="#algorithm" class="headerlink" title="algorithm"></a>algorithm</h1><h2 id="find-end"><a href="#find-end" class="headerlink" title="find_end"></a>find_end</h2><p>Searches the range <code>[first1,last1)</code> for the <strong>last occurrence</strong> of the sequence defined by <code>[first2,last2)</code>, and returns an iterator to its first element, or last1 if no occurrences are found.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ForwardIterator1</span>, <span class="keyword">class</span> <span class="title">ForwardIterator2</span>&gt;</span></span><br><span class="line">  <span class="function">ForwardIterator1 <span class="title">find_end</span> <span class="params">(ForwardIterator1 first1, ForwardIterator1 last1,</span></span></span><br><span class="line"><span class="function"><span class="params">                             ForwardIterator2 first2, ForwardIterator2 last2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (first2==last2) <span class="keyword">return</span> last1;  <span class="comment">// specified in C++11</span></span><br><span class="line"></span><br><span class="line">  ForwardIterator1 ret = last1;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (first1!=last1)</span><br><span class="line">  &#123;</span><br><span class="line">    ForwardIterator1 it1 = first1;</span><br><span class="line">    ForwardIterator2 it2 = first2;</span><br><span class="line">    <span class="keyword">while</span> (*it1==*it2) &#123;    <span class="comment">// or: while (pred(*it1,*it2)) for version (2)</span></span><br><span class="line">        ++it1; ++it2;</span><br><span class="line">        <span class="keyword">if</span> (it2==last2) &#123; ret=first1; <span class="keyword">break</span>; &#125;<span class="comment">//reserve last occurrence</span></span><br><span class="line">        <span class="keyword">if</span> (it1==last1) <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    ++first1;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="find-first-of"><a href="#find-first-of" class="headerlink" title="find_first_of"></a>find_first_of</h2><p>Returns an iterator to the first element in the range <code>[first1,last1)</code> that <strong>matches any of the elements in <code>[first2,last2)</code>.</strong> If no such element is found, the function returns last1.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">InputIterator</span>, <span class="keyword">class</span> <span class="title">ForwardIterator</span>&gt;</span></span><br><span class="line">  <span class="function">InputIterator <span class="title">find_first_of</span> <span class="params">( InputIterator first1, InputIterator last1,</span></span></span><br><span class="line"><span class="function"><span class="params">                                ForwardIterator first2, ForwardIterator last2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (first1!=last1) &#123;</span><br><span class="line">    <span class="keyword">for</span> (ForwardIterator it=first2; it!=last2; ++it) &#123;</span><br><span class="line">      <span class="keyword">if</span> (*it==*first1)          <span class="comment">// or: if (pred(*it,*first)) for version (2)</span></span><br><span class="line">        <span class="keyword">return</span> first1;</span><br><span class="line">    &#125;</span><br><span class="line">    ++first1;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> last1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h2><p>Assigns the value returned by successive calls to gen to the elements in the range <code>[first,last)</code>.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">ForwardIterator</span>, <span class="keyword">class</span> <span class="title">Generator</span>&gt;</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">generate</span> <span class="params">( ForwardIterator first, ForwardIterator last, Generator gen )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (first != last) &#123;</span><br><span class="line">    *first = <span class="built_in">gen</span>();</span><br><span class="line">    ++first;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="includes"><a href="#includes" class="headerlink" title="includes"></a>includes</h2><p>Returns true if the <strong>sorted</strong> range <code>[first1,last1)</code> contains all the elements in the <strong>sorted</strong> range <code>[first2,last2)</code>.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">InputIterator1</span>, <span class="keyword">class</span> <span class="title">InputIterator2</span>&gt;</span></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">includes</span> <span class="params">(InputIterator1 first1, InputIterator1 last1,</span></span></span><br><span class="line"><span class="function"><span class="params">                 InputIterator2 first2, InputIterator2 last2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (first2!=last2) &#123;</span><br><span class="line">    <span class="keyword">if</span> ( (first1==last1) || (*first2&lt;*first1) ) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (!(*first1&lt;*first2)) ++first2;<span class="comment">//only when *first1==*first2, first2++</span></span><br><span class="line">    ++first1;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="make-heap"><a href="#make-heap" class="headerlink" title="make_heap"></a>make_heap</h2><table>
<thead>
<tr>
<th align="right">default (1)</th>
<th><code>template &lt;class RandomAccessIterator&gt;  void make_heap (RandomAccessIterator first, RandomAccessIterator last); </code></th>
</tr>
</thead>
<tbody><tr>
<td align="right">custom (2)</td>
<td><code>template &lt;class RandomAccessIterator, class Compare&gt;  void make_heap (RandomAccessIterator first, RandomAccessIterator last, Compare comp );</code></td>
</tr>
</tbody></table>
<p>Rearranges the elements in the range <code>[first,last)</code> in such a way that they form a <em>heap</em>.</p>
<p>A heap is a way to organize the elements of a range that allows for fast retrieval(检索) of the element with the highest value at any moment (with <a href="https://www.cplusplus.com/pop_heap">pop_heap</a>), even repeatedly, while allowing for fast insertion of new elements (with <a href="https://www.cplusplus.com/push_heap">push_heap</a>).</p>
<p><strong>The element with the highest value is always pointed by first.</strong> The order of the other elements depends on the particular implementation, but it is consistent throughout all heap-related functions of this header.</p>
<p>The elements are compared using <code>operator&lt;</code> (for the first version), or comp (for the second): The element with the highest value is an element for which this would return <code>false</code> when compared to every other element in the range.</p>
<p>The standard container adaptor <a href="https://www.cplusplus.com/priority_queue">priority_queue</a> calls make_heap, <a href="https://www.cplusplus.com/push_heap">push_heap</a> and <a href="https://www.cplusplus.com/pop_heap">pop_heap</a> automatically to maintain <em>heap properties</em> for a container.</p>
<blockquote>
<p><a href="https://www.jianshu.com/p/6b526aa481b1">see more for heap</a></p>
<p>堆分为两种：<em>最大堆</em>和<em>最小堆</em>，两者的差别在于节点的排序方式。</p>
<p>在最大堆中，父节点的值比每一个子节点的值都要大。在最小堆中，父节点的值比每一个子节点的值都要小。这就是所谓的“堆属性”，并且这个属性对堆中的每一个节点都成立。</p>
<p>如果 <code>i</code> 是节点的索引，那么下面的公式就给出了它的父节点和子节点在数组中的位置：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">parent(i) = floor((i - <span class="number">1</span>)/<span class="number">2</span>)</span><br><span class="line">left(i)   = <span class="number">2i</span> + <span class="number">1</span></span><br><span class="line">right(i)  = <span class="number">2i</span> + <span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>insert, 插入到数组最后, shift_up</p>
<p>remove, 数组最后替代删除节点, shift_down</p>
</blockquote>
<h3 id="is-partitioned"><a href="#is-partitioned" class="headerlink" title="is_partitioned"></a>is_partitioned</h3><p>Returns <code>true</code> if all the elements in the range <code>[first,last)</code> for which pred returns <code>true</code> precede those for which it returns <code>false</code>.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">InputIterator</span>, <span class="keyword">class</span> <span class="title">UnaryPredicate</span>&gt;</span></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">is_partitioned</span> <span class="params">(InputIterator first, InputIterator last, UnaryPredicate pred)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (first!=last &amp;&amp; <span class="built_in">pred</span>(*first)) &#123;</span><br><span class="line">    ++first;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (first!=last) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">pred</span>(*first)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    ++first;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//if first==last, return true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="is-permutation"><a href="#is-permutation" class="headerlink" title="is_permutation"></a>is_permutation</h3><p>Compares the elements in the range <code>[first1,last1)</code> with those in the range beginning at first2, and returns <code>true</code> if all of the elements in both ranges match, even in a different order.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">InputIterator1</span>, <span class="keyword">class</span> <span class="title">InputIterator2</span>&gt;</span></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">is_permutation</span> <span class="params">(InputIterator1 first1, InputIterator1 last1,</span></span></span><br><span class="line"><span class="function"><span class="params">                       InputIterator2 first2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  std::<span class="built_in">tie</span> (first1,first2) = std::<span class="built_in">mismatch</span> (first1,last1,first2);</span><br><span class="line">  <span class="keyword">if</span> (first1==last1) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  InputIterator2 last2 = first2; std::<span class="built_in">advance</span> (last2,std::<span class="built_in">distance</span>(first1,last1));</span><br><span class="line">  <span class="keyword">for</span> (InputIterator1 it1=first1; it1!=last1; ++it1) &#123;</span><br><span class="line">    <span class="keyword">if</span> (std::<span class="built_in">find</span>(first1,it1,*it1)==it1) &#123;</span><br><span class="line">      <span class="keyword">auto</span> n = std::<span class="built_in">count</span> (first2,last2,*it1);</span><br><span class="line">      <span class="keyword">if</span> (n==<span class="number">0</span> || std::<span class="built_in">count</span> (it1,last1,*it1)!=n) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="max-element"><a href="#max-element" class="headerlink" title="max_element"></a>max_element</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">ForwardIterator</span>&gt;</span></span><br><span class="line">  <span class="function">ForwardIterator <span class="title">max_element</span> <span class="params">( ForwardIterator first, ForwardIterator last )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (first==last) <span class="keyword">return</span> last;</span><br><span class="line">  ForwardIterator largest = first;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (++first!=last)</span><br><span class="line">    <span class="keyword">if</span> (*largest&lt;*first)    <span class="comment">// or: if (comp(*largest,*first)) for version (2)</span></span><br><span class="line">      largest=first;</span><br><span class="line">  <span class="keyword">return</span> largest;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="swap-1"><a href="#swap-1" class="headerlink" title="swap"></a>swap</h3><table>
<thead>
<tr>
<th align="right">non-array (1)</th>
<th><code>template &lt;class T&gt; void swap (T&amp; a, T&amp; b)  noexcept (is_nothrow_move_constructible&lt;T&gt;::value &amp;&amp; is_nothrow_move_assignable&lt;T&gt;::value); </code></th>
</tr>
</thead>
<tbody><tr>
<td align="right">array (2)</td>
<td><code>template &lt;class T, size_t N&gt; void swap(T (&amp;a)[N], T (&amp;b)[N])  noexcept (noexcept(swap(*a,*b)));</code></td>
</tr>
</tbody></table>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> <span class="function"><span class="keyword">void</span> <span class="title">swap</span> <span class="params">(T&amp; a, T&amp; b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="function">T <span class="title">c</span><span class="params">(std::move(a))</span></span>; a=std::<span class="built_in">move</span>(b); b=std::<span class="built_in">move</span>(c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">size_t</span> <span class="title">N</span>&gt;</span> <span class="function"><span class="keyword">void</span> <span class="title">swap</span> <span class="params">(T &amp;a[N], T &amp;b[N])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i&lt;N; ++i) <span class="built_in">swap</span> (a[i],b[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="thread"><a href="#thread" class="headerlink" title="thread"></a>thread</h1><p>An initialized <a href="https://www.cplusplus.com/thread">thread</a> object represents an active thread of execution; Such a <a href="https://www.cplusplus.com/thread">thread</a> object is <em><a href="https://www.cplusplus.com/thread::joinable">joinable</a></em>, and has a unique <em><a href="https://www.cplusplus.com/thread::get_id">thread id</a></em>.</p>
<p>A default-constructed (non-initialized) <a href="https://www.cplusplus.com/thread">thread</a> object is <em>not <a href="https://www.cplusplus.com/thread::joinable">joinable</a></em>, and its <em><a href="https://www.cplusplus.com/thread::get_id">thread id</a></em> is common for all <em>non-<a href="https://www.cplusplus.com/thread::joinable">joinable</a></em> threads.</p>
<p>A <em><a href="https://www.cplusplus.com/thread::joinable">joinable</a></em> thread becomes <em>not <a href="https://www.cplusplus.com/thread::joinable">joinable</a></em> if <em><a href="https://www.cplusplus.com/thread::operator=">moved from</a></em>, or if either <a href="https://www.cplusplus.com/thread::join">join</a> or <a href="https://www.cplusplus.com/thread::detach">detach</a> are called on them.</p>
<h2 id="consturctor"><a href="#consturctor" class="headerlink" title="consturctor"></a>consturctor</h2><table>
<thead>
<tr>
<th align="right">default (1)</th>
<th><code>thread() noexcept; </code></th>
</tr>
</thead>
<tbody><tr>
<td align="right">initialization (2)</td>
<td><code>template &lt;class Fn, class... Args&gt; explicit thread (Fn&amp;&amp; fn, Args&amp;&amp;... args); </code></td>
</tr>
<tr>
<td align="right">copy [deleted] (3)</td>
<td><code>thread (const thread&amp;) = delete; </code></td>
</tr>
<tr>
<td align="right">move (4)</td>
<td><code>thread (thread&amp;&amp; x) noexcept;</code></td>
</tr>
</tbody></table>
<p>(2) initialization constructor</p>
<p>Construct a <a href="https://www.cplusplus.com/thread">thread</a> object that represents a new <em><a href="https://www.cplusplus.com/thread::joinable">joinable</a></em> thread of execution.<br>The new thread of execution calls fn passing args as arguments (using <em><a href="https://www.cplusplus.com/decay">decay copies</a></em> of its lvalue or rvalue references).<br>The completion of this construction synchronizes with the beginning of the invocation of this copy of fn.</p>
<p>(3) copy constructor</p>
<p>Deleted constructor form (<a href="https://www.cplusplus.com/thread">thread</a> objects <strong>cannot be copied</strong>).</p>
<p>(4) move constructor</p>
<p>Construct a <a href="https://www.cplusplus.com/thread">thread</a> object that acquires the thread of execution represented by x (if any). This operation does not affect the execution of the moved thread in any way, it simply transfers its handler.<br>The x object no longer represents any thread of execution.</p>
<h2 id="get-id"><a href="#get-id" class="headerlink" title="get_id"></a>get_id</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id get_id() const noexcept;</span><br></pre></td></tr></table></figure>

<p>If the <a href="https://www.cplusplus.com/thread">thread</a> object is <em><a href="https://www.cplusplus.com/thread::joinable">joinable</a></em>, the function returns a value that uniquely identifies the thread.</p>
<p>If the <a href="https://www.cplusplus.com/thread">thread</a> object is <em>not <a href="https://www.cplusplus.com/thread::joinable">joinable</a></em>, the function returns a <em><strong>default-constructed</strong></em> object of member type <a href="https://www.cplusplus.com/thread::id">thread::id</a>.</p>
<h2 id="join"><a href="#join" class="headerlink" title="join"></a>join</h2><h3 id="what’s-join"><a href="#what’s-join" class="headerlink" title="what’s join"></a>what’s join</h3><p>A <a href="https://www.cplusplus.com/thread">thread</a> object is joinable if it represents a thread of execution.</p>
<p>A <a href="https://www.cplusplus.com/thread">thread</a> object is not joinable in any of these cases:</p>
<ul>
<li>if it was <em><a href="https://www.cplusplus.com/thread::thread">default-constructed</a></em>.</li>
<li>if it has been moved from (either <em><a href="https://www.cplusplus.com/thread::thread">constructing</a></em> another <a href="https://www.cplusplus.com/thread">thread</a> object, or <em><a href="https://www.cplusplus.com/thread::operator=">assigning to it</a></em>).</li>
<li>if either of its members <a href="https://www.cplusplus.com/thread::join">join</a> or <a href="https://www.cplusplus.com/thread::detach">detach</a> has been called.</li>
</ul>
<h3 id="Join-thread"><a href="#Join-thread" class="headerlink" title="Join thread"></a>Join thread</h3><p>当thread::join()函数被调用后，调用它的线程会被block，直到线程的执行被完成。当thread::join()返回时，OS的执行的线程已经完成，C++线程对象可以被销毁。</p>
<p><strong>The function returns when the thread execution has completed.</strong></p>
<p>This synchronizes the moment this function returns with the completion of all the operations in the thread: This blocks the execution of the thread that calls this function until the function called on construction returns (if it hasn’t yet).</p>
<p>After a call to this function, the <a href="https://www.cplusplus.com/thread">thread</a> object becomes non-<em><a href="https://www.cplusplus.com/thread::joinable">joinable</a></em> and can be <em><a href="https://www.cplusplus.com/thread::~thread">destroyed</a></em> safely.</p>
<h2 id="detach"><a href="#detach" class="headerlink" title="detach"></a>detach</h2><p>Detaches the thread represented by the object from the calling thread, allowing them to execute independently from each other.</p>
<p>Both threads continue without blocking nor synchronizing in any way. Note that when either one ends execution, its resources are released.</p>
<p>After a call to this function, the <a href="https://www.cplusplus.com/thread">thread</a> object becomes <em>non-<a href="https://www.cplusplus.com/thread::joinable">joinable</a></em> and can be <em><a href="https://www.cplusplus.com/thread::~thread">destroyed</a></em> safely.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span>       <span class="comment">// std::cout</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span>         <span class="comment">// std::thread, std::this_thread::sleep_for</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span>         <span class="comment">// std::chrono::seconds</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pause_thread</span><span class="params">(<span class="keyword">int</span> n)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  std::this_thread::<span class="built_in">sleep_for</span> (std::chrono::<span class="built_in">seconds</span>(n));</span><br><span class="line">  std::cout &lt;&lt; <span class="string">&quot;pause of &quot;</span> &lt;&lt; n &lt;&lt; <span class="string">&quot; seconds ended\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  std::cout &lt;&lt; <span class="string">&quot;Spawning and detaching 3 threads...\n&quot;</span>;</span><br><span class="line">  std::<span class="built_in">thread</span> (pause_thread,<span class="number">1</span>).<span class="built_in">detach</span>();</span><br><span class="line">  std::<span class="built_in">thread</span> (pause_thread,<span class="number">2</span>).<span class="built_in">detach</span>();</span><br><span class="line">  std::<span class="built_in">thread</span> (pause_thread,<span class="number">3</span>).<span class="built_in">detach</span>();</span><br><span class="line">  std::cout &lt;&lt; <span class="string">&quot;Done spawning threads.\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">  std::cout &lt;&lt; <span class="string">&quot;(the main thread will now pause for 5 seconds)\n&quot;</span>;</span><br><span class="line">  <span class="comment">// give the detached threads time to finish (but not guaranteed!):</span></span><br><span class="line">  <span class="built_in">pause_thread</span>(<span class="number">5</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Spawning and detaching 3 threads...</span></span><br><span class="line"><span class="comment">Done spawning threads.</span></span><br><span class="line"><span class="comment">(the main thread will now pause for 5 seconds)</span></span><br><span class="line"><span class="comment">pause of 1 seconds ended</span></span><br><span class="line"><span class="comment">pause of 2 seconds ended</span></span><br><span class="line"><span class="comment">pause of 3 seconds ended</span></span><br><span class="line"><span class="comment">pause of 5 seconds ended</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

























]]></content>
      <categories>
        <category>language</category>
      </categories>
      <tags>
        <tag>cpp</tag>
        <tag>stl</tag>
      </tags>
  </entry>
  <entry>
    <title>python xjb学</title>
    <url>/2019/11/10/xjb%E5%AD%A6python/</url>
    <content><![CDATA[<h2 id="正则表达式（re）"><a href="#正则表达式（re）" class="headerlink" title="正则表达式（re）"></a>正则表达式（re）</h2><p><a href="https://docs.python.org/zh-cn/3/library/re.html">官方文档</a></p>
<ul>
<li>r”string”的内容不会转义</li>
<li></li>
</ul>
<p>re.match 返回匹配对象Match</p>
<p>​    Match.group()可以找匹配对应的内容（在Pattern里加好括号）</p>
<p>​    或者直接以数组形式访问</p>
<p>匹配中文字符的正则表达式： [\u4e00-\u9fa5]</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">idPattern = re.<span class="built_in">compile</span>(</span><br><span class="line">        <span class="string">&quot;员工姓名：([\u4e00-\u9fa5]&#123;2,4&#125;)\s*日期：(\d&#123;1,2&#125;)月(\d&#123;1,2&#125;)日\s*办公地点：([\u4e00-\u9fa5]&#123;2,10&#125;)\s*当日健康状况：([\u4e00-\u9fa5]&#123;2,10&#125;)\s*&quot;</span>)</span><br><span class="line">    idResult = re.match(idPattern, <span class="built_in">id</span>)</span><br><span class="line">    dic[<span class="string">&quot;name&quot;</span>] = idResult.group(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h2><p>os.remove(filepath)</p>
<h2 id="range"><a href="#range" class="headerlink" title="range"></a>range</h2><p>range(3)</p>
<p>0,1,2</p>
<h2 id="numpy"><a href="#numpy" class="headerlink" title="numpy"></a>numpy</h2><ul>
<li><p>ndarray类</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">numpy.array(object, dtype &#x3D; None, copy &#x3D; True, order &#x3D; None, subok &#x3D; False, ndmin &#x3D; 0)</span><br></pre></td></tr></table></figure>

<p>ndarray属性</p>
<table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">ndarray.ndim</td>
<td align="left">秩，即轴的数量或维度的数量</td>
</tr>
<tr>
<td align="left">ndarray.shape</td>
<td align="left">数组的维度，对于矩阵，n 行 m 列</td>
</tr>
<tr>
<td align="left">ndarray.size</td>
<td align="left">数组元素的总个数，相当于 .shape 中 n*m 的值</td>
</tr>
<tr>
<td align="left">ndarray.dtype</td>
<td align="left">ndarray 对象的元素类型</td>
</tr>
<tr>
<td align="left">ndarray.itemsize</td>
<td align="left">ndarray 对象中每个元素的大小，以字节为单位</td>
</tr>
<tr>
<td align="left">ndarray.flags</td>
<td align="left">ndarray 对象的内存信息</td>
</tr>
<tr>
<td align="left">nd,array.real</td>
<td align="left">ndarray元素的实部</td>
</tr>
<tr>
<td align="left">ndarray.imag</td>
<td align="left">ndarray 元素的虚部</td>
</tr>
<tr>
<td align="left">ndarray.data</td>
<td align="left">包含实际数组元素的缓冲区，由于一般通过数组的索引获取元素，所以通常不需要使用这个属性。</td>
</tr>
</tbody></table>
</li>
<li><p>dtype类</p>
</li>
<li><p>创建数组：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">numpy.empty(shape, dtype = <span class="built_in">float</span>, order = <span class="string">&#x27;C&#x27;</span>)</span><br><span class="line">numpy.zeros(shape, dtype = <span class="built_in">float</span>, order = <span class="string">&#x27;C&#x27;</span>)</span><br><span class="line">numpy.ones(shape, dtype = <span class="literal">None</span>, order = <span class="string">&#x27;C&#x27;</span>)</span><br><span class="line">numpy.asarray(a, dtype = <span class="literal">None</span>, order = <span class="literal">None</span>) <span class="comment"># a为输入数组，如列表，元组等</span></span><br><span class="line">numpy.arange(start, stop, step, dtype)</span><br></pre></td></tr></table></figure></li>
<li><p>数组运算（broadcast）</p>
<p><strong>广播的规则:</strong></p>
<ul>
<li>让所有输入数组都向其中形状最长的数组看齐，形状中不足的部分都通过在前面加 1 补齐。</li>
<li>输出数组的形状是输入数组形状的各个维度上的最大值。</li>
<li>如果输入数组的某个维度和输出数组的对应维度的长度相同或者其长度为 1 时，这个数组能够用来计算，否则出错。</li>
<li>当输入数组的某个维度的长度为 1 时，沿着此维度运算时都用此维度上的第一组值。</li>
</ul>
<p><strong>简单理解：</strong>对两个数组，分别比较他们的每一个维度（若其中一个数组没有当前维度则忽略），满足：</p>
<ul>
<li>数组拥有相同形状。</li>
<li>当前维度的值相等。</li>
<li>当前维度的值有一个是 1。</li>
</ul>
<p>若条件不满足，抛出 <strong>“ValueError: frames are not aligned”</strong> 异常。</p>
<p>.T数组转置</p>
<p>最大最小</p>
<p>numpy.amin(array, axis) 用于计算数组中的元素沿指定轴的最小值。</p>
<p>numpy.amax() 用于计算数组中的元素沿指定轴的最大值。</p>
<p>极差np.ptp(a, axis =  0</p>
<p>算数平均值numpy.mean()</p>
<p>加权平均值numpy.average()</p>
<p>标准差</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">std &#x3D; sqrt(mean((x - x.mean())**2))</span><br></pre></td></tr></table></figure>

<p>np.std([1,2,3,4])</p>
<p>方差numpy.var()</p>
</li>
<li><p>部分函数</p>
<ul>
<li><p>numpy.sum</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.array([[<span class="number">1</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">2</span>],</span><br><span class="line">              [<span class="number">9</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">8</span>],</span><br><span class="line">              [<span class="number">3</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">1</span>]])</span><br><span class="line"><span class="built_in">print</span>(np.<span class="built_in">sum</span>(a, axis=<span class="number">0</span>))</span><br><span class="line"><span class="comment"># 为了描述方便,a就表示这个二维数组,np.sum(a, axis=0)的含义是a[0][j],a[1][j],a[2]j对应项相加的结果.即[1,5,5,2]+[9,6,2,8]+[3,7,9,1]=[13,18,16,11].</span></span><br></pre></td></tr></table></figure></li>
<li><p>numpy.tile</p>
<p>说白了，就是把数组沿各个方向复制</p>
<p>比如 a = np.array([0,1,2]),    np.tile(a,(2,1))就是把a先沿x轴（就这样称呼吧）复制1倍，即没有复制，仍然是 [0,1,2]。 再把结果沿y方向复制2倍，即最终得到</p>
<p> array([[0,1,2],</p>
<p>​            [0,1,2]])</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = np.array([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.tile(b, <span class="number">2</span>) <span class="comment">#沿X轴复制2倍</span></span><br><span class="line">array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">       [<span class="number">3</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">4</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.tile(b, (<span class="number">2</span>, <span class="number">1</span>))<span class="comment">#沿X轴复制1倍（相当于没有复制），再沿Y轴复制2倍</span></span><br><span class="line">array([[<span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">       [<span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">       [<span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">       [<span class="number">3</span>, <span class="number">4</span>]])</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="函数自动添加注释"><a href="#函数自动添加注释" class="headerlink" title="函数自动添加注释"></a>函数自动添加注释</h2><p>输入```后再输入回车</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">AddLoglevel</span>(<span class="params">table, pre_number</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    填写db_type</span></span><br><span class="line"><span class="string">    :param table: 单个表格对象</span></span><br><span class="line"><span class="string">    :param pre_number: 上一行的序号</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>##关键词？</p>
<p><strong>编码     # -*- coding: UTF-8 -*-</strong> 或者 <strong># coding=utf-8</strong> </p>
<p><strong>括号</strong>    ()元组 []列表 {}字典</p>
<p><em><strong>global</strong></em>    python如果想使用作用域之外的全局变量，则需要加global前缀。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">5</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>():</span></span><br><span class="line">    <span class="keyword">global</span> a</span><br><span class="line"> <span class="comment">#此处声明，告诉执行引擎：我要用全局变量a，不要整成局部的了！</span></span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;In test func: a = %d&#x27;</span> % a</span><br><span class="line"> </span><br><span class="line">test()</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;Global a = %d&#x27;</span> % a</span><br><span class="line"></span><br><span class="line">In test func: a = <span class="number">1</span></span><br><span class="line">Global a = <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p><strong>pycache文件</strong>    是产生的二进制文件，如果存在，下次执行代码就可不用编译节省时间</p>
<p><strong>extend &amp; append</strong>    extend将参数list里的每一个元素加到列表中，append将整个对象加入列表中</p>
<p><strong>切片</strong>    L[0:3] 取列表L的前三个元素</p>
<p><strong>list slice</strong>    </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">str_object[start_pos:end_pos:step]</span><br></pre></td></tr></table></figure>

<p>切片以start_pos索引（包括）开始（0），以end_pos索引（排除）结束（长度）。step参数用于指定从开始到结束索引要执行的步骤。</p>
<p>Python字符串切片始终遵循以下规则：<strong>s [：i] + s [i：] == s</strong>用于任何索引’i’。</p>
<p><strong>foo&amp;bar&amp;baz</strong>    意思就是张三李四王二麻子    </p>
<h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><ul>
<li><p>访问字典就像访问数组一样 dic[key]</p>
</li>
<li><p>判断字典里是否有key的方法</p>
<ul>
<li>d.has_key(‘name’)</li>
<li>‘name’ in d.keys()</li>
</ul>
</li>
</ul>
<p>##类class</p>
<p>类的方法第一个参数必须是self，self代表当前类的实例，self.__class__指向类</p>
<p>##python目录</p>
<p>###模块module</p>
<p>import module</p>
<p>module.func()</p>
<p>from module import *</p>
<p>func()</p>
<p><strong>命名空间</strong>    dir()函数显示命名空间里所有的变量名字</p>
<p>###包package</p>
<p>文件夹 包含__init__.py</p>
<h2 id="lambda函数"><a href="#lambda函数" class="headerlink" title="lambda函数"></a>lambda函数</h2><p>Python中，lambda函数也叫匿名函数，及即没有具体名称的函数，它允许快速定义单行函数，类似于C语言的宏，可以用在任何需要函数的地方。这区别于def定义的函数。<br>lambda与def的区别：<br>1）def创建的方法是有名称的，而lambda没有。<br>2）lambda会返回一个函数对象，但这个对象不会赋给一个标识符，而def则会把函数对象赋值给一个变量（函数名）。<br>3）lambda只是一个表达式，而def则是一个语句。<br>4）lambda表达式” : “后面，只能有一个表达式，def则可以有多个。<br>5）像if或for或print等语句不能用于lambda中，def可以。<br>6）lambda一般用来定义简单的函数，而def可以定义复杂的函数。<br>6）lambda函数不能共享给别的程序调用，def可以。<br>lambda语法格式：<br>lambda 变量 : 要执行的语句</p>
<h2 id="函数传参（可变不可变参数）"><a href="#函数传参（可变不可变参数）" class="headerlink" title="函数传参（可变不可变参数）"></a>函数传参（可变不可变参数）</h2><p>在 python 中，strings, tuples, 和 numbers 是不可更改的对象，而 list,dict 等则是可以修改的对象。</p>
<ul>
<li><strong>不可变类型：</strong>变量赋值 <strong>a=5</strong> 后再赋值 <strong>a=10</strong>，这里实际是新生成一个 int 值对象 10，再让 a 指向它，而 5 被丢弃，不是改变a的值，相当于新生成了a。</li>
<li><strong>可变类型：</strong>变量赋值 <strong>la=[1,2,3,4]</strong> 后再赋值 <strong>la[2]=5</strong> 则是将 list la 的第三个元素值更改，本身la没有动，只是其内部的一部分值被修改了。</li>
</ul>
<p>python 函数的参数传递：</p>
<ul>
<li><strong>不可变类型：</strong>类似 c++ 的值传递，如 整数、字符串、元组。如fun（a），传递的只是a的值，没有影响a对象本身。比如在 fun（a）内部修改 a 的值，只是修改另一个复制的对象，不会影响 a 本身。</li>
<li><strong>可变类型：</strong>类似 c++ 的引用传递，如 列表，字典。如 fun（la），则是将 la 真正的传过去，修改后fun外部的la也会受影响</li>
</ul>
<h2 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h2><ol>
<li>str float bytes 转 int<br>int()</li>
<li>str int bytes 转 float<br>float()</li>
<li>str float bytes 转 complex<br>complex()</li>
<li>str()可转换任意类型</li>
<li>str 转 bytes<br>bytes()</li>
<li>list() tuple()</li>
</ol>
<h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><ol>
<li>while，for循环可以用else</li>
<li>for i in sequence</li>
<li>多变量循环    for title, mark in zip(titles, marks):<h2 id="GUI"><a href="#GUI" class="headerlink" title="GUI"></a>GUI</h2></li>
</ol>
<h3 id="tkinter包"><a href="#tkinter包" class="headerlink" title="tkinter包"></a>tkinter包</h3><p>说明：py自带包，跨平台，简单<br>直接看文档就行<br>布局：grid pack place<br>master 父组件，frame一般认为master=None<br>StringVar</p>
<h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><h3 id="threading包"><a href="#threading包" class="headerlink" title="threading包"></a>threading包</h3><p>先创建，再start，join主线程，分线程结束后主线程才结束<br><strong>线程安全</strong>    </p>
<h2 id="format函数"><a href="#format函数" class="headerlink" title="format函数"></a>format函数</h2><h2 id="date"><a href="#date" class="headerlink" title="date"></a>date</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式化成2016-03-20 11:45:39形式</span></span><br><span class="line"><span class="built_in">print</span> (time.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, time.localtime()))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式化成Sat Mar 28 22:24:24 2016形式</span></span><br><span class="line"><span class="built_in">print</span> (time.strftime(<span class="string">&quot;%a %b %d %H:%M:%S %Y&quot;</span>, time.localtime()))</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 将格式字符串转换为时间戳</span></span><br><span class="line">a = <span class="string">&quot;Sat Mar 28 22:24:24 2016&quot;</span></span><br><span class="line"><span class="built_in">print</span> (time.mktime(time.strptime(a,<span class="string">&quot;%a %b %d %H:%M:%S %Y&quot;</span>)))</span><br></pre></td></tr></table></figure>



<h2 id="string转time"><a href="#string转time" class="headerlink" title="string转time"></a>string转time</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_ymd</span>(<span class="params">s</span>):</span></span><br><span class="line">    year_s, mon_s, day_s = s.split(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> datetime(<span class="built_in">int</span>(year_s), <span class="built_in">int</span>(mon_s), <span class="built_in">int</span>(day_s))</span><br></pre></td></tr></table></figure>

<h2 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h2><ol>
<li><p>_var    单个下划线是一个Python命名约定，表示这个名称是供内部使用的。 它通常不由Python解释器强制执行，仅仅作为一种对程序员的提示。</p>
</li>
<li><p>Var_    有时候，一个变量的最合适的名称已经被一个关键字所占用。 因此，像class或def这样的名称不能用作Python中的变量名称。 在这种情况下，你可以附加一个下划线来解决命名冲突</p>
</li>
<li><p>__var    双下划线前缀会导致Python解释器重写属性名称，以避免子类中的命名冲突。这也叫做名称修饰（name mangling） - 解释器更改变量的名称，以便在类被扩展的时候不容易产生冲突。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>:</span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">       self.foo = <span class="number">11</span></span><br><span class="line">       self._bar = <span class="number">23</span></span><br><span class="line">       self.__baz = <span class="number">23</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = Test()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">dir</span>(t)<span class="comment">#内置函数</span></span><br><span class="line">[<span class="string">&#x27;_Test__baz&#x27;</span>, <span class="string">&#x27;__class__&#x27;</span>, <span class="string">&#x27;__delattr__&#x27;</span>, <span class="string">&#x27;__dict__&#x27;</span>, <span class="string">&#x27;__dir__&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;__doc__&#x27;</span>, <span class="string">&#x27;__eq__&#x27;</span>, <span class="string">&#x27;__format__&#x27;</span>, <span class="string">&#x27;__ge__&#x27;</span>, <span class="string">&#x27;__getattribute__&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;__gt__&#x27;</span>, <span class="string">&#x27;__hash__&#x27;</span>, <span class="string">&#x27;__init__&#x27;</span>, <span class="string">&#x27;__le__&#x27;</span>, <span class="string">&#x27;__lt__&#x27;</span>, <span class="string">&#x27;__module__&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;__ne__&#x27;</span>, <span class="string">&#x27;__new__&#x27;</span>, <span class="string">&#x27;__reduce__&#x27;</span>, <span class="string">&#x27;__reduce_ex__&#x27;</span>, <span class="string">&#x27;__repr__&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;__setattr__&#x27;</span>, <span class="string">&#x27;__sizeof__&#x27;</span>, <span class="string">&#x27;__str__&#x27;</span>, <span class="string">&#x27;__subclasshook__&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;__weakref__&#x27;</span>, <span class="string">&#x27;_bar&#x27;</span>, <span class="string">&#x27;foo&#x27;</span>]</span><br></pre></td></tr></table></figure></li>
<li><p>__var__    Python保留了有双前导和双末尾下划线的名称，用于特殊用途。 这样的例子有，__init__对象构造函数，或__call__ — 它使得一个对象可以被调用。而且不会有名称修饰</p>
</li>
<li><p>_    单下划线表示一个临时变量。除了用作临时变量之外，“_”是大多数Python REPL中的一个特殊变量，它表示由解释器评估的最近一个表达式的结果。</p>
</li>
</ol>
<h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><p>@符号的意义</p>
<p>就是将一个函数包装起来，而且能保持代码结构不变</p>
<p><a href="https://foofish.net/python-decorator.html">参考网站：装饰器</a></p>
<h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><p>迭代器是一个可以记住遍历的位置的对象。</p>
<p>迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。迭代器只能往前不会后退。</p>
<p>迭代器有两个基本的方法：**iter()**（用于通过列表创建迭代器） 和 **next()**。</p>
<p>字符串，列表或元组对象都可用于创建迭代器：</p>
<h2 id="with"><a href="#with" class="headerlink" title="with"></a>with</h2><p>with 语句适用于对资源进行访问的场合，确保不管使用过程中是否发生异常都会执行必要的“清理”操作，释放资源，比如文件使用后自动关闭／线程中锁的自动获取和释放等。</p>
<p>（１）紧跟with后面的语句被求值后，返回对象的“–enter–()”方法被调用，这个方法的返回值将被赋值给as后面的变量；<br>（２）当with后面的代码块全部被执行完之后，将调用前面返回对象的“–exit–()”方法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;１.txt&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    data = file.read()</span><br></pre></td></tr></table></figure>



<h2 id="字符串格式化"><a href="#字符串格式化" class="headerlink" title="字符串格式化"></a>字符串格式化</h2><ul>
<li><p>%[数据名称][对齐标志][宽度].[精度]类型</p>
<p><img src="https://pic4.zhimg.com/80/v2-2a0bf9157e7c09926093f91636d91177_hd.jpg" alt="img"></p>
</li>
<li><p>str.format函数</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">[[填充字符]对齐方式][符号标志][#][宽度][,][.精度][类型]</span><br><span class="line">&#x27;&#123;:S^+#016,.2f&#125;&#x27;.format(1234)  # 输出&#x27;SSS+1,234.00SSSS&#x27;</span><br></pre></td></tr></table></figure>

<p><img src="https://pic1.zhimg.com/v2-0340c7e376d8215515f33c1c05c388f0_r.jpg" alt="preview"></p>
</li>
<li><p>f-string</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;My name is %s and i&#x27;</span>m %s years old.<span class="string">&#x27; % (name, age)</span></span><br><span class="line"><span class="string">&#x27;</span>My name <span class="keyword">is</span> &#123;&#125; <span class="keyword">and</span> i<span class="string">&#x27;m &#123;&#125; years old.&#x27;</span>.<span class="built_in">format</span>(name, age)</span><br><span class="line"><span class="string">f&#x27;My name is <span class="subst">&#123;name&#125;</span> and i&#x27;</span>m &#123;age&#125; years old.<span class="string">&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="虚拟环境"><a href="#虚拟环境" class="headerlink" title="虚拟环境"></a>虚拟环境</h2><h2 id="神奇的库"><a href="#神奇的库" class="headerlink" title="神奇的库"></a>神奇的库</h2><p>tqdm 进度条</p>
<h2 id="generator-amp-yield"><a href="#generator-amp-yield" class="headerlink" title="generator&amp;yield"></a>generator&amp;yield</h2><h3 id="generator参考网站"><a href="#generator参考网站" class="headerlink" title="generator参考网站"></a>generator<a href="https://www.ibm.com/developerworks/cn/opensource/os-cn-python-yield/index.html">参考网站</a></h3><p>如果列表元素可以按照某种算法推算出来，那我们是否可以在循环的过程中不断推算出后续的元素呢？这样就不必创建完整的list，从而节省大量的空间。在Python中，这种一边循环一边计算的机制，称为生成器：generator。</p>
<p>要创建一个generator，有很多种方法。第一种方法很简单，只要把一个列表生成式的<code>[]</code>改成<code>()</code>，就创建了一个generator：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>L = [x * x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>L</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>g = (x * x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>g</span><br><span class="line">&lt;generator <span class="built_in">object</span> &lt;genexpr&gt; at <span class="number">0x1022ef630</span>&gt;</span><br></pre></td></tr></table></figure>

<p>如果要一个一个打印出来，可以通过<code>next()</code>函数获得generator的下一个返回值（每一次generator的值都会更新）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> g:</span><br><span class="line">	<span class="built_in">print</span>(n)</span><br></pre></td></tr></table></figure>

<h3 id="yield"><a href="#yield" class="headerlink" title="yield"></a>yield</h3><p>通常的for…in…循环中，in后面是一个数组，这个数组就是一个可迭代对象，类似的还有链表，字符串，文件。它可以是mylist = [1, 2, 3]，也可以是mylist = [x*x for x in range(3)]。<br> 它的缺陷是所有数据都在内存中，如果有海量数据的话将会非常耗内存。</p>
<p>生成器是可以迭代的，但只可以读取它一次。因为用的时候才生成。比如 mygenerator = (x*x for x in range(3))，注意这里用到了()，它就不是数组，而上面的例子是[]。</p>
<p>我理解的生成器(generator)能够迭代的关键是它有一个next()方法，工作原理就是通过重复调用next()方法，直到捕获一个异常。可以用上面的mygenerator测试。</p>
<p>带有 yield 的函数不再是一个普通函数，而是一个生成器generator，可用于迭代，工作原理同上。</p>
<p>yield 是一个类似 return 的关键字，迭代一次遇到yield时就返回yield后面(右边)的值。重点是：下一次迭代时，从上一次迭代遇到的yield后面的代码(下一行)开始执行。</p>
<p>简要理解：yield就是 return 返回一个值，并且记住这个返回的位置，下次迭代就从这个位置后(下一行)开始。</p>
<p>带有yield的函数不仅仅只用于for循环中，而且可用于某个函数的参数，只要这个函数的参数允许迭代参数。比如array.extend函数，它的原型是array.extend(iterable)。</p>
<p>send(msg)与next()的区别在于send可以传递参数给yield表达式，这时传递的参数会作为yield表达式的值，而yield的参数是返回给调用者的值。——换句话说，就是send可以强行修改上一个yield表达式值。比如函数中有一个yield赋值，a = yield 5，第一次迭代到这里会返回5，a还没有赋值。第二次迭代时，使用.send(10)，那么，就是强行修改yield 5表达式的值为10，本来是5的，那么a=10</p>
<p>send(msg)与next()都有返回值，它们的返回值是当前迭代遇到yield时，yield后面表达式的值，其实就是当前迭代中yield后面的参数。</p>
<p>第一次调用时必须先next()或send(None)，否则会报错，send后之所以为None是因为这时候没有上一个yield(根据第8条)。可以认为，next()等同于send(None)。</p>
<h2 id="anaconda-mac-pycharm"><a href="#anaconda-mac-pycharm" class="headerlink" title="anaconda+mac+pycharm"></a>anaconda+mac+pycharm</h2><ol>
<li><p>下载安装 anaconda</p>
</li>
<li><p>下载安装 pycharm</p>
</li>
<li><p>anaconda 安装环境, 可以在创建的环境里用 terminal+pip安装难装的库</p>
</li>
<li><p>在pycharm 项目的 interpreter 里选择 anaconda 装好的环境</p>
<p>可以再命令行里用<code>conda env list</code>命令来找到环境目录, 选择 bin 里的 python 就能使用环境啦!</p>
</li>
<li><p>在安装 tensorflow 的时候用了清华的镜像速度快</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line">conda config --set show_channel_urls yes</span><br><span class="line">conda create -n tensorflow python=3.7</span><br><span class="line"><span class="meta">#</span><span class="bash">使用建好的名为 tensorflow 的环境</span></span><br><span class="line">pip install --upgrade --ignore-installed tensorflow</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>language</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>启亦临时工</title>
    <url>/2021/04/13/%E5%90%AF%E4%BA%A6%E4%B8%B4%E6%97%B6%E5%B7%A5/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="37889ecdd0348ee0785160e0681f4d429b62bd99de2e94229f922fe4049ed19a">3a5a033e128904461ecff31443a75b85773732e839f348154716694284a812f56ca7cc076af937c1233a8f232446b1443a6f763ccaa2501aa1e853040860e46162c044de7562bb84c66a7eba87c1ab4f0814f0edfa5eabfeef045e585cc13a8ccd296eba5dff27085a0bd05cef672782d118e526738c547d0f25467fab0bcfceae1c0cf49b2efe7f715eb4775ad42f4087513500939e0477a34dea7d4e2e9a409616401ce743d9fe4aa5d880c4f2c4c7e1f9291fb3d576bce187a6294f2b23139e57215020876db4ec5cc83182dd56af7311a0f7962a932687c19c15dce3adebd857fcb1f602a3504bda35ba88a99ae4f6b746c9fb6fba6bba349fad486542e621f2ca4d80ea095bec6e9ea63cd2acbc38860bf8d9f6f82a934c0be843e1bfba024be058baaa2bea332313efbdcb16f10a2a6690d969e732711a477f1e62093cfd5a4e2f0dfdd250dc2de324d2695b0630c479d901991e3e1572bc40bf4a04a27579ffaa4506feb8aeb7d3b57898918333fe4ab774edcb7856f8b16ca309283b26a9a0dd4e07f911a79e683b5a09d3e3b99cb57eff00bce82e15d116c00162a5e0be711a56e6c684e5d703eb2446b2d6dc75e10d4c7499585f52ed468de84d74aa8025492d6a7695d79530533c5ea6fe8ada623fefb3846a14c9e1abc0a7b66444a68d95bc56585cba09ff6c015f517c832db7f0eb57cb85c136405925830129d9d4b8f1c6cdd9d21b8bc62ece547cdd9fe46f8276ffac9e4d25444cdf8e59fc0675a38a7acffc77aec96a7ef8cf4a12c3b76215bb980102d998302bdf1a372a895a69a901cb6836d9b6ae9d957584c5c3213479b37162dcd33544de859a2cb3bb9163d370724405bbc082998d08eda9657d4c239270dbfd0d7a5ec30f354aba77cb1265fc36d04db2aff4e466cbb491782b7a64a02d13c87a62f58d777b0a30474c3e1049f569c656456a68d402f3ee256ee2cc5f159e69e554317a4c897ea740d24aaa90d58d4e0f7da73a2c2eced2b22c5c83bf2899b751955f793526d5cf1fb6d06782e074b9ea6e3894a0dd167d2c82c8d10f510c73ea46c2ec1daa06072aaa8ce896cae61e010a7815cc2dfce3fc6176212584841c93085bb2bece4cd734688615e474bf1d151a484a5c934de802b45bd302c6c794ab9ca53ccd71930e3f64f7b9a67ded513011627777615f0191d495b6cc6d7fec4872de126529e266bc291590d3f25b729bc29db5f393c938ff11c7601b48ceb61bf2b2d9ab0266a151ada9e882c522817bf034384e90698a8a048c0163f4a8e369c58977dbcf314fa37fe3c87252af7adde5b0146635638b188ed93ffc01afec9c3523864078da024f0e42a08c0b768710e0b32fb87827b01a655879886a575bf51f88c327ce5d18f6042381a7a43db5e2e2d335a388c32fda206370a7533affa9632c4a3ec9e2a1f3a14028ebaee3598791a31a9345be136e88b171b319ceece0368adf8173c9b5ad01d7363eff42964d907c768522ff0330196d3c7b7f2f323fcc65f00a00e521b550606db1239e00a5766808cc21651f1a0307f0d278a5c2a44066b23c9a09be6b43e888d0963c33bb67acaaef7d5d6e4e9001940a705d1fa2aadb3261b07362d5aa00e5752b4a2dd21708b8c9b8e2d8167a8ce985cb2bed9045d4cd5542f5e459b52ccbbed4f9170ca40f845403373a4eff9820a01184d677d5cc835d7121a4c7e4968fb5e5eb203ad69b1d1adf0e30217cf4cf9b564065b0ceb1cdb43a84b82a6379a9279819c54179c97ced36f481330b903a15d0595dc4787c547f8c2bc5ffc8a03c4959f2e8261dbb76c1a974809247df767a22383d8a74faa4af710722c668fce99b274f986fad0fdcdee988f23a8cfc6a74fbcbd5a91dc57e0f02825fd68792f3dd6e2e0de6da8a6d44bc6120f935326e926410ef987ef9a42845245738f557725d724f34a6246ac60a062219e280f2e7bee77c3036af746b2edec75bc182299e755cb196e1a9dddc698e7975b81b8fa2893c2cae34b5784c2ad255d3460192f242ace814ac2bebfd7f8700bfa69ee53cfc18e2d62ca5dd1898eea59bddb4be357c57d2f03bf1cc67a4a5be316d439c58b93ad40f133ebf84b04d3ec3d063127bd1c7aae31c979080088a9cd6d248c4066f4a2d088c975c313fc0cc69ffc7f84ae3d6d1a0fbd32a3c6d37fce6bf812dd0d81b9ac93192a89207fefe5573420c1edba5ce5b2d6a32b9dedaf8ae7c90cc4db8fd3127e899a7a187e457ebd067c4b172dfb3fd3bb36a55d0e0da3f4b3f7c57ebff329f7c2e80d27af7cda7e75d5e45a8f970e90e2b935461a2ee266cb3141db470a45daa3e5813da937feb84da948f28b6056d8e9fd2e703a97c6c350ebb1b7db35aff87a5d8b05c34949e8879d247cde2fdbfb821df0d84b05a41d348db5f0b4c54bd44d896513574b1155c1881f02de2a6b0eaafe610120350cc7810229a9f59cec9a213174e44b533f352f797314157469c62d208ccaacbbb2f0f8514461926bba7fe205114de62d65ffe8f1af95e88be1345e22409cfdbdc796ca2f8aac3baf64094f1f4c16000f584b4c74b85132051ee2e2ff4229ae1f2559a44edad327c519e01ebe927a044da76b8194a4d656c898bf02523412861a68e1842323faf72cc523906355fd0135290b299cc9852cc5d451fbdd805226b6f5c4055ad2c196820779d3845ab7c073fc3b12ac97267afe8400c0bc5de7b797b0923774e9a4e1f1d85f85a5a6377e3d2b036f930c55b70319ce0d9ff2ffc6ea9026bd36418c313e79d31fcbad3fbe9dd8540ffcf8afda4da10f4da65803f80da2db2d0d7175ccc66fd43ef7c3b519b886a52ad69d5900f98e263d40ad50470d503408f1619512f2097d303e88e150725ec5b7aacfb25fba1f5d7a99569f4022a0ff1a5668e2fd7cd334b730a65fa5a1f76be8e92c0be36a7f901be44d91a86e1c7066826eb268d9a5ffd411ac9ad8fbd3188bd99f4a32771aefa83cba0bcccca563e3694b2364c945dd501c0a3a147b6ff227f890e5eb68d0140d22bf55b25bbfb5d1205c822c9051c5de1db6334d7715d9e913062eb3d2a21c71a3872212e73f0961b053f2a745fea7825148ffe49bc6d626252ed71389a4e1f5353337bc3bd95e804421849c12f461ad9e17e15200bcc704295fb7544343ac470afe0b17dfb366d4d7a3984777dd2ea45ebc51481e6b7f3be92225ffcc7f36bd491035c427292</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>project</category>
      </categories>
      <tags>
        <tag>qiyi</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统</title>
    <url>/2022/05/09/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="e846180cfb89ea4c03cb7c56a922cfa99af300c480769dee4630299688f04691">3a5a033e128904461ecff31443a75b85773732e839f348154716694284a812f571891f9d97349303494040708c21392ffca08444a7fd8c2b12d05c58efe34ccbf50ff32044a36a999897bfc44c1470b9fabf9dcfeb986143bc3663be0be847dc35d2d41686286745073b77f5c8b560f56822cdbef225b2a010f91fa8f5202509320d32751400d93fe01bc952d330b646</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>操作系统历史</title>
    <url>/2022/05/05/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%86%E5%8F%B2/</url>
    <content><![CDATA[<blockquote>
</blockquote>
<span id="more"></span>

<h1 id="open-shop"><a href="#open-shop" class="headerlink" title="open shop"></a>open shop</h1><h2 id="1954-IBM-701-open-shop"><a href="#1954-IBM-701-open-shop" class="headerlink" title="1954 IBM 701 open shop"></a>1954 IBM 701 open shop</h2><p>手工操作</p>
<h1 id="batch-processing"><a href="#batch-processing" class="headerlink" title="batch processing"></a>batch processing</h1><h2 id="BKS-system"><a href="#BKS-system" class="headerlink" title="BKS system"></a>BKS system</h2><p>纸带, 磁带</p>
<h1 id="multiprogramming"><a href="#multiprogramming" class="headerlink" title="multiprogramming"></a>multiprogramming</h1><h2 id="1960-Altas-Supervisor"><a href="#1960-Altas-Supervisor" class="headerlink" title="1960 Altas Supervisor"></a>1960 Altas Supervisor</h2><p>spooling 假脱机<br>(Spooling is a process in which data is temporarily held to be used and executed by a device, program or the system. Data is sent to and stored in memory or other volatile storage until the program or computer requests it for execution.<br>“Spool” is technically an acronym for simultaneous peripheral operations online.<br>For example, in printer spooling, the documents/files that are sent to the printer are <strong>first stored in the memory or printer spooler.</strong> Once the printer is ready, it fetches the data from that spool and prints it.)</p>
<p>demand paging(512words)<br>(It suggests keeping all pages of the frames in the secondary memory until they are required. In other words, it says that do not load any page in the main memory until it is required.)</p>
<p>supervisor calls</p>
<p>programmed in machine language</p>
<h2 id="1964-B5000-master-control-program"><a href="#1964-B5000-master-control-program" class="headerlink" title="1964 B5000 master control program"></a>1964 B5000 master control program</h2><p>high-level language</p>
<p>stack instructions</p>
<p>virtual memory</p>
<p>multiprogramming multiprocessing</p>
<p>随意访存(unprotected)</p>
<h2 id="1966-Exec-II-system"><a href="#1966-Exec-II-system" class="headerlink" title="1966 Exec II system"></a>1966 Exec II system</h2><p>shortest job first</p>
<h2 id="1966-Egdon-system"><a href="#1966-Egdon-system" class="headerlink" title="1966 Egdon system"></a>1966 Egdon system</h2><h1 id="timesharing"><a href="#timesharing" class="headerlink" title="timesharing"></a>timesharing</h1><h2 id="1963-CTSS"><a href="#1963-CTSS" class="headerlink" title="1963 CTSS"></a>1963 CTSS</h2><h2 id="1964-Multics-file-system"><a href="#1964-Multics-file-system" class="headerlink" title="1964 Multics file system"></a>1964 Multics file system</h2><p>hierarchical file system</p>
<h2 id="1967-Titan-file-system"><a href="#1967-Titan-file-system" class="headerlink" title="1967 Titan file system"></a>1967 Titan file system</h2><p>passwords</p>
<p>file authorization(execute read delete update)</p>
<h2 id="1974-Unix"><a href="#1974-Unix" class="headerlink" title="1974 Unix"></a>1974 Unix</h2><h1 id="concurrent-programming"><a href="#concurrent-programming" class="headerlink" title="concurrent programming"></a>concurrent programming</h1><h2 id="1968-THE-multiprogramming-system"><a href="#1968-THE-multiprogramming-system" class="headerlink" title="1968 THE multiprogramming system"></a>1968 THE multiprogramming system</h2><h2 id="1969-RC-4000-multiprogramming-system"><a href="#1969-RC-4000-multiprogramming-system" class="headerlink" title="1969 RC 4000 multiprogramming system"></a>1969 RC 4000 multiprogramming system</h2><p>concept of kernal:<br>The system has no built-in assumptions about program scheduling and resource allocation; it allows any program to initiate other programs in a hierarchal manner.5 Thus, the system provides a general frame[work] for different scheduling strategies, such as batch processing, multiple console conversation, real-time scheduling, etc.</p>
<p>message communication</p>
<h2 id="1972-Venus-system"><a href="#1972-Venus-system" class="headerlink" title="1972 Venus system"></a>1972 Venus system</h2><p>semaphores and layers of abstraction.</p>
<h2 id="1975-Boss-2-system"><a href="#1975-Boss-2-system" class="headerlink" title="1975 Boss 2 system"></a>1975 Boss 2 system</h2><h2 id="1975-Solo-system"><a href="#1975-Solo-system" class="headerlink" title="1975 Solo system"></a>1975 Solo system</h2><p>concurrent pascal</p>
<h2 id="1976-Solo-program-text"><a href="#1976-Solo-program-text" class="headerlink" title="1976 Solo program text"></a>1976 Solo program text</h2><p>implemented in abstract data types(classes monitors processes)</p>
<p>易于修改</p>
<h1 id="personal-computer"><a href="#personal-computer" class="headerlink" title="personal computer"></a>personal computer</h1><h2 id="1972-OS6"><a href="#1972-OS6" class="headerlink" title="1972 OS6"></a>1972 OS6</h2><p>BCPL 语言</p>
<h2 id="1976-Alto-system"><a href="#1976-Alto-system" class="headerlink" title="1976 Alto system"></a>1976 Alto system</h2>]]></content>
      <tags>
        <tag>os</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode</title>
    <url>/2022/01/16/leetcode/</url>
    <content><![CDATA[<blockquote>
</blockquote>
<span id="more"></span>

<h1 id="剑指-offer"><a href="#剑指-offer" class="headerlink" title="剑指 offer"></a>剑指 offer</h1><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CMyString</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">CMyString</span>(<span class="keyword">char</span>* pData = <span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">CMyString</span>(<span class="keyword">const</span> CMyString&amp; str);</span><br><span class="line">    CMyString&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> CMyString &amp;str);</span><br><span class="line">    ~<span class="built_in">CMyString</span>(<span class="keyword">void</span>);</span><br><span class="line">    -</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">char</span>* m_pData;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CMyString&amp; CMyString::<span class="keyword">operator</span>=(<span class="keyword">const</span> CMyString &amp;str)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span> != &amp;str)&#123;</span><br><span class="line">        CMyString <span class="built_in">strtmp</span>(str);</span><br><span class="line">        <span class="keyword">char</span>* ptmp = strtmp.m_pData;</span><br><span class="line">        strtmp.m_pData = m_pData;</span><br><span class="line">        m_pData = ptmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="面试题3：数组中重复的数字"><a href="#面试题3：数组中重复的数字" class="headerlink" title="面试题3：数组中重复的数字"></a>面试题3：数组中重复的数字</h2><p>题目一：找出数组中重复的数字。<br>在一个长度为n的数组里的所有数字都在 0～n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。例如，如果输入长度为7的数组(2,3,1,0,2,5,3}，那么对应的输出是重复的数字2或者3。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//hash table</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findRepeatNumber</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">bool</span>&gt; <span class="title">map</span><span class="params">(nums.size(), <span class="literal">false</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i: nums)&#123;</span><br><span class="line">        <span class="keyword">if</span>(map[i])</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            map[i] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//节省空间, 对原数组进行操作</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findRepeatNumber</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;nums.<span class="built_in">size</span>())&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[i] == i)</span><br><span class="line">            i++;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[nums[i]] == nums[i])</span><br><span class="line">                <span class="keyword">return</span> nums[i];</span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">                <span class="built_in">swap</span>(nums[nums[i]], nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在一个长度为n+1的数组里的所有数字都在1～n的范围内，所以数组中至少有一个数字是重复的。请找出数组中任意一个重复的数字，但不能修改输入的数组。例如，如果输入长度为8的数组{2,3,5,4,3,2,6,7}，那么对应的输出是重复的数字2或者3。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//不修改原数组</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">countRange</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; nums, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nums.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[i]&gt;=start &amp;&amp; nums[i]&lt;=end)</span><br><span class="line">            count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findRepeatNumber</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> start = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> end = nums.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(end&gt;=start)&#123;</span><br><span class="line">        <span class="keyword">int</span> mid = ((end-start)&gt;&gt;<span class="number">1</span>)+start;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="built_in">countRange</span>(nums, start, middle);</span><br><span class="line">        <span class="keyword">if</span>(end == start)&#123;</span><br><span class="line">            <span class="keyword">if</span>(count&gt;<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">return</span> start;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(count&gt;(mid-start+<span class="number">1</span>))</span><br><span class="line">            end = mid;</span><br><span class="line">        <span class="keyword">else</span>   </span><br><span class="line">            start = mid+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="面试题4：二维数组中的查找"><a href="#面试题4：二维数组中的查找" class="headerlink" title="面试题4：二维数组中的查找"></a>面试题4：二维数组中的查找</h2><p>题目：在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">findNumberIn2DArray</span><span class="params">(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; matrix, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(matrix.<span class="built_in">empty</span>())</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">int</span> width = matrix[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">  <span class="keyword">int</span> height = matrix.<span class="built_in">size</span>();</span><br><span class="line">  <span class="keyword">int</span> i=height<span class="number">-1</span>, j=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(i&gt;=<span class="number">0</span> &amp;&amp; j&lt;width)&#123;</span><br><span class="line">    <span class="keyword">if</span>(matrix[i][j]==target)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(target&lt;matrix[i][j])</span><br><span class="line">      i--;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(target&gt;matrix[i][j])</span><br><span class="line">      j++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>字符串存储问题</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">tmain</span><span class="params">(<span class="keyword">int</span> argc, _TCHAR* argv[])</span> </span>&#123; </span><br><span class="line">  <span class="keyword">char</span> str1[] = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">  <span class="keyword">char</span> str2[] = <span class="string">&quot;hello world&quot;</span>:</span><br><span class="line"></span><br><span class="line">  <span class="keyword">char</span>* str3 = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">  <span class="keyword">char</span>* str4 = <span class="string">&quot;hello world&quot;</span>:</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(strl == str2)</span><br><span class="line">  	<span class="built_in">printf</span>(<span class="string">&quot;str1 and str2 are same\n&quot;</span>);</span><br><span class="line">	<span class="keyword">else</span> </span><br><span class="line">  	<span class="built_in">printf</span>(<span class="string">&quot;str1 and str2 are not same\n&quot;</span>);</span><br><span class="line"><span class="comment">//not same</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span>(str3 == str4)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;str3 and str4 are same.\n&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span> </span><br><span class="line">  	<span class="built_in">printf</span>(<span class="string">&quot;str3 and str4 are not same. \n&quot;</span>);</span><br><span class="line"><span class="comment">//same</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="面试题5：替换空格"><a href="#面试题5：替换空格" class="headerlink" title="面试题5：替换空格"></a>面试题5：替换空格</h2><p> 题目：请实现一个函数，把字符串中的每个空格替换成”%20”。例如， 输入“We are happy.”，则输出“We%20are%20happy.”</p>
<ol>
<li>新分配字符串</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">string <span class="title">replaceSpace</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">  string ans;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">char</span> i:s)&#123;</span><br><span class="line">    <span class="keyword">if</span>(i == <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">      ans.<span class="built_in">append</span>(<span class="string">&quot;%20&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      ans.<span class="built_in">push_back</span>(i);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在原有字符串上修改(先估计大小, 后从后往前更新)</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">string <span class="title">replaceSpace</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> space_count = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">char</span> i:s)&#123;</span><br><span class="line">    <span class="keyword">if</span>(i == <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">      space_count+=<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> i=s.<span class="built_in">length</span>()<span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">int</span> length = s.<span class="built_in">length</span>() + space_count*<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">  s.<span class="built_in">resize</span>(length);</span><br><span class="line">  length -= <span class="number">1</span>;<span class="comment">//下标-1</span></span><br><span class="line">  <span class="keyword">for</span>(; i&gt;=<span class="number">0</span> &amp;&amp; length&gt;=i; i--)&#123;</span><br><span class="line">    <span class="keyword">if</span>(s[i] == <span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">      s[length--] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">      s[length--] = <span class="string">&#x27;2&#x27;</span>;</span><br><span class="line">      s[length--] = <span class="string">&#x27;%&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      s[length--] = s[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="面试题6：从尾到头打印链表"><a href="#面试题6：从尾到头打印链表" class="headerlink" title="面试题6：从尾到头打印链表"></a>面试题6：从尾到头打印链表</h2><p>题目：输入一个链表的头节点，从尾到头反过来打印出每个节点的值。 链表节点定义如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> m_nkey; </span><br><span class="line">  ListNode* m_pNext;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>不改变原链表结构</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">reversePrint</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">  stack&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line">  ListNode* p = head;</span><br><span class="line">  <span class="keyword">while</span>(p)&#123;</span><br><span class="line">    s.<span class="built_in">push</span>(p-&gt;val);</span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line">  vector&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">  <span class="keyword">while</span>(!s.<span class="built_in">empty</span>())&#123;</span><br><span class="line">    ans.<span class="built_in">push_back</span>(s.<span class="built_in">top</span>());</span><br><span class="line">    s.<span class="built_in">pop</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>链表反转</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">reversePrint</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">  vector&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">  ListNode* cur = head, * pre = <span class="literal">NULL</span>, *next;</span><br><span class="line">  <span class="keyword">while</span>(cur)&#123;</span><br><span class="line">    next = cur-&gt;next;</span><br><span class="line">    cur-&gt;next = pre;</span><br><span class="line">    pre = cur;</span><br><span class="line">    cur = next;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span>(pre)&#123;</span><br><span class="line">    ans.<span class="built_in">push_back</span>(pre-&gt;val);</span><br><span class="line">    pre = pre-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="树"><a href="#树" class="headerlink" title="树"></a>树</h2><p>树的遍历: 递归迭代, 宽度遍历</p>
<p>树的特例: 二叉搜索树, 堆, 红黑树</p>
<h2 id="面试题7：重建二叉树"><a href="#面试题7：重建二叉树" class="headerlink" title="面试题7：重建二叉树"></a>面试题7：重建二叉树</h2><p>题目：输入某二叉树的前序遍历和中序遍历的结果，请重建该二叉树。 假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如，输入 前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则 重建如图所示的二叉树并输出它的头节点。二叉树节点的定义如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BinaryTreeNode</span></span></span><br><span class="line"><span class="class">&#123;</span>  </span><br><span class="line">  <span class="keyword">int</span> m_nValue;</span><br><span class="line">  BinaryTreeNode* m_pLeft;</span><br><span class="line">  BinaryTreeNode* m_pRight;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; preorder;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; inorder;</span><br><span class="line">    <span class="function">TreeNode* <span class="title">buildTree</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; preorder, vector&lt;<span class="keyword">int</span>&gt;&amp; inorder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(preorder.<span class="built_in">empty</span>() || inorder.<span class="built_in">empty</span>())</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;inorder = inorder;</span><br><span class="line">        <span class="keyword">this</span>-&gt;preorder = preorder;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">ConstructCore</span>(<span class="number">0</span>, <span class="keyword">this</span>-&gt;inorder.<span class="built_in">size</span>()<span class="number">-1</span>, <span class="number">0</span>, <span class="keyword">this</span>-&gt;preorder.<span class="built_in">size</span>()<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">TreeNode* <span class="title">ConstructCore</span><span class="params">(<span class="keyword">int</span> startin, <span class="keyword">int</span> endin, <span class="keyword">int</span> startpre, <span class="keyword">int</span> endpre)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> rootvalue = preorder[startpre];</span><br><span class="line">        TreeNode* root = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(rootvalue);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(startpre == endpre)</span><br><span class="line">            <span class="keyword">if</span>(startin == endin &amp;&amp; preorder[startpre] == inorder[startin])</span><br><span class="line">                <span class="keyword">return</span> root;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;invalid&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> rootin = startin;</span><br><span class="line">        <span class="keyword">while</span>(rootin&lt;=endin &amp;&amp; inorder[rootin]!=rootvalue)</span><br><span class="line">            ++rootin;</span><br><span class="line">        <span class="keyword">if</span>(rootin == endin &amp;&amp; inorder[rootin]!=rootvalue)</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;invalid&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> leftlength = rootin - startin;</span><br><span class="line">        <span class="keyword">int</span> leftpreend = startpre + leftlength;</span><br><span class="line">        <span class="keyword">if</span>(leftlength&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            root-&gt;left = <span class="built_in">ConstructCore</span>(startin, rootin<span class="number">-1</span>,startpre+<span class="number">1</span>, leftpreend);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(leftlength&lt;endpre-startpre)<span class="comment">//?</span></span><br><span class="line">        &#123;</span><br><span class="line">            root-&gt;right = <span class="built_in">ConstructCore</span>(rootin+<span class="number">1</span>, endin, leftpreend+<span class="number">1</span>, endpre);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="面试题8：二叉树的下一个节点"><a href="#面试题8：二叉树的下一个节点" class="headerlink" title="面试题8：二叉树的下一个节点"></a>面试题8：二叉树的下一个节点</h2><p>题目：给定一棵二叉树和其中的一个节点，如何找出中序遍历序列的 下一个节点？树中的节点除了有两个分别指向左、右子节点的指针，还有 1个指向父节点的指针。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">TreeNode* <span class="title">solution</span><span class="params">(TreeNode* pnode)</span></span>&#123;</span><br><span class="line">    TreeNode* ans = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">if</span>(pnode-&gt;right != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">        TreeNode* pright = pnode-&gt;right;</span><br><span class="line">        <span class="keyword">while</span>(pright-&gt;left!=<span class="literal">nullptr</span>)</span><br><span class="line">            pright = pright-&gt;left;</span><br><span class="line">        ans = pright;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(pnode-&gt;parent!=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">        TreeNode* pcur = pnode;</span><br><span class="line">        TreeNode* pparent = pnode-&gt;parent;</span><br><span class="line">        <span class="keyword">while</span>(pparent!=<span class="literal">nullptr</span> &amp;&amp; pcur == pparent-&gt;right)&#123;</span><br><span class="line">            pcur = pparent;</span><br><span class="line">            pparent = pparent-&gt;parent;</span><br><span class="line">        &#125;</span><br><span class="line">        ans = pparent;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="面试题9：用两个栈实现队列"><a href="#面试题9：用两个栈实现队列" class="headerlink" title="面试题9：用两个栈实现队列"></a>面试题9：用两个栈实现队列</h2><p>题目：用两个栈实现一个队列。队列的声明如下，请实现它的两个函 数 appendTail 和 deleteHead，分别完成在队列尾部插入节点和在队列头部删 除节点的功能。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CQueue</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line">    <span class="built_in">CQueue</span>() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">appendTail</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        s1.<span class="built_in">push</span>(value);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteHead</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s2.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="keyword">while</span>(!s1.<span class="built_in">empty</span>())&#123;</span><br><span class="line">                <span class="keyword">int</span> tmp = s1.<span class="built_in">top</span>();</span><br><span class="line">                s1.<span class="built_in">pop</span>();</span><br><span class="line">                s2.<span class="built_in">push</span>(tmp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(s2.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;invalid&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ret = s2.<span class="built_in">top</span>();</span><br><span class="line">        s2.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    stack&lt;<span class="keyword">int</span>&gt; s1;</span><br><span class="line">    stack&lt;<span class="keyword">int</span>&gt; s2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="面试题10：斐波那契数列"><a href="#面试题10：斐波那契数列" class="headerlink" title="面试题10：斐波那契数列"></a>面试题10：斐波那契数列</h2><p> 题目一：求斐波那契数列的第n项。 写一个函数，输入n，求斐波那契（Fibonacci）数列的第n项。</p>
<p><strong>注意取模!</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; hash &#123;<span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line">        <span class="keyword">if</span>(n&lt;<span class="number">2</span>)</span><br><span class="line">            <span class="keyword">return</span> hash[n];</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> n1=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> n2=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=n; i++)&#123;</span><br><span class="line">            ans = (n1+n2)%<span class="built_in"><span class="keyword">int</span></span>(<span class="number">1e9</span>+<span class="number">7</span>);</span><br><span class="line">            n1 = n2%<span class="built_in"><span class="keyword">int</span></span>(<span class="number">1e9</span>+<span class="number">7</span>);</span><br><span class="line">            n2 = ans%<span class="built_in"><span class="keyword">int</span></span>(<span class="number">1e9</span>+<span class="number">7</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans%<span class="built_in"><span class="keyword">int</span></span>(<span class="number">1e9</span>+<span class="number">7</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Partition</span><span class="params">(<span class="keyword">int</span> data[], <span class="keyword">int</span> length, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(data==<span class="literal">nullptr</span>||length&lt;=<span class="number">0</span>||start&lt;=<span class="number">0</span>||end&gt;=length)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> index = start;<span class="comment">//可以随机数</span></span><br><span class="line">    <span class="built_in">swap</span>(&amp;data[index], &amp;data[end]);<span class="comment">//把基准放在最后</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> small = start<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(index=start; index&lt;end; index++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(data[index]&lt;data[end])&#123;</span><br><span class="line">            ++small;</span><br><span class="line">            <span class="keyword">if</span>(small!=index)</span><br><span class="line">                <span class="built_in">swap</span>(&amp;data[index], &amp;data[small]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ++small;</span><br><span class="line">    <span class="built_in">swap</span>(&amp;data[small], &amp;data[end]);</span><br><span class="line">    <span class="keyword">return</span> small;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QuickSort</span><span class="params">(<span class="keyword">int</span> data[], <span class="keyword">int</span> length, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(start == end)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> index = <span class="built_in">Partition</span>(data, length, start, end);</span><br><span class="line">    <span class="keyword">if</span>(index&gt;start)</span><br><span class="line">        <span class="built_in">QuickSort</span>(data, length, start, index<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">if</span>(index&lt;end)</span><br><span class="line">        <span class="built_in">QuickSort</span>(data, length, index+<span class="number">1</span>, end);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="面试题11：旋转数组的最小数字"><a href="#面试题11：旋转数组的最小数字" class="headerlink" title="面试题11：旋转数组的最小数字"></a>面试题11：旋转数组的最小数字</h2><p>题目：把一个数组最开始的若干个元素搬到数组的末尾，我们称之为 数组的旋转。输入一个递增排序的数组的一个旋转，输出旋转数组的最小 元素。例如，数组(3, 4, 5, 1, 2}为{1,  2, 3, 4, 5}的一个旋转，该数组的最小值为1。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">minArray</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; numbers)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(numbers.<span class="built_in">empty</span>())</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> end = numbers.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = start + ((end-start)&gt;&gt;<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span>(start&lt;end)&#123;</span><br><span class="line">        mid = start + ((end-start)&gt;&gt;<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(numbers[mid]&gt;numbers[end])</span><br><span class="line">            start = mid+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(numbers[mid] &lt; numbers[end])</span><br><span class="line">            end = mid;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            end-=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> numbers[start];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="面试题12：矩阵中的路径"><a href="#面试题12：矩阵中的路径" class="headerlink" title="面试题12：矩阵中的路径"></a>面试题12：矩阵中的路径</h2><p>题目：请设计一个函数，用来判断在一个矩阵中是否存在一条包含某 字符串所有字符的路径。路径可以从矩阵中的任意一格开始，每一步可以 在矩阵中向左、右、上、下移动一格。如果一条路径经过了矩阵的某一格， 那么该路径不能再次进入该格子。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> row, col;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(vector&lt;vector&lt;<span class="keyword">char</span>&gt;&gt;&amp; board, <span class="keyword">int</span> i, <span class="keyword">int</span> j, string word, <span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;<span class="number">0</span> || i&gt;=row || j&lt;<span class="number">0</span> || j&gt;=col || board[i][j]!=word[k])</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(k == word.<span class="built_in">size</span>()<span class="number">-1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        board[i][j] == <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        <span class="keyword">bool</span> res = </span><br><span class="line">        <span class="built_in">check</span>(board, i+<span class="number">1</span>, j, word, k+<span class="number">1</span>)||</span><br><span class="line">        <span class="built_in">check</span>(board, i<span class="number">-1</span>, j, word, k+<span class="number">1</span>)||</span><br><span class="line">        <span class="built_in">check</span>(board, i, j+<span class="number">1</span>, word, k+<span class="number">1</span>)||</span><br><span class="line">        <span class="built_in">check</span>(board, i, j<span class="number">-1</span>, word, k+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        board[i][j] = word[k];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">exist</span><span class="params">(vector&lt;vector&lt;<span class="keyword">char</span>&gt;&gt;&amp; board, string word)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(board.<span class="built_in">empty</span>())</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        row = board.<span class="built_in">size</span>();</span><br><span class="line">        col = board[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;row; i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;col; j++)</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">check</span>(board, i, j, word, <span class="number">0</span>))</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="面试题14：剪绳子"><a href="#面试题14：剪绳子" class="headerlink" title="面试题14：剪绳子"></a>面试题14：剪绳子</h2><p>题目：给你一根长度为n的绳子，请把绳子剪成m段（m、n都是整数， n&gt;1并且m＞1)，可能的最大乘积是多少？例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的段，此时得到的最大乘积是18。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">cuttingRope</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n&lt;=<span class="number">3</span>)</span><br><span class="line">            <span class="keyword">return</span> n<span class="number">-1</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">hash</span><span class="params">(n+<span class="number">1</span>)</span></span>;</span><br><span class="line">        hash[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        hash[<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">        hash[<span class="number">3</span>] = <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">4</span>; i&lt;=n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=i/<span class="number">2</span>; j++)&#123;</span><br><span class="line">                ans = <span class="built_in">max</span>(ans, hash[j]*hash[i-j]);</span><br><span class="line">                hash[i] = ans;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> hash[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="面试题15：二进制中1的个数"><a href="#面试题15：二进制中1的个数" class="headerlink" title="面试题15：二进制中1的个数"></a>面试题15：二进制中1的个数</h2><p>题目：请实现一个函数，输入一个整数，输出该数二进制表示中1 的 个数。例如，把9表示成二进制是1001，有2位是1。因此，如果输入9, 则该函数输出2。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">hammingWeight</span><span class="params">(<span class="keyword">uint32_t</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            ans += n&amp;<span class="number">1</span>;</span><br><span class="line">            n=n&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">hammingWeight</span><span class="params">(<span class="keyword">uint32_t</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            n = n&amp;(n<span class="number">-1</span>);</span><br><span class="line">            ++ans;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>把一个整数减去1之后再和原来的整数做位与运算，得到的结果相当 于把整数的二进制表示中最右边的1变成0。很多二进制的问题都可以用这 种思路解决。</p>
<h2 id="面试题-16：数值的整数次方"><a href="#面试题-16：数值的整数次方" class="headerlink" title="面试题 16：数值的整数次方"></a>面试题 16：数值的整数次方</h2><p>题目：实现函数 double Power(double base, int exponent)，求 base 的 exponent 次方。不得使用库函数，同时不需要考虑大数问题</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">qpow</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">unsigned</span> <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">double</span> ans = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(n)&#123;</span><br><span class="line">            <span class="keyword">if</span>(n&amp;<span class="number">1</span>)</span><br><span class="line">            ans*=a;</span><br><span class="line">            a*=a;</span><br><span class="line">            n&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">myPow</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x==<span class="number">0.0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">double</span> ans = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(n&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">unsigned</span> <span class="keyword">int</span> nnew = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)n;</span><br><span class="line">            ans = <span class="number">1.0</span>/<span class="built_in">qpow</span>(x, -nnew);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            ans = <span class="built_in">qpow</span>(x, n);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>注意 unsigned int 用法</p>
<h3 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(n==<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(n&amp;<span class="number">1</span> == <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">qpow</span>(a, n<span class="number">-1</span>) * a;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp = <span class="built_in">qpow</span>(a, n&gt;&gt;<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> tmp*tmp;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span>(n)&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&amp;<span class="number">1</span>)</span><br><span class="line">      ans*=a;</span><br><span class="line">    a*=a;</span><br><span class="line">    n&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="面试题17：打印从1到最大的n位数"><a href="#面试题17：打印从1到最大的n位数" class="headerlink" title="面试题17：打印从1到最大的n位数"></a>面试题17：打印从1到最大的n位数</h2><p>题目：输入数字 n，按顺序打印出从1到最大的n位十进制数。比如输 入3，则打印出1、2、3一直到最大的3位数999。</p>
<p>?大数问题, 字符串表示数</p>
<h2 id="面试题18：删除链表的节点"><a href="#面试题18：删除链表的节点" class="headerlink" title="面试题18：删除链表的节点"></a>面试题18：删除链表的节点</h2><p>题目一：在0(1)时间内删除链表节点。 给定单向链表的头指针和一个节点指针，定义一个函数在0(1)时间内 删除该节点。链表节点与函数的定义如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    ListNode *next;</span><br><span class="line">    <span class="built_in">ListNode</span>(<span class="keyword">int</span> x) : <span class="built_in">val</span>(x), <span class="built_in">next</span>(<span class="literal">NULL</span>) &#123;&#125;</span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">deleteNode</span><span class="params">(ListNode** head, ListNode* tobedelete)</span> </span>&#123;</span><br><span class="line">        ListNode* next = tobedelete-&gt;next;</span><br><span class="line">        <span class="keyword">if</span>(*head == tobedelete)&#123;</span><br><span class="line">            <span class="keyword">delete</span> tobedelete;</span><br><span class="line">            tobedelete = <span class="literal">nullptr</span>;</span><br><span class="line">            *head = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(next!=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">            tobedelete-&gt;val = next-&gt;val;</span><br><span class="line">            tobedelete-&gt;next = next-&gt;next;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">delete</span> next;</span><br><span class="line">            next = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            ListNode* cur = *head;</span><br><span class="line">            <span class="keyword">while</span>(cur-&gt;next!=tobedelete)</span><br><span class="line">                cur = cur-&gt;next;</span><br><span class="line">            cur-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">            <span class="keyword">delete</span> tobedelete;</span><br><span class="line">            tobedelete = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>题目二：删除链表中重复的节点。 在一个排序的链表中，如何删除重复的节点？</p>
<h2 id="面试题19：正则表达式匹配"><a href="#面试题19：正则表达式匹配" class="headerlink" title="面试题19：正则表达式匹配"></a>面试题19：正则表达式匹配</h2><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5pxclxi0uj20wi06s767.jpg" alt="截屏2022-08-31 14.19.11"></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    string m_s;</span><br><span class="line">    string m_p;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> star = <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">    <span class="keyword">char</span> dot = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isMatch</span><span class="params">(string s, string p)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        m_p = p;</span><br><span class="line">        m_s = s;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">isMatchIndex</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isMatchIndex</span><span class="params">(<span class="keyword">int</span> i_s, <span class="keyword">int</span> i_p)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i_s == m_s.<span class="built_in">size</span>() &amp;&amp; i_p == m_p.<span class="built_in">size</span>())</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(i_s!=m_s.<span class="built_in">size</span>() &amp;&amp; i_p == m_p.<span class="built_in">size</span>())</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(i_p+<span class="number">1</span>&lt;m_p.<span class="built_in">size</span>() &amp;&amp; m_p[i_p+<span class="number">1</span>] == star)&#123;</span><br><span class="line">            <span class="keyword">if</span>((m_p[i_p]==dot &amp;&amp; i_s!=m_s.<span class="built_in">size</span>()) || m_p[i_p]==m_s[i_s])</span><br><span class="line">                <span class="keyword">return</span>  <span class="built_in">isMatchIndex</span>(i_s+<span class="number">1</span>, i_p+<span class="number">2</span>) || <span class="built_in">isMatchIndex</span>(i_s+<span class="number">1</span>, i_p) || <span class="built_in">isMatchIndex</span>(i_s, i_p+<span class="number">2</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">isMatchIndex</span>(i_s, i_p+<span class="number">2</span>);</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>((m_p[i_p] == dot &amp;&amp; i_s!=m_s.<span class="built_in">size</span>()) || m_p[i_p] == m_s[i_s])&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">isMatchIndex</span>(i_s+<span class="number">1</span>, i_p+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="面试题-20：表示数值的字符串"><a href="#面试题-20：表示数值的字符串" class="headerlink" title="面试题 20：表示数值的字符串"></a>面试题 20：表示数值的字符串</h2><p>题目：请实现一个函数用来判断字符串是否表示数值（包括整数和小 数）。例如，字符串”+100”、”5e2”、”-123”、”3.1416”及”-1E-16”都表示数 值，但”12e”、”1a3.14”、”1.2.3”、”+-5”及”12e+5.4”都不是。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    string m_s;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fit</span><span class="params">(string&amp; s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(s.<span class="built_in">front</span>()==<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">            s.<span class="built_in">erase</span>(s.<span class="built_in">begin</span>());</span><br><span class="line">        <span class="keyword">while</span>(s.<span class="built_in">back</span>()==<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">            s.<span class="built_in">pop_back</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">isInt</span><span class="params">(<span class="keyword">int</span> &amp;i)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(m_s[i]&gt;=<span class="number">48</span> &amp;&amp; m_s[i]&lt;=<span class="number">57</span>)</span><br><span class="line">            ++i;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">isE</span><span class="params">(<span class="keyword">int</span> &amp;i)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(m_s[i]==<span class="string">&#x27;e&#x27;</span> || m_s[i]==<span class="string">&#x27;E&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> ++i;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">isPN</span><span class="params">(<span class="keyword">int</span> &amp;i)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(m_s[i]==<span class="string">&#x27;-&#x27;</span> || m_s[i]==<span class="string">&#x27;+&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> ++i;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">isdot</span><span class="params">(<span class="keyword">int</span> &amp;i)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(m_s[i]==<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> ++i;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isNumber</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        m_s = s;</span><br><span class="line">        <span class="built_in">fit</span>(m_s);</span><br><span class="line">        <span class="keyword">int</span> cur = <span class="number">0</span>;</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; check;<span class="comment">//数值开始, 小数点, 数值结束, e 开始, 而结束</span></span><br><span class="line">        check.<span class="built_in">push_back</span>(<span class="built_in">isPN</span>(cur));</span><br><span class="line">        check.<span class="built_in">push_back</span>(<span class="built_in">isInt</span>(cur));</span><br><span class="line">        check.<span class="built_in">push_back</span>(<span class="built_in">isdot</span>(cur));</span><br><span class="line">        check.<span class="built_in">push_back</span>(<span class="built_in">isInt</span>(cur));</span><br><span class="line">        <span class="keyword">if</span>(check[<span class="number">0</span>]==check[<span class="number">3</span>])<span class="comment">//no number</span></span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;no number&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="keyword">if</span>(check[<span class="number">1</span>]!=check[<span class="number">2</span>] &amp;&amp; (check[<span class="number">0</span>]+<span class="number">1</span>==check[<span class="number">3</span>]))<span class="comment">//.+null</span></span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;no dot&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; </span><br><span class="line">        </span><br><span class="line">        check.<span class="built_in">push_back</span>(<span class="built_in">isE</span>(cur));</span><br><span class="line">        check.<span class="built_in">push_back</span>(<span class="built_in">isPN</span>(cur));</span><br><span class="line">        check.<span class="built_in">push_back</span>(<span class="built_in">isInt</span>(cur));</span><br><span class="line">        <span class="keyword">if</span>(check[<span class="number">3</span>]!=check[<span class="number">4</span>] &amp;&amp; check[<span class="number">5</span>]==check[<span class="number">6</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;no e&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">if</span>(check[<span class="number">3</span>]==check[<span class="number">4</span>] &amp;&amp; check[<span class="number">4</span>]!=check[<span class="number">5</span>])</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(cur==m_s.<span class="built_in">size</span>())</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="面试题-21：调整数组顺序使奇数位于偶数前面"><a href="#面试题-21：调整数组顺序使奇数位于偶数前面" class="headerlink" title="面试题 21：调整数组顺序使奇数位于偶数前面"></a>面试题 21：调整数组顺序使奇数位于偶数前面</h2><p>题目：输入一个整数数组，实现一个函数来调整该数组中数字的顺序， 使得所有奇数位于数组的前半部分，所有偶数位于数组的后半部分。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isOdd</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i&amp;<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">exchange</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> even = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> odd = nums.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(even&lt;odd)&#123;</span><br><span class="line">            <span class="keyword">bool</span> isodd = <span class="built_in">isOdd</span>(nums[odd]);</span><br><span class="line">            <span class="keyword">bool</span> iseven = !<span class="built_in">isOdd</span>(nums[even]);</span><br><span class="line">            <span class="keyword">if</span>(!isodd)</span><br><span class="line">                odd--;</span><br><span class="line">            <span class="keyword">if</span>(!iseven)</span><br><span class="line">                even++;</span><br><span class="line">            <span class="keyword">if</span>(isodd &amp;&amp; iseven)&#123;</span><br><span class="line">                <span class="built_in">swap</span>(nums[odd], nums[even]);</span><br><span class="line">                odd--;</span><br><span class="line">                even++;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>注意解耦合</p>
<h2 id="面试题-22：链表中倒数第k个节点"><a href="#面试题-22：链表中倒数第k个节点" class="headerlink" title="面试题 22：链表中倒数第k个节点"></a>面试题 22：链表中倒数第k个节点</h2><p>题目：输入一个链表，输出该链表中倒数第k个节点。为了符合大多 数人的习惯，本题从1开始计数，即链表的尾节点是倒数第1个节点。例 如，一个链表有6个节点，从头节点开始，它们的值依次是1、2、3、4、5、 6。这个链表的倒数第3 个节点是值为4的节点。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">getKthFromEnd</span><span class="params">(ListNode* head, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> forward = <span class="number">0</span>;</span><br><span class="line">        ListNode* p = head;</span><br><span class="line">        <span class="keyword">while</span>(p!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">            forward++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(k&gt;forward)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">int</span> reverse = forward - k;</span><br><span class="line">        p = head;</span><br><span class="line">        <span class="keyword">while</span>(reverse!=<span class="number">0</span>)&#123;</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">            reverse--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//只遍历一边</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">getKthFromEnd</span><span class="params">(ListNode* head, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        ListNode* p1 = head;</span><br><span class="line">        <span class="keyword">while</span>(p1!=<span class="literal">NULL</span> &amp;&amp; k&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            p1 = p1-&gt;next;</span><br><span class="line">            k--;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode* p2 = head;</span><br><span class="line">        <span class="keyword">while</span>(p1!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">            p1 = p1-&gt;next;</span><br><span class="line">            p2 = p2-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="面试题-23：链表中环的入口节点"><a href="#面试题-23：链表中环的入口节点" class="headerlink" title="面试题 23：链表中环的入口节点"></a>面试题 23：链表中环的入口节点</h2><p>题目：如果一个链表中包含环，如何找出环的入口节点？例如，在如 图3.8所示的链表中，环的入口节点是节点3。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">detectCycle</span><span class="params">(ListNode *head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">nullptr</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        </span><br><span class="line">        ListNode* pslow = head-&gt;next;</span><br><span class="line">        <span class="keyword">if</span>(pslow==<span class="literal">nullptr</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        ListNode* pfast = pslow-&gt;next;</span><br><span class="line">        <span class="keyword">while</span>(pfast!=<span class="literal">nullptr</span> &amp;&amp; pfast!=pslow)&#123;</span><br><span class="line">            pslow = pslow-&gt;next;</span><br><span class="line">            pfast = pfast-&gt;next;</span><br><span class="line">            <span class="keyword">if</span>(pfast)</span><br><span class="line">                pfast = pfast-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(pfast==<span class="literal">nullptr</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        ListNode* pcircle = pfast-&gt;next;</span><br><span class="line">        <span class="keyword">int</span> circle_len = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(pcircle!=pfast)&#123;</span><br><span class="line">            pcircle = pcircle-&gt;next;</span><br><span class="line">            circle_len++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ListNode* pcirclestart = head;</span><br><span class="line">        pcircle = head;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;circle_len; i++)</span><br><span class="line">            pcircle = pcircle-&gt;next;</span><br><span class="line">        <span class="keyword">while</span>(pcircle!=pcirclestart)&#123;</span><br><span class="line">            pcircle = pcircle-&gt;next;</span><br><span class="line">            pcirclestart = pcirclestart-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> pcirclestart;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>先快慢指针, 后转圈统计环长, 后先后指针找环开始端</p>
<h2 id="24-反转链表"><a href="#24-反转链表" class="headerlink" title="24 反转链表"></a>24 反转链表</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        ListNode* cur = head;</span><br><span class="line">        ListNode* next = <span class="literal">nullptr</span>;</span><br><span class="line">        ListNode* pre = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(cur)&#123;</span><br><span class="line">            next = cur-&gt;next;</span><br><span class="line">            cur-&gt;next = pre;</span><br><span class="line">            pre = cur;</span><br><span class="line">            cur = next;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pre;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>&#123;</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(head == null || head-&gt;next == null)</span><br><span class="line">      <span class="keyword">return</span> head;</span><br><span class="line">    ListNode* newhead = <span class="built_in">reverseList</span>(head-&gt;next);</span><br><span class="line">    head-&gt;next-&gt;next = head;</span><br><span class="line">    head-&gt;next = null;</span><br><span class="line">    <span class="keyword">return</span> newhead;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="面试题-25：合并两个排序的链表"><a href="#面试题-25：合并两个排序的链表" class="headerlink" title="面试题 25：合并两个排序的链表"></a>面试题 25：合并两个排序的链表</h2><p>题目：输入两个递增排序的链表，合并这两个链表并使新链表中的节 点仍然是递增排序的。例如，输入图3.11中的链表1和链表2，则合并之 后的升序链表如链表 3 所示。链表节点定义如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">mergeTwoLists</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">        ListNode* cur = l1;</span><br><span class="line">        ListNode head;</span><br><span class="line">        cur = &amp;head;</span><br><span class="line">        <span class="keyword">while</span>(l1!=<span class="literal">nullptr</span> &amp;&amp; l2!=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (l1-&gt;val&lt;l2-&gt;val)&#123;</span><br><span class="line">                cur-&gt;next = l1;</span><br><span class="line">                l1 = l1-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                cur-&gt;next = l2;</span><br><span class="line">                l2 = l2-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(l1 == <span class="literal">nullptr</span>)</span><br><span class="line">            cur-&gt;next = l2;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cur-&gt;next = l1;</span><br><span class="line">        <span class="keyword">return</span> head.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>首节点</p>
<h2 id="面试题26：树的子结构"><a href="#面试题26：树的子结构" class="headerlink" title="面试题26：树的子结构"></a>面试题26：树的子结构</h2><p>题目：输入两棵二叉树A和B，判断B是不是A的子结构。二叉树节 点的定义如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isSubStructure</span><span class="params">(TreeNode* A, TreeNode* B)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (A!=<span class="literal">nullptr</span> &amp;&amp; B!=<span class="literal">nullptr</span>) &amp;&amp; (<span class="built_in">recur</span>(A, B) || <span class="built_in">isSubStructure</span>(A-&gt;left, B) || <span class="built_in">isSubStructure</span>(A-&gt;right, B));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">recur</span><span class="params">(TreeNode* A, TreeNode* B)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(B==<span class="literal">nullptr</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(A==<span class="literal">nullptr</span> || A-&gt;val!=B-&gt;val)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">recur</span>(A-&gt;left, B-&gt;left) &amp;&amp; <span class="built_in">recur</span>(A-&gt;right, B-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h1><h2 id="实现一个trie树"><a href="#实现一个trie树" class="headerlink" title="实现一个trie树"></a>实现一个trie树</h2><p>要提供insert（插入一个word），search（查询，返回命中的word列表）（最好C++实现）</p>
<h2 id="线段相交"><a href="#线段相交" class="headerlink" title="线段相交"></a>线段相交</h2><p><a href="https://blog.csdn.net/wlxsq/article/details/47356905">https://blog.csdn.net/wlxsq/article/details/47356905</a></p>
<p>问题描述：最近阿里的某同学（阳阳）从阿里毕业了（实现了财富自由），但是他从小就有一个梦想，他想回到他的老家经营一个农场，因此就需要在农场设计一些沟渠用来排水。为了设计这个沟渠，他不惜花费重金请来了物理系毕业的大学同学（天天）来帮他设计整个农场的沟渠系统。假设每条构建都是一条折线（即有多条首尾相连的线段组成），由于阳阳特别相信风水（风水先生告诉他，他的农场的沟渠路线的相交点不能超过5个），由于天天设计的沟渠系统十分复杂，作为程序员的你，能否设计一个程序帮助阳阳判断，这个沟渠系统能否满足要求。</p>
<p>​         程序输入：</p>
<p>​            第一行：整数 N （表示多条沟渠）</p>
<p>​            第2-(N+1)行：第一个数M(沟渠折线的顶点，沟渠的线段数 = M -1), 后面接着 2 * M个float，每两个float表示一个点。</p>
<p>​            输出：bool：true(符合要求)， false（不符合要求）。</p>
<p>​        </p>
<p>​           程序输入示例：</p>
<p>​         2</p>
<p>​         4 1.7 1.8 2.4 2.9 3.8 4.5  5.9 7.0</p>
<p>​         3 1.0 1.0 2.0 1.0 2.0 8.0          </p>
<h2 id="质串"><a href="#质串" class="headerlink" title="质串"></a>质串</h2><p>​      假设一个字符串由n个字符构成，字符只能是a或者b，如果一个字符串能由他的某个子串重复多次拼接而成，那么这种串就被命名为 “复数串”， 否则就被命名为 “质串”。</p>
<p>​     例如：abab 为复数串（因为它可以有ab重复2次拼接二次） abba为质串。</p>
<p>​    请你设计一个程序，判断一个长度为n的串，有多少个是『质串』,最后的结果 mod 2022 。</p>
<p>例如：n = 1,  那么长度为1的所有串中，有2个质串，分别是 a 和 b。</p>
<p>​            n = 2,  那么长度为2的所有串中，有2个质串，分别是 ab 和 ba。</p>
<p>​            n = 3, 那么长度为3的所有串中，有6个质串，分别是（aab, aba, baa, abb, bab, bba）.</p>
<p>判断一个数是否为质数</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPrime</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(n&lt;=<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span>=<span class="number">2</span>; i*i&lt;=n; i++)</span><br><span class="line">    <span class="keyword">if</span>(n%i==<span class="number">0</span>) </span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>素数筛(埃氏)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> prime[n+<span class="number">1</span>], isprime[n+<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sieve</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> p=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=n; i++)</span><br><span class="line">    isprime[i] = <span class="number">1</span>;</span><br><span class="line">  isprime[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">  isprime[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=n; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(isprime[i])&#123;</span><br><span class="line">      prime[p++] = i;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">2</span>*i; j&lt;=n; j+=i)</span><br><span class="line">        isprime[j] = <span class="number">0</span>;</span><br><span class="line">    &#125; </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>欧拉筛</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> prime[maxn] &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> vis[maxn] &#123;<span class="number">0</span>&#125;;<span class="comment">//0表示质数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">eulasieve</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;maxn; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!vis[i])</span><br><span class="line">      prime[++prime[<span class="number">0</span>]] = i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=prime[<span class="number">0</span>]&amp;&amp;i*prime[j]&lt;=maxn; j++)&#123;</span><br><span class="line">      vis[i*prime[j]] = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">if</span>(i%prime[j] == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="其他-leetcode"><a href="#其他-leetcode" class="headerlink" title="其他 leetcode"></a>其他 leetcode</h1><h2 id="点灯"><a href="#点灯" class="headerlink" title="点灯"></a>点灯</h2><p>每个点是一个按钮，每个按钮里面有一个小灯。如上图，红色代表灯亮，白色代表灯灭。每当按下按钮，此按钮的灯以及其上下左右四个方向按钮的灯状态会改变（如果原来灯亮则灯灭，如果原来灯灭则灯亮）。如果小张通过按按钮将灯全部熄灭则能可以打开箱子。</p>
<p>现在小张给你一些密码锁的状态，请你告诉他最少按几次按钮能够把灯全部熄灭。</p>
<p>Input</p>
<p>第一行两个整数n, m</p>
<p>接下来n行，每行一个长度为m的01字符串，0表示灯初始状态灭，1表示灯初始状态亮。</p>
<p>Output</p>
<p>一行一个整数，表示最少按几次按钮可以把灯全部熄灭。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 1024</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j, vector&lt;vector&lt;<span class="keyword">bool</span>&gt;&gt; &amp;map)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">changefirstline</span><span class="params">(vector&lt;vector&lt;<span class="keyword">bool</span>&gt;&gt; map, <span class="keyword">int</span> j, <span class="keyword">int</span> count)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(vector&lt;vector&lt;<span class="keyword">bool</span>&gt;&gt; &amp;map, <span class="keyword">int</span> count)</span></span>;</span><br><span class="line"><span class="keyword">int</span> ans = MAX;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">changefirstline</span><span class="params">(vector&lt;vector&lt;<span class="keyword">bool</span>&gt;&gt; map, <span class="keyword">int</span> j, <span class="keyword">int</span> count)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(j&lt;map[<span class="number">0</span>].<span class="built_in">size</span>())&#123;</span><br><span class="line">        <span class="built_in">changefirstline</span>(map, j+<span class="number">1</span>, count);</span><br><span class="line">        <span class="built_in">change</span>(<span class="number">0</span>, j, map);</span><br><span class="line">        <span class="built_in">changefirstline</span>(map, j+<span class="number">1</span>, count+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        ans = <span class="built_in">min</span>(<span class="built_in">dfs</span>(map, count), ans);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(vector&lt;vector&lt;<span class="keyword">bool</span>&gt;&gt; &amp;map, <span class="keyword">int</span> count)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = map.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">int</span> m = map[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n<span class="number">-1</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;m; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(map[i][j])&#123;</span><br><span class="line">                <span class="built_in">change</span>(i+<span class="number">1</span>, j, map);</span><br><span class="line">                ++count;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;m; j++)</span><br><span class="line">        <span class="keyword">if</span>(map[n<span class="number">-1</span>][j])</span><br><span class="line">            <span class="keyword">return</span> MAX;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j, vector&lt;vector&lt;<span class="keyword">bool</span>&gt;&gt; &amp;map)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = map.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">int</span> m = map[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">    </span><br><span class="line">    map[i][j] = !map[i][j];</span><br><span class="line">    vector&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; direction&#123;&#123;<span class="number">1</span>,<span class="number">0</span>&#125;, &#123;<span class="number">-1</span>,<span class="number">0</span>&#125;, &#123;<span class="number">0</span>,<span class="number">1</span>&#125;, &#123;<span class="number">0</span>,<span class="number">-1</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> p : direction)&#123;</span><br><span class="line">        <span class="keyword">int</span> newi = i+p.first;</span><br><span class="line">        <span class="keyword">int</span> newj = j+p.second;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(newi&gt;=n || newi&lt;<span class="number">0</span> || newj&gt;=m || newj&lt;<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        map[newi][newj] = !map[newi][newj];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d\n&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    vector&lt;vector&lt;<span class="keyword">bool</span>&gt;&gt; <span class="built_in">map</span>(n, vector&lt;<span class="keyword">bool</span>&gt;(m, <span class="literal">false</span>));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;m; j++)&#123;</span><br><span class="line">            <span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">            <span class="keyword">if</span>(c==<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">                map[i][j] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">changefirstline</span>(map, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="二进制加法"><a href="#二进制加法" class="headerlink" title="二进制加法"></a>二进制加法</h2><p>和十进制不同的是：二进制运算“逢二进一”。下面举一个二进制加法的运算实例:</p>
<p>   11101</p>
<p>   -  110</p>
<hr>
<p>  100011<br>下面请你模拟这个过程。</p>
<p>Input<br>第一行输入一个正整数 T 表示接下来有 T 组数据；<br>接下来 T 行，每行输入两个二进制串 a 和 b 中间用空格隔开，并且没有前导 0。<br>Output<br>对于每组数据，请按模拟二进制加法，按题目描述的格式输出正确的运算结果，注意换行，没有多余的空格和换行。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tri</span>&#123;</span></span><br><span class="line">    string var1;</span><br><span class="line">    string var2;</span><br><span class="line">    string res;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calculate</span><span class="params">(tri &amp;t)</span></span>;</span><br><span class="line"><span class="function">string <span class="title">fillblank</span><span class="params">(<span class="keyword">const</span> string&amp; s, <span class="keyword">int</span> len)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">const</span> tri &amp;t)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rev</span><span class="params">(string &amp;str)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rev</span><span class="params">(string &amp;str)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = str.<span class="built_in">length</span>();</span><br><span class="line">    <span class="keyword">int</span> n = len<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=n)&#123;</span><br><span class="line">        <span class="comment">//Using the swap method to switch values at each index</span></span><br><span class="line">        <span class="built_in">swap</span>(str[i],str[n]);</span><br><span class="line">        n = n<span class="number">-1</span>;</span><br><span class="line">        i = i+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calculate</span><span class="params">(tri &amp;t)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!(t.res.<span class="built_in">empty</span>()))</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    string::reverse_iterator i1 = t.var1.<span class="built_in">rbegin</span>();</span><br><span class="line">    string::reverse_iterator i2 = t.var2.<span class="built_in">rbegin</span>();</span><br><span class="line">    <span class="keyword">int</span> bit1=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> bit2=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> bitres = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> carry = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i1!=t.var1.<span class="built_in">rend</span>() || i2!=t.var2.<span class="built_in">rend</span>() || carry!=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i1==t.var1.<span class="built_in">rend</span>())</span><br><span class="line">            bit1 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            bit1 = *i1<span class="number">-48</span>;</span><br><span class="line">            i1++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(i2==t.var2.<span class="built_in">rend</span>())</span><br><span class="line">            bit2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            bit2 = *i2<span class="number">-48</span>;</span><br><span class="line">            i2++;</span><br><span class="line">        &#125;</span><br><span class="line">        bitres = (bit1+bit2+carry)%<span class="number">2</span>;</span><br><span class="line">        carry = (bit1+bit2+carry)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        t.res.<span class="built_in">push_back</span>(bitres+<span class="number">48</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">rev</span>(t.res);</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">const</span> tri &amp;t)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = t.res.<span class="built_in">size</span>();</span><br><span class="line">    <span class="function">string <span class="title">div</span><span class="params">(len+<span class="number">2</span>, <span class="string">&#x27;-&#x27;</span>)</span></span>;</span><br><span class="line">    <span class="function">string <span class="title">blank</span><span class="params">(<span class="string">&quot;  &quot;</span>)</span></span>;</span><br><span class="line">    cout&lt;&lt;blank&lt;&lt;<span class="built_in">fillblank</span>(t.var1, len)&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;+ &quot;</span>&lt;&lt;<span class="built_in">fillblank</span>(t.var2, len)&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;div&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;blank&lt;&lt;t.res&lt;&lt;endl;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">fillblank</span><span class="params">(<span class="keyword">const</span> string&amp; s, <span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">    string res = s;</span><br><span class="line">    <span class="keyword">while</span>(res.<span class="built_in">size</span>()&lt;len)</span><br><span class="line">        res.<span class="built_in">insert</span>(<span class="number">0</span>, <span class="string">&quot; &quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="function">vector&lt;tri&gt; <span class="title">v</span><span class="params">(t)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;t; i++)&#123;</span><br><span class="line">        cin&gt;&gt;v[i].var1 &gt;&gt;v[i].var2;</span><br><span class="line">        <span class="built_in">calculate</span>(v[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i:v)</span><br><span class="line">        <span class="built_in">print</span>(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="大实数加减法"><a href="#大实数加减法" class="headerlink" title="大实数加减法"></a>大实数加减法</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tri</span>&#123;</span></span><br><span class="line">    string var1;</span><br><span class="line">    string var2;</span><br><span class="line">    string res;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calculate</span><span class="params">(tri &amp;tr)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(tri t)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rev</span><span class="params">(string &amp;str)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rev</span><span class="params">(string &amp;str)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = str.<span class="built_in">length</span>();</span><br><span class="line">    <span class="keyword">int</span> n = len<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=n)&#123;</span><br><span class="line">        <span class="comment">//Using the swap method to switch values at each index</span></span><br><span class="line">        <span class="built_in">swap</span>(str[i],str[n]);</span><br><span class="line">        n = n<span class="number">-1</span>;</span><br><span class="line">        i = i+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fit</span><span class="params">(string&amp; str, <span class="keyword">int</span> len_i, <span class="keyword">int</span> len_f)</span></span>&#123;</span><br><span class="line"><span class="comment">//    while(str.front()==&#x27;0&#x27;)</span></span><br><span class="line"><span class="comment">//        str.erase(0, 1);</span></span><br><span class="line">    <span class="comment">//cout&lt;&lt;&quot;?&quot;&lt;&lt;str&lt;&lt;&quot;?&quot;&lt;&lt;len_i&lt;&lt;len_f&lt;&lt;endl;</span></span><br><span class="line">    <span class="keyword">if</span>(str.<span class="built_in">front</span>()==<span class="string">&#x27;.&#x27;</span>||str.<span class="built_in">empty</span>())</span><br><span class="line">        str.<span class="built_in">insert</span>(<span class="number">0</span>, <span class="string">&quot;0&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> dot = str.<span class="built_in">find</span>(<span class="string">&#x27;.&#x27;</span>)==<span class="number">-1</span> ? str.<span class="built_in">size</span>() : str.<span class="built_in">find</span>(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">    <span class="keyword">int</span> i = len_i - dot;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;i; j++)&#123;</span><br><span class="line">        str.<span class="built_in">insert</span>(<span class="number">0</span>, <span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> back0 = len_i+len_f - str.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">if</span>(len_f!=<span class="number">0</span>)</span><br><span class="line">        back0+=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;back0; j++)&#123;</span><br><span class="line">        str.<span class="built_in">append</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//cout&lt;&lt;&quot;!&quot;&lt;&lt;str&lt;&lt;endl;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calculate</span><span class="params">(tri &amp;tr)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!(tr.res.<span class="built_in">empty</span>()))</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    tri t = tr;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> dot1 = t.var1.<span class="built_in">find</span>(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(dot1==<span class="number">-1</span>)&#123;</span><br><span class="line">        dot1 = t.var1.<span class="built_in">size</span>();</span><br><span class="line">        t.var1.<span class="built_in">push_back</span>(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> dot2 = t.var2.<span class="built_in">find</span>(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(dot2==<span class="number">-1</span>)&#123;</span><br><span class="line">        dot2 = t.var2.<span class="built_in">size</span>();</span><br><span class="line">        t.var2.<span class="built_in">push_back</span>(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    string &amp;s = dot1&lt;dot2 ? t.var1 : t.var2;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="built_in">abs</span>(dot1-dot2); i++)&#123;</span><br><span class="line">        s.<span class="built_in">insert</span>(<span class="number">0</span>, <span class="string">&quot;0&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    string &amp;s2 = t.var1.<span class="built_in">size</span>()&lt;t.var2.<span class="built_in">size</span>() ? t.var1 : t.var2;</span><br><span class="line">    <span class="keyword">while</span>(t.var1.<span class="built_in">size</span>()!=t.var2.<span class="built_in">size</span>())&#123;</span><br><span class="line">        s2.<span class="built_in">push_back</span>(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    string::reverse_iterator i1 = t.var1.<span class="built_in">rbegin</span>();</span><br><span class="line">    string::reverse_iterator i2 = t.var2.<span class="built_in">rbegin</span>();</span><br><span class="line">    <span class="keyword">int</span> bit1=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> bit2=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> bitres = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> carry = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i1!=t.var1.<span class="built_in">rend</span>() &amp;&amp; i2!=t.var2.<span class="built_in">rend</span>())&#123;</span><br><span class="line">        <span class="keyword">if</span>(*i1==<span class="string">&#x27;.&#x27;</span>)&#123;</span><br><span class="line">            t.res.<span class="built_in">push_back</span>(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">            i1++;</span><br><span class="line">            i2++;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        bit1 = *i1<span class="number">-48</span>;</span><br><span class="line">        i1++;</span><br><span class="line">        </span><br><span class="line">        bit2 = *i2<span class="number">-48</span>;</span><br><span class="line">        i2++;</span><br><span class="line">        </span><br><span class="line">        bitres = (bit1+bit2+carry)%<span class="number">10</span>;</span><br><span class="line">        carry = (bit1+bit2+carry)/<span class="number">10</span>;</span><br><span class="line">        t.res.<span class="built_in">push_back</span>(bitres+<span class="number">48</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    t.res.<span class="built_in">push_back</span>(carry+<span class="number">48</span>);</span><br><span class="line">    <span class="built_in">rev</span>(t.res);</span><br><span class="line">    <span class="keyword">while</span>(t.res.<span class="built_in">front</span>()==<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">        t.res.<span class="built_in">erase</span>(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(t.res.<span class="built_in">front</span>()==<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        t.res.<span class="built_in">insert</span>(<span class="number">0</span>, <span class="string">&quot;0&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(t.res.<span class="built_in">back</span>()==<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        t.res.<span class="built_in">pop_back</span>();</span><br><span class="line">    tr.res = t.res;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(tri t)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len_i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> len_f = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(t.var1.<span class="built_in">find</span>(<span class="string">&#x27;.&#x27;</span>) == <span class="number">-1</span>)</span><br><span class="line">        len_i = t.var1.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">if</span>(t.var2.<span class="built_in">find</span>(<span class="string">&#x27;.&#x27;</span>) == <span class="number">-1</span>)</span><br><span class="line">        len_i = <span class="built_in">max</span>(len_i, (<span class="keyword">int</span>)t.var2.<span class="built_in">size</span>());</span><br><span class="line">    <span class="keyword">if</span>(t.res.<span class="built_in">find</span>(<span class="string">&#x27;.&#x27;</span>) == <span class="number">-1</span>)</span><br><span class="line">        len_i = <span class="built_in">max</span>(len_i, (<span class="keyword">int</span>)t.res.<span class="built_in">size</span>());</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        len_f = t.res.<span class="built_in">size</span>() - t.res.<span class="built_in">find</span>(<span class="string">&#x27;.&#x27;</span>)<span class="number">-1</span>;</span><br><span class="line">    len_i = <span class="built_in">max</span>(len_i , (<span class="keyword">int</span>)t.var1.<span class="built_in">find</span>(<span class="string">&#x27;.&#x27;</span>));</span><br><span class="line">    len_i = <span class="built_in">max</span>(len_i, (<span class="keyword">int</span>)t.var2.<span class="built_in">find</span>(<span class="string">&#x27;.&#x27;</span>));</span><br><span class="line">    len_i = <span class="built_in">max</span>(len_i, (<span class="keyword">int</span>)t.res.<span class="built_in">find</span>(<span class="string">&#x27;.&#x27;</span>));</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="built_in">fit</span>(t.var1, len_i, len_f);</span><br><span class="line">    <span class="built_in">fit</span>(t.var2, len_i, len_f);</span><br><span class="line">    <span class="built_in">fit</span>(t.res, len_i, len_f);</span><br><span class="line">    <span class="function">string <span class="title">div</span><span class="params">(t.res.size()+<span class="number">3</span>, <span class="string">&#x27;-&#x27;</span>)</span></span>;</span><br><span class="line">    <span class="function">string <span class="title">blank</span><span class="params">(<span class="string">&quot;   &quot;</span>)</span></span>;</span><br><span class="line">    cout&lt;&lt;blank&lt;&lt;t.var1&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;+  &quot;</span>&lt;&lt;t.var2&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;div&lt;&lt;endl;</span><br><span class="line">    string s = t.res;</span><br><span class="line">    cout&lt;&lt;blank&lt;&lt;s&lt;&lt;endl;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    tri t;</span><br><span class="line">    cin&gt;&gt;t.var1 &gt;&gt;t.var2;</span><br><span class="line">    <span class="built_in">calculate</span>(t);</span><br><span class="line">    <span class="built_in">print</span>(t);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> string target = <span class="string">&quot;fattyhappy&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> length = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">pair&lt;int, int&gt; check(int index, string str)&#123;</span><br><span class="line">    pair&lt;int, int&gt; ans(-1, -1);</span><br><span class="line">    string sub = str.<span class="built_in">substr</span>(index, length);</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;length; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(sub[i] != target[i])&#123;</span><br><span class="line">            count++;</span><br><span class="line">            v.<span class="built_in">push_back</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(count==<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;(<span class="number">2</span>+index, <span class="number">3</span>+index);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (count==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;str.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;=index &amp;&amp; i&lt;index+length)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(str[i] == target[v.<span class="built_in">front</span>()])&#123;</span><br><span class="line">                ans.first = <span class="built_in">min</span>(i, index+v.<span class="built_in">front</span>());</span><br><span class="line">                ans.second = <span class="built_in">max</span>(i, index+v.<span class="built_in">front</span>());</span><br><span class="line">                <span class="keyword">return</span> ans;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(count==<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="built_in">swap</span>(sub[v[<span class="number">0</span>]], sub[v[<span class="number">1</span>]]);</span><br><span class="line">        <span class="keyword">if</span>(sub == target)&#123;</span><br><span class="line">            ans.first = v[<span class="number">0</span>]+index;</span><br><span class="line">            ans.second = v[<span class="number">1</span>]+index;</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pair&lt;int, int&gt; findexchange(string str)&#123;</span><br><span class="line">    pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; ans;</span><br><span class="line">    ans.first = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> len = str.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i+length&lt;=len; i++)&#123;</span><br><span class="line">        ans = <span class="built_in">check</span>(i, str);</span><br><span class="line">        <span class="keyword">if</span>(ans.first!=<span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">v</span><span class="params">(t)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;t; i++)</span><br><span class="line">        cin&gt;&gt;v[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;t; i++)&#123;</span><br><span class="line">        pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; ans = <span class="built_in">findexchange</span>(v[i]);</span><br><span class="line">        <span class="keyword">if</span>(ans.first == <span class="number">-1</span>)</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;-1&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cout&lt;&lt;ans.first+<span class="number">1</span>&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;ans.second+<span class="number">1</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//    pair&lt;int, int&gt; ans = findexchange(&quot;fattyhappyasdasdas&quot;);</span></span><br><span class="line">    <span class="comment">//    cout&lt;&lt;ans.first+1&lt;&lt;&quot; &quot;&lt;&lt;ans.second+1&lt;&lt;endl;</span></span><br><span class="line">    <span class="comment">//    return 0;</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">direction</span>&#123;</span>LEFT=<span class="number">-1</span>, RIGHT=<span class="number">1</span>, EMPTY=<span class="number">0</span>&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">brid</span>&#123;</span></span><br><span class="line">    <span class="keyword">bool</span> valid=<span class="literal">false</span>;</span><br><span class="line">    direction d;</span><br><span class="line">    <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">    string str;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rev</span><span class="params">(string &amp;str)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = str.<span class="built_in">length</span>();</span><br><span class="line">    <span class="keyword">int</span> n = len<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=n)&#123;</span><br><span class="line">        <span class="comment">//Using the swap method to switch values at each index</span></span><br><span class="line">        <span class="built_in">swap</span>(str[i],str[n]);</span><br><span class="line">        n = n<span class="number">-1</span>;</span><br><span class="line">        i = i+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">check</span><span class="params">(brid&amp; b)</span></span>&#123;</span><br><span class="line">    string&amp; str = b.str;</span><br><span class="line">    stack&lt;<span class="keyword">char</span>&gt; s;</span><br><span class="line">  <span class="keyword">int</span> length = str.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;length; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s.<span class="built_in">empty</span>())</span><br><span class="line">            s.<span class="built_in">push</span>(str[i]);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(s.<span class="built_in">top</span>()==<span class="string">&#x27;(&#x27;</span> &amp;&amp; str[i]==<span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">                s.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                s.<span class="built_in">push</span>(str[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    str.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">while</span>(!s.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        str.<span class="built_in">push_back</span>(s.<span class="built_in">top</span>());</span><br><span class="line">        s.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">rev</span>(str);</span><br><span class="line">    </span><br><span class="line">    b.valid = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(b.str.<span class="built_in">find</span>(<span class="string">&#x27;(&#x27;</span>)!=<span class="number">-1</span>)&#123;</span><br><span class="line">        b.d = LEFT;</span><br><span class="line">        <span class="keyword">if</span>(b.str.<span class="built_in">find</span>(<span class="string">&#x27;)&#x27;</span>)!=<span class="number">-1</span>)&#123;</span><br><span class="line">            b.valid = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        b.d = RIGHT;</span><br><span class="line">    <span class="keyword">if</span>(b.str.<span class="built_in">empty</span>())</span><br><span class="line">        b.d = EMPTY;</span><br><span class="line">    b.count = b.str.<span class="built_in">size</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">v</span><span class="params">(t)</span></span>;</span><br><span class="line">    vector&lt;brid&gt; vnew;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;t; i++)&#123;</span><br><span class="line">        cin&gt;&gt;v[i];</span><br><span class="line">        brid b;</span><br><span class="line">        b.str = v[i];</span><br><span class="line">        <span class="built_in">check</span>(b);</span><br><span class="line">        <span class="keyword">if</span>(b.valid)</span><br><span class="line">            vnew.<span class="built_in">push_back</span>(b);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    t = vnew.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;t; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;t; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(vnew[i].valid &amp;&amp; vnew[j].valid&amp;&amp;(vnew[i].d + vnew[j].d) == <span class="number">0</span> &amp;&amp; vnew[i].count == vnew[j].count )</span><br><span class="line">            &#123;</span><br><span class="line">                vnew[i].valid = <span class="literal">false</span>;</span><br><span class="line">                vnew[j].valid = <span class="literal">false</span>;</span><br><span class="line">                ans++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="任务安排"><a href="#任务安排" class="headerlink" title="任务安排"></a>任务安排</h2><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5lpnu7a7mj21300koaco.jpg" alt="截屏2022-08-27 22.50.56"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 500000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">timelimit</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> s;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> e;</span><br><span class="line">&#125;timelimit;</span><br><span class="line">timelimit T[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span>* a,<span class="keyword">const</span> <span class="keyword">void</span>* b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (*(timelimit*)a).e-(*(timelimit*)b).e;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> n, ans = <span class="number">0</span>, i;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;(T[i].s));</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;(T[i].e));</span><br><span class="line">    &#125;</span><br><span class="line">    qsort (T, n, <span class="keyword">sizeof</span>(timelimit), &amp;compare);</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> end = <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=n<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(T[i].s&gt;=end)</span><br><span class="line">        &#123;</span><br><span class="line">            end = T[i].e;</span><br><span class="line">            ans=ans+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="刷房子"><a href="#刷房子" class="headerlink" title="刷房子"></a>刷房子</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">building_</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> h;</span><br><span class="line">    <span class="keyword">int</span> c;</span><br><span class="line">&#125;building;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">ans</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> amount;</span><br><span class="line">        cin&gt;&gt;amount;</span><br><span class="line">        <span class="function">vector&lt;building&gt; <span class="title">buildings</span><span class="params">(amount)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;amount; j++)</span><br><span class="line">            cin&gt;&gt;buildings[j].c;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;amount; j++)</span><br><span class="line">            cin&gt;&gt;buildings[j].h;</span><br><span class="line">        </span><br><span class="line">        stack&lt;building&gt; s;</span><br><span class="line">        vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">colors</span>(amount);</span><br><span class="line">        ans[i].<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">        colors[<span class="number">0</span>].<span class="built_in">push_back</span>(buildings[<span class="number">0</span>].c);</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;amount; j++)&#123;</span><br><span class="line">            <span class="keyword">int</span> tallest = j;</span><br><span class="line">            vector&lt;<span class="keyword">int</span>&gt; newcolor;</span><br><span class="line">            <span class="keyword">int</span> k;</span><br><span class="line">            <span class="keyword">for</span>(k=j<span class="number">-1</span>; k&gt;=<span class="number">0</span>; k--)&#123;</span><br><span class="line">                <span class="keyword">if</span>(buildings[k].h&lt;=buildings[tallest].h)&#123;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    colors[j] = colors[k];</span><br><span class="line">                    <span class="keyword">if</span>(<span class="built_in">find</span>(colors[j].<span class="built_in">begin</span>(), colors[j].<span class="built_in">end</span>(), buildings[j].c)==colors[j].<span class="built_in">end</span>())&#123;</span><br><span class="line">                        colors[j].<span class="built_in">push_back</span>(buildings[k].c);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(k==<span class="number">-1</span>)</span><br><span class="line">                colors[j].<span class="built_in">push_back</span>(buildings[j].c);</span><br><span class="line">            </span><br><span class="line">            ans[i].<span class="built_in">push_back</span>(colors[j].<span class="built_in">size</span>());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;ans.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;ans[i].<span class="built_in">size</span>()<span class="number">-1</span>; j++)&#123;</span><br><span class="line">            cout&lt;&lt;ans[i][j]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;ans[i].<span class="built_in">back</span>()&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//        for(int j=0; j&lt;amount; j++)</span></span><br><span class="line"><span class="comment">//            cout&lt;&lt;buildings[j].c&lt;&lt;&quot;?&quot;&lt;&lt;buildings[j].h&lt;&lt;endl;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h1 id="简单难度题目合集"><a href="#简单难度题目合集" class="headerlink" title="简单难度题目合集"></a>简单难度题目合集</h1><p>这里的题目难度比较小， 大多是模拟题，或者是很容易看出解法的题目，另外简单题目一般使用暴力法都是可以解决的。 这个时候只有看一下数据范围，思考下你的算法复杂度就行了。</p>
<p>当然也不排除很多 hard 题目也可以暴力模拟，大家平时多注意数据范围即可。</p>
<p>以下是我列举的经典题目（带 91 字样的表示出自 <strong>91 天学算法</strong>活动）：</p>
<h2 id="面试题-17-12-BiNode-👍"><a href="#面试题-17-12-BiNode-👍" class="headerlink" title="面试题 17.12. BiNode 👍"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/binode-lcci.md">面试题 17.12. BiNode</a> 👍</h2><h2 id="0001-两数之和"><a href="#0001-两数之和" class="headerlink" title="0001. 两数之和"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1.two-sum.md">0001. 两数之和</a></h2><p>unordered_map</p>
<h2 id="0020-有效的括号"><a href="#0020-有效的括号" class="headerlink" title="0020. 有效的括号"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/20.valid-parentheses.md">0020. 有效的括号</a></h2><h2 id="0021-合并两个有序链表"><a href="#0021-合并两个有序链表" class="headerlink" title="0021. 合并两个有序链表"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/21.merge-two-sorted-lists.md">0021. 合并两个有序链表</a></h2><p>递归?</p>
<h2 id="0026-删除排序数组中的重复项"><a href="#0026-删除排序数组中的重复项" class="headerlink" title="0026. 删除排序数组中的重复项"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/26.remove-duplicates-from-sorted-array.md">0026. 删除排序数组中的重复项</a></h2><p>使用快慢指针来记录遍历的坐标。</p>
<ul>
<li>开始时这两个指针都指向第一个数字</li>
<li>如果两个指针指的数字相同，则快指针向前走一步</li>
<li>如果不同，则两个指针都向前走一步</li>
<li>当快指针走完整个数组后，慢指针当前的坐标加 1 就是数组中不同数字的个数</li>
</ul>
<h2 id="0053-最大子序和"><a href="#0053-最大子序和" class="headerlink" title="0053. 最大子序和"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/53.maximum-sum-subarray-cn.md">0053. 最大子序和</a></h2><p>前缀和, 动态规划</p>
<h2 id="0066-加一-91"><a href="#0066-加一-91" class="headerlink" title="0066. 加一 91"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/66.plus-one.md">0066. 加一</a> 91</h2><h2 id="0088-合并两个有序数组"><a href="#0088-合并两个有序数组" class="headerlink" title="0088. 合并两个有序数组"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/88.merge-sorted-array.md">0088. 合并两个有序数组</a></h2><h2 id="0101-对称二叉树"><a href="#0101-对称二叉树" class="headerlink" title="0101. 对称二叉树"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/101.symmetric-tree.md">0101. 对称二叉树</a></h2><p>how to recursive</p>
<h2 id="0104-二叉树的最大深度"><a href="#0104-二叉树的最大深度" class="headerlink" title="0104. 二叉树的最大深度"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/104.maximum-depth-of-binary-tree.md">0104. 二叉树的最大深度</a></h2><p>try iteration</p>
<h2 id="0108-将有序数组转换为二叉搜索树"><a href="#0108-将有序数组转换为二叉搜索树" class="headerlink" title="0108. 将有序数组转换为二叉搜索树"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/108.convert-sorted-array-to-binary-search-tree.md">0108. 将有序数组转换为二叉搜索树</a></h2><p>二叉搜索树是一种节点值之间具有一定数量级次序的二叉树，对于树中每个节点：</p>
<ul>
<li>若其左子树存在，则其左子树中每个节点的值都不大于该节点值；</li>
<li>若其右子树存在，则其右子树中每个节点的值都不小于该节点值。</li>
</ul>
<h2 id="0121-买卖股票的最佳时机"><a href="#0121-买卖股票的最佳时机" class="headerlink" title="0121. 买卖股票的最佳时机"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/121.best-time-to-buy-and-sell-stock.md">0121. 买卖股票的最佳时机</a></h2><h2 id="0122-买卖股票的最佳时机-II"><a href="#0122-买卖股票的最佳时机-II" class="headerlink" title="0122. 买卖股票的最佳时机 II"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/122.best-time-to-buy-and-sell-stock-ii.md">0122. 买卖股票的最佳时机 II</a></h2><h2 id="0125-验证回文串"><a href="#0125-验证回文串" class="headerlink" title="0125. 验证回文串"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/125.valid-palindrome.md">0125. 验证回文串</a></h2><h2 id="0136-只出现一次的数字"><a href="#0136-只出现一次的数字" class="headerlink" title="0136. 只出现一次的数字"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/136.single-number.md">0136. 只出现一次的数字</a></h2><p>异或</p>
<h2 id="0155-最小栈-👍"><a href="#0155-最小栈-👍" class="headerlink" title="0155. 最小栈 👍"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/155.min-stack.md">0155. 最小栈</a> 👍</h2><p>???</p>
<h2 id="0160-相交链表-91"><a href="#0160-相交链表-91" class="headerlink" title="0160. 相交链表 91"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/160.Intersection-of-Two-Linked-Lists.md">0160. 相交链表</a> 91</h2><p>unordered_map count, insert</p>
<ul>
<li>例如使用 a, b 两个指针分别指向 A, B 这两条链表, 两个指针相同的速度向后移动,</li>
<li>当 a 到达链表的尾部时,重定位到链表 B 的头结点</li>
<li>当 b 到达链表的尾部时,重定位到链表 A 的头结点。</li>
<li>a, b 指针相遇的点为相交的起始节点，否则没有相交点</li>
</ul>
<h2 id="0167-两数之和-II-输入有序数组"><a href="#0167-两数之和-II-输入有序数组" class="headerlink" title="0167. 两数之和 II 输入有序数组"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/167.two-sum-ii-input-array-is-sorted.md">0167. 两数之和 II 输入有序数组</a></h2><h2 id="0169-多数元素"><a href="#0169-多数元素" class="headerlink" title="0169. 多数元素"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/169.majority-element.md">0169. 多数元素</a></h2><p>多数元素是指在数组中出现次数 <strong>大于</strong> <code>⌊ n/2 ⌋</code> 的元素。</p>
<p>投票算法</p>
<h2 id="0172-阶乘后的零"><a href="#0172-阶乘后的零" class="headerlink" title="0172. 阶乘后的零"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/172.factorial-trailing-zeroes.md">0172. 阶乘后的零</a></h2><p>trick count 5</p>
<h2 id="0190-颠倒二进制位"><a href="#0190-颠倒二进制位" class="headerlink" title="0190. 颠倒二进制位"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/190.reverse-bits.md">0190. 颠倒二进制位</a></h2><p>位运算</p>
<h2 id="0191-位-1-的个数"><a href="#0191-位-1-的个数" class="headerlink" title="0191. 位 1 的个数"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/191.number-of-1-bits.md">0191. 位 1 的个数</a></h2><p>就是<code>n &amp; (n - 1)</code> 可以<code>消除</code> n 最后的一个 1 的原理。</p>
<h2 id="0198-打家劫舍"><a href="#0198-打家劫舍" class="headerlink" title="0198. 打家劫舍"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/198.house-robber.md">0198. 打家劫舍</a></h2><h2 id="0203-移除链表元素"><a href="#0203-移除链表元素" class="headerlink" title="0203. 移除链表元素"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/203.remove-linked-list-elements.md">0203. 移除链表元素</a></h2><p>重要※</p>
<h2 id="0206-反转链表"><a href="#0206-反转链表" class="headerlink" title="0206. 反转链表"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/206.reverse-linked-list.md">0206. 反转链表</a></h2><p>⭐️</p>
<h2 id="0219-存在重复元素-II"><a href="#0219-存在重复元素-II" class="headerlink" title="0219. 存在重复元素 II"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/219.contains-duplicate-ii.md">0219. 存在重复元素 II</a></h2><p>hash</p>
<h2 id="0226-翻转二叉树"><a href="#0226-翻转二叉树" class="headerlink" title="0226. 翻转二叉树"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/226.invert-binary-tree.md">0226. 翻转二叉树</a></h2><p>迭代</p>
<h2 id="0232-用栈实现队列-👍-91"><a href="#0232-用栈实现队列-👍-91" class="headerlink" title="0232. 用栈实现队列 👍 91"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/232.implement-queue-using-stacks.md">0232. 用栈实现队列</a> 👍 91</h2><h2 id="0263-丑数"><a href="#0263-丑数" class="headerlink" title="0263. 丑数"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/263.ugly-number.md">0263. 丑数</a></h2><p>use for and function call</p>
<h2 id="0283-移动零"><a href="#0283-移动零" class="headerlink" title="0283. 移动零"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/283.move-zeroes.md">0283. 移动零</a></h2><h2 id="0342-4-的幂-👍"><a href="#0342-4-的幂-👍" class="headerlink" title="0342. 4 的幂 👍"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/342.power-of-four.md">0342. 4 的幂</a> 👍</h2><h2 id="0349-两个数组的交集"><a href="#0349-两个数组的交集" class="headerlink" title="0349. 两个数组的交集"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/349.intersection-of-two-arrays.md">0349. 两个数组的交集</a></h2><h2 id="0371-两整数之和"><a href="#0371-两整数之和" class="headerlink" title="0371. 两整数之和"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/371.sum-of-two-integers.md">0371. 两整数之和</a></h2><h2 id="401-二进制手表"><a href="#401-二进制手表" class="headerlink" title="401. 二进制手表"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/401.binary-watch.md">401. 二进制手表</a></h2><h2 id="0437-路径总和-III"><a href="#0437-路径总和-III" class="headerlink" title="0437. 路径总和 III"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/437.path-sum-iii.md">0437. 路径总和 III</a></h2><p>!</p>
<h2 id="0455-分发饼干"><a href="#0455-分发饼干" class="headerlink" title="0455. 分发饼干"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/455.AssignCookies.md">0455. 分发饼干</a></h2><h2 id="0504-七进制数"><a href="#0504-七进制数" class="headerlink" title="0504. 七进制数"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/504.base-7.md">0504. 七进制数</a></h2><h2 id="0575-分糖果"><a href="#0575-分糖果" class="headerlink" title="0575. 分糖果"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/575.distribute-candies.md">0575. 分糖果</a></h2><h2 id="0665-非递减数列"><a href="#0665-非递减数列" class="headerlink" title="0665. 非递减数列"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/665.non-decreasing-array.md">0665. 非递减数列</a></h2><h2 id="821-字符的最短距离-91"><a href="#821-字符的最短距离-91" class="headerlink" title="821. 字符的最短距离 91"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/821.shortest-distance-to-a-character.md">821. 字符的最短距离</a> 91</h2><h2 id="0874-模拟行走机器人"><a href="#0874-模拟行走机器人" class="headerlink" title="0874. 模拟行走机器人"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/874.walking-robot-simulation.md">0874. 模拟行走机器人</a></h2><h2 id="1128-等价多米诺骨牌对的数量"><a href="#1128-等价多米诺骨牌对的数量" class="headerlink" title="1128. 等价多米诺骨牌对的数量"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1128.number-of-equivalent-domino-pairs.md">1128. 等价多米诺骨牌对的数量</a></h2><h2 id="1260-二维网格迁移"><a href="#1260-二维网格迁移" class="headerlink" title="1260. 二维网格迁移"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1260.shift-2d-grid.md">1260. 二维网格迁移</a></h2><h2 id="1332-删除回文子序列"><a href="#1332-删除回文子序列" class="headerlink" title="1332. 删除回文子序列"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1332.remove-palindromic-subsequences.md">1332. 删除回文子序列</a></h2><h1 id="中等难度题目合集"><a href="#中等难度题目合集" class="headerlink" title="中等难度题目合集"></a>中等难度题目合集</h1><p>中等题目是力扣比例最大的部分，因此这部分我的题解也是最多的。 大家不要太过追求难题，先把中等难度题目做熟了再说。</p>
<p>这部分的题目要不需要我们挖掘题目的内含信息， 将其抽象成简单题目。 要么是一些写起来比较麻烦的题目， 一些人编码能力不行就挂了。因此大家一定要自己做， 即使看了题解”会了“，也要自己码一遍。自己不亲自写一遍，里面的细节永远不知道。</p>
<p>以下是我列举的经典题目（带 91 字样的表示出自 <strong>91 天学算法</strong>活动）：</p>
<h2 id="面试题-17-09-第-k-个数"><a href="#面试题-17-09-第-k-个数" class="headerlink" title="面试题 17.09. 第 k 个数"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/get-kth-magic-number-lcci.md">面试题 17.09. 第 k 个数</a></h2><h2 id="面试题-17-23-最大黑方阵"><a href="#面试题-17-23-最大黑方阵" class="headerlink" title="面试题 17.23. 最大黑方阵"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/max-black-square-lcci.md">面试题 17.23. 最大黑方阵</a></h2><h2 id="面试题-16-16-部分排序"><a href="#面试题-16-16-部分排序" class="headerlink" title="面试题 16.16. 部分排序"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/sub-sort-lcci.md">面试题 16.16. 部分排序</a></h2><h2 id="Increasing-Digits-👍"><a href="#Increasing-Digits-👍" class="headerlink" title="Increasing Digits 👍"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/Increasing-Digits.md">Increasing Digits</a> 👍</h2><h2 id="Longest-Contiguously-Strictly-Increasing-Sublist-After-Deletion-👍"><a href="#Longest-Contiguously-Strictly-Increasing-Sublist-After-Deletion-👍" class="headerlink" title="Longest Contiguously Strictly Increasing Sublist After Deletion 👍"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/Longest-Contiguously-Strictly-Increasing-Sublist-After-Deletion.md">Longest Contiguously Strictly Increasing Sublist After Deletion</a> 👍</h2><h2 id="Consecutive-Wins"><a href="#Consecutive-Wins" class="headerlink" title="Consecutive Wins"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/consecutive-wins.md">Consecutive Wins</a></h2><h2 id="Sort-String-by-Flipping"><a href="#Sort-String-by-Flipping" class="headerlink" title="Sort-String-by-Flipping"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/Sort-String-by-Flipping.md">Sort-String-by-Flipping</a></h2><h2 id="Number-of-Substrings-with-Single-Character-Difference"><a href="#Number-of-Substrings-with-Single-Character-Difference" class="headerlink" title="Number of Substrings with Single Character Difference"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/Number-of-Substrings-with-Single-Character-Difference.md">Number of Substrings with Single Character Difference</a></h2><h2 id="Bus-Fare-👍"><a href="#Bus-Fare-👍" class="headerlink" title="Bus Fare 👍"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/Bus-Fare.md">Bus Fare</a> 👍</h2><h2 id="Minimum-Dropping-Path-Sum"><a href="#Minimum-Dropping-Path-Sum" class="headerlink" title="Minimum Dropping Path Sum"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/Minimum-Dropping-Path-Sum.md">Minimum Dropping Path Sum</a></h2><h2 id="Longest-Matrix-Path-Length"><a href="#Longest-Matrix-Path-Length" class="headerlink" title="Longest-Matrix-Path-Length"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/Longest-Matrix-Path-Length.md">Longest-Matrix-Path-Length</a></h2><h2 id="Every-Sublist-Min-Sum"><a href="#Every-Sublist-Min-Sum" class="headerlink" title="Every Sublist Min Sum"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/Every-Sublist-Min-Sum.md">Every Sublist Min Sum</a></h2><h2 id="Maximize-the-Number-of-Equivalent-Pairs-After-Swaps"><a href="#Maximize-the-Number-of-Equivalent-Pairs-After-Swaps" class="headerlink" title="Maximize the Number of Equivalent Pairs After Swaps"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/Maximize-the-Number-of-Equivalent-Pairs-After-Swaps.md">Maximize the Number of Equivalent Pairs After Swaps</a></h2><h2 id="0002-两数相加"><a href="#0002-两数相加" class="headerlink" title="0002. 两数相加"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/2.add-two-numbers.md">0002. 两数相加</a></h2><h2 id="0003-无重复字符的最长子串"><a href="#0003-无重复字符的最长子串" class="headerlink" title="0003. 无重复字符的最长子串"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/3.longest-substring-without-repeating-characters.md">0003. 无重复字符的最长子串</a></h2><h2 id="0005-最长回文子串"><a href="#0005-最长回文子串" class="headerlink" title="0005. 最长回文子串"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/5.longest-palindromic-substring.md">0005. 最长回文子串</a></h2><h2 id="0011-盛最多水的容器"><a href="#0011-盛最多水的容器" class="headerlink" title="0011. 盛最多水的容器"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/11.container-with-most-water.md">0011. 盛最多水的容器</a></h2><h2 id="0015-三数之和"><a href="#0015-三数之和" class="headerlink" title="0015. 三数之和"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/15.3sum.md">0015. 三数之和</a></h2><h2 id="0017-电话号码的字母组合"><a href="#0017-电话号码的字母组合" class="headerlink" title="0017. 电话号码的字母组合"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/17.Letter-Combinations-of-a-Phone-Number.md">0017. 电话号码的字母组合</a></h2><h2 id="0019-删除链表的倒数第-N-个节点"><a href="#0019-删除链表的倒数第-N-个节点" class="headerlink" title="0019. 删除链表的倒数第 N 个节点"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/19.removeNthNodeFromEndofList.md">0019. 删除链表的倒数第 N 个节点</a></h2><h2 id="0022-括号生成"><a href="#0022-括号生成" class="headerlink" title="0022. 括号生成"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/22.generate-parentheses.md">0022. 括号生成</a></h2><h2 id="0024-两两交换链表中的节点"><a href="#0024-两两交换链表中的节点" class="headerlink" title="0024. 两两交换链表中的节点"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/24.swapNodesInPairs.md">0024. 两两交换链表中的节点</a></h2><h2 id="0029-两数相除"><a href="#0029-两数相除" class="headerlink" title="0029. 两数相除"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/29.divide-two-integers.md">0029. 两数相除</a></h2><h2 id="0031-下一个排列"><a href="#0031-下一个排列" class="headerlink" title="0031. 下一个排列"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/31.next-permutation.md">0031. 下一个排列</a></h2><h2 id="0033-搜索旋转排序数组"><a href="#0033-搜索旋转排序数组" class="headerlink" title="0033. 搜索旋转排序数组"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/33.search-in-rotated-sorted-array.md">0033. 搜索旋转排序数组</a></h2><h2 id="0039-组合总和"><a href="#0039-组合总和" class="headerlink" title="0039. 组合总和"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/39.combination-sum.md">0039. 组合总和</a></h2><h2 id="0040-组合总和-II"><a href="#0040-组合总和-II" class="headerlink" title="0040. 组合总和 II"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/40.combination-sum-ii.md">0040. 组合总和 II</a></h2><h2 id="0046-全排列"><a href="#0046-全排列" class="headerlink" title="0046. 全排列"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/46.permutations.md">0046. 全排列</a></h2><h2 id="0047-全排列-II"><a href="#0047-全排列-II" class="headerlink" title="0047. 全排列 II"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/47.permutations-ii.md">0047. 全排列 II</a></h2><h2 id="0048-旋转图像"><a href="#0048-旋转图像" class="headerlink" title="0048. 旋转图像"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/48.rotate-image.md">0048. 旋转图像</a></h2><h2 id="0049-字母异位词分组"><a href="#0049-字母异位词分组" class="headerlink" title="0049. 字母异位词分组"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/49.group-anagrams.md">0049. 字母异位词分组</a></h2><h2 id="0050-Pow-x-n-👍"><a href="#0050-Pow-x-n-👍" class="headerlink" title="0050. Pow(x, n) 👍"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/50.pow-x-n.md">0050. Pow(x, n)</a> 👍</h2><h2 id="0055-跳跃游戏"><a href="#0055-跳跃游戏" class="headerlink" title="0055. 跳跃游戏"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/55.jump-game.md">0055. 跳跃游戏</a></h2><h2 id="0056-合并区间"><a href="#0056-合并区间" class="headerlink" title="0056. 合并区间"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/56.merge-intervals.md">0056. 合并区间</a></h2><h2 id="0060-第-k-个排列-👍"><a href="#0060-第-k-个排列-👍" class="headerlink" title="0060. 第 k 个排列 👍"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/60.permutation-sequence.md">0060. 第 k 个排列</a> 👍</h2><h2 id="0061-旋转链表-91"><a href="#0061-旋转链表-91" class="headerlink" title="0061. 旋转链表 91"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/61.Rotate-List.md">0061. 旋转链表</a> 91</h2><h2 id="0062-不同路径"><a href="#0062-不同路径" class="headerlink" title="0062. 不同路径"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/62.unique-paths.md">0062. 不同路径</a></h2><h2 id="0073-矩阵置零"><a href="#0073-矩阵置零" class="headerlink" title="0073. 矩阵置零"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/73.set-matrix-zeroes.md">0073. 矩阵置零</a></h2><h2 id="0075-颜色分类-👍"><a href="#0075-颜色分类-👍" class="headerlink" title="0075. 颜色分类 👍"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/75.sort-colors.md">0075. 颜色分类</a> 👍</h2><h2 id="0078-子集"><a href="#0078-子集" class="headerlink" title="0078. 子集"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/78.subsets.md">0078. 子集</a></h2><h2 id="0079-单词搜索"><a href="#0079-单词搜索" class="headerlink" title="0079. 单词搜索"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/79.word-search.md">0079. 单词搜索</a></h2><h2 id="0080-删除排序数组中的重复项-II"><a href="#0080-删除排序数组中的重复项-II" class="headerlink" title="0080. 删除排序数组中的重复项 II"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/80.remove-duplicates-from-sorted-array-ii.md">0080. 删除排序数组中的重复项 II</a></h2><h2 id="0086-分隔链表"><a href="#0086-分隔链表" class="headerlink" title="0086. 分隔链表"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/86.partition-list.md">0086. 分隔链表</a></h2><h2 id="0090-子集-II"><a href="#0090-子集-II" class="headerlink" title="0090. 子集 II"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/90.subsets-ii.md">0090. 子集 II</a></h2><h2 id="0091-解码方法"><a href="#0091-解码方法" class="headerlink" title="0091. 解码方法"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/91.decode-ways.md">0091. 解码方法</a></h2><h2 id="0092-反转链表-II"><a href="#0092-反转链表-II" class="headerlink" title="0092. 反转链表 II"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/92.reverse-linked-list-ii.md">0092. 反转链表 II</a></h2><h2 id="0094-二叉树的中序遍历-👍"><a href="#0094-二叉树的中序遍历-👍" class="headerlink" title="0094. 二叉树的中序遍历 👍"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/94.binary-tree-inorder-traversal.md">0094. 二叉树的中序遍历</a> 👍</h2><h2 id="0095-不同的二叉搜索树-II"><a href="#0095-不同的二叉搜索树-II" class="headerlink" title="0095. 不同的二叉搜索树 II"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/95.unique-binary-search-trees-ii.md">0095. 不同的二叉搜索树 II</a></h2><h2 id="0096-不同的二叉搜索树"><a href="#0096-不同的二叉搜索树" class="headerlink" title="0096. 不同的二叉搜索树"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/96.unique-binary-search-trees.md">0096. 不同的二叉搜索树</a></h2><h2 id="0098-验证二叉搜索树"><a href="#0098-验证二叉搜索树" class="headerlink" title="0098. 验证二叉搜索树"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/98.validate-binary-search-tree.md">0098. 验证二叉搜索树</a></h2><h2 id="0102-二叉树的层序遍历"><a href="#0102-二叉树的层序遍历" class="headerlink" title="0102. 二叉树的层序遍历"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/102.binary-tree-level-order-traversal.md">0102. 二叉树的层序遍历</a></h2><h2 id="0103-二叉树的锯齿形层次遍历"><a href="#0103-二叉树的锯齿形层次遍历" class="headerlink" title="0103. 二叉树的锯齿形层次遍历"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/103.binary-tree-zigzag-level-order-traversal.md">0103. 二叉树的锯齿形层次遍历</a></h2><h2 id="0113-路径总和-II"><a href="#0113-路径总和-II" class="headerlink" title="0113. 路径总和 II"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/113.path-sum-ii.md">0113. 路径总和 II</a></h2><h2 id="0129-求根到叶子节点数字之和-👍"><a href="#0129-求根到叶子节点数字之和-👍" class="headerlink" title="0129. 求根到叶子节点数字之和 👍"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/129.sum-root-to-leaf-numbers.md">0129. 求根到叶子节点数字之和</a> 👍</h2><h2 id="0130-被围绕的区域"><a href="#0130-被围绕的区域" class="headerlink" title="0130. 被围绕的区域"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/130.surrounded-regions.md">0130. 被围绕的区域</a></h2><h2 id="0131-分割回文串"><a href="#0131-分割回文串" class="headerlink" title="0131. 分割回文串"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/131.palindrome-partitioning.md">0131. 分割回文串</a></h2><h2 id="0139-单词拆分"><a href="#0139-单词拆分" class="headerlink" title="0139. 单词拆分"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/139.word-break.md">0139. 单词拆分</a></h2><h2 id="0144-二叉树的前序遍历"><a href="#0144-二叉树的前序遍历" class="headerlink" title="0144. 二叉树的前序遍历"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/144.binary-tree-preorder-traversal.md">0144. 二叉树的前序遍历</a></h2><h2 id="0147-对链表进行插入排序"><a href="#0147-对链表进行插入排序" class="headerlink" title="0147. 对链表进行插入排序"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/147.insertion-sort-list.md">0147. 对链表进行插入排序</a></h2><h2 id="0150-逆波兰表达式求值"><a href="#0150-逆波兰表达式求值" class="headerlink" title="0150. 逆波兰表达式求值"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/150.evaluate-reverse-polish-notation.md">0150. 逆波兰表达式求值</a></h2><h2 id="0152-乘积最大子数组"><a href="#0152-乘积最大子数组" class="headerlink" title="0152. 乘积最大子数组"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/152.maximum-product-subarray.md">0152. 乘积最大子数组</a></h2><h2 id="0153-寻找旋转排序数组中的最小值"><a href="#0153-寻找旋转排序数组中的最小值" class="headerlink" title="0153. 寻找旋转排序数组中的最小值"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/153.find-minimum-in-rotated-sorted-array.md">0153. 寻找旋转排序数组中的最小值</a></h2><h2 id="0199-二叉树的右视图-👍"><a href="#0199-二叉树的右视图-👍" class="headerlink" title="0199. 二叉树的右视图 👍"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/199.binary-tree-right-side-view.md">0199. 二叉树的右视图</a> 👍</h2><h2 id="0200-岛屿数量-👍"><a href="#0200-岛屿数量-👍" class="headerlink" title="0200. 岛屿数量 👍"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/200.number-of-islands.md">0200. 岛屿数量</a> 👍</h2><h2 id="0201-数字范围按位与"><a href="#0201-数字范围按位与" class="headerlink" title="0201. 数字范围按位与"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/201.bitwise-and-of-numbers-range.md">0201. 数字范围按位与</a></h2><h2 id="0208-实现-Trie-前缀树"><a href="#0208-实现-Trie-前缀树" class="headerlink" title="0208. 实现 Trie (前缀树)"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/208.implement-trie-prefix-tree.md">0208. 实现 Trie (前缀树)</a></h2><h2 id="0209-长度最小的子数组"><a href="#0209-长度最小的子数组" class="headerlink" title="0209. 长度最小的子数组"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/209.minimum-size-subarray-sum.md">0209. 长度最小的子数组</a></h2><h2 id="0211-添加与搜索单词-数据结构设计"><a href="#0211-添加与搜索单词-数据结构设计" class="headerlink" title="0211. 添加与搜索单词 ## 数据结构设计"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/211.add-and-search-word-data-structure-design.md">0211. 添加与搜索单词 ## 数据结构设计</a></h2><h2 id="0215-数组中的第-K-个最大元素"><a href="#0215-数组中的第-K-个最大元素" class="headerlink" title="0215. 数组中的第 K 个最大元素"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/215.kth-largest-element-in-an-array.md">0215. 数组中的第 K 个最大元素</a></h2><h2 id="0220-存在重复元素-III"><a href="#0220-存在重复元素-III" class="headerlink" title="0220. 存在重复元素 III"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/220.contains-duplicate-iii.md">0220. 存在重复元素 III</a></h2><h2 id="0221-最大正方形"><a href="#0221-最大正方形" class="headerlink" title="0221. 最大正方形"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/221.maximal-square.md">0221. 最大正方形</a></h2><h2 id="0227-基本计算器-II"><a href="#0227-基本计算器-II" class="headerlink" title="0227. 基本计算器 II"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/227.basic-calculator-ii.md">0227. 基本计算器 II</a></h2><h2 id="0229-求众数-II"><a href="#0229-求众数-II" class="headerlink" title="0229. 求众数 II"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/229.majority-element-ii.md">0229. 求众数 II</a></h2><h2 id="0230-二叉搜索树中第-K-小的元素"><a href="#0230-二叉搜索树中第-K-小的元素" class="headerlink" title="0230. 二叉搜索树中第 K 小的元素"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/230.kth-smallest-element-in-a-bst.md">0230. 二叉搜索树中第 K 小的元素</a></h2><h2 id="0236-二叉树的最近公共祖先"><a href="#0236-二叉树的最近公共祖先" class="headerlink" title="0236. 二叉树的最近公共祖先"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/236.lowest-common-ancestor-of-a-binary-tree.md">0236. 二叉树的最近公共祖先</a></h2><h2 id="0238-除自身以外数组的乘积"><a href="#0238-除自身以外数组的乘积" class="headerlink" title="0238. 除自身以外数组的乘积"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/238.product-of-array-except-self.md">0238. 除自身以外数组的乘积</a></h2><h2 id="0240-搜索二维矩阵-II"><a href="#0240-搜索二维矩阵-II" class="headerlink" title="0240. 搜索二维矩阵 II"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/240.search-a-2-d-matrix-ii.md">0240. 搜索二维矩阵 II</a></h2><h2 id="0279-完全平方数"><a href="#0279-完全平方数" class="headerlink" title="0279. 完全平方数"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/279.perfect-squares.md">0279. 完全平方数</a></h2><h2 id="0309-最佳买卖股票时机含冷冻期"><a href="#0309-最佳买卖股票时机含冷冻期" class="headerlink" title="0309. 最佳买卖股票时机含冷冻期"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/309.best-time-to-buy-and-sell-stock-with-cooldown.md">0309. 最佳买卖股票时机含冷冻期</a></h2><h2 id="0322-零钱兑换-👍"><a href="#0322-零钱兑换-👍" class="headerlink" title="0322. 零钱兑换 👍"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/322.coin-change.md">0322. 零钱兑换</a> 👍</h2><h2 id="0328-奇偶链表"><a href="#0328-奇偶链表" class="headerlink" title="0328. 奇偶链表"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/328.odd-even-linked-list.md">0328. 奇偶链表</a></h2><h2 id="0331-验证二叉树的前序序列化"><a href="#0331-验证二叉树的前序序列化" class="headerlink" title="0331. 验证二叉树的前序序列化"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/328.odd-even-linked-list.md">0331. 验证二叉树的前序序列化</a></h2><h2 id="0334-递增的三元子序列"><a href="#0334-递增的三元子序列" class="headerlink" title="0334. 递增的三元子序列"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/334.increasing-triplet-subsequence.md">0334. 递增的三元子序列</a></h2><h2 id="0337-打家劫舍-III"><a href="#0337-打家劫舍-III" class="headerlink" title="0337. 打家劫舍 III"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/337.house-robber-iii.md">0337. 打家劫舍 III</a></h2><h2 id="0343-整数拆分"><a href="#0343-整数拆分" class="headerlink" title="0343. 整数拆分"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/343.integer-break.md">0343. 整数拆分</a></h2><h2 id="0365-水壶问题"><a href="#0365-水壶问题" class="headerlink" title="0365. 水壶问题"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/365.water-and-jug-problem.md">0365. 水壶问题</a></h2><h2 id="0378-有序矩阵中第-K-小的元素"><a href="#0378-有序矩阵中第-K-小的元素" class="headerlink" title="0378. 有序矩阵中第 K 小的元素"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/378.kth-smallest-element-in-a-sorted-matrix.md">0378. 有序矩阵中第 K 小的元素</a></h2><h2 id="0380-常数时间插入、删除和获取随机元素"><a href="#0380-常数时间插入、删除和获取随机元素" class="headerlink" title="0380. 常数时间插入、删除和获取随机元素"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/380.insert-delete-getrandom-o1.md">0380. 常数时间插入、删除和获取随机元素</a></h2><h2 id="0385-迷你语法分析器"><a href="#0385-迷你语法分析器" class="headerlink" title="0385. 迷你语法分析器"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/385.mini-parser.md">0385. 迷你语法分析器</a></h2><h2 id="0394-字符串解码-91"><a href="#0394-字符串解码-91" class="headerlink" title="0394. 字符串解码 91"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/394.decode-string.md">0394. 字符串解码</a> 91</h2><h2 id="0416-分割等和子集"><a href="#0416-分割等和子集" class="headerlink" title="0416. 分割等和子集"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/416.partition-equal-subset-sum.md">0416. 分割等和子集</a></h2><h2 id="0424-替换后的最长重复字符"><a href="#0424-替换后的最长重复字符" class="headerlink" title="0424. 替换后的最长重复字符"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/424.longest-repeating-character-replacement.md">0424. 替换后的最长重复字符</a></h2><h2 id="0438-找到字符串中所有字母异位词"><a href="#0438-找到字符串中所有字母异位词" class="headerlink" title="0438. 找到字符串中所有字母异位词"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/438.find-all-anagrams-in-a-string.md">0438. 找到字符串中所有字母异位词</a></h2><h2 id="0445-两数相加-II"><a href="#0445-两数相加-II" class="headerlink" title="0445. 两数相加 II"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/445.add-two-numbers-ii.md">0445. 两数相加 II</a></h2><h2 id="0454-四数相加-II"><a href="#0454-四数相加-II" class="headerlink" title="0454. 四数相加 II"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/454.4-sum-ii.md">0454. 四数相加 II</a></h2><h2 id="0456-132-模式"><a href="#0456-132-模式" class="headerlink" title="0456. 132 模式"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/456.132-pattern.md">0456. 132 模式</a></h2><h2 id="0457-457-环形数组是否存在循环"><a href="#0457-457-环形数组是否存在循环" class="headerlink" title="0457.457. 环形数组是否存在循环"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/457.circular-array-loop.md">0457.457. 环形数组是否存在循环</a></h2><h2 id="0464-我能赢么"><a href="#0464-我能赢么" class="headerlink" title="0464. 我能赢么"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/464.can-i-win.md">0464. 我能赢么</a></h2><h2 id="0470-用-Rand7-实现-Rand10"><a href="#0470-用-Rand7-实现-Rand10" class="headerlink" title="0470. 用 Rand7() 实现 Rand10"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/470.implement-rand10-using-rand7.md">0470. 用 Rand7() 实现 Rand10</a></h2><h2 id="0473-火柴拼正方形-👍"><a href="#0473-火柴拼正方形-👍" class="headerlink" title="0473. 火柴拼正方形 👍"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/473.matchsticks-to-square.md">0473. 火柴拼正方形</a> 👍</h2><h2 id="0494-目标和"><a href="#0494-目标和" class="headerlink" title="0494. 目标和"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/494.target-sum.md">0494. 目标和</a></h2><h2 id="0516-最长回文子序列"><a href="#0516-最长回文子序列" class="headerlink" title="0516. 最长回文子序列"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/516.longest-palindromic-subsequence.md">0516. 最长回文子序列</a></h2><h2 id="0513-找树左下角的值-91"><a href="#0513-找树左下角的值-91" class="headerlink" title="0513. 找树左下角的值 91"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/513.find-bottom-left-tree-value.md">0513. 找树左下角的值</a> 91</h2><h2 id="0518-零钱兑换-II"><a href="#0518-零钱兑换-II" class="headerlink" title="0518. 零钱兑换 II"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/518.coin-change-2.md">0518. 零钱兑换 II</a></h2><h2 id="0525-连续数组"><a href="#0525-连续数组" class="headerlink" title="0525. 连续数组"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/525.contiguous-array.md">0525. 连续数组</a></h2><h2 id="0547-朋友圈"><a href="#0547-朋友圈" class="headerlink" title="0547. 朋友圈"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/547.friend-circles.md">0547. 朋友圈</a></h2><h2 id="0560-和为-K-的子数组"><a href="#0560-和为-K-的子数组" class="headerlink" title="0560. 和为 K 的子数组"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/560.subarray-sum-equals-k.md">0560. 和为 K 的子数组</a></h2><h2 id="0609-在系统中查找重复文件"><a href="#0609-在系统中查找重复文件" class="headerlink" title="0609. 在系统中查找重复文件"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/609.find-duplicate-file-in-system.md">0609. 在系统中查找重复文件</a></h2><h2 id="0611-有效三角形的个数-👍"><a href="#0611-有效三角形的个数-👍" class="headerlink" title="0611. 有效三角形的个数 👍"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/611.valid-triangle-number.md">0611. 有效三角形的个数</a> 👍</h2><h2 id="0673-最长递增子序列的个数"><a href="#0673-最长递增子序列的个数" class="headerlink" title="0673. 最长递增子序列的个数"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/673.number-of-longest-increasing-subsequence.md">0673. 最长递增子序列的个数</a></h2><h2 id="0686-重复叠加字符串匹配"><a href="#0686-重复叠加字符串匹配" class="headerlink" title="0686. 重复叠加字符串匹配"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/686.repeated-string-match.md">0686. 重复叠加字符串匹配</a></h2><h2 id="0718-最长重复子数组"><a href="#0718-最长重复子数组" class="headerlink" title="0718. 最长重复子数组"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/718.maximum-length-of-repeated-subarray.md">0718. 最长重复子数组</a></h2><h2 id="0714-买卖股票的最佳时机含手续费"><a href="#0714-买卖股票的最佳时机含手续费" class="headerlink" title="0714. 买卖股票的最佳时机含手续费"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/714.best-time-to-buy-and-sell-stock-with-transaction-fee.md">0714. 买卖股票的最佳时机含手续费</a></h2><h2 id="0735-行星碰撞-👍"><a href="#0735-行星碰撞-👍" class="headerlink" title="0735. 行星碰撞 👍"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/735.asteroid-collision.md">0735. 行星碰撞</a> 👍</h2><h2 id="0754-到达终点数字"><a href="#0754-到达终点数字" class="headerlink" title="0754. 到达终点数字"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/754.reach-a-number.md">0754. 到达终点数字</a></h2><h2 id="0785-判断二分图"><a href="#0785-判断二分图" class="headerlink" title="0785. 判断二分图"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/785.is-graph-bipartite.md">0785. 判断二分图</a></h2><h2 id="0790-多米诺和托米诺平铺"><a href="#0790-多米诺和托米诺平铺" class="headerlink" title="0790. 多米诺和托米诺平铺"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/790.domino-and-tromino-tiling.md">0790. 多米诺和托米诺平铺</a></h2><h2 id="0799-香槟塔"><a href="#0799-香槟塔" class="headerlink" title="0799. 香槟塔"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/799.champagne-tower.md">0799. 香槟塔</a></h2><h2 id="0801-使序列递增的最小交换次数"><a href="#0801-使序列递增的最小交换次数" class="headerlink" title="0801. 使序列递增的最小交换次数"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/801.minimum-swaps-to-make-sequences-increasing.md">0801. 使序列递增的最小交换次数</a></h2><h2 id="0816-模糊坐标"><a href="#0816-模糊坐标" class="headerlink" title="0816. 模糊坐标"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/816.ambiguous-coordinates.md">0816. 模糊坐标</a></h2><h2 id="0820-单词的压缩编码"><a href="#0820-单词的压缩编码" class="headerlink" title="0820. 单词的压缩编码"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/820.short-encoding-of-words.md">0820. 单词的压缩编码</a></h2><h2 id="0838-推多米诺"><a href="#0838-推多米诺" class="headerlink" title="0838. 推多米诺"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/838.push-dominoes.md">0838. 推多米诺</a></h2><h2 id="0873-最长的斐波那契子序列的长度"><a href="#0873-最长的斐波那契子序列的长度" class="headerlink" title="0873. 最长的斐波那契子序列的长度"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/873.length-of-longest-fibonacci-subsequence.md">0873. 最长的斐波那契子序列的长度</a></h2><h2 id="0875-爱吃香蕉的珂珂"><a href="#0875-爱吃香蕉的珂珂" class="headerlink" title="0875. 爱吃香蕉的珂珂"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/875.koko-eating-bananas.md">0875. 爱吃香蕉的珂珂</a></h2><h2 id="0877-石子游戏"><a href="#0877-石子游戏" class="headerlink" title="0877. 石子游戏"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/877.stone-game.md">0877. 石子游戏</a></h2><h2 id="0886-可能的二分法"><a href="#0886-可能的二分法" class="headerlink" title="0886. 可能的二分法"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/886.possible-bipartition.md">0886. 可能的二分法</a></h2><h2 id="0898-子数组按位或操作"><a href="#0898-子数组按位或操作" class="headerlink" title="0898. 子数组按位或操作"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/898.bitwise-ors-of-subarrays.md">0898. 子数组按位或操作</a></h2><h2 id="0900-RLE-迭代器"><a href="#0900-RLE-迭代器" class="headerlink" title="0900. RLE 迭代器"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/900.rle-iterator.md">0900. RLE 迭代器</a></h2><h2 id="0911-在线选举"><a href="#0911-在线选举" class="headerlink" title="0911. 在线选举"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/911.online-election.md">0911. 在线选举</a></h2><h2 id="0912-排序数组"><a href="#0912-排序数组" class="headerlink" title="0912. 排序数组"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/912.sort-an-array.md">0912. 排序数组</a></h2><h2 id="0932-漂亮数组"><a href="#0932-漂亮数组" class="headerlink" title="0932. 漂亮数组"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/932.beautiful-array.md">0932. 漂亮数组</a></h2><h2 id="0935-骑士拨号器"><a href="#0935-骑士拨号器" class="headerlink" title="0935. 骑士拨号器"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/935.knight-dialer.md">0935. 骑士拨号器</a></h2><h2 id="0947-移除最多的同行或同列石头"><a href="#0947-移除最多的同行或同列石头" class="headerlink" title="0947. 移除最多的同行或同列石头"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/947.most-stones-removed-with-same-row-or-column.md">0947. 移除最多的同行或同列石头</a></h2><h2 id="0959-由斜杠划分区域"><a href="#0959-由斜杠划分区域" class="headerlink" title="0959. 由斜杠划分区域"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/959.regions-cut-by-slashes.md">0959. 由斜杠划分区域</a></h2><h2 id="0978-最长湍流子数组"><a href="#0978-最长湍流子数组" class="headerlink" title="0978. 最长湍流子数组"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/978.longest-turbulent-subarray.md">0978. 最长湍流子数组</a></h2><h2 id="0987-二叉树的垂序遍历-91"><a href="#0987-二叉树的垂序遍历-91" class="headerlink" title="0987. 二叉树的垂序遍历 91"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/987.vertical-order-traversal-of-a-binary-tree.md">0987. 二叉树的垂序遍历</a> 91</h2><h2 id="1004-最大连续-1-的个数-III"><a href="#1004-最大连续-1-的个数-III" class="headerlink" title="1004. 最大连续 1 的个数 III"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1004.max-consecutive-ones-iii.md">1004. 最大连续 1 的个数 III</a></h2><h2 id="1011-在-D-天内送达包裹的能力"><a href="#1011-在-D-天内送达包裹的能力" class="headerlink" title="1011. 在 D 天内送达包裹的能力"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1011.capacity-to-ship-packages-within-d-days.md">1011. 在 D 天内送达包裹的能力</a></h2><h2 id="1014-最佳观光组合"><a href="#1014-最佳观光组合" class="headerlink" title="1014. 最佳观光组合"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1014.best-sightseeing-pair.md">1014. 最佳观光组合</a></h2><h2 id="1015-可被-K-整除的最小整数"><a href="#1015-可被-K-整除的最小整数" class="headerlink" title="1015. 可被 K 整除的最小整数"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1015.smallest-integer-divisible-by-k.md">1015. 可被 K 整除的最小整数</a></h2><h2 id="1019-链表中的下一个更大节点"><a href="#1019-链表中的下一个更大节点" class="headerlink" title="1019. 链表中的下一个更大节点"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1019.next-greater-node-in-linked-list.md">1019. 链表中的下一个更大节点</a></h2><h2 id="1020-飞地的数量"><a href="#1020-飞地的数量" class="headerlink" title="1020. 飞地的数量"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1020.number-of-enclaves.md">1020. 飞地的数量</a></h2><h2 id="1023-驼峰式匹配"><a href="#1023-驼峰式匹配" class="headerlink" title="1023. 驼峰式匹配"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1023.camelcase-matching.md">1023. 驼峰式匹配</a></h2><h2 id="1031-两个非重叠子数组的最大和"><a href="#1031-两个非重叠子数组的最大和" class="headerlink" title="1031. 两个非重叠子数组的最大和"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1031.maximum-sum-of-two-non-overlapping-subarrays.md">1031. 两个非重叠子数组的最大和</a></h2><h2 id="1043-分隔数组以得到最大和"><a href="#1043-分隔数组以得到最大和" class="headerlink" title="1043. 分隔数组以得到最大和"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1043.partition-array-for-maximum-sum.md">1043. 分隔数组以得到最大和</a></h2><h2 id="1104-二叉树寻路"><a href="#1104-二叉树寻路" class="headerlink" title="1104. 二叉树寻路"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1104.path-in-zigzag-labelled-binary-tree.md">1104. 二叉树寻路</a></h2><h2 id="1129-颜色交替的最短路径"><a href="#1129-颜色交替的最短路径" class="headerlink" title="1129. 颜色交替的最短路径"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1129.shortest-path-with-alternating-colors.md">1129. 颜色交替的最短路径</a></h2><h2 id="1131-绝对值表达式的最大值"><a href="#1131-绝对值表达式的最大值" class="headerlink" title="1131.绝对值表达式的最大值"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1131.maximum-of-absolute-value-expression.md">1131.绝对值表达式的最大值</a></h2><h2 id="1138-字母板上的路径"><a href="#1138-字母板上的路径" class="headerlink" title="1138. 字母板上的路径"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1138.alphabet-board-path.md">1138. 字母板上的路径</a></h2><h2 id="1186-删除一次得到子数组最大和"><a href="#1186-删除一次得到子数组最大和" class="headerlink" title="1186. 删除一次得到子数组最大和"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1186.maximum-subarray-sum-with-one-deletion.md">1186. 删除一次得到子数组最大和</a></h2><h2 id="1218-最长定差子序列"><a href="#1218-最长定差子序列" class="headerlink" title="1218. 最长定差子序列"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1218.longest-arithmetic-subsequence-of-given-difference.md">1218. 最长定差子序列</a></h2><h2 id="1227-飞机座位分配概率-👍"><a href="#1227-飞机座位分配概率-👍" class="headerlink" title="1227. 飞机座位分配概率 👍"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1227.airplane-seat-assignment-probability.md">1227. 飞机座位分配概率</a> 👍</h2><h2 id="1261-在受污染的二叉树中查找元素"><a href="#1261-在受污染的二叉树中查找元素" class="headerlink" title="1261. 在受污染的二叉树中查找元素"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1261.find-elements-in-a-contaminated-binary-tree.md">1261. 在受污染的二叉树中查找元素</a></h2><h2 id="1262-可被三整除的最大和"><a href="#1262-可被三整除的最大和" class="headerlink" title="1262. 可被三整除的最大和"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1262.greatest-sum-divisible-by-three.md">1262. 可被三整除的最大和</a></h2><h2 id="1297-子串的最大出现次数"><a href="#1297-子串的最大出现次数" class="headerlink" title="1297. 子串的最大出现次数"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1297.maximum-number-of-occurrences-of-a-substring.md">1297. 子串的最大出现次数</a></h2><h2 id="1310-子数组异或查询"><a href="#1310-子数组异或查询" class="headerlink" title="1310. 子数组异或查询"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1310.xor-queries-of-a-subarray.md">1310. 子数组异或查询</a></h2><h2 id="1334-阈值距离内邻居最少的城市"><a href="#1334-阈值距离内邻居最少的城市" class="headerlink" title="1334. 阈值距离内邻居最少的城市"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1334.find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance.md">1334. 阈值距离内邻居最少的城市</a></h2><h2 id="1371-每个元音包含偶数次的最长子字符串"><a href="#1371-每个元音包含偶数次的最长子字符串" class="headerlink" title="1371.每个元音包含偶数次的最长子字符串"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1371.find-the-longest-substring-containing-vowels-in-even-counts.md">1371.每个元音包含偶数次的最长子字符串</a></h2><h2 id="1381-设计一个支持增量操作的栈-91"><a href="#1381-设计一个支持增量操作的栈-91" class="headerlink" title="1381. 设计一个支持增量操作的栈 91"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1381.design-a-stack-with-increment-operation.md">1381. 设计一个支持增量操作的栈</a> 91</h2><h2 id="1423-可获得的最大点数"><a href="#1423-可获得的最大点数" class="headerlink" title="1423. 可获得的最大点数"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1423.maximum-points-you-can-obtain-from-cards.md">1423. 可获得的最大点数</a></h2><h2 id="1438-绝对差不超过限制的最长连续子数组"><a href="#1438-绝对差不超过限制的最长连续子数组" class="headerlink" title="1438. 绝对差不超过限制的最长连续子数组"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1438.longest-continuous-subarray-with-absolute-diff-less-than-or-equal-to-limit.md">1438. 绝对差不超过限制的最长连续子数组</a></h2><h2 id="1558-得到目标数组的最少函数调用次数"><a href="#1558-得到目标数组的最少函数调用次数" class="headerlink" title="1558. 得到目标数组的最少函数调用次数"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1558.minimum-numbers-of-function-calls-to-make-target-array.md">1558. 得到目标数组的最少函数调用次数</a></h2><h2 id="1574-删除最短的子数组使剩余数组有序"><a href="#1574-删除最短的子数组使剩余数组有序" class="headerlink" title="1574. 删除最短的子数组使剩余数组有序"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1574.shortest-subarray-to-be-removed-to-make-array-sorted.md">1574. 删除最短的子数组使剩余数组有序</a></h2><h2 id="1589-所有排列中的最大和"><a href="#1589-所有排列中的最大和" class="headerlink" title="1589. 所有排列中的最大和"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1589.maximum-sum-obtained-of-any-permutation.md">1589. 所有排列中的最大和</a></h2><h2 id="1631-最小体力消耗路径"><a href="#1631-最小体力消耗路径" class="headerlink" title="1631. 最小体力消耗路径"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1631.path-with-minimum-effort.md">1631. 最小体力消耗路径</a></h2><h2 id="1658-将-x-减到-0-的最小操作数"><a href="#1658-将-x-减到-0-的最小操作数" class="headerlink" title="1658. 将 x 减到 0 的最小操作数"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1658.minimum-operations-to-reduce-x-to-zero.md">1658. 将 x 减到 0 的最小操作数</a></h2><h2 id="1697-检查边长度限制的路径是否存在"><a href="#1697-检查边长度限制的路径是否存在" class="headerlink" title="1697. 检查边长度限制的路径是否存在"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1697.checking-existence-of-edge-length-limited-paths.md">1697. 检查边长度限制的路径是否存在</a></h2><h2 id="1737-满足三条件之一需改变的最少字符数"><a href="#1737-满足三条件之一需改变的最少字符数" class="headerlink" title="1737. 满足三条件之一需改变的最少字符数"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1737.change-minimum-characters-to-satisfy-one-of-three-conditions.md">1737. 满足三条件之一需改变的最少字符数</a></h2><h2 id="1834-单线程-CPU"><a href="#1834-单线程-CPU" class="headerlink" title="1834. 单线程 CPU"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1834.single-threaded-cpu.md">1834. 单线程 CPU</a></h2><h2 id="1899-合并若干三元组以形成目标三元组-👍"><a href="#1899-合并若干三元组以形成目标三元组-👍" class="headerlink" title="1899. 合并若干三元组以形成目标三元组 👍"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1899.merge-triplets-to-form-target-triplet.md">1899. 合并若干三元组以形成目标三元组</a> 👍</h2><h2 id="1904-你完成的完整对局数"><a href="#1904-你完成的完整对局数" class="headerlink" title="1904. 你完成的完整对局数"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1904.the-number-of-full-rounds-you-have-played.md">1904. 你完成的完整对局数</a></h2><h2 id="1906-查询差绝对值的最小值"><a href="#1906-查询差绝对值的最小值" class="headerlink" title="1906. 查询差绝对值的最小值"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1906.minimum-absolute-difference-queries.md">1906. 查询差绝对值的最小值</a></h2><h2 id="2007-从双倍数组中还原原数组"><a href="#2007-从双倍数组中还原原数组" class="headerlink" title="2007. 从双倍数组中还原原数组"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/2007.find-original-array-from-doubled-array.md">2007. 从双倍数组中还原原数组</a></h2><h2 id="2008-出租车的最大盈利"><a href="#2008-出租车的最大盈利" class="headerlink" title="2008. 出租车的最大盈利"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/2008.maximum-earnings-from-taxi.md">2008. 出租车的最大盈利</a></h2><h2 id="5935-适合打劫银行的日子"><a href="#5935-适合打劫银行的日子" class="headerlink" title="5935. 适合打劫银行的日子"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/5935.find-good-days-to-rob-the-bank.md">5935. 适合打劫银行的日子</a></h2><h2 id="5936-引爆最多的炸弹"><a href="#5936-引爆最多的炸弹" class="headerlink" title="5936. 引爆最多的炸弹"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/5936.detonate-the-maximum-bombs.md">5936. 引爆最多的炸弹</a></h2><h2 id="5965-相同元素的间隔之和"><a href="#5965-相同元素的间隔之和" class="headerlink" title="5965. 相同元素的间隔之和"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/5965.intervals-between-identical-elements.md">5965. 相同元素的间隔之和</a></h2><h1 id="困难难度题目合集"><a href="#困难难度题目合集" class="headerlink" title="困难难度题目合集"></a>困难难度题目合集</h1><p>困难难度题目从类型上说多是：</p>
<h2 id="图"><a href="#图" class="headerlink" title="图"></a>图</h2><h2 id="设计题"><a href="#设计题" class="headerlink" title="设计题"></a>设计题</h2><h2 id="游戏场景题目"><a href="#游戏场景题目" class="headerlink" title="游戏场景题目"></a>游戏场景题目</h2><h2 id="中等题目的-follow-up"><a href="#中等题目的-follow-up" class="headerlink" title="中等题目的 follow up"></a>中等题目的 follow up</h2><p>从解法上来说，多是：</p>
<h2 id="图算法"><a href="#图算法" class="headerlink" title="图算法"></a>图算法</h2><h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><h2 id="二分法"><a href="#二分法" class="headerlink" title="二分法"></a>二分法</h2><h2 id="DFS-amp-BFS"><a href="#DFS-amp-BFS" class="headerlink" title="DFS &amp; BFS"></a>DFS &amp; BFS</h2><h2 id="状态压缩"><a href="#状态压缩" class="headerlink" title="状态压缩"></a>状态压缩</h2><h2 id="剪枝"><a href="#剪枝" class="headerlink" title="剪枝"></a>剪枝</h2><p>从逻辑上说， 要么就是非常难想到，要么就是非常难写代码。 这里我总结了几个技巧：</p>
<ol>
<li>看题目的数据范围， 看能否暴力模拟</li>
<li>暴力枚举所有可能的算法往上套，比如图的题目。</li>
<li>总结和记忆解题模板，减少解题压力</li>
</ol>
<p>以下是我列举的经典题目（带 91 字样的表示出自 <strong>91 天学算法</strong>活动）：</p>
<h2 id="LCP-20-快速公交"><a href="#LCP-20-快速公交" class="headerlink" title="LCP 20. 快速公交"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/lcp20.meChtZ.md">LCP 20. 快速公交</a></h2><h2 id="LCP-21-追逐游戏-👍"><a href="#LCP-21-追逐游戏-👍" class="headerlink" title="LCP 21. 追逐游戏 👍"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/lcp21.Za25hA.md">LCP 21. 追逐游戏</a> 👍</h2><h2 id="Number-Stream-to-Intervals"><a href="#Number-Stream-to-Intervals" class="headerlink" title="Number Stream to Intervals"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/Number-Stream-to-Intervals.md">Number Stream to Intervals</a></h2><h2 id="Triple-Inversion-91"><a href="#Triple-Inversion-91" class="headerlink" title="Triple Inversion 91"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/Triple-Inversion.md">Triple Inversion</a> 91</h2><h2 id="Kth-Pair-Distance-91"><a href="#Kth-Pair-Distance-91" class="headerlink" title="Kth Pair Distance 91"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/Kth-Pair-Distance.md">Kth Pair Distance</a> 91</h2><h2 id="Minimum-Light-Radius-91"><a href="#Minimum-Light-Radius-91" class="headerlink" title="Minimum Light Radius 91"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/Minimum-Light-Radius.md">Minimum Light Radius</a> 91</h2><h2 id="Largest-Equivalent-Set-of-Pairs-👍"><a href="#Largest-Equivalent-Set-of-Pairs-👍" class="headerlink" title="Largest Equivalent Set of Pairs 👍"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/Largest-Equivalent-Set-of-Pairs.md">Largest Equivalent Set of Pairs</a> 👍</h2><h2 id="Ticket-Order-md"><a href="#Ticket-Order-md" class="headerlink" title="Ticket-Order.md"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/Ticket-Order.md">Ticket-Order.md</a></h2><h2 id="Connected-Road-to-Destination"><a href="#Connected-Road-to-Destination" class="headerlink" title="Connected-Road-to-Destination"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/Connected-Road-to-Destination.md">Connected-Road-to-Destination</a></h2><h2 id="0004-寻找两个正序数组的中位数-👍"><a href="#0004-寻找两个正序数组的中位数-👍" class="headerlink" title="0004. 寻找两个正序数组的中位数 👍"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/4.median-of-two-sorted-arrays.md">0004. 寻找两个正序数组的中位数</a> 👍</h2><h2 id="0023-合并-K-个升序链表"><a href="#0023-合并-K-个升序链表" class="headerlink" title="0023. 合并 K 个升序链表"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/23.merge-k-sorted-lists.md">0023. 合并 K 个升序链表</a></h2><h2 id="0025-K-个一组翻转链表-👍"><a href="#0025-K-个一组翻转链表-👍" class="headerlink" title="0025. K 个一组翻转链表 👍"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/25.reverse-nodes-in-k-groups.md">0025. K 个一组翻转链表</a> 👍</h2><h2 id="0030-串联所有单词的子串"><a href="#0030-串联所有单词的子串" class="headerlink" title="0030. 串联所有单词的子串"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/30.substring-with-concatenation-of-all-words.md">0030. 串联所有单词的子串</a></h2><h2 id="0032-最长有效括号"><a href="#0032-最长有效括号" class="headerlink" title="0032. 最长有效括号"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/32.longest-valid-parentheses.md">0032. 最长有效括号</a></h2><h2 id="0042-接雨水"><a href="#0042-接雨水" class="headerlink" title="0042. 接雨水"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/42.trapping-rain-water.md">0042. 接雨水</a></h2><h2 id="0052-N-皇后-II"><a href="#0052-N-皇后-II" class="headerlink" title="0052. N 皇后 II"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/52.N-Queens-II.md">0052. N 皇后 II</a></h2><h2 id="0057-插入区间"><a href="#0057-插入区间" class="headerlink" title="0057. 插入区间"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/57.insert-interval.md">0057. 插入区间</a></h2><h2 id="0065-有效数字"><a href="#0065-有效数字" class="headerlink" title="0065. 有效数字"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/65.valid-number.md">0065. 有效数字</a></h2><h2 id="0084-柱状图中最大的矩形"><a href="#0084-柱状图中最大的矩形" class="headerlink" title="0084. 柱状图中最大的矩形"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/84.largest-rectangle-in-histogram.md">0084. 柱状图中最大的矩形</a></h2><h2 id="0085-最大矩形"><a href="#0085-最大矩形" class="headerlink" title="0085. 最大矩形"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/85.maximal-rectangle.md">0085. 最大矩形</a></h2><h2 id="0087-扰乱字符串"><a href="#0087-扰乱字符串" class="headerlink" title="0087. 扰乱字符串"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/87.scramble-string.md">0087. 扰乱字符串</a></h2><h2 id="0124-二叉树中的最大路径和"><a href="#0124-二叉树中的最大路径和" class="headerlink" title="0124. 二叉树中的最大路径和"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/124.binary-tree-maximum-path-sum.md">0124. 二叉树中的最大路径和</a></h2><h2 id="0128-最长连续序列"><a href="#0128-最长连续序列" class="headerlink" title="0128. 最长连续序列"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/128.longest-consecutive-sequence.md">0128. 最长连续序列</a></h2><h2 id="0132-分割回文串-II-👍"><a href="#0132-分割回文串-II-👍" class="headerlink" title="0132. 分割回文串 II 👍"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/132.palindrome-partitioning-ii.md">0132. 分割回文串 II</a> 👍</h2><h2 id="0140-单词拆分-II"><a href="#0140-单词拆分-II" class="headerlink" title="0140. 单词拆分 II"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/140.word-break-ii.md">0140. 单词拆分 II</a></h2><h2 id="0145-二叉树的后序遍历"><a href="#0145-二叉树的后序遍历" class="headerlink" title="0145. 二叉树的后序遍历"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/145.binary-tree-postorder-traversal.md">0145. 二叉树的后序遍历</a></h2><h2 id="0146-LRU-缓存机制"><a href="#0146-LRU-缓存机制" class="headerlink" title="0146. LRU 缓存机制"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/146.lru-cache.md">0146. LRU 缓存机制</a></h2><h2 id="0154-寻找旋转排序数组中的最小值-II"><a href="#0154-寻找旋转排序数组中的最小值-II" class="headerlink" title="0154. 寻找旋转排序数组中的最小值 II"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/154.find-minimum-in-rotated-sorted-array-ii.md">0154. 寻找旋转排序数组中的最小值 II</a></h2><h2 id="0212-单词搜索-II"><a href="#0212-单词搜索-II" class="headerlink" title="0212. 单词搜索 II"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/212.word-search-ii.md">0212. 单词搜索 II</a></h2><h2 id="0239-滑动窗口最大值-👍"><a href="#0239-滑动窗口最大值-👍" class="headerlink" title="0239. 滑动窗口最大值 👍"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/239.sliding-window-maximum.md">0239. 滑动窗口最大值</a> 👍</h2><h2 id="0295-数据流的中位数"><a href="#0295-数据流的中位数" class="headerlink" title="0295. 数据流的中位数"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/295.find-median-from-data-stream.md">0295. 数据流的中位数</a></h2><h2 id="0297-二叉树的序列化与反序列化-91"><a href="#0297-二叉树的序列化与反序列化-91" class="headerlink" title="0297. 二叉树的序列化与反序列化 91"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/297.serialize-and-deserialize-binary-tree.md">0297. 二叉树的序列化与反序列化</a> 91</h2><h2 id="0301-删除无效的括号"><a href="#0301-删除无效的括号" class="headerlink" title="0301. 删除无效的括号"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/301.remove-invalid-parentheses.md">0301. 删除无效的括号</a></h2><h2 id="0312-戳气球"><a href="#0312-戳气球" class="headerlink" title="0312. 戳气球"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/312.burst-balloons.md">0312. 戳气球</a></h2><h2 id="330-按要求补齐数组"><a href="#330-按要求补齐数组" class="headerlink" title="330. 按要求补齐数组"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/330.patching-array.md">330. 按要求补齐数组</a></h2><h2 id="0335-路径交叉"><a href="#0335-路径交叉" class="headerlink" title="0335. 路径交叉"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/335.self-crossing.md">0335. 路径交叉</a></h2><h2 id="0460-LFU-缓存"><a href="#0460-LFU-缓存" class="headerlink" title="0460. LFU 缓存"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/460.lfu-cache.md">0460. LFU 缓存</a></h2><h2 id="0472-连接词"><a href="#0472-连接词" class="headerlink" title="0472. 连接词"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/472.concatenated-words.md">0472. 连接词</a></h2><h2 id="0480-滑动窗口中位数"><a href="#0480-滑动窗口中位数" class="headerlink" title="0480. 滑动窗口中位数"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/480.sliding-window-median.md">0480. 滑动窗口中位数</a></h2><h2 id="0483-最小好进制"><a href="#0483-最小好进制" class="headerlink" title="0483. 最小好进制"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/483.smallest-good-base.md">0483. 最小好进制</a></h2><h2 id="0488-祖玛游戏"><a href="#0488-祖玛游戏" class="headerlink" title="0488. 祖玛游戏"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/488.zuma-game.md">0488. 祖玛游戏</a></h2><h2 id="0493-翻转对"><a href="#0493-翻转对" class="headerlink" title="0493. 翻转对"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/493.reverse-pairs.md">0493. 翻转对</a></h2><h2 id="0664-奇怪的打印机"><a href="#0664-奇怪的打印机" class="headerlink" title="0664. 奇怪的打印机"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/664.strange-printer.md">0664. 奇怪的打印机</a></h2><h2 id="0679-24-点游戏"><a href="#0679-24-点游戏" class="headerlink" title="0679. 24 点游戏"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/679.24-game.md">0679. 24 点游戏</a></h2><h2 id="0715-Range-模块-👍"><a href="#0715-Range-模块-👍" class="headerlink" title="0715. Range 模块 👍"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/715.range-module.md">0715. Range 模块</a> 👍</h2><h2 id="0726-原子的数量"><a href="#0726-原子的数量" class="headerlink" title="0726. 原子的数量"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/726.number-of-atoms.md">0726. 原子的数量</a></h2><h2 id="0768-最多能完成排序的块-II-91"><a href="#0768-最多能完成排序的块-II-91" class="headerlink" title="0768. 最多能完成排序的块 II 91"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/768.max-chunks-to-make-sorted-ii.md">0768. 最多能完成排序的块 II</a> 91</h2><h2 id="0805-数组的均值分割"><a href="#0805-数组的均值分割" class="headerlink" title="0805. 数组的均值分割"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/805.split-array-with-same-average.md">0805. 数组的均值分割</a></h2><h2 id="0839-相似字符串组"><a href="#0839-相似字符串组" class="headerlink" title="0839. 相似字符串组"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/839.similar-string-groups.md">0839. 相似字符串组</a></h2><h2 id="0887-鸡蛋掉落"><a href="#0887-鸡蛋掉落" class="headerlink" title="0887. 鸡蛋掉落"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/887.super-egg-drop.md">0887. 鸡蛋掉落</a></h2><h2 id="0895-最大频率栈"><a href="#0895-最大频率栈" class="headerlink" title="0895. 最大频率栈"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/895.maximum-frequency-stack.md">0895. 最大频率栈</a></h2><h2 id="0909-蛇梯棋"><a href="#0909-蛇梯棋" class="headerlink" title="0909. 蛇梯棋"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/909.snakes-and-ladders.md">0909. 蛇梯棋</a></h2><h2 id="0975-奇偶跳"><a href="#0975-奇偶跳" class="headerlink" title="0975. 奇偶跳"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/975.odd-even-jump.md">0975. 奇偶跳</a></h2><h2 id="0995-K-连续位的最小翻转次数"><a href="#0995-K-连续位的最小翻转次数" class="headerlink" title="0995. K 连续位的最小翻转次数"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/995.minimum-number-of-k-consecutive-bit-flips.md">0995. K 连续位的最小翻转次数</a></h2><h2 id="1032-字符流"><a href="#1032-字符流" class="headerlink" title="1032. 字符流"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1032.stream-of-characters.md">1032. 字符流</a></h2><h2 id="1168-水资源分配优化"><a href="#1168-水资源分配优化" class="headerlink" title="1168. 水资源分配优化"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1168.optimize-water-distribution-in-a-village.md">1168. 水资源分配优化</a></h2><h2 id="1178-猜字谜"><a href="#1178-猜字谜" class="headerlink" title="1178. 猜字谜"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1178.number-of-valid-words-for-each-puzzle.md">1178. 猜字谜</a></h2><h2 id="1203-项目管理"><a href="#1203-项目管理" class="headerlink" title="1203. 项目管理"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1203.sort-items-by-groups-respecting-dependencies.md">1203. 项目管理</a></h2><h2 id="1255-得分最高的单词集合"><a href="#1255-得分最高的单词集合" class="headerlink" title="1255. 得分最高的单词集合"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1255.maximum-score-words-formed-by-letters.md">1255. 得分最高的单词集合</a></h2><h2 id="1345-跳跃游戏-IV"><a href="#1345-跳跃游戏-IV" class="headerlink" title="1345. 跳跃游戏 IV"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1435.jump-game-iv.md">1345. 跳跃游戏 IV</a></h2><h2 id="1449-数位成本和为目标值的最大数字"><a href="#1449-数位成本和为目标值的最大数字" class="headerlink" title="1449. 数位成本和为目标值的最大数字"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1449.form-largest-integer-with-digits-that-add-up-to-target.md">1449. 数位成本和为目标值的最大数字</a></h2><h2 id="1494-并行课程-II"><a href="#1494-并行课程-II" class="headerlink" title="1494. 并行课程 II"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1494.parallel-courses-ii.md">1494. 并行课程 II</a></h2><h2 id="1521-找到最接近目标值的函数值"><a href="#1521-找到最接近目标值的函数值" class="headerlink" title="1521. 找到最接近目标值的函数值"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1521.find-a-value-of-a-mysterious-function-closest-to-target.md">1521. 找到最接近目标值的函数值</a></h2><h2 id="1526-形成目标数组的子数组最少增加次数"><a href="#1526-形成目标数组的子数组最少增加次数" class="headerlink" title="1526. 形成目标数组的子数组最少增加次数"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1526.minimum-number-of-increments-on-subarrays-to-form-a-target-array.md">1526. 形成目标数组的子数组最少增加次数</a></h2><h2 id="1649-通过指令创建有序数组"><a href="#1649-通过指令创建有序数组" class="headerlink" title="1649. 通过指令创建有序数组"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1649.create-sorted-array-through-instructions.md">1649. 通过指令创建有序数组</a></h2><h2 id="1671-得到山形数组的最少删除次数"><a href="#1671-得到山形数组的最少删除次数" class="headerlink" title="1671. 得到山形数组的最少删除次数"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1671.minimum-number-of-removals-to-make-mountain-array.md">1671. 得到山形数组的最少删除次数</a></h2><h2 id="1707-与数组中元素的最大异或值"><a href="#1707-与数组中元素的最大异或值" class="headerlink" title="1707. 与数组中元素的最大异或值"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/5640.maximum-xor-with-an-element-from-array.md">1707. 与数组中元素的最大异或值</a></h2><h2 id="1713-得到子序列的最少操作次数"><a href="#1713-得到子序列的最少操作次数" class="headerlink" title="1713. 得到子序列的最少操作次数"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1713.minimum-operations-to-make-a-subsequence.md">1713. 得到子序列的最少操作次数</a></h2><h2 id="1723-完成所有工作的最短时间"><a href="#1723-完成所有工作的最短时间" class="headerlink" title="1723. 完成所有工作的最短时间"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1723.find-minimum-time-to-finish-all-jobs.md">1723. 完成所有工作的最短时间</a></h2><h2 id="1787-使所有区间的异或结果为零"><a href="#1787-使所有区间的异或结果为零" class="headerlink" title="1787. 使所有区间的异或结果为零"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1787.make-the-xor-of-all-segments-equal-to-zero.md">1787. 使所有区间的异或结果为零</a></h2><h2 id="1835-所有数对按位与结果的异或和"><a href="#1835-所有数对按位与结果的异或和" class="headerlink" title="1835. 所有数对按位与结果的异或和"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1835.find-xor-sum-of-all-pairs-bitwise-and.md">1835. 所有数对按位与结果的异或和</a></h2><h2 id="1871-跳跃游戏-VII-👍"><a href="#1871-跳跃游戏-VII-👍" class="headerlink" title="1871. 跳跃游戏 VII 👍"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1871.jump-game-vii.md">1871. 跳跃游戏 VII</a> 👍</h2><h2 id="1872-石子游戏-VIII"><a href="#1872-石子游戏-VIII" class="headerlink" title="1872. 石子游戏 VIII"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1872.stone-game-viii.md">1872. 石子游戏 VIII</a></h2><h2 id="1883-准时抵达会议现场的最小跳过休息次数"><a href="#1883-准时抵达会议现场的最小跳过休息次数" class="headerlink" title="1883. 准时抵达会议现场的最小跳过休息次数"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/5775.minimum-skips-to-arrive-at-meeting-on-time.md">1883. 准时抵达会议现场的最小跳过休息次数</a></h2><h2 id="1970-你能穿过矩阵的最后一天"><a href="#1970-你能穿过矩阵的最后一天" class="headerlink" title="1970. 你能穿过矩阵的最后一天"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/1970.last-day-where-you-can-still-cross.md">1970. 你能穿过矩阵的最后一天</a></h2><h2 id="2009-使数组连续的最少操作数"><a href="#2009-使数组连续的最少操作数" class="headerlink" title="2009. 使数组连续的最少操作数"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/2009.minimum-number-of-operations-to-make-array-continuous.md">2009. 使数组连续的最少操作数</a></h2><h2 id="2025-分割数组的最多方案数"><a href="#2025-分割数组的最多方案数" class="headerlink" title="2025. 分割数组的最多方案数"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/2025.maximum-number-of-ways-to-partition-an-array.md">2025. 分割数组的最多方案数</a></h2><h2 id="2030-含特定字母的最小子序列"><a href="#2030-含特定字母的最小子序列" class="headerlink" title="2030. 含特定字母的最小子序列"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/2030.smallest-k-length-subsequence-with-occurrences-of-a-letter.md">2030. 含特定字母的最小子序列</a></h2><h2 id="2102-序列顺序查询"><a href="#2102-序列顺序查询" class="headerlink" title="2102. 序列顺序查询"></a><a href="https://github.com/azl397985856/leetcode/blob/master/problems/2102.sequentially-ordinal-rank-tracker.md">2102. 序列顺序查询</a></h2><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
  </entry>
  <entry>
    <title>每个内存_自翻</title>
    <url>/2021/04/30/%E6%AF%8F%E4%B8%AA%E5%86%85%E5%AD%98-%E8%87%AA%E7%BF%BB/</url>
    <content><![CDATA[<blockquote>
<p>每个程序员都应该了解的内存知识–自翻</p>
</blockquote>
<span id="more"></span>

<blockquote>
<p>摘要:</p>
<p>随着cpu核心变得越来越快越来越多, 访存限制了程序运行速度. 硬件开发者开始研究更精密的内存控制和加速技术(比如 cache), 但是这些没有软件开发者的协调是没法发挥到极致的. 但不幸的是, 大多数软件开发者都不了解内存的结构和消耗. 这篇文章讲述了在现代商品硬件上内存系统的结构, 阐明了为什么 cache 被发明出来, 他们是怎么工作的, 和程序应该怎么使用内存才能达到商品级需求</p>
<p><em>斜体</em>是自己加的注释, ()里的英文是翻译不明确的地方</p>
<p>希望高中英语老师饶我一命, 翻译过程中觉得自己的水平实在有限</p>
<p>原文下载链接: <a href="https://pan.baidu.com/s/1NL2LkExFEFDpl8Sh7xBjpQ">https://pan.baidu.com/s/1NL2LkExFEFDpl8Sh7xBjpQ</a>  </p>
<p>密码: lshc</p>
<p>–来自百度网盘超级会员V5的分享</p>
</blockquote>
<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1 简介"></a>1 简介</h1><p>早期电脑的结构很简单, cpu, memory, 外存*(mass storage 应该不是特指外存)*, 网口(/network interface?/), 都一起发展, 因此他们的性能很均衡, 比如 memory 和网络在提供数据上没有 cpu 快.</p>
<p>当计算机的基本结构稳定下来而且硬件开发者准注意优化单个的子系统时, 情况改变了. 一些组件的性能落后并成为了瓶颈. 特别是对于外存和memory系统, 由于经济原因比其他组件发展的慢得多</p>
<p>外存的速度问题主要通过软件来解决: 操作系统把最经常使用(或者将要被使用)的数据存储在主存中, 可以做到比访问硬盘快几个数量级, 存储设备加上了高速缓存而且操作系统不需要做出太大改变. 在这篇文章中我们会研究外存软件组织的更多细节.</p>
<p>不像存储系统, 解决主存的瓶颈问题是十分困难的并且几乎所有的方案都要求改变硬件, 如今这些改变主要包括以下形式</p>
<ul>
<li>ram 硬件设计(速度和并行)</li>
<li>memory 控制设计</li>
<li>cpu 高速缓存</li>
<li>设备的直接内存控制(<em>direct memory access</em>)</li>
</ul>
<p>这篇文章的大部分都会和 cpu cache 和memory 控制有关. 我们会探索 DMA. 作为开始, 我们会看一看现代计算机硬件的概况, 这是我们理解存储系统效率和限制的先决条件, 我们还会接触到不同种类的 RAM 并且阐述为什么他们之间仍存在差异</p>
<p>这篇文章不能涵盖一切, 它受限于硬件产品, 并且很多只会浅尝辄止, 推荐读者们去看更细节的文档.</p>
<p>当遇到操作系统的细节和方法时, 本文只针对 linux, 不涉及到其他操作系统, 作者没兴趣讨论其他操作系统, 如果读者需要使用别的操作系统就应该要求他们vendor?提供类似的文档.</p>
<p>最后一点, 本文包括一大堆 usually 和类似的词, 现实情况要复杂得多, 本文只讨论最常见, 最主流的版本. 绝对的陈述很少出现在这个领域, 所以需要这些形容词.</p>
<h2 id="文章结构"><a href="#文章结构" class="headerlink" title="文章结构"></a>文章结构</h2><p>这篇文章主要针对软件开发者, 对于硬件导向的读者本文深度不足. 在我们实践之前需要一些准备工作</p>
<p>为此, 第二部分描述了 RAM 技术. 这部分容易理解但对后面的内容不是绝对重要的. 在后面需要的地方会有对这一部分的参考, 急切的读者可以跳过这一部分</p>
<p>第三部分主要是关于 cpu cache. 其中有很多图片防止枯燥, 这部分对于理解之后的内容至关重要, 第四部分是干预虚拟内存是如何实施的, 也是后面的必要准备工作</p>
<p>第五部分是关于非统一内存访问(non uniform memory access)</p>
<p>第六部分是本文的中心. 它整合了前面的所有内容并为软件开发者提供了如何在不同情况下写出合适代码的建议. 非常没耐心的读者可以从这里开始, 如果有必要的话会看之前的章节来回顾.</p>
<p>第七部分介绍了帮助程序员的工具, 即使是完全理解了这些技术也不能一眼看出软件的问题在哪, 一些工具是很有必要的</p>
<p>第八部分我们展望可以期待的技术.</p>
<h2 id="报告问题"><a href="#报告问题" class="headerlink" title="报告问题"></a>报告问题</h2><p>作者想要对该文档做一段时间的更新, 这包括技术进步相关的更新和更正. 欢迎读者通过邮件汇报问题, 注意要标明文章的版本号, 这个版本信息可以再文章最后一页找到</p>
<h2 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h2><p>感谢Johnray Fuller and the crew at LWN(特别是Jonathan Corbet 把作者的英文修改的更为正规, Markus Armbruster 为本文提供了很多有效的问题和疏漏)</p>
<h2 id="关于这篇文章"><a href="#关于这篇文章" class="headerlink" title="关于这篇文章"></a>关于这篇文章</h2><p>这篇文章的标题是对David Goldberg的经典论文/What Every Computer Scientist Should Know About Floating-Point Arithmetic/的致敬, 这篇文章仍未广为流传, 尽管对于任何想要进行精确变成的程序员来说都应该是必须的准备</p>
<p>对于 pdf: xpdf 对于一些图像显示不佳, 建议使用 evince 或者 adobe. 如果你使用 evince 那么注意本文中超链接被广泛使用, 尽管查看器不像其他软件那样显示他们</p>
<h1 id="2-现代商品硬件"><a href="#2-现代商品硬件" class="headerlink" title="2 现代商品硬件"></a>2 现代商品硬件</h1><p>由于特质化硬件正在减少, 了解商品硬件是很重要的. 现在规模的扩展更多是水平的而不是纵向的, 这意味着 使用更多小的互连的电脑 比 很大的但是特别快的电脑 更划算. 这是因为快且便宜的网络硬件广泛普及. 这些大的特质化系统仍然有使用空间并且仍然提供着商业价值, 但是市场比起商用硬件相形见绌(is dwarfed by). redhat 2007 期望对于未来的产品, 大多数数据中心的标准配置会是一个带有 4 个插槽的电脑, 每一个都有4 个 cpu 核(对于 intel cpu 会是多线程的). 这意味着数据中心的标准系统会有至多 64 个虚拟处理器. 更大的机器将会被支持, 但是 4 插槽 4 核的情况在现在被认为是最佳选择(sweet spot).</p>
<p>商品零件计算机的结构存在很大差异。因此对于超过 90%的硬件, 我们将专注于最重要的差别. 注意到这些技术细节正在快速变化, 所以建议读者考虑到本文的创作时间.</p>
<p>在过去的几年里, 个人电脑和小的服务器在一个芯片上被标准化为两部分, 北桥和南桥.图 2.1</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gt4qfbs6x3j30ug0hadhb.jpg" alt="截屏2021-08-04 下午2.18.41"></p>
<p>所有的 cpu(图中的两个, 还可以有更多)共用一条总线<em>fsb</em>(<em>the front site bus</em>前端总线)连接到北桥, 北桥包括, 除了别的之外, 决定了 ram 是哪种类型的内存控制器, 不同种类的 ram, 比如 dram, rambus, 和 sdram, 需要不同的内存控制器.</p>
<p>为了连接到其他所有的系统设备, 北桥必须和南桥沟通, 南桥经常被称作 i/o 桥, 通过一系列总线处理和不同设备进行的沟通. 现在的 pci, pcie, sata, 和 usb 总线都很重要, 但是 pata, ieee1394, 串口和并行端口(parallel port)也都被南桥支持, 更老一点的系统有连接北桥的 AGP （Accelerated Graphics Port 图形加速接口）插槽. 这是处于性能考虑因为北桥和南桥之间的沟通太慢, 而今天 pcie 插槽全部和南桥相连</p>
<p>这样一个系统结构有很多重要的结果:</p>
<ul>
<li>从 cpu 到其他cpu的数据连接 必须走 和北桥连接的同一总线</li>
<li>所有和 ram 的连接必须通过北桥</li>
<li>ram 只有一个端口(port)</li>
<li>cpu 和与南桥相连的设备的连接 会经由北桥</li>
</ul>
<p>在这个模式下许多的瓶颈出现了, 其中一个瓶颈就和 ram 与设备的连接有关. 在早期电脑中, <strong>所有南北桥和设备的连接都必须经过 cpu</strong>, 降低整个系统的性能. 为了解决这个问题, 一些设备开始具备 DMA（直接内存访问 Direct memory access）, dma 允许设备借助北桥直接存储和接收来自 ram 的数据而不需要 cpu 的参与(以及他固有的性能损失). 今天所有的和任意总线连接的高性能设备都可以利用 dma. 尽管它极大的减少了 cpu 的负载, 但是他也造成了北桥的带宽竞争, 因为 dma 请求会与 ram 与 cpu 之间的交流产生竞争, 这个问题也必须被考虑</p>
<p>第二个瓶颈和<strong>北桥到 ram 的总线</strong>有关. 总线的细节取决于部署的内存种类, 在老的系统只有一条总线连接到所有的 ram 芯片, 所以并行访问时不可能的, 最近 ram 的种类要求两个分开的总线(ddr2), 加倍了可用的带宽, 北桥跨通道交叉存取memory，更先进的内存及时(FB-DRAM)添加了更多的通道(channel)</p>
<p>由于只有有限的可用带宽, 最小化延迟去组织内存访问对应性能来说是很重要的. 我们将会看到, 处理器比内存快得多而且必须等待访问内存, 尽管已经使用了cpu cache. 如果多个超线程, 核, 或者处理器同时访问内存, 访存的等待时间会更长, 这对于 dma 操作也是如此</p>
<p>然而, 访存比并发更加重要, 访问模式本身也会极大的影响存储系统的性能, 特别是有多个内存通道的时候, 在 2.2 章节我们会讨论关于 ram 访问模式的细节</p>
<p>在一些其他更贵的系统中, 北桥实际上不包括存储控制器(<em>memory controller</em>), <strong>相反北桥会被连接到许多外部存储控制器,</strong> 图 2.2 四个 MC</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gt4tujbmodj30s20gi40d.jpg" alt="截屏2021-08-04 下午4.17.12"></p>
<p>这种结构的好处是存在不止一个内存总线而且总的可用带宽增加了, 这种设计也支持更多的内存. 并发内存访问模式通过同时访问不同的内存库(memory bank?)来减少延迟, 当许多进程直接连接到北桥时尤为明显, 如图 2.2. 对于这样的设计, 最基本的限制是北桥内部的带宽, 这对于这种结构是惊人的.</p>
<p>使用多个外部 mc 不是唯一增加内存带宽的途径, 另一个流行的方式是<strong>把 mc 融入 cpu 中并且为每个 cpu 增加memory</strong>, 这个结构由基于 amd opteron 处理器的 SMP 系统推广. 图 2.3 展示了这个系统.  intel 会从 nehalem 处理器开始支持通用系统接口(common system interface), 他也基本使用了同样的方法, 为每一个处理器添加一个融入进去的 mc 和本地 memory.</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gt4tze1vjoj30n60gg3zx.jpg" alt="截屏2021-08-04 下午4.21.49"></p>
<p>有了这样一个结构, 由于有很多处理器, 就会有很多内存库(<em>memory bank</em>). 在一个 4cpu 的机器上, memory 带宽翻了四倍而不需要有着很大带宽的复杂北桥. 将 mc 融入 cpu 有一些额外的优势, 这里我们不深究。</p>
<p>这个结构也有很多劣势. 首先因为机器仍然需要系统的所有的memory 可以与处理器连通, memory 不再是统一的了(由于名字的原因Non-Uniform Memory Architecture). 本地 memory(融入 cpu 的 memory)可以以正常速度访问, 当 memory 连通到其他 cpu 时情况就不一样了, 这种情况下必须使用处理器之间的通讯方式, 为了从 cpu1 连到 cpu2 的 memory, 需要经过一次相互连接(interconnect). 当 cpu1 需要连接到 cpu4 的时候需要两次</p>
<p>每个这种连接都有一定的cost, 我们把连接到其他 cpu 需要花费的额外时间称为 numa 因子. 图 2.3 中的结构中, 每个 cpu 有两层: 直接相联的 cpu 和需要跨越两次连接的 cpu(/对角线/). 随着机器变得复杂, 层级会增长的很快, 也有一些结构(比如 ibm 的x445 和 sgi 的 altix 系列)有不止一种连接. cpu 被组织成节点, 在一个节点中, 访问 memory 的次数可能被统一或者有少量的 numa 因子. 节点之间的连接代价会非常大, numa 因子会很高</p>
<p>商品级 numa 机器今天仍然存在并且在将来会处于很重要的位置, 在 2008 年末, 每个 smp 机器都会使用 numa. numa 的 cost 使得认识到机器在使用 numa是很重要的. 在第 5 部分我们会讨论更多的机器结果和 linux 内核中关于这些内容的技术</p>
<p>除了接下来讨论的技术细节, 还有其他的影响 ram 性能的因素. 他们不是软件控制的, 因此本章不提及. 有兴趣的读者可以在 2.1 部分学习, 只有当需要进一步连接 ram 技术才需要学习这些部分, 而且可能会使你在买电脑的时候做出更好的抉择</p>
<p>接下来的两部分讨论了入门级别的硬件细节, 还有 mc 和 dram 芯片之间的连通协议程序员会发现这些信息很有用因为这些细节揭示了ram 是如何工作的. 尽管这些是可选的知识, 那些急切想要学习和日常生产相关知识的程序员可以跳到 2.2.5 部分</p>
<h2 id="2-1-RAM-种类"><a href="#2-1-RAM-种类" class="headerlink" title="2.1 RAM 种类"></a>2.1 RAM 种类</h2><p>这些年来有很多种 ram 而且之间都有差距, 有时差距很大. 老的款式今天只会使历史研究者感兴趣了. 我们不会深究这些. 我们会专注于现代 ram 种类, 我们只会浅尝辄止, 探索一些对内核可见的细节或者程序开发者对性能研究需要的细节</p>
<p>第一个有趣的细节围绕着为什么在同一个机器中有不同的 ram. 更具体的, 为什么同时有 sram 和 dram. 前者(sram)更快而且有相同的功能性, 为什么机器中不是所有的 ram 都是 sram? 是因为价钱, sram比 dram 贵得多. 两个因素都很重要, 但是第二个越来与重要. 为了明白他们的不同, 我们来看一下 sram 和 dram 的实现.</p>
<p>在剩下的部分我们会讨论 ram 实现的一些低级细节, 我们会把细节的等级降到最低, 为此我们会在”数字逻辑”级别讨论, 而不是在硬件设计者会使用的级别. 那个级别与我们的目的无关</p>
<h3 id="2-1-1-Static-RAM"><a href="#2-1-1-Static-RAM" class="headerlink" title="2.1.1 Static RAM"></a>2.1.1 Static RAM</h3><p>图 2.4 展示了有六个晶体管 sram 的单元(cell)的结构. 这个单元的内核是由 M1-M4 4 个晶体管构成两个交叉耦合(cross-coupled)逆变器(inverter). 他们有两个稳态, 各自为 0 和 1. 只要 V<del>dd</del>上有能量就是稳定的. 如果需要访问单元的状态，则字访问线WL升高. 这使得单元的状态逻辑立即在 BL 和 BL上划线 可读如果单元状态必须被覆盖, BL 和 BL上划线会第一个被置于需要的值然后 WL 升高. 由于外面的驱动的 4 个晶体管更强, 这使得旧的状态会被覆盖</p>
<img src="https://tva1.sinaimg.cn/large/008i3skNgy1gt4u2rtg6kj30je0ge3z5.jpg" alt="截屏2021-08-04 下午4.25.04" style="zoom:50%;" />

<p>看[20]来了解更详细的单元工作原理, 为了接下来的描述, 下面这些很重要</p>
<ul>
<li>一个单元需要 6 个晶体管, 有 4 个的变种但是他们有缺点</li>
<li>维持状态需要持续的电源</li>
<li>当字访问线升高时, 单元的状态立即就是可读的. 该信号和其他晶体管控制信号一样是矩形的(在两个二进制状态之间快速变换)</li>
<li>单元状态是稳定的, 不需要刷新循环</li>
</ul>
<p>还有其他的慢的但是耗能少的 sram 变种, 但是我们不关注因为我们在了解快的 ram. 他们比起 dram 在系统中更容易被使用因为有简单的接口, 这时他们会被注意到</p>
<h3 id="2-1-2-Dynamic-RAM"><a href="#2-1-2-Dynamic-RAM" class="headerlink" title="2.1.2 Dynamic RAM"></a>2.1.2 Dynamic RAM</h3><p>dram 结构比 sram 简单的多. 图 2.5 显示了通常的 dram 单元设计. 它包括的只有一个晶体管和一个电容, 这个复杂度上的差别意味着他的实现和 sram 差的很大</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gt4u5d8jimj30i00b6mxc.jpg" alt="截屏2021-08-04 下午4.27.36"></p>
<p>一个 dram 单元把他的状态存储在电容器 C 里, 晶体管 M 被用来守卫(guard)对状态的访问. 为了读单元的状态, <em>访问线 AL</em> 被升高, 这产生了<em>数据线 DL</em> 上的流, 有或没有取决于电容器的电压. 为了写入单元DL数据线被置于合适的位置, 然后 AL 被升高一段时间足以充满或者放干电容</p>
<p>dram 这种设计带来了许多的问题, 使用电容意味着读取单元会把电容放电, 这个过程不可以无限的重复, 电容必须在某一时刻再充电. 更糟的是, 为了容纳如此大量的单元(现在普通的一个芯片有 10^9^个单元), 电容的容量必须很低(在毫微微级别或者更低). 一个完全充电的电容容纳着数以千计的电子, 尽管电容的电阻很高(几兆兆欧姆), 失效只需要很短的时间. 这个问题称为”leakage”(泄露)</p>
<p>泄露就是 dram 单元必须持续刷新的原因, 对于大多数 dram 芯片, 这个刷新必须每 <em>64ms</em> 发生一次, 在刷新周期中没有访问是被允许的因为一次刷新就是一次简单的结果被丢弃的读操作。对于一些工作, 这个开销可能会使 50%的 memory 操作等待</p>
<p>第二个由小量的充电引起的问题是从单元读取的信息不是直接可用的. 数据线必须连接到读出放大器，该读出放大器可以在仍然必须算作1的整个电荷范围内区分存储的0或1。</p>
<p>第三个问题是读取单元造成电容电荷的耗尽, 这意味着每次读取操作都必须紧跟一个重新给电容充电的操作, 这个通过把读出放大器的输出反馈给电容来自动实现. 它意味着读取操作需要额外的能量和时间。</p>
<p>第四个问题是给电容充放电不是瞬时的, 读出放大器收到的信号不是矩形的, 所以必须使用保守的估计来确定何时可以使用单元的输出。电容充放电的公式为: </p>
<img src="https://tva1.sinaimg.cn/large/008i3skNgy1gq3k2omb9nj30dm04a0sw.jpg" alt="截屏2021-05-02 上午3.52.29" style="zoom:50%;" />

<p>这意味着电容充放电需要花费一点时间(由电容的 C 和 R 决定). 这也意味着被读出放大器探测到的情况不是立即就可以使用的, 图 2.6 展示了充放电的曲线. x 轴的单位是 RC, 是时间的单位.</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gt4u70cy44j30vo0m6q5i.jpg" alt="截屏2021-08-04 下午4.29.12"></p>
<p>不像 sram，当字访问线被升高时结果可以立即被使用, dram 总需要花费一点时间直到电容充分的放电, 这个延迟严重的限制了 dram 能有多快.</p>
<p>这个简单的结构也有他的好处, 主要的好处就是尺寸, dram 在芯片上需要的空间比 sram 小的多, sram单元也需要独立的保持晶体管状态的能量. dram 单元的结构更简单而且更规则, 这意味着把他们紧密的打包在一个 die 上更简单.</p>
<p>总的来说, 还是在价格上胜出了. 除了在特制的硬件比如网络路由器, 我们必须使用基于 dram 的主存, 这对我们接下来要讨论的编程有很大意义, 但是首先我们先看一下实际中 dram 单元使用的细节</p>
<h3 id="2-1-3-DRAM-访问"><a href="#2-1-3-DRAM-访问" class="headerlink" title="2.1.3 DRAM 访问"></a>2.1.3 DRAM 访问</h3><p>一个程序通过虚拟地址找到一个 memory 位置, 处理器把它翻译成物理地址并且最终 mc 找到和这个地址相对应的 ram 芯片. 为了选择到 ram 芯片上独立的 memory 单元, 一部分物理地址以多个地址线(address lines?)的形式传送.</p>
<p>从 mc 独立的找到 memory 地址是不切实际的: 4GB（2^32^） ram 需要2^32^地址线. 地址是以二进制编码传送的, 这样会使用少一些的地址线. 通过这种方式传递到 dram 芯片的地址必须首先被解码, 一个具有 N 个地址线的解复用器会有 2^N^个输出线, 这些输出线可以被用来选择 memory 单元. 使用这种直接映射对于小规模芯片不是大问题.</p>
<p>但是如果芯片的数量增长了, 这个方式就不再适合了. 一个拥有 1Gbit 容量的芯片会需要 30 个地址线和 2^30^个选择线(/输出/), 当不牺牲速度时，解复用器的大小会随着输入线的数量呈指数增加. 除了解复用器的复杂性（大小和时间）外，30个地址线的解复用器还需要大量的芯片实际空间. 更重要的是, 在地址线上同步传输 30 个脉冲比传送 15 个脉冲要难得多. 更少的线路必须以完全相同的长度或适当的时间布局.(7 现代 dram 种类比如 DDR3 可以自动适应时间, 但是容忍度是有限制的)</p>
<p>图 2.7 显示了高级的 dram 芯片, dram 单元被以行和列的方式组织起来, 他们可以被排列在一行但是那样 dram 芯片就需要一个巨大的解复用器. 通过数组访问, 这种设计可以使用一般大小的解复用器和多路选择器. 这是各方面巨大节省. 在例子中, 地址行 a<del>0</del> 和 a<del>1</del> 通过行地址选择(row address selection)解复用器从所有行中选择地址线, 当读取的时候, 所有单元的内容都对列地址选择多路选择器开放, 通过地址线 a<del>2</del> a<del>3</del> , 一列中的内容向dram 芯片的数据引脚开放. 这在很多 dram 芯片上并行的发生很多次来产生一堆 bit 和数据总选的宽度相对应.</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gt4u8lipl6j30rc0ui76g.jpg" alt="截屏2021-08-04 下午4.30.43"></p>
<p>在写的时候, 新的单元值被放在数据总线上, 然后当单元被用 <em>ras(row address selection)</em> 和 <em>cas(column address selection)</em> 选择时, 值会被存到单元中. 是一个很直接的设计呢. 在现实中显然有更多的复杂细节. 必须要明确在数据总线可以被读取的信号发出后会有多少的延迟. 正如前面所说, 电容不会立即放电. 单元中的信号是那么小以至于他需要被放大. 对于写来说必须明确在总线上通过 ras 和 cas 成功存储新的值在多长时间需要保持有效(又一次, 电容不会立即的充电和放电). 这些时间常数对于 dram 芯片的性能是很重要的, 我们会在接下来的章节讨论.</p>
<p>第二个扩展上的问题是, 有 30 个地址线连接每个 ram芯片也是不可行的. 芯片的引脚是很珍贵的资源, 数据必须被尽可能的并行传输已经足够坏了. mc 必须可以在每个 ram 模块(ram 芯片的集合)上寻址. 如果因为性能要求需要并行访问多个 ram 模块而且每个 ram 模块需要自己拥有 30 个以上的地址线, 那么 mc 就必须有, 对于8 个 ram 模块, 240+引脚仅仅用来应付地址.</p>
<p>为了解决这些次要的可扩展问题, 很长一段时间, dram都在自己进行地址的多路选择. 这意味着地址被传送到两部分: 第一部分包括行地址(图 2.7 a<del>0</del> 和 a<del>1</del> ), 这个选择保持活跃直到取消, 然后第二部分(a<del>2</del> a<del>3</del>)选择列. 主要的不同在于只需要两个额外的地址线, 当 ras 和 cas 可用时会减少很多线路来指示地址, 但也有一点小代价来把地址分为两部分. 这个地址多路选择带来了他自己的问题, 我们会在 2.2 讨论.</p>
<h3 id="2-1-4-结论"><a href="#2-1-4-结论" class="headerlink" title="2.1.4 结论"></a>2.1.4 结论</h3><p>不要担心这部分的细节是不是有一点过载了, 这部分重要的内容有:</p>
<ul>
<li><p>不全用 sram 是有原因的</p>
</li>
<li><p>地址线的数量和 mc, 主板, dram 模块, dram 芯片 的 cost 有直接联系</p>
</li>
<li><p>在读写操作之前有一段时间间隔</p>
</li>
</ul>
<p>接下来的部分会接触更多访问 dram memory 的细节. 我们不会深入访问 sram 的细节, 因为它通常是直接寻址的. 这是因为速度问题而且 sram 的大小有限, sram 现在在 cpu 的 cache 和 on-die ?上使用, 这里连接是很小的而且在 cpu 设计者的控制之下. cpu cache 是一个我们之后会讨论的内容但是我们需要知道的是 sram 单元有一个最大速度, 这个速度取决于花在 sram 上的 efforts(?). 速度可以仅比CPU core稍慢一两个数量级。</p>
<h2 id="2-2-DRAM-访问的技术细节"><a href="#2-2-DRAM-访问的技术细节" class="headerlink" title="2.2 DRAM 访问的技术细节"></a>2.2 DRAM 访问的技术细节</h2><p>在介绍 dram 的章节中我们看到了 dram 芯片多路复用地址来以地址引脚的形式保存资源. 我们也看到了访问 dram 单元会花费时间, 因为这些单元的容量不会立即的放电来产生一个稳定的信号. 我们也看到 dram 单元必须被刷新, 现在我们该把这些和到一起看看这些因子是怎么共同决定 dram 访问的了.</p>
<p>我们会专注于现代科技, 不去讨论异步 dram 和他的特点因为他们不再和此相关了. 对这些感兴趣的读者可以看看注释 3 和 19. 我们也不会讨论Rambus dram(RDRAM)即使这项技术并不老旧. 只是它不再系统 memory 中广泛使用. 我们会主要专注于同步 dram(<em>SDRAM synchronous dram</em>)和他的继承者<em>DDR(double data rate dram)</em>.</p>
<p>sdram 正如名字所示, 根据一个时间源工作. mc 提供一个时钟, 他的频率决定了前端总线(front side bus FSB)的速度 - dram 芯片使用的 mc 的接口(/解释/ /fsb/). 截至撰写本文时, 频率有 800MHz, 1066MHz 1333MHz, 下一代声称还会有更高的频率(1600MHz). 这并不意味着这个总线上使用的频率有这么高, 相反, 现在的总线是双泵或者四泵的(double- or quad-pumped /ddr?/), 这意味着数据在每个循环中传送 2或者 4 次. 数量越高买的越好, 所以厂商喜欢把一个 4 泵 200MHz 的总线宣传为”有效的”800MHz</p>
<p>对于现在的 sdram, 每个数据传输包括 64 位(8bytes). fsb 的传输速率就是 8B 乘上有效总线频率(6.4GB/s 等于 4 泵 200MHz 总线). 这听起来很多但这是峰值，永远不会超过这个速度. 正如我们现在将看到的，与 RAM 模块对话的协议在无法传输数据时有很多停机时间. 这个停机时间是我们必须考虑的而且要缩短来达到最好的性能.</p>
<h3 id="2-2-1-读访问协议"><a href="#2-2-1-读访问协议" class="headerlink" title="2.2.1 读访问协议"></a>2.2.1 读访问协议</h3><p>图 2.8 展示了 dram 模块上一些连接的活动, 他们发生在三个不同颜色的阶段. 通常时间从左往右进行. 我们这里只讨论总线时钟, $\overline{\text{RAS}}$ $\overline{\text{CAS}}$ 信号和地址总线数据总线. 一个读循环以 mc 在地址总线上使得行地址可访问并降低$\overline{\text{RAS}}$开始. 所有的信号都在时钟的上升沿被读取. 所以时钟是否是完全方形的并不重要, 只要她在被读取的时候是稳定的就行. 放置行地址使得 ram 芯片开始锁住被寻址的行.</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gt4uigdp7sj30r20lmzm0.jpg" alt="截屏2021-08-04 下午4.40.09"></p>
<p>$\overline{\text{CAS}}$ 信号可以在 t<del>RCD</del>($\overline{\text{RAS}}$ -to-$\overline{\text{CAS}}$)时钟周期后被发送. 然后列地址被传送, 表现为在地址总线上可以访问并且降低$\overline{\text{CAS}}$线. 这样我们就能看清这两部分地址是怎么被通过相同的总线传输了.</p>
<p>现在寻址结束了数据可以被传递了, ram 芯片需要一些时间来准备这些. 这个延迟通常被叫做$\overline{\text{CAS}}$延迟(CL). 在图2.8 中cas延迟是2, 它可高可低, 取决于mc, 主板, dram模块的质量. 延迟也可以有半值(0.5). 如果CL=2.5 第一个数据就会在蓝区的第一个下降沿可以被访问.</p>
<p>有了这些去获得数据的准备, 只传送一个数据字会是很浪费的. 这就是为什么dram模块允许mc明确到底多少数据会被传输. 通常是2, 4, 8 个字. 这允许填满cache中的整行而不需要一个新的ras/cas序列. 这也使得 mc传送一个新的cas信号而不用重新选择行 成为可能. 这样, 连续的memory地址就可以被很快的读写因为ras信号不用被发送，行也不需要被失活(deactivate, 见下面). 保持行“打开”是mc需要去决定的. 投机的让他一直开着在现实中是有缺点的(见[3]). 发送新的cas信号只取决于ram模块的频率(通常特指为Tx, x是一个值比如1, 2; 1代表着是一个高性能dram每个周期都会接受新的命令)/([be subject to](dic://be subject to)受支配)/</p>
<p>在这个例子中sdram每个循环吐出一个字. 这是第一代做的事情, DDR可以每个循环传输两个字. 这削减了传输时间但是没有改变延迟. 原则上ddr2以同样的原理工作但实际上会有不同. 这里没必要深究, 要注意ddr2可以被做的更快, 更便宜, 更可靠, 更节能(见[6]).</p>
<h3 id="2-2-2-预充电与激活"><a href="#2-2-2-预充电与激活" class="headerlink" title="2.2.2 预充电与激活"></a>2.2.2 预充电与激活</h3><p>图2.8 没有涵盖整个周期, 它只展现了整个周期中访问dram的部分, 在一个新的ras信号可以发送之前, 当前被锁住的行必须被失活而去新的行必须被预充电. 我们可以专注于这样一种情景: 这是通过一条明确的指令完成的. 对于这个协议在某些情况下也有提升, 它允许这个额外的步骤被丢弃. 这个由预充电造成的延迟仍然会影响操作.</p>
<p>图2.9展示了从cas信号开始到下一行的cas信号的过程. 使用第一个cas信号的数据像之前一样在CL循环之后可以使用. 这个例子中带了两个字, 这在简单的sdram中会花费两个周期传输. 可以思考四个字在一个ddr芯片上的样子.</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gt4umcwm7jj30s00netar.jpg" alt="截屏2021-08-04 下午4.43.55"></p>
<p>即使在频率只有 1 的dram模块上与充电指令也不能被立即发出. 它必须要等待数据传输. 在这个例子中它话费了两个时钟周期. CL也是如此但是这只是个巧合. 预充电信号没有专门的数据线. 取而代之, 一些设施通过降低WE和RAS线来同步的发送这个信号. 这个组合自己没有实际意义.</p>
<p>只要充电指令发出了, 它需要花费**t<del>RP</del>(row precharge time)**个循环知道这个行可以被选择. 在图2.9 中许多时间(由紫色标识)与memory传输(亮蓝色)重合, 这很好! 但是t<del>RP</del> 比传输时间更长所以下一个ras信号被暂停了一个周期.</p>
<p>如果我们继续图中的时间线我们会发现下一个数据传输在前一个停止的5个周期之后. 这意味着数据总线在7个周期中只有2个在使用. 乘以FSB速度和理论6.4GB/s的800MHz总线成为1.8GB/s. 这不好而且必须被避免. 这个技术在第6部分会被讨论来提高利用率. 但是程序员必须尽一份自己的努力.</p>
<p>在sdram模块中还有一个时间值我们未讨论, 在图2.9预充电指令植被数据传输时间限制, 另一个约束是一个sdram模块在一个ras信号之后需要一些时间才能预充电另一个行(记为t<del>RAS</del>). 这个时间通常很长, 大概是t<del>RP</del>的两到三倍. 如果在一个ras信号之后只有一个cas信号, 这个传输几个周期就会结束, 这将成为一个问题. 假设在图2.9 中初始的cas信号是由ras信号直接预先传递的而且t<del>RAS</del>是8个周期. 那么预充电指令就会被额外延迟一个周期, 因为t<del>RCD</del>, CL, t<del>RP</del>的总和是7个周期.</p>
<p>DDR模块通常决定使用一个特殊的记号w-x-y-z-T. 比如2-3-2-8-T1, 这意味着</p>
<table>
<thead>
<tr>
<th align="left">标记</th>
<th align="left">值</th>
<th align="left">意义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">w</td>
<td align="left">2</td>
<td align="left">cas 延迟 CL</td>
</tr>
<tr>
<td align="left">x</td>
<td align="left">3</td>
<td align="left">ras-to-cas 延迟 t<del>RCD</del></td>
</tr>
<tr>
<td align="left">y</td>
<td align="left">2</td>
<td align="left">ras 预充电 t<del>RP</del></td>
</tr>
<tr>
<td align="left">z</td>
<td align="left">8</td>
<td align="left">从预充电延迟中恢复 t<del>RAS</del></td>
</tr>
<tr>
<td align="left">T</td>
<td align="left">T1</td>
<td align="left">指令频率</td>
</tr>
</tbody></table>
<p>有许多其他的时间限制影响指令的发出和处理. 这五个限制是现实中最主要的决定模块性能的部分.</p>
<p>有时, 了解这些信息对于使用的计算机能够解释某些测量结果是有用的. 当买电脑的时候知道这些肯定是游泳的因为他们和FSB, sdram模块速度一样, 是决定电脑速度最重要的因素.</p>
<p>特别大胆的读者也可尝试去调整系统, 有时 bios 允许改变一些或者所有的值, sdram模块有可编程寄存器, 这些值可以放在这里. 如果ram模块的质量很高, 他肯呢个会减少一个或者奇特的延迟而不影响电脑的稳定性. 很多的超频(overclocking)网站提供做这件事的丰富的文档. 自己承担风险, 别说没被警告过.</p>
<h3 id="2-2-3-再充电"><a href="#2-2-3-再充电" class="headerlink" title="2.2.3 再充电"></a>2.2.3 再充电</h3><p>在谈到dram的时候, 一个最容易被忽视的主题就是再充电. 正如2.1.2中解释的, dram单元必须被持续的刷新, 在剩下的系统中这个过程不是完全显式的发生. 有时候当一个行被再充电时是不可访问的, [3]的研究表明, 令人惊讶的是, dram的刷新机制可以戏剧性的影响性能.</p>
<p>JEDEC(Joint Electron Device Engineering Council)表明, 每一个dram单元都必须每<em>64ms</em>被刷新一次. 如果一个dram数组有8192个行, 这意味着mc必须平均每7.8125微秒发送一个刷新指令(刷新指令可以被排队所有现实中两个请求的最大间隔可以更长), mc负责安排刷新指令, dram模块跟踪最后被刷新的行的地址并且每个请求都自动增加地址的计数.</p>
<p>程序员对刷新和指令什么时候会发出无能为力, 但是在解释性能测量时记住dram的这一部分是很重要的. 如果要找回一个字,  但是这个字正在被刷新, 那么处理器就会暂停很长一段时间, 每一次刷新持续多久由dram模块决定.</p>
<h3 id="2-2-4-memory-类型"><a href="#2-2-4-memory-类型" class="headerlink" title="2.2.4 memory 类型"></a>2.2.4 memory 类型</h3><p>值的花费一些时间在当前和即将被使用的memory类型上, 我们会从<em>SDR(single data rate) sdram</em> 开始因为他们是DDR(double data rate) sdram的基础, sdr是很简单的, memory单元和数据传输速率是统一的.</p>
<p>如图2.10 dram单元数组可以以相同的速度 输出memory信息 和 传送到memory 总线上. 如果dram单元数组可以以100MHz的方式操作, 那么总线的一个单一单元的数据传输速度就是100Mb/s. 所有组件的频率f都是相同的, 提高dram芯片的吞吐量是很昂贵的因为能量消耗随着频率的增加上升. 由于单元数组很大会变得非常昂贵. 现实中甚至不止一个问题因为升高频率通常也要求升高维持系统稳定的电压. ddr sdram(追溯的称为ddr1)可以用来提升吞吐量而不需要增加任何频率.</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gt4usxevs5j30sc0b4wf2.jpg"></p>
<p>sdr和ddr1之间的区别是, 如图2.11所示而且从名字也可以猜到, ddr1每个周期传输两倍的数据. 也就是(i.e.)ddr1芯片在上升沿和下降沿都传输数据. 这个有时候被称作**“双泵”总线(double pumped bus)**为了达到这个目的而去不增加单元数组的频率, 就需要引入一个缓冲. 这个缓冲每个数据线保存两位, 这就要求图2.7中的单元数组中, 数据总线要包括两条线. 实现起来很简单: 只需为两个 DRAM 单元使用相同的列地址, 并并行访问它们. 为了实现这个, 单元数组需要作出的改变也很少.</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gt4utd2ad9j30qk0au3z6.jpg"></p>
<p>sdr dram 以他们的频率为标识(比如PC100 就是100MHz的sdr). 为了使ddr1 dram更好听, 销售者必须想出一个新策略因为频率没有改变. 他们想到了一个名字, 包括以byte为单位一个ddr模块(他们有64-bit总线)可以传输的速率:<br>100MHz * 64bit * 2 = 1600MB/s<br>由于一个100MHz的ddr模块被称作PC1600. 1600 &gt; 100一切市场需求都被满足了, 它听起来很好尽管提升仅仅是两倍.</p>
<p>为了更充分的利用memory技术, ddr2包括了一些新的创新. 最明显的改变是如图2.12所示就是翻倍了总线的频率. 频率翻倍意味着带宽翻倍, 由于频率翻倍对于单元数组不经济, 限制需要i/o缓冲每个周期取4bits, 然后再送给总线. 这意味着 DDR2 模块的更改仅使 <em>DIMM(/Dual-Inline-Memory-Modules/)</em> 的 I/O 缓冲组件能够以更高的速度运行. 这当然是可能的而且不会需要太多的能耗, 这只是一个小的组件而不是整个模块. 销售者想出的ddr2的名字和ddr1相似, 只是乘2换成了乘4(现在我们有了“四泵”总线). 表2.1展示了现在使用的模块的名字.</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gt4uwupquxj30s00bi3zd.jpg"></p>
<p>命名还有一点变化, cpu, 主板, dram 模块使用的 fsb 速度通过使用有效频率而被指明了, 也就是, 他在传输的时钟周期的两个沿都起了作用从而使得数字膨胀. 因此, 一个有着 266MHz 总线的 133MHz 模块有着 533MHz 的 fsb 频率.</p>
<p>DDR3 的规范(真的那个, 不是在显卡中用的假的 GDDR3) 在从 DDR2 的演变过程中需要更多的改变, 电压会从 ddr2 的 1.8v 降到 ddr3 的 1.5v. 由于能耗和电压的平方成正比, 这个改变带来了 30%的提升. 由于这个原因die 的大小和其他电气特性 ddr3 都可以做的更好, 比如在相同频率下能耗减半, 二选一的, 使用更高的频率也可以达到同样的功率. 或者加倍容量可以实现相同的热耗散.</p>
<p>ddr3 模块的单元序列以外部总线四分之一的速度运行, 这需要一个 8bit 的 i/o 缓冲, 相比之下 ddr2 需要 4bit, 如图 2.13</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gt4v2odv31j30s40b4t9j.jpg"></p>
<p>最初，DDR3 模块可能会有略高的 CAS 延迟，只是因为 DDR2 技术更加成熟, 这会导致 ddr3 只有在频率上更有效, 比那些可以达到 ddr2 的更高, 特别是当带宽比延迟更重要的时候. 之前已经谈到 1.3v 模块会和 ddr2 有一样的 cas 延迟, 不论如何, 由于更快的总线而达到更快素的的可能性比增长的延迟更有价值.</p>
<p>ddr3 可能的问题是, 对于 1600Mb/s 或者更高的传输速率, 每个通道的模块数量会被减少到只有一个, 在更早的版本这个要求应用于所有的频率, 所以有人希望在将来可以接触对所有频率的限制.</p>
<p>表 2.2 展示了 ddr3 模块常见的名字. JEDEC 认可前四种. 考虑到 intel 的 45nm 处理器有 1600Mb/s 的 fsb 速度, 1866Mb/s 是超频市场需要的, 我们会在对ddr3 发展的后期看到更多这种类型.</p>
<p>所有的 ddr memory 都有一个问题: 增长的总线频率使得制造并行的数据总线很困难, 一个 ddr2 模块有 240 个引脚, 所有连接到数据和地址的引脚都必须被路由所以他们有几乎相近的长度, 除此之外, 如果不止一个 ddr 模块被连接到同一个总线, 对于每一个新增的模块信号都会变得易损坏, ddr2 的说明允许最多每个总线连接两个模块, ddr3 的说明允许在高频时最多连接一个模块, 每个通道有着 240 个引脚的北桥不能驱使超过两个通道, 可以选择另外的 mc 但是这会是昂贵的.</p>
<p>这意味着商用的主板被限制最多只能拥有 4 个 ddr2 或 ddr3 模块, 这个限制严格的阻碍了系统可拥有的 memory 数量, 即使老的 32-bit 的 IA-32 处理器也可以控制 64GB 的 ram, 而且家用的 memory 需求也在增长, 所以必须做点什么.</p>
<p>一种做法是为每一个处理器添加 mc 如第二部分所说, amd在 Opteron 上这么做的, intel 在 CSI 技术上是这么做的, 只要处理器能够使用的内存量可以连接到单个处理器就会有所帮助, 在某些情况下并不是这样, 并且会带来 numa 结构及其负面影响, 对于一些情况需要其他的解决方案.</p>
<p><a href="https://www.techbang.com/posts/18381-from-the-channel-to-address-computer-main-memory-structures-to-understand">memory 层次</a></p>
<p><img src="https://cdn1.techbang.com/system/images/164600/original/9db89369284749feaa291ef48931618d.jpg?1401477760" alt="图解RAM结构与原理，系统记忆体的Channel、Chip与Bank"></p>
<p>intel 当前在大型服务器上的处理方式是FB-DRAM(fully buffered dram), fb-dram 模块使用和 ddr2 一样的 memory 芯片, 这很便宜. 区别在于 mc 之间的连接, fb-dram 没有使用平行数据总线而是使用一系列总线(Rambus DRAM had this back when, too, and SATA is the successor of PATA, as is PCI Express for PCI/AGP). 串行总线可以再一个更高的频率工作, 解决了串行总线的劣势甚至增加了带宽, 使用一系列总线的主要作用在于</p>
<ol>
<li>一个channel可以使用更多的模块</li>
<li>每个 mc 可以控制更多 channel</li>
<li>串行总线设计为全双工</li>
<li>部署其他的总线和提高速度是很便宜的</li>
</ol>
<p>和 ddr2 的 240 个针脚相比, 一个 fb-dram 模块只有 69 个针脚. 分清连接的 fb-dram 模块是很容易的因为总线的电效应可以被更好的处理, fb-dram 允许每个 channel 连接至多 8 个 dram 模块</p>
<p>和双通道的北桥的连接要求相比, 现在可以用更少的针脚驱动 6 个 fb-dram channel: 2<em>240 针脚 vs 6</em>69针脚, 每个 channel 的路由都更简单, 这可以减少主板的成本</p>
<p>完全双工的并行总线对于传统的 dram 特别的昂贵, 重复这些线路太昂贵了. 使用串行总线(即使他们之间是不同的, 正如 fb-dram 要求的那样)这就不是问题而且串行总线就是被设计成全双工的, 这意味着在一些情况下, 理论上带宽是可以加倍的. 但这并不是并行被用来增加带宽的唯一地方, 由于 fb-dram 控制器可以同时控制最多 6 个 channel, 带宽可以使用 fb-dram 来使用更少的 ram 增加. 在有四个模块两个 channel 的 ddr2 系统的地方, 可以使用 4channel 的 fb-dram 控制器实现相同的性能, 实际的串行总线带宽取决于使用 fb-dram 的 ddr2(或 ddr3)芯片.</p>
<p>可以归纳为如下表格:</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gtakzswzclj30t00cqt9y.jpg" alt="截屏2021-08-09 下午3.44.14"></p>
<p>如果多个 dimm 使用在一个 channel 上, fb-dram 也有一些缺点, 信号在链中的每个 DIMM 处延迟（尽管是最低限度的），从而增加了延迟. 第二个问题是驱使着串行总线的芯片需要大量的能量因为有很高的频率而且要驱使总线, 但是对于使用相同频率和相同数量的 memory, fb-dram 总是比 ddr2 和ddr3 要快因为至多四个 dimm 可以各自拥有自己的 channel, 对于大的 memory 系统 ddr 无法使用商用组件.</p>
<h3 id="2-2-5-结论"><a href="#2-2-5-结论" class="headerlink" title="2.2.5 结论"></a>2.2.5 结论</h3><p>这一部分展示了连接 dram不是可以任意快的过程, 至少不能和运行的处理器还有访问寄存器和缓存一样快, 要记住 cpu 频率和 memory 频率的区别, intel core2 处理器以 2.933GHz 频率运行, 而一个 1.066GHz 的 fsb 有一个 11:1 的时钟比(1.066GHz 的总线是四倍频的), memory 总线上的每一个时钟停止都意味着处理器上的 11 个时钟周期停止, 对于大多数机器, 实际的 dram 使用是更缓慢的因此更加增加了延迟 , 在我们接下来谈到暂停的时候请记住这些数据.</p>
<p>读指令的时间表展示了 dram 能保持高数据速率. 整个 dram 行可以在一个stall被传送, 数据总线可以保持一致被占用, 对 ddr 来说这意味着每个周期可以传送两个 64bit 字, 使用 ddr2-800 和两个 channel 意味着 12.8GB/s 的速率.</p>
<p>但是除非这样设计, 连接 dram不会一直是连续的, 不连续的 memory 区域会被使用, 这意味着需要预充电和新的 ras 信号, 这是速度会下降而且 dram 需要帮助, 行被实际使用时, 预充电和ras 信号越快代价就越小.</p>
<p>硬件和软件预提取可以创造更多的重叠减少stall, 预提取也会及时帮助改变memory 操作, 所以在数据被真正需要之前就会有更少的连接, 这是一个频率问题, 一轮中产生出来的数据必须被存储, 下一轮需要的数据必须被读取, 通过改变读的时间, 写操作和读操作不需要基本同时发出.</p>
<h2 id="2-3-其他主要-memory-用户"><a href="#2-3-其他主要-memory-用户" class="headerlink" title="2.3 其他主要 memory 用户"></a>2.3 其他主要 memory 用户</h2><p>除了 cpu 还有其他系统组件可以连接主memory, 高性能 card 比如网卡和大存储控制器不能承担起运输所有他们需要或者提供给 cpu的数据, 因此, 他们直接从主 memory读写数据(direct memory access DMA), 在图 2.1 我们可以看到 card 可以使用 memory 直接可南北桥沟通, 其他总线, 比如 usb 也需要 fsb 带宽, 虽然他们不使用 dma, 因为南桥通过北桥使用 fsb 连接到处理器.</p>
<p>尽管 dma 很有用, 但它意味着 fsb 带宽有了更多的竞争, 在 DMA 流量高的时候，CPU 可能会在等待来自主memory的数据时比平时stall 更久. 使用合适的硬件就能解决这个问题, 有图 2.3 的结构, 可以确保计算使用没有被 dma 影响的节点, 也可以连接南桥到达节点, 均等的把 fsb 的负载分布到所有节点上, 这有无数种可能, 在第六部分我们会介绍帮助达到这种提升的软件技术和变成接口.</p>
<p>最后应该提到一些便宜的系统有非独立的图像系统, 专用图像 ram, 这些系统使用部分主 memory 当做图像ram, 由于访问图像 ram 是很经常的(对于一个 1024*768 显示屏有 16bpp 60Hz 我们是再说 94MB/s)并且系统 memory 不像显卡上的 ram, 没有两个 port这会本质上的影响系统性能特别是延迟, 他们利大于弊, 人们知道不会得到最好的性能买那些机器.</p>
<h1 id="3-cpu-缓存"><a href="#3-cpu-缓存" class="headerlink" title="3 cpu 缓存"></a>3 cpu 缓存</h1><p>今天的 cpu 比 25 年前的精密很多, 那个时候, cpu core 的频率和 memory 总线在一个数量级, memory 访问只比寄存器访问慢一点, 但是这些在 90s 早期戏剧性的转变了, cpu 设计师们增加了 cpu core 的频率但是 memory 总线的频率和 ram 芯片的性能并没有成比例的增加, 这不是因为前面提到的更快的 ram 无法被造出来, 这是可以的但不经济, 和现代 cpu core一样快的 ram比任何 dram 都要贵几个数量级</p>
<p>如果要在有一个很小很快 ram 的机器 和 有一堆相对比较快的ram的机器 之间做选择, 给定的工作集大小超过小 RAM 大小 和 访问二级存储介质如硬盘驱动器的成本, 后者肯定没错, 问题是二级存储介质的速度, 通常是硬盘, 一定是常驻工作区的交换分区的, 访问这些硬盘比访问 dram 还要慢好几个数量级.</p>
<p>幸运的是不必做 0或1 的选择, 电脑可以有一个小的高速sram和一个大的 dram. 一种组合是分配一个特定的处理器地址空间专用于包含 sram , 剩下的为dram, 操作系统的任务是最优的分配数据来充分利用 sram, 基本上 sram 在这种情境下以处理器寄存器的扩展来使用.</p>
<p>尽管这是一种可能的方案但却不是可行的, 忽略这种 从 支持 sram 的硬件资源memory 映射到 进程虚拟地址空间的问题(本身就很困难)这种方法会要求每个进程在软件中管理这个 memory 区域的分配, 处理器之间这个 memory 区域的大小会差的很大(比如: 处理器们有不同数量的昂贵的 支持sram的memory), 每个组成程序的模块都会声明自己拥有的高速 memory, 这在同步上会引入新的损耗, 简而言之, 拥有高速 memory 的收益会被管理他们带来的损耗完全抵消掉.</p>
<p>所以, 不去把 sram 安置到操作系统或者用户的控制下, 而是把它变成由处理器直接使用和管理的资源. 这种模式下, sram 被用来制作main memory 中数据的临时副本(即缓存), 他们很快就会被处理器用到. 这是可行的因为程序代码和数据有时间和空间局部性, 这意味着在短时间内很有可能相同的代码和数据被使用. 对代码这意味着有循环因此相同的代码被反复执行(很好的空间局部性例子). 数据访问也恰好局限于一个小的区域. 即使短时间内使用的 memory 不是很近, 也有很高的概率相同的数据会被再次使用(时间局部性). 对于代码这意味着, 举个例子, 在一个循环中一个函数被调用而且这个函数位于地址空间的其他位置, 这个函数可能在 memory 中距离很远, 但是对函数的调用在时间上会很近， 对于数据这意味着同一时间使用的memory总量被理想的限制住了， 但是被使用的memory由于ram随意访问的特性不会相邻很近， 认识到局部性的存在是我们今天理解cpu缓存概念的关键。</p>
<p>一个简单的计算就能展示缓存在理论上是多有效， 假设访问主存花费200时钟周期，访问缓存memory花费15时钟周期， 那么代码使用100个数据每个一百次， 在访存上不使用缓存会花费2000000时钟周期，如果所有数据都在缓存中只需要168500时钟周期， 性能提升了91.5%。</p>
<p>sram缓存比主存小好几倍，在作者的经验里，有cpu缓存的工作站缓存大小通常是主存大小的1/1000（4MB缓存4GB主存）。这本身不构成问题，如果工作集（正在操作的数据集）比缓存小不会有什么问题， 但是电脑不会无缘无故有很大的缓存， 工作集势必比缓存要大，特别是对于运行多个进程的系统，工作集的大小是所有单独进程和内核的大小之和</p>
<p>处理有限的缓存大小需要一套好的策略来确定在任何给定时间应该缓存什么。由于并非工作集中的所有数据都在完全相同的时间使用，我们可以使用技术将缓存中的一些数据临时替换为其他数据。也许这可以在实际需要数据之前完成。这种预取将消除访问主存的一些成本，因为它相对于程序的执行是异步发生的。所有这些技术以及更多都可用于使缓存看起来比实际更大。我们将在 3.3 节中讨论它们。一旦利用了所有这些技术，就需要程序员来帮助处理器了。如何做到这一点将在第 6 节中讨论。</p>
<h2 id="3-1-cpu缓存概述"><a href="#3-1-cpu缓存概述" class="headerlink" title="3.1 cpu缓存概述"></a>3.1 cpu缓存概述</h2><p>在深入研究 CPU 缓存实现的技术细节之前，一些读者可能会发现首先了解缓存如何融入现代计算机系统的“大图”的更多细节很有用。</p>
<p>图 3.1：最低缓存配置 </p>
<p>图 3.1 显示了最低缓存配置。它对应于可以部署 CPU 缓存的早期系统的架构。 CPU 内核不再直接连接到主内存。所有的加载和存储都必须通过缓存。 CPU核心和缓存之间的连接是一种特殊的、快速的连接。在简化的表示中，主存储器和高速缓存连接到系统总线，系统总线也可用于与系统的其他组件通信。我们将系统总线称为“FSB”（front-side-bus），这是今天使用的名称；见第 2.2 节。在本节中，我们忽略北桥；假定它的存在是为了促进 CPU们与主存储器的通信。</p>
<p>尽管过去几十年的大多数计算机都使用冯诺依曼架构，但经验表明，将用于代码和数据的缓存分开是有利的。自 1993 年以来，英特尔一直使用单独的代码和数据缓存，并且从未回头。代码和数据所需的内存区域几乎是相互独立的，这就是独立缓存更好地工作的原因。近年来出现了另一个优势：大多数常见处理器的指令解码步骤很慢；缓存解码的指令可以加快执行速度，尤其是当流水线由于错误预测或无法预测的分支而为空时。</p>
<p>引入缓存后不久，系统变得更加复杂。缓存和主存之间的速度差距再次拉大，以至于增加了另一级缓存，比一级缓存更大更慢。出于经济原因，仅增加一级缓存的大小不是一种选择。今天，甚至有正常使用的具有三级缓存的机器。具有这种处理器的系统如图 3.2 所示。随着单个 CPU 中core数量的增加，未来缓存层级的数量可能会增加更多。</p>
<p>图 3.2 显示了三个缓存级别，并介绍了我们将在文档的其余部分中使用的命名法。 L1d 是一级数据缓存，L1i 是一级指令缓存，等等。注意这是示意图；实际上，数据流在从核心到主存的过程中不需要通过任何更高级别的高速缓存。cpu设计者在缓存的接口上有很大的设计自由。对于程序员这些设计选择是可见的。</p>
<p>此外，我们有具有多个内核的处理器，每个内核可以有多个“线程”。内核和线程之间的区别在于，不同的内核拥有（几乎）所有硬件资源的独立副本。核心可以完全独立运行，除非它们同时使用相同的资源——例如与外部的连接。另一方面，线程共享处理器的几乎所有资源。英特尔的线程实现只有单独的线程寄存器，即使是有限的，一些寄存器也是共享的。因此，现代 CPU 的完整图如图 3.3 所示。</p>
<p>图 3.3：多处理器、多核、多线程</p>
<p>在此图中，我们有两个处理器，每个处理器有两个内核，每个处理器有两个线程。线程共享一级缓存。core（深灰色阴影）具有单独的 1 级缓存。 CPU 的所有内核共享更高级别的缓存。两个处理器（浅灰色阴影的两个大框）当然不共享任何缓存。所有这些都很重要，特别是当我们讨论缓存对多进程和多线程应用程序的影响时。</p>
<h2 id="3-2-高级别的缓存操作"><a href="#3-2-高级别的缓存操作" class="headerlink" title="3.2 高级别的缓存操作"></a>3.2 高级别的缓存操作</h2><p>要了解使用缓存的成本和节省，我们必须将第 2 节中有关机器架构和 RAM 技术的知识与上一节中描述的缓存结构相结合。</p>
<p>默认情况下，CPU 内核读取或写入的所有数据都存储在缓存中。有些内存区域不能被缓存，但这只是操作系统实现者必须关心的事情；它对应用程序程序员是不可见的。还有一些指令允许程序员故意绕过某些缓存。这将在第 6 节中讨论。</p>
<p>如果 CPU 需要一个数据字，则首先搜索缓存。显然，缓存不能包含整个主存的内容（否则我们将不需要缓存），但由于所有内存地址都是可缓存的，因此每个缓存条目都使用<strong>主存中数据字的地址进行标记</strong>。这样，读取或写入地址的请求可以在缓存中搜索匹配的标签。此上下文中的地址可以是虚拟地址或物理地址，具体取决于缓存实现。</p>
<p>由于对于标签，除了实际内存之外，还需要额外的空间，因此选择一个字作为缓存的粒度是低效的。对于 x86 机器上的 32 位字，标签本身可能需要 32 位或更多。此外，由于空间局部性是缓存所基于的原则之一，不考虑这一点是很糟糕的。由于相邻的memory很可能一起使用，它也应该一起加载到缓存中。还记得我们在第 2.2.1 节中学到的内容：如果 RAM 模块可以在没有新的 CAS 甚至 RAS 的情况下连续传输许多数据字，那么它们的效率会更高。因此，存储在缓存中的条目不是单个字，而是几个连续字的“lines（行）”。在早期的缓存中，这些行是 32 字节长；现在的标准是 64 字节。如果内存总线是 64 位宽，这意味着每个高速缓存行需要 8 次传输。 DDR 有效地支持这种传输模式。</p>
<p>当处理器需要memory内容时，整个缓存行被加载到 L1d 中。每个缓存行的内存地址是通过根据高速缓存行大小屏蔽（mask）地址值来计算的。对于 64 字节缓存行，这意味着低 6 位为零。丢弃的位用作缓存行的偏移量（offset）。其余位在某些情况下用于定位缓存行并用作标记（tag）。在实践中，地址值被分成三个部分。对于 32 位地址，它可能如下所示：</p>
<p>cache line 示意图</p>
<p>对于大小为 2^O^ 的缓存行，<strong>低O位被用作缓存行的offset</strong>，接下来的 S 位选择“缓存集（cache set）”。我们将很快详细介绍为什么将集合而不是单个插槽（slot）用于缓存行。<strong>现在了解有 2^S^ 组缓存行就足够了。这留下了形成标签的前 32−S−O = T 位</strong>。T 位是与每个缓存行关联的值，用于区分缓存在同一缓存集中的所有别名（alias，All cache lines with the same S part of the address are known by the same alias.）。不必存储用于寻址缓存集的 S 位，因为它们对于同一集中的所有缓存行都是相同的。</p>
<p>当一条指令修改内存时，处理器仍然必须首先加载一个缓存行，因为没有指令一次修改整个缓存行（例外：写组合，如第 6.1 节所述）。因此，必须加载写入操作之前的缓存行内容。缓存不可能保存部分缓存行。已写入但尚未写回主存的高速缓存行被称为“脏（dirty）”。一旦写入，脏标志就会被清除。</p>
<p>为了能够在缓存中加载新数据，几乎总是首先需要在缓存中腾出空间。来自 L1d 的收回（eviction）将缓存行向下推到 L2（使用相同的缓存行大小）。这当然意味着必须在 L2 中腾出空间。这反过来可能会将内容推入 L3 并最终推入主内存。每次回收的成本都越来越高。这里描述的是现代 AMD 和 VIA 处理器首选的独占缓存（exclusive cache）模型。英特尔实现了包容性缓存（inclusive cache），其中 L1d 中的每个缓存行也存在于 L2 中。因此，从 L1d 驱逐要快得多。有了足够的二级缓存，在两个地方保存内容而浪费内存的缺点是最小的，并且在回收时得到了回报。独占缓存的一个可能优势是加载新的缓存行只需要触及 L1d 而不是 L2，这可能会更快。</p>
<p>只要不更改为处理器架构定义的内存模型，CPU 就可以随意管理缓存。例如，处理器利用很少或不使用内存总线活动并主动将脏缓存行写回主内存是可以的。 x86 和 x86-64 处理器之间、制造商之间甚至同一制造商的模型中的各种缓存架构都证明了内存模型抽象的力量。</p>
<p>在对称多处理器 (SMP symmetric multi-processor) 系统中，CPU 的高速缓存不能彼此独立工作。所有处理器都应该始终看到相同的内存内容。保持这种统一的内存视图称为“缓存一致性（cache coherency）”。<strong>如果一个处理器只看它自己的缓存和主存，它不会看到其他处理器中脏缓存行的内容</strong>。提供从另一个处理器直接访问一个处理器的缓存将非常昂贵并且是一个巨大的瓶颈。相反，处理器会检测另一个处理器何时想要读取或写入某个高速缓存行。</p>
<p>如果检测到写访问并且处理器在其缓存中具有缓存行的干净副本，则该高速缓存行被标记为无效（invalid）。未来的引用将需要重新加载缓存行。请注意，另一个 CPU 上的读取访问不需要失效，可以很好地保留多个干净的副本。</p>
<p>更复杂的缓存实现允许发生另一种可能性。假设一个处理器的缓存中的缓存行是脏的，而第二个处理器想要读取或写入该缓存行。在这种情况下，主内存已过期，请求处理器必须从第一个处理器获取缓存行内容。通过窥探（snooping），第一个处理器注意到这种情况并自动向请求处理器发送数据。这个动作绕过了主存，尽管在某些实现中，MC应该注意到这种直接传输并将更新的高速缓存行内容存储在主存中，如果访问是为了写入第一个处理器，则使其本地缓存行的副本无效。</p>
<p>随着时间的推移，已经开发了许多缓存一致性协议。最重要的是MESI，我们将在3.3.4节中介绍。所有这些的结果可以总结为几个简单的规则：<br>• 任何其他处理器的缓存中都不呈现脏缓存行。<br>• 同一高速缓存行的干净副本可以驻留在任意多个高速缓存中。<br>如果可以维护这些规则，即使在多处理器系统中，处理器也可以有效地使用它们的缓存。所有处理器需要做的就是监视彼此的<strong>写访问</strong>并将地址与本地缓存中的地址进行比较。在下一节中，我们将详细介绍有关实施的一些细节，尤其是成本。</p>
<p>最后，我们至少应该对与缓存命中和未命中相关的成本有一个印象。以下是 Intel 列出的 Pentium M 数据：</p>
<p>表格</p>
<p>这些是以 CPU 周期测量的实际访问时间。有趣的是，对于on-die L2 缓存访问时间的很大一部分（甚至可能是主要部分）是由线路延迟引起的。这是一个物理限制，它只会随着缓存大小的增加而变得更糟。只有缩小工艺（例如，在英特尔的产品阵​​容中，从 Merom 的 60nm 到 Penryn 的 45nm）才能改善这些数字。</p>
<p>表中的数字看起来很高，但幸运的是，不必为每次出现的缓存加载和未命中支付全部成本。部分成本是可以隐藏的。今天的处理器都使用不同长度的内部流水线，在这里指令被解码并准备执行。准备工作的一部分是从内存（或缓存）中加载值，如果它们被传输到寄存器。如果内存加载操作可以在流水线中足够早地启动，它可能会与其他操作并行发生，并且加载的整个成本可能会被隐藏。对于 L1d，这通常是可能的；对于一些具有长流水线的 L2 处理器也是如此。</p>
<p>提前启动内存读取有很多障碍。这可能就像没有足够的内存访问资源一样简单，也可能是由于加载的最终地址是另一条指令的结果。在这些情况下，负载成本不能（完全）隐藏。</p>
<p>对于写操作，CPU 不必等到值安全地存储在内存中。只要执行接下来的指令看起来与将值存储在内存中具有相同的效果，就没有什么可以阻止 CPU 走捷径。它可以提前开始执行下一条指令。借助可以保存常规寄存器中不再可用的值的影子寄存器（shadow register），甚至可以更改要存储的不完整写操作中的值。</p>
<p>图3.4</p>
<p>有关缓存行为影响的说明，请参见图 3.4。稍后我们将讨论生成数据的程序；它是一个程序的简单模拟，它以随机方式重复访问可配置数量的内存。每个数据项都有固定的大小。元素的数量取决于所选的工作集。Y 轴显示处理一个元素所需的平均 CPU 周期数；请注意，Y 轴的刻度是对数。这同样适用于 X 轴的所有此类图表。工作集的大小总是以 2 的幂表示。</p>
<p>该图显示了三个不同的平台。这并不奇怪：特定的处理器有 L1d 和 L2 缓存，但没有 L3。根据一些经验，我们可以推断出 L1d 的大小为 2^13^ 字节，而 L2 的大小为 2^20^ 字节。如果整个工作集适合 L1d，则每个元素的每次操作周期低于 1​​0。一旦超过 L1d 大小，处理器必须从 L2 加载数据，平均时间会上升到 28 左右。一旦 L2 不够时间再跳到 480 个周期甚至更多。这是许多或大多数操作必须从主存储器加载数据的时候。更糟糕的是：由于数据正在被修改，脏缓存行也必须被写回。</p>
<p>该图应该为研究有助于提高缓存使用率的编码改进提供足够的动力。我们在这里谈论的不是微不足道的百分之几的差异。我们谈论的是数量级的改进，这些改进有时是可能的。在第 6 节中，我们将讨论允许编写更高效代码的技术。下一节将详细介绍 CPU 缓存设计。这些知识是很好的，但对于论文的其余部分来说不是必需的。所以本节可以跳过。</p>
<h2 id="3-3-CPU缓存实现细节"><a href="#3-3-CPU缓存实现细节" class="headerlink" title="3.3 CPU缓存实现细节"></a>3.3 CPU缓存实现细节</h2><p>缓存实现者的问题是，巨大的主存中的每个单元都可能需要被缓存。如果程序的工作集足够大，这意味着有许多主存位置在争夺缓存中的位置。以前有人指出，高速缓存与主内存大小的比率为 1 比 1000 并不少见。</p>
<h3 id="3-3-1-关联性"><a href="#3-3-1-关联性" class="headerlink" title="3.3.1 关联性"></a>3.3.1 关联性</h3><p>可以实现一个缓存，其中每个缓存行都可以保存任何内存位置的副本（参见图 3.5）。这称为<strong>完全关联缓存</strong>。为了访问高速缓存行，处理器内核必须将每个高速缓存行的标签与请求地址的标签进行比较。标签将由地址的整个部分组成，而不是缓存行的偏移量（这意味着，第 15 页上的图中的 S 为零）。</p>
<p>有一些缓存是这样实现的，但是通过查看当今使用的 L2 的数据，将表明这是不切实际的。给定一个 4MB 缓存和 64B 缓存行，该高速缓存将有 65,536 个条目。为了获得足够的性能，缓存逻辑必须能够在短短几个周期内从所有这些条目中挑选出与给定标签匹配的条目。为了实现这个需要需要花费很大的努力。</p>
<p>图3.5</p>
<p>对于每个高速缓存行，需要一个比较器来比较标签（注意，S 为零）。每个连接旁边的字母表示宽度（以位为单位）。如果没有给出，则大小为1位。每个比较器必须比较两个 T 位宽的值。然后，根据结果，选择适当的缓存行内容并使其可用。这需要合并与缓存桶（cache bucket）一样多的O数据行集。实现单个比较器所需的晶体管数量很大，特别是因为它必须工作得非常快。没有迭代比较器是可用的。节省比较器数量的唯一方法是通过迭代比较标签来减少它们的数量。因为相同的原因这不适合迭代比较器：它需要太长时间。</p>
<p>全关联高速缓存对于小型高速缓存很实用（例如，某些英特尔处理器上的 TLB（translation lookaside buffer） 高速缓存是全关联高速缓存），但这些高速缓存很小，非常小。我们最多谈论几十个条目。</p>
<p>图3.6</p>
<p>对于 L1i、L1d 和更高级别的缓存，需要不同的方法。可以做的是限制搜索。在最极端的限制下，每个标签都映射到一个缓存条目。计算很简单：给定具有 65,536 个条目的 4MB/64B 缓存，我们可以使用地址的第 6 位到第 21 位（16 位）直接寻址每个条目。低 6 位是缓存行的索引。</p>
<p>这样一个<strong>直接映射缓存</strong>很快而且比较容易实现如图3.6所示。他只需要一个比较器，一个多路复用器（图中的两个，标签和数据是分开的，但这不是设计的硬性要求），以及一些仅选择有效缓存行内容的逻辑。由于速度要求，比较器很复杂，但现在只有一个；因此，可以花费更多的精力来加快速度。这种方法的真正复杂性在于多路复用器。简单多路复用器中的晶体管数量随 O(log N) 增长，其中 N 是高速缓存行的数量。这是可以容忍的，但可能会变慢，在这种情况下，可以通过在多路复用器中的晶体管上花费更多的空间来并行化一些工作和提高速度，从而提高速度。随着高速缓存大小的增加，晶体管的总数会缓慢增长，这使得该解决方案非常有吸引力。但它有一个缺点：只有当程序使用的地址相对于用于直接映射的位均匀分布时，它才能正常工作。如果它们不是，通常是这种情况，一些缓存条目被大量使用并因此被重复驱逐，而另一些则几乎不被使用或保持为空。 </p>
<p>图 3.7：组关联缓存原理图 </p>
<p>这个问题可以通过使缓存集关联来解决。<strong>组相联缓存</strong>结合了全相联缓存和直接映射缓存的优点，在很大程度上避免了这些设计的弱点。图 3.7 显示了组相    联缓存的设计。标记和数据存储分为一组，其中一组由高速缓存行的地址选择。这类似于直接映射缓存。但是，缓存中的每个设置值不是只有一个元素，而是为相同的设置值缓存了少量值。并行比较所有集合成员的标签，这类似于完全关联缓存的功能。结果是一个缓存不容易被不幸或故意选择具有相同组号的地址所破坏，同时缓存的大小不受比较器数量的限制，可以经济地实现。如果缓存增长，（在此图中）只是增加的列数，而不是行数。只有当缓存的关联性增加时，行数（因此比较器）才会增加。今天的处理器对 L2 高速缓存或更高的缓存使用了高达 24 的关联级别。 L1 缓存通常使用 8 组。</p>
]]></content>
      <categories>
        <category>cs</category>
      </categories>
      <tags>
        <tag>translate</tag>
      </tags>
  </entry>
  <entry>
    <title>汇编</title>
    <url>/2020/04/01/%E6%B1%87%E7%BC%96/</url>
    <content><![CDATA[<blockquote>
<p>关于汇编语言的总结, 原则是只记录要点</p>
</blockquote>
<span id="more"></span>

<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="整数加减"><a href="#整数加减" class="headerlink" title="整数加减"></a>整数加减</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.386</span><br><span class="line">.model flat, stdcall</span><br><span class="line">;flat: 内存模式, stdcall: 子程序调用规范</span><br><span class="line">.stack 4096</span><br><span class="line">;栈大小</span><br><span class="line">ExitProcess PROTO, dwExitCode:DWORD</span><br><span class="line">;标准 windows 服务</span><br><span class="line">.code</span><br><span class="line">main PROC</span><br><span class="line"> mov eax, 5</span><br><span class="line"> add eax, 6</span><br><span class="line"> </span><br><span class="line"> INVOKE ExitProcess, 0</span><br><span class="line">main ENDP</span><br><span class="line">END main</span><br></pre></td></tr></table></figure>

<h3 id="子程序"><a href="#子程序" class="headerlink" title="子程序"></a>子程序</h3><p>注意问题</p>
<ol>
<li>清除堆栈参数</li>
<li>保存寄存器现场, 可以用<code>uses eax...</code></li>
<li>局部变量</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">;c 调用规范</span><br><span class="line">main proc</span><br><span class="line">	push 5</span><br><span class="line">	push 6</span><br><span class="line">	call addtwo</span><br><span class="line">	add esp, 8;移除堆栈参数</span><br><span class="line">	mov eax, ebx</span><br><span class="line"></span><br><span class="line">y_param equ [ebp+12]</span><br><span class="line">x_param equ [ebp+8]</span><br><span class="line">addtwo proc</span><br><span class="line">	push ebp</span><br><span class="line">	mov ebp, esp; </span><br><span class="line">	mov eax, y_param</span><br><span class="line">	add eax, x_param</span><br><span class="line">	pop ebp</span><br><span class="line">	ret</span><br><span class="line">mysub endp</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">;stdcall 规范</span><br><span class="line">main proc</span><br><span class="line">	push 5</span><br><span class="line">	push 6</span><br><span class="line">	call addtwo</span><br><span class="line">	mov eax, ebx</span><br><span class="line"></span><br><span class="line">y_param equ [ebp+12]</span><br><span class="line">x_param equ [ebp+8]</span><br><span class="line">addtwo proc</span><br><span class="line">	push ebp</span><br><span class="line">	mov ebp, esp</span><br><span class="line">	mov eax, y_param</span><br><span class="line">	add eax, x_param</span><br><span class="line">	pop ebp</span><br><span class="line">	ret 8;清除堆栈</span><br><span class="line">mysub endp</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">;局部变量</span><br><span class="line">x_local equ dword ptr [ebp-4]</span><br><span class="line">y_local equ dword ptr [ebp-8]</span><br><span class="line">addtwo proc</span><br><span class="line">	push ebp</span><br><span class="line">	mov ebp, esp</span><br><span class="line">	;创建局部变量</span><br><span class="line">	sub esp, 8</span><br><span class="line">	mov x_local, 10</span><br><span class="line">	mov y_local, 20</span><br><span class="line">	</span><br><span class="line">	;删除局部变量</span><br><span class="line">	mov esp, ebp</span><br><span class="line">	</span><br><span class="line">	pop ebp</span><br><span class="line">	ret 8;清除堆栈</span><br><span class="line">mysub endp</span><br></pre></td></tr></table></figure>

<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gra2yw99r9j30mo0lyn3b.jpg" alt="截屏2021-06-07 下午10.39.50"></p>
<h2 id="汇编要点总结"><a href="#汇编要点总结" class="headerlink" title="汇编要点总结"></a>汇编要点总结</h2><h3 id="操作模式"><a href="#操作模式" class="headerlink" title="操作模式"></a>操作模式</h3><h4 id="保护模式"><a href="#保护模式" class="headerlink" title="保护模式"></a>保护模式</h4><p>所有指令特性可用, 分配给程序的独立内存区域叫<strong>段</strong></p>
<p>32 位保护模式下, 可寻址 4GB 地址空间</p>
<h5 id="虚拟-8086-模式"><a href="#虚拟-8086-模式" class="headerlink" title="虚拟 8086 模式"></a>虚拟 8086 模式</h5><p>保护模式的一个子模式</p>
<h4 id="实地址模式"><a href="#实地址模式" class="headerlink" title="实地址模式"></a>实地址模式</h4><p>程序直接访问系统内存和硬件设备</p>
<p>寻址 1MB 地址空间</p>
<h4 id="系统管理模式"><a href="#系统管理模式" class="headerlink" title="系统管理模式"></a>系统管理模式</h4><p>电源管理, 系统安全, 通常由计算机制造商实现</p>
<h3 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h3><ul>
<li><p>数据寄存器组(可以用作 16, 8 位, 但是此时不能用作指示器, 变址寄存器?)</p>
<ul>
<li>EAX 累加器, 乘除指令默认使用, 乘法乘数和积, 除法被除数和商</li>
<li>EBX 基址寄存器</li>
<li>ECX 计数寄存器, 默认循环计数</li>
<li>EDX 数据寄存器, 乘法高位, 除法余数</li>
</ul>
</li>
<li><p>指示器变址寄存器组(存放偏移地址, 用作指示器或者变址寄存器, 可用作 16, 不能用作 8)</p>
<ul>
<li>ESI 源操作数指示器</li>
<li>EDI 目的操作数指示器</li>
<li>EBP 基址寄存器</li>
<li>ESP 专用堆栈指示器, 一般不做数据寄存器</li>
</ul>
</li>
<li><p>段寄存器</p>
<ul>
<li>CS 代码段寄存器</li>
<li>SS </li>
<li>DS </li>
<li>ES, FS, GS </li>
</ul>
</li>
<li><p>指令指针</p>
<ul>
<li>EIP 保护下一条将要执行的指令的地址</li>
</ul>
</li>
<li><p>标志寄存器 EFLAGS</p>
<ul>
<li>zf: 零标志位, 相关指令执行后结果为 <strong>0</strong> 则 zf=1, 否则 0<br>mov ax,1<br>sub ax,1</li>
<li>pf: 奇偶标志位, <strong>结果中 1 为偶数</strong> pf=1, 否则 0</li>
<li>sf: 符号标志位, 结果为<strong>负</strong>, sf=1, 否则为 0</li>
<li>cf: 进位标志位, 在进行<strong>无符号</strong>数运算的时候，CF记录了运算结果的最高有效位向更高有效位向更高位的进位值/借位值,产生进位或向更高位借位都会使CF=1</li>
<li>of: 溢出标志位, <strong>有符号</strong>运算结果太大或太小 of=1, 否则 0</li>
</ul>
</li>
</ul>
<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>byte 8, word 16, dword 32, qword 64</p>
<h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><p><img src="https://img-blog.csdn.net/20180214135628549?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYWJjXzEyMzY2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p>
<p>32 位入栈操作栈顶指针-4</p>
<h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><h4 id="mov"><a href="#mov" class="headerlink" title="mov"></a>mov</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">;mov 不能从内存到内存</span><br><span class="line">var word ?</span><br><span class="line">mov ax, var;将 var 内存的值赋给 ax 寄存器, 而不是地址, 所以 mov 指令叫数据传送指令</span><br><span class="line">;movzx 0 扩展</span><br><span class="line">;movsx 符号扩展</span><br><span class="line">;xchg 交换两个操作数的内容</span><br><span class="line">array byte 10h, 20h, 30h, 40h</span><br><span class="line">mov al, array;将 array 的第一个字节传送到 al</span><br><span class="line">mov al, [array+1];将 array 的第二个字节传送到 al</span><br><span class="line">mov al, [esi];解析 esi 中的偏移量, 将数据传到 al 中, 单独使用[esi]需要 ptr 限制大小</span><br></pre></td></tr></table></figure>

<h4 id="算数指令"><a href="#算数指令" class="headerlink" title="算数指令"></a>算数指令</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">;自增自减 inc dec</span><br><span class="line">inc ax</span><br><span class="line"></span><br><span class="line">;加法 add</span><br><span class="line">add eax, var; eax+var-&gt;eax</span><br><span class="line"></span><br><span class="line">;减法 sub</span><br><span class="line">sub eax, var;eax-var-&gt;eax</span><br><span class="line"></span><br><span class="line">;取负 neg </span><br><span class="line">neg eax</span><br><span class="line"></span><br><span class="line">;乘法 mul 无符号数乘法</span><br><span class="line">mov al, 5h</span><br><span class="line">mov bl, 10h</span><br><span class="line">mul bl;bl*al-&gt;ax</span><br><span class="line">;乘法 imul 有符号数乘法</span><br><span class="line">;单操作数</span><br><span class="line">imul bx;ax*bx-&gt;dx:ax</span><br><span class="line">;双操作数</span><br><span class="line">imul ax, var;ax*var-&gt;ax 有截断</span><br><span class="line">;三操作数 imul reg, reg&#x2F;mem, imm</span><br><span class="line">imul ax, bx, 8;bx*8-&gt;ax</span><br><span class="line"></span><br><span class="line">;除法 div 无符号数除法</span><br><span class="line">mov ax, 0083h</span><br><span class="line">mov bl, 2</span><br><span class="line">div bl;al &#x3D; ax&#x2F;bl, ah &#x3D; ax%bl</span><br><span class="line">;除法 idiv 有符号数除法</span><br><span class="line">;单操作数</span><br><span class="line">.data</span><br><span class="line">byteval sbyte -48</span><br><span class="line">.code</span><br><span class="line">mov al, byteval</span><br><span class="line">cbw;扩展符号</span><br><span class="line">mov bl, +5</span><br><span class="line">idiv bl; al &#x3D; -9, ah &#x3D; -3</span><br><span class="line"></span><br><span class="line">;布尔运算: and, or, xor, not, test&#x3D;and 但是不改变目标操作数</span><br><span class="line"></span><br><span class="line">;移位</span><br><span class="line">;shl 左移 sal 算数左移 rol 循环左移</span><br><span class="line">;shr 右移补 0 sar 算数右移补符号位 ror 循环右移</span><br></pre></td></tr></table></figure>

<h4 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">;loop ecx 每次循环-1</span><br><span class="line">mov ax, 0</span><br><span class="line">mov ecx, 5; 初始化为 0 不停止</span><br><span class="line">L1:</span><br><span class="line">inc ax</span><br><span class="line">loop L1</span><br><span class="line">;loopz &#x3D; loope, 等于 ecx&#x3D;ecx-1, if ecx&gt;0 and zf&#x3D;1 then jump to destination</span><br></pre></td></tr></table></figure>

<h4 id="跳转"><a href="#跳转" class="headerlink" title="跳转"></a>跳转</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">;cmp jcond</span><br><span class="line">cmp eax, 5</span><br><span class="line">je L1</span><br><span class="line">;jcond</span><br><span class="line">;ABOVE, BELOW 无符号, GREATER LESS 有符号</span><br><span class="line">JA; JUMP WHEN ABOVE</span><br><span class="line">JNA; JUMP WHEN NOT ABOVE</span><br><span class="line">JAE; JUMP WHEN ABOVE OR EQUAL</span><br><span class="line">JNAE; JUMP WHEN NOT ABOVE OR EQUAL 不大于, 且不等于</span><br><span class="line"></span><br><span class="line">JB; JUMP WHEN BELOW</span><br><span class="line">JNB; JUMP WHEN NOT BELOW</span><br><span class="line">JBE; JUMP WHEN BELOW OR EQUAL</span><br><span class="line">JNBE; JUMP WHEN NOT BELOW OR EQUAL</span><br><span class="line"></span><br><span class="line">JG; JUMP WHEN GREATER</span><br><span class="line">JNG; JUMP WHEN NOT GREATER</span><br><span class="line">JGE; JUMP WHEN GREATER OR EQUAL</span><br><span class="line">JNGE; JUMP WHEN NOT GREATER OR EQUAL </span><br><span class="line"></span><br><span class="line">JL; JUMP WHEN LESS</span><br><span class="line">JNL; JUMP WHEN NOT LESS</span><br><span class="line">JLE; JUMP WHEN LESS OR EQUAL</span><br><span class="line">JNLE; JUMP WHEN NOT LESS OR EQUAL</span><br><span class="line"></span><br><span class="line">JE; JUMP WHEN EQUAL</span><br><span class="line">JZ; JUMP WHEN HAS ZERO FLAG JZ&#x3D;JE</span><br><span class="line">JNE; JUMP WHEN NOT EQUAL</span><br><span class="line">JNZ; JUMP WHEN NOT HAS ZERO FLAG</span><br><span class="line">JO; JUMP WHEN HAS OVERFLOW FLAG</span><br><span class="line">JC; JUMP WHEN HAS CARRY FLAG</span><br><span class="line">;pf: 奇偶标志位, 结果中 1 为偶数 pf&#x3D;1, 否则 0</span><br><span class="line">JP; JUMP WHEN HAS PARITY(奇偶) FLAG 偶校验</span><br><span class="line">JNP; JUMP WHEN NOT HAS PARITY FLAG 奇校验</span><br><span class="line">JS; JUMP WHEN HAS SIGN FLAG</span><br><span class="line">JNS; JUMP WHEN NOT HAS SIGN FLAG</span><br></pre></td></tr></table></figure>

<h4 id="子程序与堆栈"><a href="#子程序与堆栈" class="headerlink" title="子程序与堆栈"></a>子程序与堆栈</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">;push 先减少 esp, 再将操作数复制到堆栈</span><br><span class="line">;pop 先将操作数复制, 再增加 esp</span><br><span class="line">;pushfd 保存 flags, popfd 恢复 flags</span><br><span class="line">;pushad popad 32 位, pusha popa 16 位</span><br><span class="line"></span><br><span class="line">;call 1.调用之后的地址压入堆栈 2.子程序地址加载到 eip</span><br><span class="line">;ret 1.esp 指向的数值弹出到 eip</span><br><span class="line"></span><br><span class="line">;uses 保护寄存器, 首尾加 push pop, 但是子程序中不能使用 esp+偏移量</span><br><span class="line">arraysum proc uses esi ecx</span><br><span class="line">	mov eax, 0</span><br><span class="line">L1:</span><br><span class="line">	add eax, [esi]</span><br><span class="line">	add esi, type dword</span><br><span class="line">	loop L1</span><br><span class="line">	ret</span><br><span class="line">arraysum endp</span><br><span class="line"></span><br><span class="line">;enter numbytes, nestinglevel&#x2F;0</span><br><span class="line">;1.push ebp 2.mov ebp, esp 3.sub esp, numbytes</span><br><span class="line">mysub proc</span><br><span class="line">	enter 8, 0</span><br><span class="line">	</span><br><span class="line">;leave </span><br><span class="line">;1.mov esp, ebp 2.pop ebp</span><br><span class="line"></span><br><span class="line">;invoke</span><br><span class="line">push type array</span><br><span class="line">push lengthof array</span><br><span class="line">push offset array</span><br><span class="line">call dumparray</span><br><span class="line">;等效于, 其中 offset array 可以换为 addr array</span><br><span class="line">invoke dumparray, offset array, lengthof array, type array</span><br><span class="line"></span><br><span class="line">;proto 指定程序的外部过程</span><br><span class="line">exitprocess proto</span><br><span class="line">.code</span><br><span class="line">mov ecx, 0</span><br><span class="line">call exitprocess</span><br><span class="line">;函数定义</span><br><span class="line">arraysum proc uses esi ecx</span><br><span class="line">	ptrarray:ptr dword,</span><br><span class="line">	szarray:dword</span><br><span class="line">arraysum endp</span><br><span class="line">;函数声明</span><br><span class="line">arraysum proto, ptrarray:ptr dword, szarrya:dword</span><br></pre></td></tr></table></figure>

<h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">;重复指令</span><br><span class="line">;repe 如果相等继续, 以 ecx 为计数器</span><br><span class="line"></span><br><span class="line">;movsb, movsw, movsd 将 esi 内存数据复制到 edi 内存位置</span><br><span class="line">cld;清除方向标志位, cld 正向, std 反向</span><br><span class="line">mov esi, offset string1</span><br><span class="line">mov edi, offset string2</span><br><span class="line">mov ecx, 10</span><br><span class="line">rep movsb;将 esi 中的十个字节传送到 edi 寻址的内存位置(string2)</span><br><span class="line"></span><br><span class="line">;cmpsb, cmpsw, cmpsd 比较 esi 和 edi 寻址的内存数据</span><br><span class="line">.data</span><br><span class="line">source dword 1234h</span><br><span class="line">target dword 5678h</span><br><span class="line">.code</span><br><span class="line">mov esi, offset source</span><br><span class="line">mov edi, offset target</span><br><span class="line">cld</span><br><span class="line">mov ecx, lengthof source</span><br><span class="line">repe cmpsd;比较双字, 如果相等就重复, 直到 ecx&#x3D;0 或者发现不相等</span><br><span class="line"></span><br><span class="line">;scasb, scasw, scasd 比较累加器 al, ax, wax 与 edi 寻址的内存数据</span><br><span class="line">.data</span><br><span class="line">alpha byte &quot;abcdefgh&quot;, 0</span><br><span class="line">.code</span><br><span class="line">mov edi, offset alpha</span><br><span class="line">mov al, &#39;f&#39;</span><br><span class="line">mov ecx, lengthof alpha</span><br><span class="line">cld</span><br><span class="line">repne scasb;如果不相等就继续比较</span><br><span class="line">jnz quit;如果未发现字符就退出</span><br><span class="line"></span><br><span class="line">;stosb, stosw, stosd 将累加器内容保存到 edi寻址的内存位置</span><br><span class="line">.data</span><br><span class="line">count &#x3D; 100</span><br><span class="line">string1 byte count dup(?)</span><br><span class="line">.code</span><br><span class="line">mov al, 0ffh</span><br><span class="line">mov edi, offset string1</span><br><span class="line">mov ecx, count</span><br><span class="line">cld</span><br><span class="line">rep stosb;用 al 将 string1 填充</span><br><span class="line"></span><br><span class="line">;lodsb, lodsw, lodsd 将 esi 寻址的内存数据加载到累加器</span><br><span class="line">;将数组中的每一个元素乘一个常数</span><br><span class="line">.data</span><br><span class="line">array dword 1,2,3,4,5,6,7,8,9,10</span><br><span class="line">multiplier dword 10</span><br><span class="line">.code</span><br><span class="line">main proc</span><br><span class="line">	cld</span><br><span class="line">	mov esi, offset array</span><br><span class="line">	mov edi, esi</span><br><span class="line">	mov ecx, lengthof array</span><br><span class="line">L1:lodsd</span><br><span class="line">	mul multiplier</span><br><span class="line">	stosd</span><br><span class="line">	loop L1</span><br><span class="line">	exit</span><br><span class="line">main endp</span><br><span class="line">end main</span><br></pre></td></tr></table></figure>



<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">;等号伪指令, 将符号和一个整数表达式连接起来</span><br><span class="line">count &#x3D; 100</span><br><span class="line">;EQU 伪指令, 将符号和一个整数表达式或者任意文本连接起来</span><br><span class="line">count EQU 100</span><br><span class="line">count equ &lt;100&gt;;文本替换</span><br><span class="line"></span><br><span class="line">;$当前地址计数器</span><br><span class="line"></span><br><span class="line">;lea 返回间接操作数的地址</span><br><span class="line">makearray proc</span><br><span class="line">	push ebp</span><br><span class="line">	mov ebp, esp</span><br><span class="line">	sub esp, 32</span><br><span class="line">	lea esi, [ebp-30]</span><br><span class="line">	;mov esi, offset [ebp-30]不可, 因为 offset 只能用于编译时已知的地址</span><br><span class="line">	mov ecx, 30</span><br><span class="line">L1:</span><br><span class="line">	mov byte ptr [esi], &#39;*&#39;</span><br><span class="line">	inc esi</span><br><span class="line">	loop L1</span><br><span class="line">	add esp, 32</span><br><span class="line">	pop ebp</span><br><span class="line">	ret</span><br><span class="line">makearray endp</span><br><span class="line"></span><br><span class="line">;offset 返回一个变量与其所在段起始地址之间的距离</span><br><span class="line">mov esi, offset var; esi 中为 var 变量的偏移地址</span><br><span class="line">mov esi, offset array + 4;先得到 array 的偏移量再加 4</span><br><span class="line"></span><br><span class="line">;ptr 重写操作数默认的大小类型</span><br><span class="line">.data</span><br><span class="line">myDouble dword 12345678h</span><br><span class="line">.code</span><br><span class="line">mov ax, word ptr myDouble;ax &#x3D; 5678h 小端</span><br><span class="line">;直接 mov ax, myDouble 是不允许的</span><br><span class="line"></span><br><span class="line">;type 返回操作数或数组中每个元素的大小(字节)</span><br><span class="line">;lengthof 返回数组中元素的个数</span><br><span class="line">;sizeof 返回数组初始化时使用的字节数</span><br><span class="line">;typedef 创建用户定义类型</span><br><span class="line">pbyte typedef ptr byte</span><br></pre></td></tr></table></figure>

<h3 id="dosbox"><a href="#dosbox" class="headerlink" title="dosbox"></a>dosbox</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mount c ~/Desktop/netclass/asm/asm/dosbox</span><br><span class="line">c:</span><br><span class="line">dir</span><br></pre></td></tr></table></figure>



<h3 id="基础"><a href="#基础" class="headerlink" title="基础:"></a>基础:</h3><p><a href="https://tool.oschina.net/hexconvert">数制转换</a></p>
<ul>
<li><p>使用汇编语言编写的源代码，然后通过相应的汇编程序将它们转换成可执行的机器代码。这一过程被称为<strong>汇编过程</strong>。</p>
</li>
<li><p>普遍地说，每一种特定的汇编语言和其特定的机器语言指令集是一一对应的。</p>
</li>
<li><p>DB, DW, DD, DQ, DT 依次为 1, 2, 4, 8, 10</p>
</li>
<li><p><a href="https://zh.wikipedia.org/wiki/X86">x86</a>/<a href="https://zh.wikipedia.org/wiki/Amd64">amd64</a>汇编指令的两大风格分别是<a href="https://zh.wikipedia.org/wiki/Intel">Intel</a>汇编与<a href="https://zh.wikipedia.org/wiki/AT%26T">AT&amp;T</a>汇编，分别被<a href="https://zh.wikipedia.org/wiki/Microsoft_Windows">Microsoft Windows</a>/<a href="https://zh.wikipedia.org/wiki/Visual_C%2B%2B">Visual C++</a>与<a href="https://zh.wikipedia.org/wiki/GNU">GNU</a>/<a href="https://zh.wikipedia.org/wiki/GNU%E6%B1%87%E7%BC%96%E5%99%A8">Gas</a>采用（Gas也可使用Intel汇编风格）</p>
</li>
<li><table>
<thead>
<tr>
<th align="left">项目</th>
<th align="left">Intel风格(dosbox使用的是这种)</th>
<th align="left">AT&amp;T风格</th>
</tr>
</thead>
<tbody><tr>
<td align="left">操作数顺序</td>
<td align="left">目标操作数在前</td>
<td align="left">源操作数在前</td>
</tr>
<tr>
<td align="left">寄存器</td>
<td align="left"><strong>原样</strong></td>
<td align="left">加%前缀</td>
</tr>
<tr>
<td align="left">立即数</td>
<td align="left"><strong>原样</strong></td>
<td align="left">加$前缀</td>
</tr>
<tr>
<td align="left">16进制立即数</td>
<td align="left">用后缀B与H分别表示二进制与十六进制 对于16进制字母开头的要加前缀0</td>
<td align="left">加前缀0x</td>
</tr>
<tr>
<td align="left">访问内存长度的表示</td>
<td align="left">前缀BYTE PTR, WORD PTR, DWORD PTR和QWORD PTR表示字节,字,双字和四字</td>
<td align="left">后缀b,w,l,q表示字节,字,双字和四字</td>
</tr>
<tr>
<td align="left">引用全局或静态变量var的值</td>
<td align="left">[<strong>var</strong>]</td>
<td align="left">var</td>
</tr>
<tr>
<td align="left">引用全局或静态变量var的地址</td>
<td align="left"><strong>var</strong></td>
<td align="left">$var</td>
</tr>
<tr>
<td align="left">引用局部变量</td>
<td align="left">需要基于栈指针（rsp）</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">绝对寻址</td>
<td align="left">[imm]</td>
<td align="left">imm</td>
</tr>
<tr>
<td align="left">间接寻址</td>
<td align="left">[reg]</td>
<td align="left">(%reg)</td>
</tr>
<tr>
<td align="left">基址相对寻址</td>
<td align="left">[reg +imm]</td>
<td align="left">imm(%reg)</td>
</tr>
<tr>
<td align="left">变址寻址</td>
<td align="left">[base+index]</td>
<td align="left">(base,index)</td>
</tr>
<tr>
<td align="left">变址寻址</td>
<td align="left">imm[base+index]</td>
<td align="left">imm(base,index)</td>
</tr>
<tr>
<td align="left">比例变址寻址</td>
<td align="left">imm[base + index * scale ]</td>
<td align="left">imm(base, index, scale)</td>
</tr>
<tr>
<td align="left">scale只能是1,2,4,8其中的一个数字(1省略不写就是普通变址寻址)</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left">代码注释</td>
<td align="left">单行注释用;+注释内容。例如:mov   rax, rdx ;这里是注释</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">注意</td>
<td align="left">这里imm为立即数,base和index为寄存器,scale为伸缩量</td>
<td align="left"></td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="区分-地址-和-数"><a href="#区分-地址-和-数" class="headerlink" title="区分 地址 和 数"></a>区分 地址 和 数</h3><ul>
<li><p>举例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DS: [1000h]; 这是一个地址, 位置是 1000h</span><br><span class="line">3000h; 这是一个数, 大小是 3000h</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>助记符—&gt;机器指令</li>
<li>变量—&gt;操作数存放地址</li>
<li>指令前的标号—&gt;该指令的存放地址</li>
</ul>
</li>
</ul>
<h3 id="为什么要分段-内存-虚拟内存-分段部件-分页部件"><a href="#为什么要分段-内存-虚拟内存-分段部件-分页部件" class="headerlink" title="为什么要分段(内存, 虚拟内存, 分段部件, 分页部件)"></a>为什么要分段(内存, 虚拟内存, 分段部件, 分页部件)</h3><ul>
<li><p>历史</p>
<ul>
<li>1978年 推出 16 位 cpu8086, 内外数据线为 16 位, 地址总线为 20 位, 主存寻址 1MB</li>
<li>1982年 推出         cpu80286, 内外数据线为 16 位, 地址总线为 24 位, 主存寻址 16MB</li>
<li>1985年 推出32位 cpu80386, 内外数据线为 32 位, 地址总线为 32 位, 主存寻址 4GB(1MB*2^12)</li>
</ul>
</li>
<li><p>物理原因</p>
<ul>
<li><p>总线 20 位 —&gt; 寻址 1MB</p>
</li>
<li><p>总线 32 位 —&gt; 寻址 4G</p>
</li>
<li><p>段寄存器为 16 位 —&gt; 段的大小为 64K </p>
</li>
<li><p><strong>最低端 80X86 16 位虚拟机中, 内部结构是 16 位, 主线是 20 位, 为了解决这一问题:</strong></p>
<ul>
<li>将 1MB(20 位)的主存按 64KB(16 位)分段</li>
<li>设置四个段寄存器 CS, DS, SS, ES 保存段首址(20 位的高 16 位), 将这个 16 位(左移四位再变成 20 位)加上数据的偏移地址就得到了物理地址</li>
<li>其中 CS—&gt;IP, SS—&gt;SP, 一般情况下不需要定义附加数据段, 如果必须定义, 最简单的方法是让附加数据段与数据段重合. </li>
</ul>
</li>
<li><p>32 位暂时没看😬</p>
</li>
</ul>
</li>
<li><p>- </p>
</li>
</ul>
<h3 id="内存中的数据存放"><a href="#内存中的数据存放" class="headerlink" title="内存中的数据存放"></a>内存中的数据存放</h3><ul>
<li>高八位在在高地址, 低八位在低地址</li>
</ul>
<h3 id="寄存器寻址"><a href="#寄存器寻址" class="headerlink" title="寄存器寻址"></a>寄存器寻址</h3><ul>
<li>寄存器寻址 MOV AX, BX</li>
<li>寄存器间接寻址 MOV AX, [SI] ; AX=地址为 SI 的值 的值</li>
<li>变址寻址 MOV AL, [R*F] + V; 其中 F 应该是为了应对字节, 字, 双字的</li>
<li>基址加变址寻址 MOV AX, [BR+IR*F+V]; 默认段寄存器由 BR 决定,  为了表示矩阵</li>
<li>立即寻址 MOV AX, 036H</li>
<li>直接寻址 MOV DS:[20H], CL</li>
</ul>
<h3 id="子程序-1"><a href="#子程序-1" class="headerlink" title="子程序"></a>子程序</h3><ul>
<li>NEAR FAR<ul>
<li>NEAR 可省略</li>
<li>FAR </li>
<li>区别主要在于 NEAR 只是把 ip 入栈, 把 ea 赋值给 ip, FAR 在 NEAR 的基础上还要把 CS 入栈(最先入 cs, 再入 ip)</li>
</ul>
</li>
<li>RET 根据 NEAR 还是 FAR 出栈</li>
<li>传递参数<ul>
<li>寄存器法</li>
<li>约定单元法</li>
<li>堆栈法</li>
</ul>
</li>
</ul>
<h3 id="模块化处理"><a href="#模块化处理" class="headerlink" title="模块化处理"></a>模块化处理</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">F2T10.ASM</span><br><span class="line">NAME F2T10</span><br><span class="line">PUBLIC F2T10; 这里的 public 指明了 F2T10 是可以被其他模块调用的, 该语句可以放在任何地方</span><br><span class="line">DATA  SEGMENT  USE16 PARA    PUBLIC &#39;DATA&#39;</span><br><span class="line">;段名 segment 使用类型 定位方式 组合方式 &#39;类别&#39;</span><br><span class="line">;定位方式中para为默认, 定义段在什么样的起始边界开始</span><br><span class="line">;类别的作用是生成 exe 的时候进行分组(分配空间)</span><br><span class="line">;组合方式连在一起, public 同类别段会放在一起</span><br><span class="line">...</span><br><span class="line">DATA ENDS</span><br><span class="line"></span><br><span class="line">CODE SEGMENT USE16 PARA PUBLIC &#39;CODE&#39;</span><br><span class="line">ASSUME CS:CODE, DS:DATA</span><br><span class="line">F2T10 PROC</span><br><span class="line">...</span><br><span class="line">F2T10 ENDP</span><br><span class="line">CODE ENDS</span><br><span class="line">END</span><br><span class="line">-----------------------------------------</span><br><span class="line">MAIN.ASM</span><br><span class="line">;以上是一个子模块, 下面的是主模块</span><br><span class="line">NAME MAIN</span><br><span class="line">EXTRN F2T10:NEAR; 这里指明 F2T10 是外部模块的, 例如子程序, 如果两个代码块的类别名相同, 相当于在一个段里, 用 EXTRN F2R10:NEAR, 否则用 far</span><br><span class="line">IF1 </span><br><span class="line">;IF XXX ... ELSE ... ENDIF 如果条件成立就执行块中的语句, 其中if 有几个固定搭配</span><br><span class="line">	INCLUDE MACRO.LIB</span><br><span class="line">ENDIF</span><br><span class="line">.386</span><br><span class="line">DATA SEGMENT USE16 PARA PUBLIC &#39;DATA&#39;</span><br><span class="line">...</span><br><span class="line">DATA ENDS</span><br><span class="line"></span><br><span class="line">CODE SEGMENT USE16 PARA PUBLIC &#39;CODE&#39;</span><br><span class="line">ASSUME CS:CODE, DS:DATA</span><br><span class="line">START:...</span><br><span class="line">CODE ENDS</span><br><span class="line">START END</span><br><span class="line"></span><br><span class="line">masm main.asm</span><br><span class="line">masm F2T10.asm</span><br><span class="line">然后执行:LINK MAIN+F2T10;生成 main.exe</span><br></pre></td></tr></table></figure>





<h3 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h3><ul>
<li>默认:<ul>
<li>源串指示器 SI</li>
<li>目的串指示器 DI</li>
<li>重复次数 CX</li>
<li>SCAS 搜索值 AX</li>
<li>LODS 目的地址 AX</li>
<li>STOS 源地址</li>
</ul>
</li>
<li>MOVS</li>
<li>CMPS<ul>
<li>REPE CMPS 未比较完且相等时继续</li>
<li>REPNE CMPS 未比较完且不相等时继续</li>
</ul>
</li>
<li>SCAS 在 DI 中搜索 AL</li>
<li>LODS </li>
<li>STOS </li>
</ul>
<h3 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h3><p>I/O 空间</p>
<ul>
<li>IN<ul>
<li>IN AL/AX/EAX, 立即数</li>
<li>IN AL/AX/EAX, DX</li>
</ul>
</li>
<li>OUT 同上</li>
</ul>
<h3 id="中断"><a href="#中断" class="headerlink" title="中断"></a>中断</h3><h3 id="win32"><a href="#win32" class="headerlink" title="win32"></a>win32</h3><ul>
<li>32 位</li>
<li>输入输出退出等需要调用 api<ul>
<li>动态链接</li>
</ul>
</li>
<li>库<ul>
<li>user32.lib</li>
<li>kernel32.lib</li>
</ul>
</li>
</ul>
<h3 id="指令合集"><a href="#指令合集" class="headerlink" title="指令合集"></a>指令合集</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MOV OPD, OPS; MOVE DEST SRC</span><br><span class="line"></span><br><span class="line">XLAT; TRANSLATE ([BX+AL])-&gt;AL </span><br><span class="line"></span><br><span class="line">LEA OPD, OPS; LOAD EFFECTIVE ADDRESS 立即寻址 等价于 MOV OPD, OFFSET OPS, 其中 OPD 必须是 16&#x2F;32 位寄存器</span><br><span class="line"></span><br><span class="line">;标志位?</span><br><span class="line"></span><br><span class="line">NEG OPD; NEGTIVE 将 OPD 的每一位取反最后加一, 包括符号位, 得到结论: 负数&quot;取补码&quot;得到绝对值</span><br><span class="line"></span><br><span class="line">IMUL OPD, OPS;INTEGER MULTIPLICATION (OPD)*(OPS)-&gt;OPD</span><br><span class="line">IMUL OPD, OPS, N; (OPS)*N-&gt;OPD</span><br><span class="line">IMUL OPS; </span><br><span class="line">(AL)*(OPS)-&gt;AX</span><br><span class="line">(AX)*(OPS)-&gt;DX, AX</span><br><span class="line">(EAX)*(OPS)-&gt;EDX, EAX</span><br><span class="line">MUL</span><br><span class="line"></span><br><span class="line">DIV OPS;</span><br><span class="line">(AX)&#x2F;(OPS)-&gt;AL 商, AH 余数</span><br><span class="line">(DX, AX)&#x2F;(OPS)-&gt;AX 商, AH 余数</span><br><span class="line">(EDX, EAX)&#x2F;(OPS)-&gt;EAX商, EDX余数</span><br><span class="line">IDIV</span><br><span class="line"></span><br><span class="line">NOT OPD; 取反</span><br><span class="line">AND OPD, OPS; 逻辑与</span><br><span class="line">TEST OPD, OPS</span><br><span class="line">常见用法: TEST ECX, ECX 判断 ecx 是否为空, 如果为空则 zf&#x3D;1</span><br><span class="line">总结: test 是逻辑与运算, cmp 是 sub 运算, cmp a1, a2 执行操作 a1-a2</span><br><span class="line">XOR OPD, OPS; 异或</span><br><span class="line"></span><br><span class="line">SAL OPD, N 或者 SHL OPD, N; ARITHMATIC SHIFT LEFT, SHIFT LEFT 左移, 逻辑算数都一样</span><br><span class="line">SHR OPD, N; 逻辑右移, 加 0</span><br><span class="line">SAR OPD, N; 算数右移, 加符号位</span><br><span class="line"></span><br><span class="line">ROL OPD, N; 循环左移</span><br><span class="line">ROR OPD, N</span><br><span class="line">RCL OPD, N; ROTATE LEFT WITH CARRY 带进位循环左移</span><br><span class="line">RCR OPD, N</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">INT; INTERRUPT</span><br><span class="line"></span><br><span class="line">DW; DEFINE WORD</span><br><span class="line"></span><br><span class="line">PROC; PROCEDURE</span><br><span class="line"></span><br><span class="line">ENDS; END SEGMENT</span><br><span class="line"></span><br><span class="line">PTR; POINTER</span><br><span class="line"></span><br><span class="line">MOVSX; EXTENDED MOVE WITH SIGN DATA</span><br><span class="line">MOVZX; EXTENDED MOVE WITH ZERO DATA</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">***********************</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PUSH OPS; SP&#x3D;SP-1</span><br><span class="line"></span><br><span class="line">POP OPD; SP&#x3D;SP+1</span><br><span class="line"></span><br><span class="line">DIV;https:&#x2F;&#x2F;blog.csdn.net&#x2F;loovejava&#x2F;article&#x2F;details&#x2F;7044242</span><br><span class="line"></span><br><span class="line">IMUL OPD, OPS; 有符号数乘法</span><br><span class="line">IMUL OPD, OPS, N; OPS*N-&gt;OPD</span><br><span class="line">IMUL OPS; AL*OPS-&gt;AX 字节</span><br><span class="line">					AX*OPS-&gt;DX,AX 字</span><br><span class="line">					EAX*OPS-&gt;EDX,EAX 双字</span><br><span class="line">MUL;无符号乘法,用法同上</span><br><span class="line"></span><br><span class="line">ADD AX,10;把 ax 加上 10 再存到 ax 里</span><br><span class="line"></span><br><span class="line">SUB</span><br><span class="line"></span><br><span class="line">LOOP 标号</span><br><span class="line"></span><br><span class="line">逻辑移位, 总是用 0 补充</span><br><span class="line">SHL EDX, 7;EDX 左移 7 位</span><br><span class="line">shr ;右移</span><br><span class="line"></span><br><span class="line">算数移位, 用符号位补充</span><br><span class="line">sar;右移</span><br><span class="line"></span><br><span class="line">CBW ;将 AL 中的符号扩展到 AH 里</span><br><span class="line"></span><br><span class="line">;意义    无符号比较     有符号比较</span><br><span class="line">&gt;        JA, JNBE     JG, JNLE</span><br><span class="line">&gt;&#x3D;			 JAE, JNB			JNC, JGE, JNL</span><br><span class="line">&lt;				 JB, JNAE			JC, JL, JN, JNGE</span><br><span class="line">&lt;				 JBE, JNA			JLE, JNG</span><br><span class="line"></span><br><span class="line">CMP BYTE PTR[SI],&quot;#&quot; ;ptr前面的类型有byte（字节）、word（字）、dword（双字）、qword（四字）、tbyte（十字节）、far（远类型）和near（近类型）</span><br><span class="line"></span><br><span class="line">LEA </span><br><span class="line">lea指令</span><br><span class="line">load effective address, 加载有效地址，可以将有效地址传送到指定的的寄存器。指令形式是从存储器读数据到寄存器, 效果是将存储器的有效地址写入到目的操作数, 简单说, 就是C语言中的”&amp;”.</span><br><span class="line">mov指令</span><br><span class="line">在CPU内或CPU和存储器之间传送字或字节，它传送的信息可以从寄存器到寄存器，立即数到寄存器，立即数到存储单元，从存储单元到寄存器，从寄存器到存储单元，从寄存器或存储单元到除CS外的段寄存器(注意立即数不能直接送段寄存器)，从段寄存器到寄存器或存储单元。</span><br><span class="line">但是注意</span><br><span class="line">（1） MOV指令中的源操作数绝对不能是立即数和代码段CS寄存器；</span><br><span class="line">（2） MOV指令中绝对不允许在两个存储单元之间直接传送数据；</span><br><span class="line">（3） MOV指令中绝对不允许在两个段寄存器之间直接传送数据；</span><br><span class="line">（4） MOV指令不会影响标志位</span><br><span class="line">使用[]区别</span><br><span class="line">第二操作数加不加中括号[]的区别就是:</span><br><span class="line">lea对变量没有影响是取地址,对寄存器来说加[]时取值,第二操作数不加[]非法</span><br><span class="line">mov对变量来说没有影响是取值,对寄存器来说是加[]时取地址,第二操作数不加[]是取值</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>language</category>
      </categories>
      <tags>
        <tag>assembly</tag>
      </tags>
  </entry>
  <entry>
    <title>电影</title>
    <url>/2020/04/07/%E7%94%B5%E5%BD%B1/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="2c0b0fea852c9262517570ec970bcd4c1869a99f5e8f1361d65f95d27df2b4da"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>others</category>
      </categories>
      <tags>
        <tag>movie</tag>
      </tags>
  </entry>
  <entry>
    <title>设备列表编辑</title>
    <url>/2020/10/22/%E7%9B%91%E6%8E%A7%E7%82%B9%E8%AE%BE%E5%A4%87%E5%88%97%E8%A1%A8%E7%BC%96%E8%BE%91/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="724af5516267fefac98267994b358e6a8ff0df1c9f4f562805d5498c81001aa0"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>kenzo</category>
      </categories>
      <tags>
        <tag>kenzo</tag>
      </tags>
  </entry>
  <entry>
    <title>程序设计</title>
    <url>/2022/02/15/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="事件驱动程序设计"><a href="#事件驱动程序设计" class="headerlink" title="事件驱动程序设计"></a>事件驱动程序设计</h1><p>这种模型的程序执行流程是由用户的动作（如<a href="https://zh.wikipedia.org/wiki/%E6%BB%91%E9%BC%A0">鼠标</a>的按键，键盘的按键动作）或者是由其他程序的<a href="https://zh.wikipedia.org/wiki/%E8%A8%8A%E6%81%AF">消息</a>来决定的。相对于批处理程序设计（batch programming）而言，程序执行的流程是由<a href="https://zh.wikipedia.org/wiki/%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88%E5%B8%AB">程序员</a>来决定。然而，事件驱动程序设计这种设计模型是在<a href="https://zh.wikipedia.org/w/index.php?title=%E4%BA%92%E5%8B%95%E7%A8%8B%E5%BA%8F&action=edit&redlink=1">交互程序</a>（Interactive program）的情况下孕育而生的。</p>
<h2 id="概观"><a href="#概观" class="headerlink" title="概观"></a>概观</h2><p>取代传统上一次等待一个完整的指令然后再做执行的方式，事件驱动程序模型下的系统，基本上的架构是预先设计一个<a href="https://zh.wikipedia.org/wiki/%E4%BA%8B%E4%BB%B6%E8%BF%B4%E5%9C%88">事件循环</a>所形成的程序，这个事件循环程序不断地检查目前要处理的信息，根据要处理的信息执行一个<strong>触发函数</strong>进行必要的处理。其中这个外部信息可能来自一个目录夹中的文件，可能来自键盘或鼠标的动作，或者是一个时间事件。</p>
<p>对一个<a href="https://zh.wikipedia.org/wiki/%E4%BA%8B%E4%BB%B6%E9%A9%85%E5%8B%95">事件驱动</a>（event driven）系统进行程序设计，因此可以视为改写系统默认触发函数的行为，来符合自己需要的一种动作。输入的事件可以放进事件循环或者是经由已经注册的<a href="https://zh.wikipedia.org/wiki/%E4%B8%AD%E6%96%B7">中断处理器</a>来与硬件事件交互；而许多的软件系统使用了混和这两种技术的处理。预先设计好的算法确定了一件事，那就是当他们被需要的时候，就会在适当的时机被触发。也因此提供了一个模拟中断驱动环境（interrupt driven environment）的软件抽象架构。事件驱动程序设计基本上包含了许多小程序片段，这些小程序片段被称为<a href="https://zh.wikipedia.org/w/index.php?title=%E4%BA%8B%E4%BB%B6%E8%99%95%E7%90%86%E5%99%A8&action=edit&redlink=1">事件处理器</a>并且被用来回应外部的事件与<a href="https://zh.wikipedia.org/wiki/%E5%88%86%E7%99%BC%E4%BA%8B%E4%BB%B6">分发事件</a>。通常尚未被事件处理器处理的事件，都会被系统放在一个称为<a href="https://zh.wikipedia.org/wiki/%E4%BA%8B%E4%BB%B6%E4%BD%87%E5%88%97">事件队列</a>的数据结构中，等待被处理。</p>
<p>许多情况下，事件处理器可以自己触发事件，因此也可能形成一个<a href="https://zh.wikipedia.org/w/index.php?title=%E4%BA%8B%E4%BB%B6%E4%B8%B2&action=edit&redlink=1">事件串</a>。 事件驱动程序设计的着重于弹性以及<a href="https://zh.wikipedia.org/wiki/%E9%9D%9E%E5%90%8C%E6%AD%A5%E5%8C%96">异步化</a>上面，并且企图尽可能的<a href="https://zh.wikipedia.org/w/index.php?title=Modeless&action=edit&redlink=1">modeless</a>。 <a href="https://zh.wikipedia.org/wiki/%E5%9B%BE%E5%BD%A2%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2">图形用户界面</a>这类程序就是典型的事件驱动设计方式。</p>
<p>计算机<a href="https://zh.wikipedia.org/wiki/%E4%BD%9C%E6%A5%AD%E7%B3%BB%E7%B5%B1">操作系统</a>是事件驱动程序的典型示例。在操作系统的最底层，中断处理器的动作就像是硬件事件的直接处理器，搭配着 CPU 执行分配事件规则动作。对软件进程而言，基本上操作系统可视为一个事件分配器，发送资料和软件中断给用户自己写的软件进程。</p>
<h2 id="相对应于批处理程序设计"><a href="#相对应于批处理程序设计" class="headerlink" title="相对应于批处理程序设计"></a>相对应于批处理程序设计</h2><p>下面是两个数相加的示例，分别用批量版本与事件驱动版本来撰写</p>
<h3 id="批量版本"><a href="#批量版本" class="headerlink" title="批量版本"></a>批量版本</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">read a number (from the keyboard) and store it in variable A[0]</span><br><span class="line">read a number (from the keyboard) and store it in variable A[1]</span><br><span class="line">print A[0]+A[1]</span><br></pre></td></tr></table></figure>

<h3 id="事件驱动版本"><a href="#事件驱动版本" class="headerlink" title="事件驱动版本"></a>事件驱动版本</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set counter K to 0</span><br><span class="line">repeat &#123;</span><br><span class="line">   if a number has been entered (from the keyboard) &#123;</span><br><span class="line">       store in A[K] and increment K</span><br><span class="line">       if K equals 2 print A[0]+A[1] and reset K to 0</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="进程间通信的同步-异步，-阻塞-非阻塞"><a href="#进程间通信的同步-异步，-阻塞-非阻塞" class="headerlink" title="进程间通信的同步/异步， 阻塞/非阻塞"></a>进程间通信的同步/异步， 阻塞/非阻塞</h1><p>粗一看， 好像<strong>同步/ 非同步</strong>， <strong>阻塞/非阻塞</strong> 是两种维度的概念， 可以分别对待， 但是稍微推敲一下就会发现上述的解释存在不妥之处。</p>
<ul>
<li>如果<strong>“同步”</strong>是发起了一个调用后， 没有得到结果之前不返回， 那它毫无疑问就是被<strong>“阻塞”</strong>了（即调用进程处于 “waiting” 状态）。</li>
<li>如果<strong>“异步”</strong>调用发出了以后就直接返回了， 毫无疑问， 这个进程没有被<strong>“阻塞”</strong>。</li>
</ul>
<p>所以， 上述的解释是不准确的。 让我们看一下《操作系统概念（第九版）》中有关进程间通信的部分是如何解释的：</p>
<p><img src="https://pic1.zhimg.com/50/v2-d6729b9e95e8f20c4e53215327596692_720w.jpg?source=1940ef5c" alt="img"></p>
<p>翻译一下就是：</p>
<blockquote>
<p>进程间的通信是通过 send() 和 receive() 两种基本操作完成的。具体如何实现这两种基础操作，存在着不同的设计。  消息的传递有可能是<strong>阻塞的</strong>或<strong>非阻塞的</strong> – 也被称为<strong>同步</strong>或<strong>异步</strong>的：</p>
</blockquote>
<ul>
<li><p>阻塞式发送（blocking send）. 发送方进程会被一直阻塞， 直到消息被接受方进程收到。</p>
</li>
<li><p>非阻塞式发送（nonblocking send）。 <a href="https://www.zhihu.com/search?q=%E5%8F%91%E9%80%81%E6%96%B9%E8%BF%9B%E7%A8%8B&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:241673170%7D">发送方进程</a>调用 send() 后， 立即就可以其他操作。</p>
</li>
<li><p>阻塞式接收（<a href="https://www.zhihu.com/search?q=blocking+receive&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:241673170%7D">blocking receive</a>） 接收方调用 receive() 后一直阻塞， 直到消息到达可用。</p>
</li>
<li><p>非阻塞式接受（nonblocking receive） 接收方调用 receive() 函数后， 要么得到一个有效的结果， 要么得到一个空值， 即不会被阻塞。</p>
</li>
<li><p>也就是说， 从进程级通信的维度讨论时， 阻塞和同步（非阻塞和异步）就是一对同义词， 且需要针对<strong>发送方</strong>和<strong>接收方</strong>作区分对待。</p>
</li>
</ul>
<p>———- 下面对理解同步异步，阻塞非阻塞所需的知识点进行详细叙述———————</p>
<h2 id="先修知识"><a href="#先修知识" class="headerlink" title="先修知识"></a>先修知识</h2><p>几个底层概念的通俗（不严谨）解释：</p>
<ul>
<li><p>中断（interrupt）  </p>
</li>
<li><ul>
<li>CPU 微处理器有一个中断信号位， 在每个CPU时钟周期的末尾, CPU会去检测那个中断信号位是否有中断信号到达， 如果有， 则会根据中断优先级决定是否要暂停当前执行的指令， 转而去执行处理中断的指令。 （其实就是 CPU 层级的 while 轮询）</li>
</ul>
</li>
<li><p>时钟中断( Clock Interrupt )</p>
</li>
<li><ul>
<li>一个硬件时钟会每隔一段（很短）的时间就产生一个中断信号发送给 CPU，CPU 在响应这个中断时， 就会去执行操作系统内核的指令， 继而将 CPU 的控制权转移给了操作系统内核， 可以由操作系统内核决定下一个要被执行的指令。</li>
</ul>
</li>
<li><p>系统调用（system call）</p>
</li>
<li><ul>
<li>system call 是操作系统提供给应用程序的接口。 用户通过调用 systemcall 来完成那些需要操作系统内核进行的操作， 例如硬盘， 网络接口设备的读写等。</li>
</ul>
</li>
<li><p>进程阻塞</p>
<p><img src="https://pic3.zhimg.com/50/v2-e88514c2e604c4ac538c402f1788862c_720w.jpg?source=1940ef5c" alt="img"></p>
<p>上图展示了一个进程的不同状态：</p>
<ul>
<li>New. 进程正在被创建.</li>
<li>Running. 进程的指令正在被执行</li>
<li>Waiting. 进程正在等待一些事件的发生（例如 I/O 的完成或者收到某个信号）</li>
<li>Ready. 进程在等待被操作系统调度</li>
<li>Terminated. 进程执行完毕（可能是被强行终止的）</li>
</ul>
<p>我们所说的 “阻塞”是指进程在<strong>发起了一个系统调用</strong>（System Call） 后， 由于该系统调用的操作不能立即完成，需要等待一段时间，于是内核将进程挂起为<strong>等待 （waiting）</strong>状态， 以确保它不会被调度执行， 占用 CPU 资源。</p>
</li>
</ul>
<h2 id="I-O-System-Call-的阻塞-非阻塞，-同步-异步"><a href="#I-O-System-Call-的阻塞-非阻塞，-同步-异步" class="headerlink" title="I/O System Call 的阻塞/非阻塞， 同步/异步"></a>I/O System Call 的阻塞/非阻塞， 同步/异步</h2><p>这里再重新审视 <strong>阻塞/非阻塞 IO</strong> 这个概念， 其实<strong>阻塞和非阻塞</strong>描述的是进程的一个操作是否会使得进程转变为“等待”的状态， 但是为什么我们总是把它和 IO 连在一起讨论呢？</p>
<p>原因是， <strong>阻塞</strong>这个词是与系统调用 System Call 紧紧联系在一起的， 因为要让一个进程进入 等待（waiting） 的状态, 要么是它主动调用 wait() 或 sleep() 等挂起自己的操作， 另一种就是它调用 System Call, 而 System Call 因为涉及到了 I/O 操作， 不能立即完成， 于是内核就会先将该进程置为等待状态， 调度其他进程的运行， 等到 它所请求的 I/O 操作完成了以后， 再将其状态更改回 ready 。</p>
<p>操作系统内核在执行 System Call 时， CPU 需要与 IO 设备完成一系列物理通信上的交互， 其实再一次会涉及到阻塞和非阻塞的问题， 例如， 操作系统发起了一个读硬盘的请求后， 其实是向硬盘设备通过总线发出了一个请求，它即可以阻塞式地等待IO 设备的返回结果，也可以非阻塞式的继续其他的操作。 在现代计算机中，这些物理通信操作基本都是异步完成的， 即发出请求后， 等待 I/O 设备的中断信号后， 再来读取相应的设备缓冲区。 但是，大部分操作系统默认为用户级应用程序提供的都是阻塞式的系统调用 （blocking systemcall）接口， 因为阻塞式的调用，使得应用级代码的编写更容易（代码的执行顺序和编写顺序是一致的）。</p>
<p>但同样， 现在的大部分操作系统也会提供非阻塞I/O 系统调用接口（Nonblocking I/O system call）。 一个非阻塞调用不会挂起调用程序， 而是会立即返回一个值， 表示有多少bytes 的数据被成功读取（或写入）。</p>
<p>非阻塞I/O 系统调用( nonblocking system call )的另一个替代品是 <strong>异步I/O系统调用 （asychronous system call）</strong>。 与非阻塞 I/O 系统调用类似，<a href="https://www.zhihu.com/search?q=asychronous+system+call&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:241673170%7D">asychronous system call</a> 也是会立即返回， 不会等待 I/O 操作的完成， 应用程序可以继续执行其他的操作， 等到 I/O 操作完成了以后，操作系统会通知调用进程（设置一个用户空间特殊的<a href="https://www.zhihu.com/search?q=%E5%8F%98%E9%87%8F%E5%80%BC&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:241673170%7D">变量值</a> 或者 触发一个 signal 或者 产生一个软中断 或者 调用应用程序的回调函数）。</p>
<p>此处， <strong>非阻塞I/O 系统调用( nonblocking system call )</strong> 和 <strong>异步I/O系统调用 （asychronous system call）</strong>的区别是：</p>
<ul>
<li>一个<strong>非阻塞I/O 系统调用 read()</strong> 操作立即返回的是任何可以立即拿到的数据， 可以是完整的结果， 也可以是不完整的结果， 还可以是一个空值。</li>
<li>而<strong>异步I/O系统调用</strong> read（）结果必须是完整的， 但是这个操作完成的通知可以延迟到将来的一个时间点。</li>
</ul>
<p>下图展示了同步I/O 与 异步 I/O 的区别 （非阻塞 IO 在下图中没有绘出）.  </p>
<p><img src="https://pic2.zhimg.com/50/v2-e0180a5ffebd91c480d0ccdc02c6d2a7_720w.jpg?source=1940ef5c" alt="img"><img src="https://pic2.zhimg.com/80/v2-e0180a5ffebd91c480d0ccdc02c6d2a7_1440w.jpg?source=1940ef5c" alt="img"></p>
<p>注意， 上面提到的 <strong>非阻塞I/O 系统调用( nonblocking system call )</strong> 和 <strong>异步I/O系统调用</strong> 都是非阻塞式的行为（non-blocking behavior）。 他们的差异仅仅是返回结果的方式和内容不同。</p>
<h2 id="非阻塞-I-O-如何帮助服务器提高吞吐量"><a href="#非阻塞-I-O-如何帮助服务器提高吞吐量" class="headerlink" title="非阻塞 I/O 如何帮助服务器提高吞吐量"></a>非阻塞 I/O 如何帮助服务器提高吞吐量</h2><p>考虑一个<strong>单进程</strong>服务器程序， 收到一个 Socket 连接请求后， 读取请求中的文件名，然后读请求的文件名内容，将文件内容返回给客户端。 那么一个请求的处理流程会如下图所示。</p>
<p><img src="https://pic3.zhimg.com/50/v2-e34d4aca125704c317b43b0eee707f2b_720w.jpg?source=1940ef5c" alt="img"><img src="https://pic3.zhimg.com/80/v2-e34d4aca125704c317b43b0eee707f2b_1440w.jpg?source=1940ef5c" alt="img"></p>
<ul>
<li>R 表示读操作</li>
<li>W 表示写操作</li>
<li>C 表示关闭操作</li>
</ul>
<p>在这个过程中， 我们可以看到， CPU 和 硬盘IO 的资源大部分时间都是闲置的。 此时， 我们会希望在等待 I/O 的过程中继续处理新的请求。</p>
<p>方案一： <a href="https://www.zhihu.com/search?q=%E5%A4%9A%E8%BF%9B%E7%A8%8B&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:241673170%7D">多进程</a></p>
<ul>
<li>每到达一个请求， 我们为这个请求新创建一个进程来处理。 这样， 一个进程在等待 IO 时， 其他的进程可以被调度执行， 更加充分地利用 CPU 等资源。</li>
<li>问题： 每新创建一个进程都会消耗一定的内存空间， 且进程切换也会有时间消耗， 高并发时， 大量进程来回切换的时间开销会变得明显起来。</li>
</ul>
<p>方案二：多线程</p>
<ul>
<li>和多进程方案类似，为每一个请求新建一个线程进行处理，这样做的重要区别是， 所有的线程都共享同一个<a href="https://www.zhihu.com/search?q=%E8%BF%9B%E7%A8%8B%E7%A9%BA%E9%97%B4&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:241673170%7D">进程空间</a></li>
<li>问题： 需要考虑是否需要为特定的逻辑使用锁。</li>
</ul>
<p>引申问题： 一个进程中的某一个线程发起了 system call 后， 是否造成整个进程的阻塞？ 如果会， 那么多线程方案与单进程方案相比就没有明显的改善。</p>
<ul>
<li><p>解决办法1：内核支持的线程（kenerl supported threads）  </p>
</li>
<li><ul>
<li>操作系统内核能够感知到线程， 每一个线程都会有一个内核调用栈（kenerl stack） 和 保存CPU 寄存器下文的 table 。</li>
</ul>
</li>
</ul>
<p><img src="https://pic3.zhimg.com/50/v2-f2cffd9f40a2c7476e6acae3be746dc4_720w.jpg?source=1940ef5c" alt="img"><img src="https://pic3.zhimg.com/80/v2-f2cffd9f40a2c7476e6acae3be746dc4_1440w.jpg?source=1940ef5c" alt="img"></p>
<p>在这种方案中， 如果 CPU 是多核的， 不同的线程还可以运行在不同的 CPU processor 上。 既实现了IO 并发， 也实现了 CPU 并发。</p>
<p>问题： 内核支持线程可移植性差， 其实现对于不同的操作系统而言有所差别。</p>
<ul>
<li><p>解决办法2： 用户支持的线程（user supported threads）  </p>
</li>
<li><ul>
<li><p>内核感知不到用户线程， 每一个用户的进程拥有一个调度器， 该调度器可以感知到线程发起的系统调用， 当一个线程产生系统调用时， 不阻塞整个进程， 切换到其他线程继续运行。 当 I/O 调用完成以后， 能够重新唤醒被阻塞的线程。</p>
</li>
<li><p>实现细节：  </p>
</li>
<li><ul>
<li>应用程序基于线程库 thread libray 编写</li>
<li>线程库中包含 “虚假的” read(), write(), accept()等系统调用。</li>
<li>线程库中的 read(), write(), accept() 的底层实现为非阻塞系统调用（Non-blocking system call）， 调用后，由于可以立即返回， 则将特定的线程状态标记为 waiting, 调度其他的可执行线程。 内核完成了 IO 操作后， 调用线程库的回调函数， 将原来处于 waiting 状态的线程标记为 runnable.</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img src="https://pica.zhimg.com/50/v2-55e7f48b51f42fd77db2d06cf185fb40_720w.jpg?source=1940ef5c" alt="img"><img src="https://pica.zhimg.com/80/v2-55e7f48b51f42fd77db2d06cf185fb40_1440w.jpg?source=1940ef5c" alt="img"></p>
<p>从上面的过程可以看出，用户级支持线程（User-Supported Threads）的解决方案基于非阻塞IO系统调用( non-blocking system call) ， 且是一种基于操作系统内核事件通知（event-driven）的解决方案， 该方案可以降低系统处理并发请求时的进程切换开销。  基于这个方案， 可以引申到更为宽泛的 <a href="https://www.zhihu.com/search?q=event-driven+progreamming&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:241673170%7D">event-driven progreamming</a> 话题上。 但是这里就不作赘述了。</p>
<h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><ol>
<li>阻塞/非阻塞， 同步/异步的概念要注意讨论的上下文：</li>
</ol>
<ul>
<li><p>在进程通信层面， 阻塞/非阻塞， 同步/异步基本是同义词， 但是需要注意区分讨论的对象是发送方还是接收方。</p>
</li>
<li><p>发送方阻塞/非阻塞（同步/异步）和接收方的阻塞/非阻塞（同步/异步） 是互不影响的。</p>
</li>
<li><p>在 IO 系统调用层面（ IO system call ）层面， <strong>非阻塞 IO 系统调用</strong> 和 <strong>异步 IO 系统调用</strong>存在着一定的差别， 它们都不会阻塞进程， 但是返回结果的方式和内容有所差别， 但是都属于非阻塞系统调用（ non-blocing system call ）</p>
<p>\2. 非阻塞系统调用（non-blocking I/O system call 与 asynchronous I/O system call） 的存在可以用来实现线程级别的 I/O 并发， 与通过多进程实现的 I/O 并发相比可以减少内存消耗以及进程切换的开销。</p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>自顶向下读书笔记</title>
    <url>/2022/08/03/%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<blockquote>
</blockquote>
<span id="more"></span>

<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="1-Computer-Networks-and-the-Internet"><a href="#1-Computer-Networks-and-the-Internet" class="headerlink" title="1 Computer Networks and the Internet"></a>1 Computer Networks and the Internet</h2><p>1.1  What Is the Internet? </p>
<p>1.1.1  A Nuts-and-Bolts Description </p>
<p>host/end system, connected by communication links &amp; packet switches</p>
<p>Link-layer switches are typically used in access networks, while routers are typically used in the network core</p>
<p>ISP</p>
<p>1.1.2  A Services Description </p>
<p>API</p>
<p>1.1.3  What Is a Protocol? </p>
<p>1.2  The Network Edge </p>
<p>1.2.1  Access Networks : host+first router</p>
<p>home access</p>
<ul>
<li>DSL(telephone) cable(TV, HFC) FTTH(optical) Satellite</li>
</ul>
<p>enterprise access</p>
<ul>
<li>LAN(Ethernet, wifi, 蜂窝)</li>
</ul>
<p>1.2.2  Physical Media </p>
<table>
<thead>
<tr>
<th>access</th>
<th>media</th>
</tr>
</thead>
<tbody><tr>
<td>DSL</td>
<td>twisted-pair copper wire</td>
</tr>
<tr>
<td>HFC</td>
<td>coaxial cable</td>
</tr>
<tr>
<td>FTTH</td>
<td>fiber optics</td>
</tr>
</tbody></table>
<p>1.3  The Network Core </p>
<p>1.3.1  Packet Switching </p>
<ul>
<li>store and forward</li>
<li>delay</li>
<li>route</li>
</ul>
<p>1.3.2  Circuit Switching </p>
<p>traditional telephone network</p>
<p>1.3.3  A Network of Networks </p>
<ul>
<li>ISP</li>
</ul>
<p>1.4  Delay, Loss, and Throughput in Packet-Switched Networks </p>
<p>1.4.1  Overview of Delay in Packet-Switched Networks </p>
<ul>
<li>processing delay, queuing delay, transmission delay, propagation delay</li>
</ul>
<p>1.4.2  Queuing Delay and Packet Loss </p>
<ul>
<li>traffic intensity La/R</li>
</ul>
<p>1.4.3  End-to-End Delay </p>
<p>1.4.4  Throughput in Computer Networks </p>
<p>bit per second</p>
<p>bottleneck link</p>
<p>1.5  Protocol Layers and Their Service Models 47</p>
<p>1.5.1 Layered Architecture 47 </p>
<ul>
<li>5 application transport network link physical</li>
<li>5 message消息 segment报文段 datagram数据报 frame帧 bit</li>
<li>7OSI Application presentation session transport network link physical</li>
</ul>
<p>1.5.2 Encapsulation 53</p>
<p>1.6  Networks Under Attack 55</p>
<p>malware</p>
<p>viruses: malware requir user interaction</p>
<p>worms: malware without user interaction</p>
<p>DoS(denial of service)</p>
<p>DDoS(distributed denial of service)</p>
<p>IP spoofing</p>
<p>1.7  History of Computer Networking and the Internet </p>
<p>1.7.1  The Development of Packet Switching: 1961–1972 </p>
<p>1.7.2  Proprietary Networks and Internetworking: 1972–1980 </p>
<p>1.7.3  A Proliferation of Networks: 1980–1990 </p>
<p>1.7.4  The Internet Explosion: The 1990s </p>
<p>1.7.5  The New Millennium </p>
<p>1.8  Summary 66</p>
<h2 id="2-Application-Layer"><a href="#2-Application-Layer" class="headerlink" title="2 Application Layer"></a>2 Application Layer</h2><p>2.1  Principles of Network Applications </p>
<p>2.1.1  Network Application Architectures </p>
<ul>
<li>C/S p2p</li>
<li>客户端是发起连接的, 服务端是等待被连接的</li>
</ul>
<p>2.1.2  Processes Communicating </p>
<ul>
<li><p>socket 是应用层和传输层的接口</p>
<p>a socket is the interface between <strong>the application layer and the transport layer within a host</strong>. It is also referred to as the Application Programming Inter- face <strong>(API) between the application and the network</strong>.</p>
</li>
</ul>
<p>2.1.3  Transport Services Available to Applications </p>
<p>internet 不提供 throughput 和 timing 保障</p>
<p>2.1.4  Transport Services Provided by the Internet </p>
<ul>
<li>UDP TCP SSL(<em>?</em>), ssl 是 tcp 在应用层的加强(but instead is an enhancement of TCP, with the enhancements being implemented in the application layer)</li>
</ul>
<p>2.1.5  Application-Layer Protocols </p>
<p>2.1.6  Network Applications Covered in This Book </p>
<p>2.2  The Web and HTTP </p>
<p>2.2.1  Overview of HTTP </p>
<p>TCP</p>
<p>Because an HTTP server maintains no information about the clients, HTTP is said to be a stateless protocol</p>
<p>2.2.2  Non-Persistent and Persistent(closed when timeout) Connections </p>
<ul>
<li><p>每一个请求是开一个新的 tcp 连接还是可继续使用之前的 tcp 连接</p>
</li>
<li><p>RTT round trip time</p>
</li>
<li><p>three way handshake</p>
</li>
</ul>
<h3 id="2-2-3-HTTP-Message-Format"><a href="#2-2-3-HTTP-Message-Format" class="headerlink" title="2.2.3  HTTP Message Format"></a>2.2.3  HTTP Message Format</h3><p>ASCII</p>
<p>1 request line get post head put delete</p>
<p><strong>head</strong></p>
<p>The HTTP HEAD method requests <a href="https://reqbin.com/Article/HttpHeaders">HTTP headers</a> from the server as if the document was requested using the <a href="https://reqbin.com/Article/HttpGet">HTTP GET</a> method. The only difference between HTTP HEAD and GET requests is that for HTTP HEAD, the server only returns headers without body.</p>
<p><strong>Both PUT and POST can be used for creating.</strong></p>
<p>You have to ask, “what are you performing the action upon?”, to distinguish what you should be using. Let’s assume you’re designing an API for asking questions. If you want to use POST, then you would do that to a list of questions. If you want to use PUT, then you would do that to a particular question.</p>
<p><strong>Great, both can be used, so which one should I use in my RESTful design:</strong></p>
<p>Some considerations:</p>
<ul>
<li>Do you name the URL objects you create explicitly, or let the server decide? If you name them then use PUT. If you let the server decide then use POST.</li>
<li>PUT is defined to assume idempotency, so if you PUT <strong>an object twice, it should have no additional effect</strong>. This is a nice property, so I would use PUT when possible. Just make sure that the PUT-idempotency actually is implemented correctly in the server.</li>
<li>You can update or create a resource with PUT with the same object URL</li>
<li>With POST you can have 2 requests coming in at the same time making modifications to a URL, and they may update different parts of the object.</li>
</ul>
<p><strong>An example:</strong></p>
<p><strong>POST:</strong></p>
<p>Used to modify and update a resource</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;questions&#x2F;&lt;existing_question&gt; HTTP&#x2F;1.1</span><br><span class="line">Host: www.example.com&#x2F;</span><br></pre></td></tr></table></figure>

<p>Note that the following is an error:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;questions&#x2F;&lt;new_question&gt; HTTP&#x2F;1.1</span><br><span class="line">Host: www.example.com&#x2F;</span><br></pre></td></tr></table></figure>

<p>If the URL is not yet created, you should not be using POST to create it while specifying the name. This should result in a ‘resource not found’ error because <code>&lt;new_question&gt;</code> does not exist yet. You should PUT the <code>&lt;new_question&gt;</code> resource on the server first.</p>
<p>You could though do something like this to create a resources using POST:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;questions HTTP&#x2F;1.1</span><br><span class="line">Host: www.example.com&#x2F;</span><br></pre></td></tr></table></figure>

<p>Note that in this case the resource name is not specified, the new objects URL path would be returned to you.</p>
<p><strong>PUT:</strong></p>
<p>Used to create a resource, or overwrite it. While you specify the resources new URL.</p>
<p>For a new resource:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PUT &#x2F;questions&#x2F;&lt;new_question&gt; HTTP&#x2F;1.1</span><br><span class="line">Host: www.example.com&#x2F;</span><br></pre></td></tr></table></figure>

<p>To overwrite an existing resource:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PUT &#x2F;questions&#x2F;&lt;existing_question&gt; HTTP&#x2F;1.1</span><br><span class="line">Host: www.example.com&#x2F;</span><br></pre></td></tr></table></figure>

<p><strong>4.3.4. PUT</strong></p>
<p>The PUT method requests that the state of the target resource be <code>created</code> or <code>replaced</code> with the state defined by the representation enclosed in the request message payload.</p>
<p>2-5 header lines</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/dir/page.html</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>xxx </span><br><span class="line"><span class="attribute">connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">user-agent</span><span class="punctuation">: </span>mozilla/5.0</span><br><span class="line"><span class="attribute">accept-language</span><span class="punctuation">: </span>fr</span><br><span class="line"></span><br><span class="line">(entity body)</span><br></pre></td></tr></table></figure>

<ol>
<li>post 只能对已经存在url使用</li>
</ol>
<p>response</p>
<p>status code</p>
<p>101 switching protocols</p>
<p>200 ok</p>
<p>301 Moved Permanently</p>
<p>302 move temperory</p>
<p>304 not modified 不返回资源</p>
<p>305 use proxy</p>
<p>308 Permanent Redirect</p>
<p>400 bad request</p>
<p>401 unauthorized</p>
<p>403 forbidden 状态码意为服务器成功解析请求但是客户端没有访问该资源的权限</p>
<p>404 not found</p>
<p>405 method no allowed</p>
<p>408 request timeout</p>
<p><strong><code>500 Internal Server Error</code></strong></p>
<p>501 not implement</p>
<p>502 bad gateway</p>
<p>504 gateway timeout</p>
<p>505 http version ot supported</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">date</span><span class="punctuation">: </span>xxx</span><br><span class="line"><span class="attribute">server</span><span class="punctuation">: </span>Apache/2.2.3 (centos)</span><br><span class="line"><span class="attribute">last-modified</span><span class="punctuation">: </span>xxx</span><br><span class="line"><span class="attribute">content-length</span><span class="punctuation">: </span>2000</span><br><span class="line"><span class="attribute">content-type</span><span class="punctuation">: </span>text/html</span><br><span class="line"></span><br><span class="line">(entity body)</span><br></pre></td></tr></table></figure>



<h3 id="2-2-4-User-Server-Interaction-Cookies"><a href="#2-2-4-User-Server-Interaction-Cookies" class="headerlink" title="2.2.4  User-Server Interaction: Cookies"></a>2.2.4  User-Server Interaction: Cookies</h3><ul>
<li>cookie 组成<ul>
<li>Cookie: from user to server</li>
<li>Set-Cookie: from server to user</li>
<li>cookie 文件 in user</li>
<li>cookie db in server</li>
</ul>
</li>
<li>cookie 过程<ol>
<li>c: request</li>
<li>s: set-cookie, entry in db</li>
<li>c: cookie</li>
<li>s: identify in db, response</li>
</ol>
</li>
</ul>
<p>2.2.5  Web Caching </p>
<p>also called proxy server</p>
<p>2.2.6  The Conditional GET 114</p>
<ul>
<li>If-Modified-Since: from web cache to server</li>
</ul>
<p>2.3  File Transfer: FTP </p>
<p>TCP, maintain state, 7-bit ASCII</p>
<p>2.3.1 FTP Commands and Replies </p>
<p>(first) control connection persistent</p>
<p>(then) data connection not persistent</p>
<p>??????这里请继续</p>
<p>2.4  Electronic Mail in the Internet </p>
<p>2.4.1  SMTP 121</p>
<p>2.4.2  Comparison with HTTP 124</p>
<ul>
<li>http pull, smtp push</li>
</ul>
<p>2.4.3  Mail Message Format 125</p>
<p>2.4.4  Mail Access Protocols 125</p>
<ul>
<li>pop3, imap, http</li>
</ul>
<p>2.5  DNS—The Internet’s Directory Service</p>
<p>2.5.1  Services Provided by DNS </p>
<p>distributed databas, UDP, port 53</p>
<p>2.5.2  Overview of How DNS Works </p>
<ul>
<li>root server, TLD dns server(top-level domain), authoritative dns server, local dns server</li>
<li>cache</li>
</ul>
<p>2.5.3  DNS Records and Messages </p>
<ul>
<li>(name, value, type, ttl)</li>
<li>type<ul>
<li>A hostname - ip</li>
<li>NS domain(com) - authoritative dns server</li>
<li>CNAME alias hostname - canonical hostname</li>
<li>MX alias hostname - mail server canonical hostname</li>
</ul>
</li>
</ul>
<p>??????请继续</p>
<p>2.6  Peer-to-Peer Applications </p>
<p>2.6.1  P2P File Distribution</p>
<ul>
<li>bittorrent, tracker –&gt; torrent</li>
<li>principle: tit for tat<ol>
<li>rarest first, request the rarest chunk first</li>
<li>highest rate, response the neighbors who supplying data at the highest rate</li>
</ol>
</li>
</ul>
<p>2.6.2  Distributed Hash Tables (DHTs) 151</p>
<p>2.7  Socket Programming: Creating Network Applications </p>
<p>2.7.1  Socket Programming with UDP </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line">serverName = <span class="string">&#x27;hostname&#x27;</span></span><br><span class="line">serverPort = <span class="number">12000</span></span><br><span class="line">clientSocket = socket(AF_INET, SOCK_DGRAM)</span><br><span class="line">message = <span class="string">&quot;?&quot;</span></span><br><span class="line">clientSocket.sendto(message, (serverName, serverPort))</span><br><span class="line">response, serverAddress = clientSocket.recvfrom(<span class="number">2048</span>)</span><br><span class="line"><span class="comment">#2048buffer</span></span><br><span class="line">clientSocket.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line">serverPort = <span class="number">12000</span></span><br><span class="line">serverSocket = socket(AF_INET, SOCK_DGRAM)</span><br><span class="line">serverSocket.bind((<span class="string">&#x27;&#x27;</span>, serverPort))</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    message, clientAddress = serverSocket.recvfrom(<span class="number">2048</span>)</span><br><span class="line">    serverSocket.sendto(<span class="string">&quot;!&quot;</span>, clientAddress)</span><br></pre></td></tr></table></figure>



<p>2.7.2  Socket Programming with TCP </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line">serverName = <span class="string">&#x27;hostname&#x27;</span></span><br><span class="line">serverPort = <span class="number">12000</span></span><br><span class="line">clientSocket = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">clientSocket.connect((serverName, serverPort))</span><br><span class="line">message = <span class="string">&quot;?&quot;</span></span><br><span class="line">clientSocket.send(message)</span><br><span class="line">response = clientSocket.recv(<span class="number">2048</span>)</span><br><span class="line">clientSocket.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line">serverPort = <span class="number">12000</span></span><br><span class="line">serverSocket = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">serverSocket.bind((<span class="string">&#x27;&#x27;</span>, serverPort))</span><br><span class="line">serverSocket.listen(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 1 代表队列中的连接数(连接数最小为 1)</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    connectionSocket, addr = serverSocket.accept()</span><br><span class="line">    message = connectionSocket.recv(<span class="number">2048</span>)</span><br><span class="line">    connectionSocket.send(<span class="string">&quot;!&quot;</span>)</span><br><span class="line">    connectionSocket.close()</span><br></pre></td></tr></table></figure>



<p>2.8  Summary </p>
<h2 id="3-Transport-Layer"><a href="#3-Transport-Layer" class="headerlink" title="3 Transport Layer"></a>3 Transport Layer</h2><p>3.1  Introduction and Transport-Layer Services </p>
<p>3.1.1  Relationship Between Transport and Network Layers </p>
<p>transport layer: logical communication between processes</p>
<p>network layer: provide communication between hosts</p>
<p>3.1.2  Overview of the Transport Layer in the Internet </p>
<p>segment</p>
<p>3.2  Multiplexing and Demultiplexing 191</p>
<ul>
<li>port</li>
<li>udp socket is identified by dest-IP and dest-port<br>tcp socket is identified by dest-IP, dest-port, source-IP and source-port</li>
</ul>
<p>3.3  Connectionless Transport: UDP 198</p>
<p>UDP 使用场景: 语音视频通话, dns, 流媒体</p>
<p>3.3.1  UDP Segment Structure 202</p>
<p>3.3.2  UDP Checksum 202</p>
<ul>
<li>16 位循环累加, 进位循环到最低位, 最后取反 = checksum</li>
</ul>
<p>3.4  Principles of Reliable Data Transfer 204</p>
<p>3.4.1  Building a Reliable Data Transfer Protocol 206</p>
<table>
<thead>
<tr>
<th>version</th>
<th>problem</th>
<th>enhancement</th>
</tr>
</thead>
<tbody><tr>
<td>1.0</td>
<td>underlying completely reliable</td>
<td>nothing</td>
</tr>
<tr>
<td>2.0</td>
<td>bit errors</td>
<td>ARQ(automatic repeat request)<br />stop and wait</td>
</tr>
<tr>
<td>2.1</td>
<td>corrupted ACK, NAK</td>
<td>sequence number</td>
</tr>
<tr>
<td>2.2</td>
<td>two acknowledge</td>
<td>duplicate ACKs</td>
</tr>
<tr>
<td>3.0</td>
<td>lose packet</td>
<td>timers</td>
</tr>
<tr>
<td>pipeline</td>
<td>stop and wait</td>
<td>pipeline</td>
</tr>
<tr>
<td>GBN</td>
<td>pipeline</td>
<td>more sequence number<br />sliding window protocol<br />only one timer<br />receiver no buffer</td>
</tr>
<tr>
<td>SR</td>
<td>GBN resend all</td>
<td>each packet own a timer<br /></td>
</tr>
</tbody></table>
<p>3.4.2  Pipelined Reliable Data Transfer Protocols 215</p>
<h3 id="3-4-3-Go-Back-N-GBN"><a href="#3-4-3-Go-Back-N-GBN" class="headerlink" title="3.4.3  Go-Back-N (GBN)"></a>3.4.3  Go-Back-N (GBN)</h3><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h6da6fbs00j20nc07o0t5.jpg" alt="截屏2022-09-20 19.11.05"></p>
<p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h6da4rjxabj20u00zntc5.jpg" alt="截屏2022-09-20 19.09.28"></p>
<h3 id="3-4-4-Selective-Repeat-SR-223"><a href="#3-4-4-Selective-Repeat-SR-223" class="headerlink" title="3.4.4  Selective Repeat (SR) 223"></a>3.4.4  Selective Repeat (SR) 223</h3><table>
<thead>
<tr>
<th>属性</th>
<th>GBN</th>
<th>SR</th>
<th>TCP</th>
</tr>
</thead>
<tbody><tr>
<td>timer</td>
<td>only one in sender</td>
<td>each packet own a timer</td>
<td>1</td>
</tr>
<tr>
<td>receiver buffer</td>
<td>no</td>
<td>yes</td>
<td></td>
</tr>
<tr>
<td>sender attribute</td>
<td>next sequence, base, window size N</td>
<td>next sequence, base, window size N, ACK list</td>
<td></td>
</tr>
<tr>
<td>receiver attribute</td>
<td>expect sequence</td>
<td>next sequence, base, window size N</td>
<td></td>
</tr>
</tbody></table>
<p>TCP: sender: 如果 timeout, 只发送最小未被 ack 的包, 不继续</p>
<p>3.5  Connection-Oriented Transport: TCP 230</p>
<p>3.5.1  The TCP Connection 231</p>
<ul>
<li>three way handshake</li>
</ul>
<p>3.5.2  TCP Segment Structure 233</p>
<p>![截屏2022-09-29 13.42.52](../../../../../Library/Application Support/typora-user-images/截屏2022-09-29 13.42.52.png)</p>
<p>3.5.3  Round-Trip Time Estimation and Timeout </p>
<ul>
<li>sample RTT<br>The way it takes RTT samples is by using a timer to meassure the time it takes for a packet to be sent and the acknowledgment for that particular packet to be received again. This means it can take a new sample every RTT. By using the timestamp TCP option, it is also possible to use every ack as a sample.</li>
<li>estimatedRTT = (1-α) * estimatedRTT + α * sampleRTT   α = 0.125</li>
<li>deviationRTT = (1-β) * deviationRTT + β * |sampleRTT - estimatedRTT|   β = 0.25</li>
<li>TimeoutInterval = estimatedRTT + 4 * deviationRTT</li>
</ul>
<h3 id="3-5-4-Reliable-Data-Transfer"><a href="#3-5-4-Reliable-Data-Transfer" class="headerlink" title="3.5.4  Reliable Data Transfer"></a>3.5.4  Reliable Data Transfer</h3><ul>
<li><p>a single retransmission timer</p>
</li>
<li><p>each time retransmite, double timeout</p>
</li>
<li><p>sender 收到三次冗余 ack, 马上重传</p>
<p>冗余 ACK, 快速重传: When a TCP receiver receives a segment with a <strong>sequence number that is larger than the next, expected</strong>, in-order sequence number, it detects a gap in the data stream—that is, a missing segment. it simply reacknowledges (that is, generates a duplicate ACK for) the last in-order byte of data it has received.</p>
</li>
</ul>
<h3 id="3-5-5-Flow-Control"><a href="#3-5-5-Flow-Control" class="headerlink" title="3.5.5  Flow Control"></a>3.5.5  Flow Control</h3><ul>
<li>将 sender 发送数据的速度和 receiver 应用读取的速度匹配 <strong>sender’s receive window</strong>  <strong>receiver’s last_byte_received, last_byte_read</strong><ul>
<li><strong>receive_window = receive_buffer - (last_byte_received - last_byte_read)</strong>, </li>
<li>receiver tells sender the receive_window every segment, </li>
<li>sender keeps tracking last_byte_sent and last_byte_acked, keeping <strong>(last_byte_sent - last_byte_acked) &lt; receive_window</strong></li>
</ul>
</li>
</ul>
<h3 id="3-5-6-TCP-Connection-Management"><a href="#3-5-6-TCP-Connection-Management" class="headerlink" title="3.5.6  TCP Connection Management"></a>3.5.6  TCP Connection Management</h3><ul>
<li>three-way-handshake<ol>
<li>c: SYN, random initial sequnce number = x, SYN = 1</li>
<li>s: SYNACK, allocate TCP variables and buffer, initial sequence number = y, SYN = 1, ACK = x+1</li>
<li>c: SYN = 0, allocate variables and buffer, carry payload, sequence number = x + 1, ACK = y+1</li>
</ol>
</li>
<li>四次挥手<ol>
<li>c: FIN = 1, c-&gt;FIN_WAIT_1</li>
<li>s: ACK, c-&gt;FIN_WAIT_2, s-&gt;CLOSE_WAIT, 可能是半关闭状态</li>
<li>s: FIN = 1, c-&gt;TIME_WAIT, s-&gt;LAST_ACK</li>
<li>c: ACK, wait 30s(2MSL), release resourses</li>
</ol>
</li>
<li>SYN cookie: server 的 initial seqnum 是 SYN segment 的 sourse dest ip port 做的 hash function(即 cookie)<br>当 client 发回 SYNACK 时, 用 hash function 再次计算, 如果得到的值和 ack 一样, 那么说明之前已经有过半连接</li>
</ul>
<p>3.6  Principles of Congestion Control </p>
<p>3.6.1 The Causes and the Costs of Congestion 259 </p>
<p>3.6.2 Approaches to Congestion Control </p>
<p>3.6.3 Network-Assisted Congestion-Control Example:<br> ATM ABR Congestion Control 266</p>
<h3 id="3-7-TCP-Congestion-Control"><a href="#3-7-TCP-Congestion-Control" class="headerlink" title="3.7  TCP Congestion Control"></a>3.7  TCP Congestion Control</h3><ul>
<li><p>sender how to limit rate</p>
<p>change congestion window(cwnd)</p>
<p>lastbytesent - lastbyteacked &lt;= min(cwnd, rwnd)</p>
</li>
<li><p>how sender perceives congestion</p>
<p>快速重传(3acks)</p>
</li>
<li><p>algorithm</p>
<ul>
<li><p>slow start</p>
<p>cwnd initialized small 每当收到正确 ack 就增长(宏观指数增长) 1 mss per ack</p>
<p>ssthresh(slow start threshold)</p>
</li>
<li><p>congestion avoidance </p>
<p>超过 ssthresh 后线性增长</p>
<p>1 mss/cwnd per ack</p>
<p>当快速重传时, ssthresh = cwnd/2, cwnd = cwnd/2</p>
<p>when cwnd == ssthresh, 进入 congestion avoidance 阶段</p>
<p>cwnd 减半 increase cwnd 1 MSS every RTT</p>
</li>
<li><p>fast recovery: TCP Reno cwnd减半  而不是变为 1 然后指数增长</p>
</li>
</ul>
</li>
</ul>
<p><img src="https://pic4.zhimg.com/80/v2-5f4034bc11c3a48a1d1a115f9ee0259b_1440w.jpg" alt="img"></p>
<p>3.7.1 Fairness 279</p>
<p>3.8  Summary 283</p>
<h2 id="4-The-Network-Layer"><a href="#4-The-Network-Layer" class="headerlink" title="4 The Network Layer"></a>4 The Network Layer</h2><p>host to host</p>
<p>4.1  Introduction </p>
<p>4.1.1  Forwarding and Routing </p>
<p>4.1.2  Network Service Models </p>
<p>4.2  Virtual Circuit and Datagram Networks </p>
<p>4.2.1  Virtual-Circuit Networks </p>
<p>4.2.2  Datagram Networks </p>
<p>4.2.3  Origins of VC and Datagram Networks </p>
<p>4.3  What’s Inside a Router? </p>
<p>input port, switch fabric, output port, routing forward</p>
<p>4.3.1  Input Processing 322</p>
<p>4.3.2  Switching 324</p>
<p>4.3.3  Output Processing 326</p>
<p>4.3.4  Where Does Queuing Occur? 327</p>
<p>4.3.5  The Routing Control Plane 331</p>
<p>4.4  The Internet Protocol (IP): Forwarding and Addressing in the Internet </p>
<p>4.4.1  Datagram Format </p>
<p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h6nbym7o2zj20kw0gqt9v.jpg" alt="截屏2022-09-28 22.27.41"></p>
<p>IP Datagram Fragmentation(in end system)</p>
<p>The maximum amount of data that a <strong>link-layer frame</strong> can carry is called the <strong>maximum transmission unit (MTU)</strong>. </p>
<h3 id="4-4-2-IPv4-Addressing"><a href="#4-4-2-IPv4-Addressing" class="headerlink" title="4.4.2  IPv4 Addressing"></a>4.4.2  IPv4 Addressing</h3><p>32=8*4</p>
<p>233.1.1.0/24     /24 is subnet mask, 意味着左边 24 位定义了子网的地址</p>
<p>To determine the subnets, detach each interface from its host or router, creating islands of isolated networks, with interfaces terminating the end points of the isolated networks. Each of these isolated networks is called a subnet.</p>
<p>CIDR(classless interdomain routing)</p>
<p>a.b.c.d/x 外界路由只需要记录前缀</p>
<h4 id="DHCP-dynamic-host-configuration-protocol"><a href="#DHCP-dynamic-host-configuration-protocol" class="headerlink" title="DHCP(dynamic host configuration protocol)"></a>DHCP(dynamic host configuration protocol)</h4><ol>
<li>DHCP discover message, udp packet at port 67 broadcast source:0.0.0.0</li>
<li>DHCP offer message broadcast</li>
<li>DHCP request choose an offer</li>
<li>DHCP ACK</li>
</ol>
<h4 id="NAT-network-address-translation"><a href="#NAT-network-address-translation" class="headerlink" title="NAT(network address translation)"></a>NAT(network address translation)</h4><p>公用 ip+port -&gt; 私有 ip+port 的映射</p>
<p>NAT translation table</p>
<p>NAT 内的 host 可以主动向外连接, 但外界无法主动连接到 NAT内部</p>
<h3 id="4-4-3-Internet-Control-Message-Protocol-ICMP"><a href="#4-4-3-Internet-Control-Message-Protocol-ICMP" class="headerlink" title="4.4.3  Internet Control Message Protocol (ICMP)"></a>4.4.3  Internet Control Message Protocol (ICMP)</h3><p>lies above ip, icmp message carried inside ip datagram</p>
<p>ICMP messages have a type and a code field, and contain the header and the first 8 bytes of the IP datagram that caused the ICMP message to be generated in the first place</p>
<p>ping: icmp type 8 code 0</p>
<p>traceroute</p>
<h3 id="4-4-4-IPv6"><a href="#4-4-4-IPv6" class="headerlink" title="4.4.4  IPv6"></a>4.4.4  IPv6</h3><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h6ncqo5fjyj20t40iswfu.jpg" alt="截屏2022-09-29 12.15.24"></p>
<p>4.4.5  A Brief Foray into IP Security 362</p>
<p>4.5  Routing Algorithms 363</p>
<p>4.5.1  The Link-State (LS) Routing Algorithm 366</p>
<p>4.5.2  The Distance-Vector (DV) Routing Algorithm 371</p>
<p>4.5.3  Hierarchical Routing 379</p>
<p>4.6  Routing in the Internet 383</p>
<p>4.6.1  Intra-AS Routing in the Internet: RIP 384</p>
<p>4.6.2  Intra-AS Routing in the Internet: OSPF 388</p>
<p>4.6.3  Inter-AS Routing: BGP 390</p>
<p>4.7  Broadcast and Multicast Routing 399</p>
<p>4.7.1 Broadcast Routing Algorithms 400 4.7.2 Multicast 405</p>
<p>4.8 Summary 412 </p>
<p>Chapter 5 The Link Layer: Links, Access Networks, and LANs </p>
<p>5.1 Introduction to the Link Layer </p>
<p>5.1.1 The Services Provided by the Link Layer</p>
<p>5.1.2 Where Is the Link Layer Implemented? 5.2 Error-Detection and -Correction Techniques 5.2.1 Parity Checks 5.2.2 Checksumming Methods 5.2.3 Cyelic Redundancy Check (CRC) 5.3 Multiple Access Links and Protocols 5.3.1 Channel Partitioning Protocols 5.3.2 Random Access Protocols 5.3.3 Taking-Turns Protocols 5.3.4 DOCSIS: The Link-Layer Protocol for Cable Internet Access</p>
<p>5.4 Switched Local Area Networks </p>
<p>5.4.1 Link-Layer Addressing and ARP</p>
<p> 5.4.2 Ethernet 5.4.3 Link-Layer Switches 5.4.4 Virtual Local Area Networks (VLANs) 5.5 Link Virtualization: A Network as 2 Link Layer 5.5.1 Multiprotocol Label Switching (MPLS) 5.6 Data Center Networking 5.7 Retrospective: A Day in the Life of a Web Page Request 5.7.1 Getting Started: DHCP, UDP, IP, and Etheret 5.7.2 Still Getting Started: DNS and ARP 5.7.3 Still Getting Started: Intra-Domain Routing to the DNS Server 5.7.4 Web Client-Server Interaction: TCP and HTTP 5.8 Summary</p>
<p>Chapter 6 Wireless and Mobile Networks 6.1 Introduction 6.2 Wireless Links and Network Characteristics 6.2.1 CDMA 6.3 WiFi: 802.11 Wireless LANs 6.3.1 The 802.11 Architecture 6.3.2 The 802.11 MAC Protocol 6.3.3 The IEEE 802.11 Frame 6.3.4 Mobility in the Same IP Subnet 6.3.5 Advanced Features in 802.11 6.3.6 Personal Area Networks: Bluetooth and Zigbee 6.4 Cellular Internet Access 6.4.1 An Overview of Cellular Network Architecture 6.4.2 3G Cellular Data Networks: Extending the Internet to Cellular Subscribers 6.4.3 On to 4G: LTE 6.5 Mobility Management: Principles 6.5.1 Addressing 6.5.2 Routing to a Mobile Node 6.6 Mobile IP 6.7 Managing Mobility in Cellular Networks 6.7.1 Routing Calls to a Mobile User 6.7.2 Handoffs in GSM</p>
<p>6.8 Wireless and Mobility: Impact on Higher-Layer Protocols 6.9 Summary</p>
<h2 id="8-Security-in-Computer-Networks"><a href="#8-Security-in-Computer-Networks" class="headerlink" title="8 Security in Computer Networks"></a>8 Security in Computer Networks</h2><p>8.1 What Is Network Security? </p>
<ol>
<li>encryped</li>
<li>integrity</li>
<li>end-point authentation</li>
</ol>
<p>8.2 Principles of Cryptography </p>
<p>8.2.1 Symmetric Key Cryptography </p>
<h3 id="8-2-2-Public-Key-Encryption"><a href="#8-2-2-Public-Key-Encryption" class="headerlink" title="8.2.2 Public Key Encryption"></a>8.2.2 Public Key Encryption</h3><p>public key to encrypt from sender to rcver</p>
<p>private key to decrypt</p>
<p>用公钥系统加密对称秘钥</p>
<p>8.3 Message Integrity and Digital Signatures </p>
<p>8.3.1 Cryptographic Hash Functions </p>
<p>MD5 127bits</p>
<p>SHA-1 160bits</p>
<h3 id="8-3-2-Message-Authentication-Code-MAC"><a href="#8-3-2-Message-Authentication-Code-MAC" class="headerlink" title="8.3.2 Message Authentication Code (MAC)"></a>8.3.2 Message Authentication Code (MAC)</h3><p>sender and rcver noth have a shared secret key s(authentication key)</p>
<p>sender has message m</p>
<p>hash func H()</p>
<ol>
<li>sender create H(m+s)  (which is called MAC)</li>
<li>sender send  m+H(m+s)</li>
<li>rcver rcv m’+H(m+s), calculate h’ = H(m’+s), compare h h’</li>
</ol>
<h3 id="8-3-3-Digital-Signatures"><a href="#8-3-3-Digital-Signatures" class="headerlink" title="8.3.3 Digital Signatures"></a>8.3.3 Digital Signatures</h3><p>sender want to sign a message s, sender has private key K^-^</p>
<p>sender rcver both know sender’s public key K^+^</p>
<ol>
<li>sender create K^-^(H(m)), send m+K^-^(H(m))</li>
<li>rcver rcv, decrypt K^+^ [  K^-^(H(m))  ] get h</li>
<li>rcver calculate h’ = H(m’) compare h’ h</li>
</ol>
<p>certification authority: A CA verifies that an entity (a person, a router, and so on) is who it says it is.</p>
<p>Once the CA verifies the identity of the entity, the CA creates <strong>a certificate that binds the public key of the entity to the identity.</strong> The certificate contains the public key and globally unique identifying information about the owner of the public key (for example, a human name or an IP address).</p>
<p>certification contains CA private key(bob’name bob’s public key)</p>
<h3 id="8-4-End-Point-Authentication"><a href="#8-4-End-Point-Authentication" class="headerlink" title="8.4 End-Point Authentication"></a>8.4 End-Point Authentication</h3><p>8.4.1 Authentication Protocol ap1.0 </p>
<p>8.4.2 Authentication Protocol ap2.0 </p>
<p>8.4.3 Authentication Protocol ap3.0 </p>
<p>8.4.4 Authentication Protocol ap3.1 </p>
<p>8.4.5 Authentication Protocol ap4.0 </p>
<p>alice sender bob rcver</p>
<p>nonce is a number that a protocol will use only once in a lifetime</p>
<ol>
<li>Alice sends the message “I am Alice” to Bob.</li>
<li>Bob chooses a <strong>nonce, R</strong>, and sends it to Alice.</li>
<li>Alice encrypts the nonce using Alice and Bob’s symmetric secret key, K<del>A-B</del>, and sends the encrypted nonce, <strong>K<del>A-B</del> (R)</strong>, back to Bob. As in protocol ap3.1, it is the fact that Alice knows KA - B and uses it to encrypt a value that <strong>lets Bob know that the message he receives was generated by Alice. The nonce</strong></li>
</ol>
<p><strong>is used to ensure that Alice is live.</strong><br>4. Bob <strong>decrypts the received message</strong>. If the decrypted nonce equals the nonce he sent Alice, then Alice is authenticated.</p>
<p>8.5 Securing E-Mail </p>
<p>8.5.1 Secure E-Mail </p>
<p>8.5.2 PGP </p>
<h3 id="8-6-Securing-TCP-Connections-SSL"><a href="#8-6-Securing-TCP-Connections-SSL" class="headerlink" title="8.6 Securing TCP Connections: SSL"></a>8.6 Securing TCP Connections: SSL</h3><p>8.6.1 The Big Picture </p>
<p>secure socket layer</p>
<p>transport layer security</p>
<p>server has a public-private key-pair and a certification with public key</p>
<ul>
<li><p>handshake</p>
<ol>
<li>tcp three shake</li>
<li>c: SSL hello(list of 加密算法, client nonce)</li>
<li>s: certification with public key (+选择的算法)</li>
<li>c: create MS(master secret), EMS = K^+^(MS), send EMS</li>
<li>both client and server has MS</li>
<li>The client sends a MAC of all the handshake messages.</li>
<li>The server sends a MAC of all the handshake messages.</li>
</ol>
<p>6, 7 是为了确保加密前的信息没有被篡改</p>
</li>
<li><p>key derivation: 4keys: 两个加密两个 MAC</p>
</li>
<li><p>传输</p>
<ul>
<li>把 stream 分成 record</li>
<li>维持一个 sequence number, 每个 record 递增</li>
<li>每个 record + MAC(H(m+K+sequence number)) (用四个钥匙其中之一)</li>
<li>加密 message+MAC, send</li>
<li>record 只有 message+mac 是加密的, 其余字段是明文</li>
</ul>
</li>
<li><p>结束: record 字段结束, 不能单纯依靠 TCP 断开</p>
</li>
</ul>
<p>8.6.2 A More Complete Picture </p>
<p>8.7 Network-Layer Security: IPsec and Virtual Private Networks 8.7.1 IPsec and Virtual Private Networks (VPNs) 8.7.2 The AH and ESP Protocols 8.7.3 Security Associations 8.7.4 The IPsec Datagram 8.7.5 IKE: Key Management in IPsec 8.8 Securing Wireless LANs 8.8.1 Wired Equivalent Privacy (WEP) 8.8.2 IEEE 802.11i 8.9 Operational Security: Firewalls and Intrusion Detection Systems 8.9.1 Firewalls 8.9.2 Intrusion Detection Systems 8.10 Summary</p>
<h1 id="计算机网络自顶向下-英文对照表"><a href="#计算机网络自顶向下-英文对照表" class="headerlink" title="计算机网络自顶向下 英文对照表"></a>计算机网络自顶向下 英文对照表</h1><h2 id="第一章-计算机网络和-Internet"><a href="#第一章-计算机网络和-Internet" class="headerlink" title="第一章 计算机网络和 Internet"></a>第一章 计算机网络和 Internet</h2><p>switch 交换机</p>
<p>router 路由器</p>
<p>coaxial cable 同轴电缆</p>
<p>optical fiber 光纤</p>
<p>radio spectrum 无线电</p>
<p>ISP(Internet Service Provider) 网络服务提供商</p>
<p>modem(modulator and demodulator) 调制解调器</p>
<p>IETF(Internet engineering task force) 互联网工程任务组</p>
<p>RFCs(requests for comments) IETF standards documents</p>
<p>API(application programming interface)</p>
<p>host 主机, end system</p>
<p>access network 接入网络</p>
<p>CO(central office)</p>
<p>DSL(digital subscriber line) 数字用户线路</p>
<p>​    DSLAM(DSL access multiplexer)</p>
<p>HFC(hybrid fiber coax) cable Internet access</p>
<p>​    CMTS(cable modem termination system)约等于 DLS 里的 DSLAM</p>
<p>FTTH(fiber to the home)</p>
<p>LAN(local area network)</p>
<p>​    Ethernet 以太网</p>
<p>​    3G(third-generation wireless)    </p>
<p>twisted-pair copper wire 双绞线</p>
<p>coaxial cable 同轴电缆</p>
<p>fiber optics 光纤</p>
<p>terrestrial radio channels 地面广播频道</p>
<p>satellite radio channels 卫星广播频道</p>
<p>​    geostationary satellite 地球同步卫星</p>
<p>​    LEO(low-earth orbiting) 近地轨道卫星</p>
<p>packet switching 分组交换</p>
<p>circuit switching 电路交换</p>
<p>​    FDM(frequency-division multiplexing)</p>
<p>​    TDM(time-division multiplexing)</p>
<p>​    bandwidth 带宽</p>
<p>network structure 1-5</p>
<p>​    PoPs(points of presence) 网络入网点</p>
<p>​    IXPs(Internet exchange points) 互联网交换节点</p>
<p>​    peer 同级交换</p>
<p>throughput 吞吐量</p>
<p>layer</p>
<p>​    application</p>
<p>​    transport</p>
<p>​    network</p>
<p>​    link</p>
<p>​    physic</p>
<p>ISO(International Organization for Standardization) 国际标准化组织</p>
<p>OSI 开放系统互连(模型)</p>
<p>DoS denial of service attack 拒绝服务攻击</p>
<p>DDoS distributed DoS 分布式 DoS</p>
<h2 id="第二章-应用层"><a href="#第二章-应用层" class="headerlink" title="第二章 应用层"></a>第二章 应用层</h2><p>CS client-server architecture 客户-服务器</p>
<p>P2P 对等体系架构</p>
<p>process 进程</p>
<p>message 报文</p>
<p>socket 套接字</p>
<p>API application programming interface 应用程序编程接口</p>
<p>RDT reliable data transfer可靠数据传输</p>
<p>SSL secure socket layer 安全套接字层</p>
<p>HTTP hypertext transfer protocol 超文本传输协议</p>
<p>RTT round-trip time 往返时间</p>
<p>web cache web 缓存器 也叫代理服务器(proxy server)</p>
<p>CDN content distribution network 内容分发网络</p>
<p>SMTP simple mail transfer protocol 简单邮件传输协议</p>
<p>user agent 用户代理</p>
<p>mail server 邮件服务器</p>
<p>POP3 post office protocol-version3 第三版邮局协议</p>
<p>IMAP internet mail access protocol 因特网邮件访问协议</p>
<p>DNS domain name system 域名系统</p>
<p>BIND (Berkeley internet name domain) BIND 软件</p>
<p>TLD top-level domain</p>
<p>torrent 洪流</p>
<p>DASH dynamic adaptive streaming over HTTP 经 http 的动态适应性流</p>
<h2 id="第三章-运输层"><a href="#第三章-运输层" class="headerlink" title="第三章 运输层"></a>第三章 运输层</h2><p>UDP user datagram protocol</p>
<p>TCP transfer control protocol</p>
<p>segment 报文段(运输层)</p>
<p>transport-layer multiplexing 多路复用</p>
<p>demultiplexing 多路分解</p>
<p>FSM finite-state machine 有限状态机</p>
<p>ARQ automatic repeat reQuest 自动重传请求协议</p>
<p>stop-and-wait 停等协议</p>
<p>alter-nating-bit protocol 比特交替协议</p>
<p>GBN go-back N 回退 N 步(又叫sliding-window protocol 滑动窗口协议)</p>
<p>SR selective repeat 选择重传</p>
<p>MSS maximum segment size 最大报文段长度(应用层数据的最大长度)</p>
<p>MTU maximum transmission unit 最大传输单元 (最大链路层帧长度)</p>
<p>cumulative acknowledgment 累计确认</p>
<p>SampleRTT 样本 RTT</p>
<p>​    EstimateRTT DevRTT</p>
<p>fast retransmit 快速重传</p>
<h2 id="第四章-网络层-数据平面"><a href="#第四章-网络层-数据平面" class="headerlink" title="第四章 网络层:数据平面"></a>第四章 网络层:数据平面</h2><p>forwarding 转发</p>
<p>routing 路由选择</p>
<p>SDN software defined networking 软件定义网络</p>
<p>head-of-the-line HOL 线路前部(阻塞)</p>
<p>FIFO FCFS 先进先出, 先来先服务</p>
<p>priority queueing 优先权排队</p>
<p>WFQ weighted fair queueing 加权公平排队</p>
<p>TTL time-to-live 寿命</p>
<p>MTU</p>
<p>network mask 子网掩码</p>
<p>CIDR classless interdomain routing 无类别域间路由选择</p>
<p>ICANN internet corporation for assigned names and numbers 英特网名字和编号分配机构</p>
<p>DHCP dynamic host configuration 动态主机配置协议</p>
<p>WAN wide area network 广域网</p>
<p>LAN local area network 局域网</p>
<p>WLAN wireless LAN 无线局域网</p>
<p>VLAN virtual LAN 虚拟局域网</p>
<p>wifi wireless fidelity</p>
<p>NAT network address translation 网络地址转换</p>
<h2 id="第五章-网络层-控制平面"><a href="#第五章-网络层-控制平面" class="headerlink" title="第五章 网络层: 控制平面"></a>第五章 网络层: 控制平面</h2><p>LS link state 链路状态算法</p>
<p>decentralized routing algorithm 分散式路由选择算法</p>
<p>dijkstra 狄利克雷算法</p>
<p>DV distance-vector 距离向量算法</p>
<p>bellman-ford 方程</p>
<p>OSPF open shortest path first 开放式最短路径有限</p>
<p>AS autonomous system 自治系统</p>
<p>ASN AS号</p>
<p>BGP broder gateway protocol 边界网关协议</p>
]]></content>
  </entry>
  <entry>
    <title>视频剪辑</title>
    <url>/2021/01/14/%E8%A7%86%E9%A2%91%E5%89%AA%E8%BE%91/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="81925792b356e191d48f1c40bbe2eead933cbec37febc28291335d00d6104965"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>program</category>
      </categories>
      <tags>
        <tag>kenzo</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络</title>
    <url>/2020/09/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="b16a91bdc1f9af50091f665decdf6100ee48f5ebe857e45e15e44f998b12002a"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>cs</category>
      </categories>
      <tags>
        <tag>network</tag>
      </tags>
  </entry>
  <entry>
    <title>面经</title>
    <url>/2021/12/06/%E9%9D%A2%E7%BB%8F/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="5f98ca71c31377badb1c3ffca91afd259ff4dd9d26974244afd18479f85a0a23"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>insidecpp</title>
    <url>/2022/11/08/insidecpp/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="efa2f335f30f0e39e3cbdc897c8567148f4ba92cf77fb0c2d4480316fb14652c"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>mysql必知必会读书笔记</title>
    <url>/2022/10/23/sql/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="3733a2269fe4ec68340df09e408ea23aa19238931686da0e12ae3f133e143b21"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
</search>
